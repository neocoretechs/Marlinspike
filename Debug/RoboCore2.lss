
RoboCore2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000808  00800200  000165a2  00016636  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000165a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000e14  00800a08  00800a08  00016e3e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00016e3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00016e9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000e98  00000000  00000000  00016ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0003c5ea  00000000  00000000  00017d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000064c7  00000000  00000000  00054362  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000104d4  00000000  00000000  0005a829  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003d40  00000000  00000000  0006ad00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006a7a  00000000  00000000  0006ea40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002e437  00000000  00000000  000754ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000016d0  00000000  00000000  000a38f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__dtors_end>
       4:	0c 94 0c 9f 	jmp	0x13e18	; 0x13e18 <__vector_1>
       8:	0c 94 3d 9f 	jmp	0x13e7a	; 0x13e7a <__vector_2>
       c:	0c 94 6e 9f 	jmp	0x13edc	; 0x13edc <__vector_3>
      10:	0c 94 9f 9f 	jmp	0x13f3e	; 0x13f3e <__vector_4>
      14:	0c 94 d0 9f 	jmp	0x13fa0	; 0x13fa0 <__vector_5>
      18:	0c 94 01 a0 	jmp	0x14002	; 0x14002 <__vector_6>
      1c:	0c 94 32 a0 	jmp	0x14064	; 0x14064 <__vector_7>
      20:	0c 94 63 a0 	jmp	0x140c6	; 0x140c6 <__vector_8>
      24:	0c 94 dc a1 	jmp	0x143b8	; 0x143b8 <__vector_9>
      28:	0c 94 04 a2 	jmp	0x14408	; 0x14408 <__vector_10>
      2c:	0c 94 2c a2 	jmp	0x14458	; 0x14458 <__vector_11>
      30:	0c 94 04 96 	jmp	0x12c08	; 0x12c08 <__vector_12>
      34:	0c 94 d0 96 	jmp	0x12da0	; 0x12da0 <__vector_13>
      38:	0c 94 03 97 	jmp	0x12e06	; 0x12e06 <__vector_14>
      3c:	0c 94 36 97 	jmp	0x12e6c	; 0x12e6c <__vector_15>
      40:	0c 94 35 98 	jmp	0x1306a	; 0x1306a <__vector_16>
      44:	0c 94 69 97 	jmp	0x12ed2	; 0x12ed2 <__vector_17>
      48:	0c 94 9c 97 	jmp	0x12f38	; 0x12f38 <__vector_18>
      4c:	0c 94 cf 97 	jmp	0x12f9e	; 0x12f9e <__vector_19>
      50:	0c 94 02 98 	jmp	0x13004	; 0x13004 <__vector_20>
      54:	0c 94 37 96 	jmp	0x12c6e	; 0x12c6e <__vector_21>
      58:	0c 94 6a 96 	jmp	0x12cd4	; 0x12cd4 <__vector_22>
      5c:	0c 94 9d 96 	jmp	0x12d3a	; 0x12d3a <__vector_23>
      60:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__bad_interrupt>
      64:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__vector_25>
      68:	0c 94 35 1a 	jmp	0x346a	; 0x346a <__vector_26>
      6c:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__bad_interrupt>
      70:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__bad_interrupt>
      74:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__bad_interrupt>
      78:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__bad_interrupt>
      7c:	0c 94 34 99 	jmp	0x13268	; 0x13268 <__vector_31>
      80:	0c 94 68 98 	jmp	0x130d0	; 0x130d0 <__vector_32>
      84:	0c 94 9b 98 	jmp	0x13136	; 0x13136 <__vector_33>
      88:	0c 94 ce 98 	jmp	0x1319c	; 0x1319c <__vector_34>
      8c:	0c 94 01 99 	jmp	0x13202	; 0x13202 <__vector_35>
      90:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <__vector_36>
      94:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__vector_37>
      98:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__bad_interrupt>
      9c:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__bad_interrupt>
      a0:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__bad_interrupt>
      a4:	0c 94 33 9a 	jmp	0x13466	; 0x13466 <__vector_41>
      a8:	0c 94 67 99 	jmp	0x132ce	; 0x132ce <__vector_42>
      ac:	0c 94 9a 99 	jmp	0x13334	; 0x13334 <__vector_43>
      b0:	0c 94 cd 99 	jmp	0x1339a	; 0x1339a <__vector_44>
      b4:	0c 94 00 9a 	jmp	0x13400	; 0x13400 <__vector_45>
      b8:	0c 94 32 9b 	jmp	0x13664	; 0x13664 <__vector_46>
      bc:	0c 94 66 9a 	jmp	0x134cc	; 0x134cc <__vector_47>
      c0:	0c 94 99 9a 	jmp	0x13532	; 0x13532 <__vector_48>
      c4:	0c 94 cc 9a 	jmp	0x13598	; 0x13598 <__vector_49>
      c8:	0c 94 ff 9a 	jmp	0x135fe	; 0x135fe <__vector_50>
      cc:	0c 94 1c 1b 	jmp	0x3638	; 0x3638 <__vector_51>
      d0:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <__vector_52>
      d4:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__bad_interrupt>
      d8:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <__vector_54>
      dc:	0c 94 e8 1b 	jmp	0x37d0	; 0x37d0 <__vector_55>
      e0:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__bad_interrupt>
      e4:	16 0c       	add	r1, r6
      e6:	1f 0c       	add	r1, r15
      e8:	28 0c       	add	r2, r8
      ea:	31 0c       	add	r3, r1
      ec:	3a 0c       	add	r3, r10
      ee:	54 0c       	add	r5, r4
      f0:	43 0c       	add	r4, r3
      f2:	54 0c       	add	r5, r4
      f4:	4c 0c       	add	r4, r12
      f6:	5f 0e       	add	r5, r31
      f8:	69 0e       	add	r6, r25
      fa:	73 0e       	add	r7, r19
      fc:	7d 0e       	add	r7, r29
      fe:	87 0e       	add	r8, r23
     100:	91 0e       	add	r9, r17
     102:	9b 0e       	add	r9, r27
     104:	a5 0e       	add	r10, r21
     106:	06 0f       	add	r16, r22
     108:	0c 0f       	add	r16, r28
     10a:	12 0f       	add	r17, r18
     10c:	18 0f       	add	r17, r24
     10e:	1e 0f       	add	r17, r30
     110:	24 0f       	add	r18, r20
     112:	2a 0f       	add	r18, r26
     114:	30 0f       	add	r19, r16
     116:	36 0f       	add	r19, r22
     118:	3c 0f       	add	r19, r28
     11a:	42 0f       	add	r20, r18
     11c:	48 0f       	add	r20, r24
     11e:	5f 0f       	add	r21, r31
     120:	4e 0f       	add	r20, r30
     122:	54 0f       	add	r21, r20
     124:	5a 0f       	add	r21, r26
     126:	fc 10       	cpse	r15, r12
     128:	02 11       	cpse	r16, r2
     12a:	08 11       	cpse	r16, r8
     12c:	0e 11       	cpse	r16, r14
     12e:	14 11       	cpse	r17, r4
     130:	1a 11       	cpse	r17, r10
     132:	20 11       	cpse	r18, r0
     134:	26 11       	cpse	r18, r6
     136:	2c 11       	cpse	r18, r12
     138:	32 11       	cpse	r19, r2
     13a:	38 11       	cpse	r19, r8
     13c:	3e 11       	cpse	r19, r14
     13e:	55 11       	cpse	r21, r5
     140:	44 11       	cpse	r20, r4
     142:	4a 11       	cpse	r20, r10
     144:	50 11       	cpse	r21, r0
     146:	eb 11       	cpse	r30, r11
     148:	f1 11       	cpse	r31, r1
     14a:	f7 11       	cpse	r31, r7
     14c:	fd 11       	cpse	r31, r13
     14e:	03 12       	cpse	r0, r19
     150:	09 12       	cpse	r0, r25
     152:	0f 12       	cpse	r0, r31
     154:	15 12       	cpse	r1, r21
     156:	1b 12       	cpse	r1, r27
     158:	21 12       	cpse	r2, r17
     15a:	27 12       	cpse	r2, r23
     15c:	2d 12       	cpse	r2, r29
     15e:	44 12       	cpse	r4, r20
     160:	33 12       	cpse	r3, r19
     162:	39 12       	cpse	r3, r25
     164:	3f 12       	cpse	r3, r31
     166:	d8 21       	and	r29, r8
     168:	de 21       	and	r29, r14
     16a:	e4 21       	and	r30, r4
     16c:	ea 21       	and	r30, r10
     16e:	f0 21       	and	r31, r0
     170:	f6 21       	and	r31, r6
     172:	fc 21       	and	r31, r12
     174:	02 22       	and	r0, r18
     176:	08 22       	and	r0, r24
     178:	0e 22       	and	r0, r30
     17a:	14 22       	and	r1, r20
     17c:	1a 22       	and	r1, r26
     17e:	31 22       	and	r3, r17
     180:	20 22       	and	r2, r16
     182:	26 22       	and	r2, r22
     184:	2c 22       	and	r2, r28
     186:	71 22       	and	r7, r17
     188:	77 22       	and	r7, r23
     18a:	7d 22       	and	r7, r29
     18c:	83 22       	and	r8, r19
     18e:	89 22       	and	r8, r25
     190:	8f 22       	and	r8, r31
     192:	95 22       	and	r9, r21
     194:	9b 22       	and	r9, r27
     196:	a1 22       	and	r10, r17
     198:	a7 22       	and	r10, r23
     19a:	ad 22       	and	r10, r29
     19c:	b3 22       	and	r11, r19
     19e:	ca 22       	and	r12, r26
     1a0:	b9 22       	and	r11, r25
     1a2:	bf 22       	and	r11, r31
     1a4:	c5 22       	and	r12, r21
     1a6:	6d 23       	and	r22, r29
     1a8:	73 23       	and	r23, r19
     1aa:	79 23       	and	r23, r25
     1ac:	7f 23       	and	r23, r31
     1ae:	85 23       	and	r24, r21
     1b0:	8b 23       	and	r24, r27
     1b2:	91 23       	and	r25, r17
     1b4:	97 23       	and	r25, r23
     1b6:	9d 23       	and	r25, r29
     1b8:	a3 23       	and	r26, r19
     1ba:	a9 23       	and	r26, r25
     1bc:	af 23       	and	r26, r31
     1be:	c6 23       	and	r28, r22
     1c0:	b5 23       	and	r27, r21
     1c2:	bb 23       	and	r27, r27
     1c4:	c1 23       	and	r28, r17
     1c6:	0b 24       	eor	r0, r11
     1c8:	11 24       	eor	r1, r1
     1ca:	17 24       	eor	r1, r7
     1cc:	1d 24       	eor	r1, r13
     1ce:	23 24       	eor	r2, r3
     1d0:	29 24       	eor	r2, r9
     1d2:	2f 24       	eor	r2, r15
     1d4:	35 24       	eor	r3, r5
     1d6:	3b 24       	eor	r3, r11
     1d8:	41 24       	eor	r4, r1
     1da:	47 24       	eor	r4, r7
     1dc:	4d 24       	eor	r4, r13
     1de:	64 24       	eor	r6, r4
     1e0:	53 24       	eor	r5, r3
     1e2:	59 24       	eor	r5, r9
     1e4:	5f 24       	eor	r5, r15
     1e6:	61 2b       	or	r22, r17
     1e8:	67 2b       	or	r22, r23
     1ea:	6d 2b       	or	r22, r29
     1ec:	73 2b       	or	r23, r19
     1ee:	79 2b       	or	r23, r25
     1f0:	7f 2b       	or	r23, r31
     1f2:	85 2b       	or	r24, r21
     1f4:	8b 2b       	or	r24, r27
     1f6:	91 2b       	or	r25, r17
     1f8:	97 2b       	or	r25, r23
     1fa:	9d 2b       	or	r25, r29
     1fc:	a3 2b       	or	r26, r19
     1fe:	ba 2b       	or	r27, r26
     200:	a9 2b       	or	r26, r25
     202:	af 2b       	or	r26, r31
     204:	b5 2b       	or	r27, r21
     206:	09 31       	cpi	r16, 0x19	; 25
     208:	0f 31       	cpi	r16, 0x1F	; 31
     20a:	15 31       	cpi	r17, 0x15	; 21
     20c:	1b 31       	cpi	r17, 0x1B	; 27
     20e:	21 31       	cpi	r18, 0x11	; 17
     210:	27 31       	cpi	r18, 0x17	; 23
     212:	2d 31       	cpi	r18, 0x1D	; 29
     214:	33 31       	cpi	r19, 0x13	; 19
     216:	39 31       	cpi	r19, 0x19	; 25
     218:	3f 31       	cpi	r19, 0x1F	; 31
     21a:	45 31       	cpi	r20, 0x15	; 21
     21c:	4b 31       	cpi	r20, 0x1B	; 27
     21e:	62 31       	cpi	r22, 0x12	; 18
     220:	51 31       	cpi	r21, 0x11	; 17
     222:	57 31       	cpi	r21, 0x17	; 23
     224:	5d 31       	cpi	r21, 0x1D	; 29
     226:	40 32       	cpi	r20, 0x20	; 32
     228:	46 32       	cpi	r20, 0x26	; 38
     22a:	4c 32       	cpi	r20, 0x2C	; 44
     22c:	52 32       	cpi	r21, 0x22	; 34
     22e:	58 32       	cpi	r21, 0x28	; 40
     230:	5e 32       	cpi	r21, 0x2E	; 46
     232:	64 32       	cpi	r22, 0x24	; 36
     234:	6a 32       	cpi	r22, 0x2A	; 42
     236:	70 32       	cpi	r23, 0x20	; 32
     238:	76 32       	cpi	r23, 0x26	; 38
     23a:	7c 32       	cpi	r23, 0x2C	; 44
     23c:	82 32       	cpi	r24, 0x22	; 34
     23e:	99 32       	cpi	r25, 0x29	; 41
     240:	88 32       	cpi	r24, 0x28	; 40
     242:	8e 32       	cpi	r24, 0x2E	; 46
     244:	94 32       	cpi	r25, 0x24	; 36
     246:	e3 32       	cpi	r30, 0x23	; 35
     248:	e9 32       	cpi	r30, 0x29	; 41
     24a:	ef 32       	cpi	r30, 0x2F	; 47
     24c:	f5 32       	cpi	r31, 0x25	; 37
     24e:	fb 32       	cpi	r31, 0x2B	; 43
     250:	01 33       	cpi	r16, 0x31	; 49
     252:	07 33       	cpi	r16, 0x37	; 55
     254:	0d 33       	cpi	r16, 0x3D	; 61
     256:	13 33       	cpi	r17, 0x33	; 51
     258:	19 33       	cpi	r17, 0x39	; 57
     25a:	1f 33       	cpi	r17, 0x3F	; 63
     25c:	25 33       	cpi	r18, 0x35	; 53
     25e:	3c 33       	cpi	r19, 0x3C	; 60
     260:	2b 33       	cpi	r18, 0x3B	; 59
     262:	31 33       	cpi	r19, 0x31	; 49
     264:	37 33       	cpi	r19, 0x37	; 55
     266:	56 36       	cpi	r21, 0x66	; 102
     268:	5c 36       	cpi	r21, 0x6C	; 108
     26a:	62 36       	cpi	r22, 0x62	; 98
     26c:	68 36       	cpi	r22, 0x68	; 104
     26e:	6e 36       	cpi	r22, 0x6E	; 110
     270:	74 36       	cpi	r23, 0x64	; 100
     272:	7a 36       	cpi	r23, 0x6A	; 106
     274:	80 36       	cpi	r24, 0x60	; 96
     276:	86 36       	cpi	r24, 0x66	; 102
     278:	8c 36       	cpi	r24, 0x6C	; 108
     27a:	92 36       	cpi	r25, 0x62	; 98
     27c:	98 36       	cpi	r25, 0x68	; 104
     27e:	af 36       	cpi	r26, 0x6F	; 111
     280:	9e 36       	cpi	r25, 0x6E	; 110
     282:	a4 36       	cpi	r26, 0x64	; 100
     284:	aa 36       	cpi	r26, 0x6A	; 106
     286:	75 37       	cpi	r23, 0x75	; 117
     288:	7b 37       	cpi	r23, 0x7B	; 123
     28a:	81 37       	cpi	r24, 0x71	; 113
     28c:	87 37       	cpi	r24, 0x77	; 119
     28e:	8d 37       	cpi	r24, 0x7D	; 125
     290:	93 37       	cpi	r25, 0x73	; 115
     292:	99 37       	cpi	r25, 0x79	; 121
     294:	9f 37       	cpi	r25, 0x7F	; 127
     296:	a5 37       	cpi	r26, 0x75	; 117
     298:	ab 37       	cpi	r26, 0x7B	; 123
     29a:	b1 37       	cpi	r27, 0x71	; 113
     29c:	b7 37       	cpi	r27, 0x77	; 119
     29e:	ce 37       	cpi	r28, 0x7E	; 126
     2a0:	bd 37       	cpi	r27, 0x7D	; 125
     2a2:	c3 37       	cpi	r28, 0x73	; 115
     2a4:	c9 37       	cpi	r28, 0x79	; 121
     2a6:	59 3a       	cpi	r21, 0xA9	; 169
     2a8:	5f 3a       	cpi	r21, 0xAF	; 175
     2aa:	65 3a       	cpi	r22, 0xA5	; 165
     2ac:	6b 3a       	cpi	r22, 0xAB	; 171
     2ae:	71 3a       	cpi	r23, 0xA1	; 161
     2b0:	77 3a       	cpi	r23, 0xA7	; 167
     2b2:	7d 3a       	cpi	r23, 0xAD	; 173
     2b4:	83 3a       	cpi	r24, 0xA3	; 163
     2b6:	89 3a       	cpi	r24, 0xA9	; 169
     2b8:	8f 3a       	cpi	r24, 0xAF	; 175
     2ba:	95 3a       	cpi	r25, 0xA5	; 165
     2bc:	9b 3a       	cpi	r25, 0xAB	; 171
     2be:	b2 3a       	cpi	r27, 0xA2	; 162
     2c0:	a1 3a       	cpi	r26, 0xA1	; 161
     2c2:	a7 3a       	cpi	r26, 0xA7	; 167
     2c4:	ad 3a       	cpi	r26, 0xAD	; 173
     2c6:	be 41       	sbci	r27, 0x1E	; 30
     2c8:	c4 41       	sbci	r28, 0x14	; 20
     2ca:	ca 41       	sbci	r28, 0x1A	; 26
     2cc:	d0 41       	sbci	r29, 0x10	; 16
     2ce:	d6 41       	sbci	r29, 0x16	; 22
     2d0:	dc 41       	sbci	r29, 0x1C	; 28
     2d2:	e2 41       	sbci	r30, 0x12	; 18
     2d4:	e8 41       	sbci	r30, 0x18	; 24
     2d6:	ee 41       	sbci	r30, 0x1E	; 30
     2d8:	f4 41       	sbci	r31, 0x14	; 20
     2da:	fa 41       	sbci	r31, 0x1A	; 26
     2dc:	00 42       	sbci	r16, 0x20	; 32
     2de:	17 42       	sbci	r17, 0x27	; 39
     2e0:	06 42       	sbci	r16, 0x26	; 38
     2e2:	0c 42       	sbci	r16, 0x2C	; 44
     2e4:	12 42       	sbci	r17, 0x22	; 34
     2e6:	76 5a       	subi	r23, 0xA6	; 166
     2e8:	7c 5a       	subi	r23, 0xAC	; 172
     2ea:	82 5a       	subi	r24, 0xA2	; 162
     2ec:	88 5a       	subi	r24, 0xA8	; 168
     2ee:	8e 5a       	subi	r24, 0xAE	; 174
     2f0:	94 5a       	subi	r25, 0xA4	; 164
     2f2:	9a 5a       	subi	r25, 0xAA	; 170
     2f4:	a0 5a       	subi	r26, 0xA0	; 160
     2f6:	a6 5a       	subi	r26, 0xA6	; 166
     2f8:	ac 5a       	subi	r26, 0xAC	; 172
     2fa:	b2 5a       	subi	r27, 0xA2	; 162
     2fc:	b8 5a       	subi	r27, 0xA8	; 168
     2fe:	cf 5a       	subi	r28, 0xAF	; 175
     300:	be 5a       	subi	r27, 0xAE	; 174
     302:	c4 5a       	subi	r28, 0xA4	; 164
     304:	ca 5a       	subi	r28, 0xAA	; 170
     306:	55 5c       	subi	r21, 0xC5	; 197
     308:	5b 5c       	subi	r21, 0xCB	; 203
     30a:	61 5c       	subi	r22, 0xC1	; 193
     30c:	67 5c       	subi	r22, 0xC7	; 199
     30e:	6d 5c       	subi	r22, 0xCD	; 205
     310:	73 5c       	subi	r23, 0xC3	; 195
     312:	79 5c       	subi	r23, 0xC9	; 201
     314:	7f 5c       	subi	r23, 0xCF	; 207
     316:	85 5c       	subi	r24, 0xC5	; 197
     318:	8b 5c       	subi	r24, 0xCB	; 203
     31a:	91 5c       	subi	r25, 0xC1	; 193
     31c:	97 5c       	subi	r25, 0xC7	; 199
     31e:	ae 5c       	subi	r26, 0xCE	; 206
     320:	9d 5c       	subi	r25, 0xCD	; 205
     322:	a3 5c       	subi	r26, 0xC3	; 195
     324:	a9 5c       	subi	r26, 0xC9	; 201
     326:	81 5d       	subi	r24, 0xD1	; 209
     328:	87 5d       	subi	r24, 0xD7	; 215
     32a:	8d 5d       	subi	r24, 0xDD	; 221
     32c:	93 5d       	subi	r25, 0xD3	; 211
     32e:	99 5d       	subi	r25, 0xD9	; 217
     330:	9f 5d       	subi	r25, 0xDF	; 223
     332:	a5 5d       	subi	r26, 0xD5	; 213
     334:	ab 5d       	subi	r26, 0xDB	; 219
     336:	b1 5d       	subi	r27, 0xD1	; 209
     338:	b7 5d       	subi	r27, 0xD7	; 215
     33a:	bd 5d       	subi	r27, 0xDD	; 221
     33c:	c3 5d       	subi	r28, 0xD3	; 211
     33e:	da 5d       	subi	r29, 0xDA	; 218
     340:	c9 5d       	subi	r28, 0xD9	; 217
     342:	cf 5d       	subi	r28, 0xDF	; 223
     344:	d5 5d       	subi	r29, 0xD5	; 213
     346:	69 8c       	ldd	r6, Y+25	; 0x19
     348:	6f 8c       	ldd	r6, Y+31	; 0x1f
     34a:	75 8c       	ldd	r7, Z+29	; 0x1d
     34c:	7b 8c       	ldd	r7, Y+27	; 0x1b
     34e:	81 8c       	ldd	r8, Z+25	; 0x19
     350:	87 8c       	ldd	r8, Z+31	; 0x1f
     352:	8d 8c       	ldd	r8, Y+29	; 0x1d
     354:	93 8c       	ldd	r9, Z+27	; 0x1b
     356:	99 8c       	ldd	r9, Y+25	; 0x19
     358:	9f 8c       	ldd	r9, Y+31	; 0x1f
     35a:	a5 8c       	ldd	r10, Z+29	; 0x1d
     35c:	ab 8c       	ldd	r10, Y+27	; 0x1b
     35e:	c2 8c       	ldd	r12, Z+26	; 0x1a
     360:	b1 8c       	ldd	r11, Z+25	; 0x19
     362:	b7 8c       	ldd	r11, Z+31	; 0x1f
     364:	bd 8c       	ldd	r11, Y+29	; 0x1d
     366:	00 8d       	ldd	r16, Z+24	; 0x18
     368:	06 8d       	ldd	r16, Z+30	; 0x1e
     36a:	0c 8d       	ldd	r16, Y+28	; 0x1c
     36c:	12 8d       	ldd	r17, Z+26	; 0x1a
     36e:	18 8d       	ldd	r17, Y+24	; 0x18
     370:	1e 8d       	ldd	r17, Y+30	; 0x1e
     372:	24 8d       	ldd	r18, Z+28	; 0x1c
     374:	2a 8d       	ldd	r18, Y+26	; 0x1a
     376:	30 8d       	ldd	r19, Z+24	; 0x18
     378:	36 8d       	ldd	r19, Z+30	; 0x1e
     37a:	3c 8d       	ldd	r19, Y+28	; 0x1c
     37c:	42 8d       	ldd	r20, Z+26	; 0x1a
     37e:	59 8d       	ldd	r21, Y+25	; 0x19
     380:	48 8d       	ldd	r20, Y+24	; 0x18
     382:	4e 8d       	ldd	r20, Y+30	; 0x1e
     384:	54 8d       	ldd	r21, Z+28	; 0x1c
     386:	93 8d       	ldd	r25, Z+27	; 0x1b
     388:	99 8d       	ldd	r25, Y+25	; 0x19
     38a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     38c:	a5 8d       	ldd	r26, Z+29	; 0x1d
     38e:	ab 8d       	ldd	r26, Y+27	; 0x1b
     390:	b1 8d       	ldd	r27, Z+25	; 0x19
     392:	b7 8d       	ldd	r27, Z+31	; 0x1f
     394:	bd 8d       	ldd	r27, Y+29	; 0x1d
     396:	c3 8d       	ldd	r28, Z+27	; 0x1b
     398:	c9 8d       	ldd	r28, Y+25	; 0x19
     39a:	cf 8d       	ldd	r28, Y+31	; 0x1f
     39c:	d5 8d       	ldd	r29, Z+29	; 0x1d
     39e:	ec 8d       	ldd	r30, Y+28	; 0x1c
     3a0:	db 8d       	ldd	r29, Y+27	; 0x1b
     3a2:	e1 8d       	ldd	r30, Z+25	; 0x19
     3a4:	e7 8d       	ldd	r30, Z+31	; 0x1f
     3a6:	b6 8f       	std	Z+30, r27	; 0x1e
     3a8:	bc 8f       	std	Y+28, r27	; 0x1c
     3aa:	c2 8f       	std	Z+26, r28	; 0x1a
     3ac:	c8 8f       	std	Y+24, r28	; 0x18
     3ae:	ce 8f       	std	Y+30, r28	; 0x1e
     3b0:	d4 8f       	std	Z+28, r29	; 0x1c
     3b2:	da 8f       	std	Y+26, r29	; 0x1a
     3b4:	e0 8f       	std	Z+24, r30	; 0x18
     3b6:	e6 8f       	std	Z+30, r30	; 0x1e
     3b8:	ec 8f       	std	Y+28, r30	; 0x1c
     3ba:	f2 8f       	std	Z+26, r31	; 0x1a
     3bc:	f8 8f       	std	Y+24, r31	; 0x18
     3be:	0f 90       	pop	r0
     3c0:	fe 8f       	std	Y+30, r31	; 0x1e
     3c2:	04 90       	lpm	r0, Z
     3c4:	0a 90       	ld	r0, -Y
     3c6:	18 91       	.word	0x9118	; ????
     3c8:	1e 91       	ld	r17, -X
     3ca:	24 91       	lpm	r18, Z
     3cc:	2a 91       	ld	r18, -Y
     3ce:	30 91 36 91 	lds	r19, 0x9136	; 0x809136 <__bss_end+0x791a>
     3d2:	3c 91       	ld	r19, X
     3d4:	42 91       	ld	r20, -Z
     3d6:	48 91       	.word	0x9148	; ????
     3d8:	4e 91       	ld	r20, -X
     3da:	54 91       	lpm	r21, Z
     3dc:	5a 91       	ld	r21, -Y
     3de:	71 91       	ld	r23, Z+
     3e0:	60 91 66 91 	lds	r22, 0x9166	; 0x809166 <__bss_end+0x794a>
     3e4:	6c 91       	ld	r22, X
     3e6:	ef 9b       	sbis	0x1d, 7	; 29
     3e8:	c6 9b       	sbis	0x18, 6	; 24
     3ea:	c8 9b       	sbis	0x19, 0	; 25
     3ec:	ca 9b       	sbis	0x19, 2	; 25
     3ee:	cc 9b       	sbis	0x19, 4	; 25
     3f0:	ce 9b       	sbis	0x19, 6	; 25
     3f2:	d0 9b       	sbis	0x1a, 0	; 26
     3f4:	f1 9b       	sbis	0x1e, 1	; 30
     3f6:	e1 9b       	sbis	0x1c, 1	; 28
     3f8:	ed 9b       	sbis	0x1d, 5	; 29
     3fa:	e3 9b       	sbis	0x1c, 3	; 28
     3fc:	ed 9b       	sbis	0x1d, 5	; 29
     3fe:	e5 9b       	sbis	0x1c, 5	; 28
     400:	e7 9b       	sbis	0x1c, 7	; 28
     402:	e9 9b       	sbis	0x1d, 1	; 29
     404:	eb 9b       	sbis	0x1d, 3	; 29
     406:	a3 a2       	std	Z+35, r10	; 0x23
     408:	a8 a2       	std	Y+32, r10	; 0x20
     40a:	ad a2       	std	Y+37, r10	; 0x25
     40c:	b2 a2       	std	Z+34, r11	; 0x22
     40e:	b7 a2       	std	Z+39, r11	; 0x27
     410:	bc a2       	std	Y+36, r11	; 0x24
     412:	c1 a2       	std	Z+33, r12	; 0x21
     414:	c6 a2       	std	Z+38, r12	; 0x26
     416:	cb a2       	std	Y+35, r12	; 0x23
     418:	d0 a2       	std	Z+32, r13	; 0x20
     41a:	d5 a2       	std	Z+37, r13	; 0x25
     41c:	da a2       	std	Y+34, r13	; 0x22
     41e:	ed a2       	std	Y+37, r14	; 0x25
     420:	df a2       	std	Y+39, r13	; 0x27
     422:	e4 a2       	std	Z+36, r14	; 0x24
     424:	e9 a2       	std	Y+33, r14	; 0x21
     426:	84 a3       	std	Z+36, r24	; 0x24
     428:	8a a3       	std	Y+34, r24	; 0x22
     42a:	91 a3       	std	Z+33, r25	; 0x21
     42c:	97 a3       	std	Z+39, r25	; 0x27
     42e:	9e a3       	std	Y+38, r25	; 0x26
     430:	a4 a3       	std	Z+36, r26	; 0x24
     432:	ab a3       	std	Y+35, r26	; 0x23
     434:	b1 a3       	std	Z+33, r27	; 0x21
     436:	b8 a3       	std	Y+32, r27	; 0x20
     438:	bf a3       	std	Y+39, r27	; 0x27
     43a:	c5 a3       	std	Z+37, r28	; 0x25
     43c:	cc a3       	std	Y+36, r28	; 0x24
     43e:	e7 a3       	std	Z+39, r30	; 0x27
     440:	d3 a3       	std	Z+35, r29	; 0x23
     442:	d9 a3       	std	Y+33, r29	; 0x21
     444:	e0 a3       	std	Z+32, r30	; 0x20

00000446 <__trampolines_end>:
     446:	4e 41       	sbci	r20, 0x1E	; 30
     448:	4e 49       	Address 0x00000448 is out of bounds.
.word	0xffff	; ????

00000449 <pstr_inity>:
     449:	49 4e 49 54 59                                      INITY

0000044e <pstr_inf>:
     44e:	49 4e 46                                            INF

00000451 <pwr_m10>:
     451:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     461:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000469 <pwr_p10>:
     469:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     479:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000481 <__c.2474>:
     481:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

0000048d <_ZL24digital_pin_to_timer_PGM>:
     48d:	00 00 08 09 02 07 0a 0b 0c 06 05 03 04 01 00 00     ................
	...
     4b9:	10 0f 0e 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000004d3 <_ZL27digital_pin_to_bit_mask_PGM>:
     4d3:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     4e3:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     4f3:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     503:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     513:	04 08 10 20 40 80                                   ... @.

00000519 <_ZL23digital_pin_to_port_PGM>:
     519:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     529:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     539:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     549:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     559:	0b 0b 0b 0b 0b 0b                                   ......

0000055f <_ZL18port_to_output_PGM>:
     55f:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     56f:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000579 <_ZL16port_to_mode_PGM>:
     579:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     589:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000593 <_ZZ20Config_PrintSettingsvE3__c_6>:
     593:	2f 3e 00                                            />.

00000596 <_ZZ20Config_PrintSettingsvE3__c_5>:
     596:	65 65 70 72 6f 6d 00                                eeprom.

0000059d <_ZZ20Config_PrintSettingsvE3__c_4>:
     59d:	3c 00                                               <.

0000059f <_ZZ20Config_PrintSettingsvE3__c_3>:
     59f:	32 20 00                                            2 .

000005a2 <_ZZ20Config_PrintSettingsvE3__c_2>:
     5a2:	31 20 00                                            1 .

000005a5 <_ZZ20Config_PrintSettingsvE3__c_1>:
     5a5:	3e 00                                               >.

000005a7 <_ZZ20Config_PrintSettingsvE3__c_0>:
     5a7:	65 65 70 72 6f 6d 00                                eeprom.

000005ae <_ZZ20Config_PrintSettingsvE3__c>:
     5ae:	3c 00                                               <.

000005b0 <_ZL24digital_pin_to_timer_PGM>:
     5b0:	00 00 08 09 02 07 0a 0b 0c 06 05 03 04 01 00 00     ................
	...
     5dc:	10 0f 0e 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000005f6 <_ZL27digital_pin_to_bit_mask_PGM>:
     5f6:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     606:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     616:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     626:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     636:	04 08 10 20 40 80                                   ... @.

0000063c <_ZL23digital_pin_to_port_PGM>:
     63c:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     64c:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     65c:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     66c:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     67c:	0b 0b 0b 0b 0b 0b                                   ......

00000682 <_ZL18port_to_output_PGM>:
     682:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     692:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000069c <_ZL16port_to_mode_PGM>:
     69c:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     6ac:	01 01 00 00 04 01 07 01 0a 01                       ..........

000006b6 <_ZL24digital_pin_to_timer_PGM>:
     6b6:	00 00 08 09 02 07 0a 0b 0c 06 05 03 04 01 00 00     ................
	...
     6e2:	10 0f 0e 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000006fc <_ZL27digital_pin_to_bit_mask_PGM>:
     6fc:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     70c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     71c:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     72c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     73c:	04 08 10 20 40 80                                   ... @.

00000742 <_ZL23digital_pin_to_port_PGM>:
     742:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     752:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     762:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     772:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     782:	0b 0b 0b 0b 0b 0b                                   ......

00000788 <_ZL18port_to_output_PGM>:
     788:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     798:	02 01 00 00 05 01 08 01 0b 01                       ..........

000007a2 <_ZL16port_to_mode_PGM>:
     7a2:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     7b2:	01 01 00 00 04 01 07 01 0a 01                       ..........

000007bc <_ZL24digital_pin_to_timer_PGM>:
     7bc:	00 00 08 09 02 07 0a 0b 0c 06 05 03 04 01 00 00     ................
	...
     7e8:	10 0f 0e 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000802 <_ZL27digital_pin_to_bit_mask_PGM>:
     802:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     812:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     822:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     832:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     842:	04 08 10 20 40 80                                   ... @.

00000848 <_ZL23digital_pin_to_port_PGM>:
     848:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     858:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     868:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     878:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     888:	0b 0b 0b 0b 0b 0b                                   ......

0000088e <_ZL18port_to_output_PGM>:
     88e:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     89e:	02 01 00 00 05 01 08 01 0b 01                       ..........

000008a8 <_ZL16port_to_mode_PGM>:
     8a8:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     8b8:	01 01 00 00 04 01 07 01 0a 01                       ..........

000008c2 <_ZZ12printDigitalP7DigitaliE3__c_4>:
     8c2:	2f 3e 00                                            />.

000008c5 <_ZZ12printDigitalP7DigitaliE3__c_3>:
     8c5:	64 69 67 69 74 61 6c 70 69 6e 00                    digitalpin.

000008d0 <_ZZ12printDigitalP7DigitaliE3__c_2>:
     8d0:	3c 00                                               <.

000008d2 <_ZZ12printDigitalP7DigitaliE3__c_1>:
     8d2:	3e 00                                               >.

000008d4 <_ZZ12printDigitalP7DigitaliE3__c_0>:
     8d4:	64 69 67 69 74 61 6c 70 69 6e 00                    digitalpin.

000008df <_ZZ12printDigitalP7DigitaliE3__c>:
     8df:	3c 00                                               <.

000008e1 <_ZZ11printAnalogP6AnalogiE3__c_4>:
     8e1:	2f 3e 00                                            />.

000008e4 <_ZZ11printAnalogP6AnalogiE3__c_3>:
     8e4:	61 6e 61 6c 6f 67 70 69 6e 00                       analogpin.

000008ee <_ZZ11printAnalogP6AnalogiE3__c_2>:
     8ee:	3c 00                                               <.

000008f0 <_ZZ11printAnalogP6AnalogiE3__c_1>:
     8f0:	3e 00                                               >.

000008f2 <_ZZ11printAnalogP6AnalogiE3__c_0>:
     8f2:	61 6e 61 6c 6f 67 70 69 6e 00                       analogpin.

000008fc <_ZZ11printAnalogP6AnalogiE3__c>:
     8fc:	3c 00                                               <.

000008fe <_ZZ15printUltrasonicP10UltrasoniciE3__c_6>:
     8fe:	2f 3e 00                                            />.

00000901 <_ZZ15printUltrasonicP10UltrasoniciE3__c_5>:
     901:	75 6c 74 72 61 73 6f 6e 69 63 00                    ultrasonic.

0000090c <_ZZ15printUltrasonicP10UltrasoniciE3__c_4>:
     90c:	3c 00                                               <.

0000090e <_ZZ15printUltrasonicP10UltrasoniciE3__c_3>:
     90e:	32 20 00                                            2 .

00000911 <_ZZ15printUltrasonicP10UltrasoniciE3__c_2>:
     911:	31 20 00                                            1 .

00000914 <_ZZ15printUltrasonicP10UltrasoniciE3__c_1>:
     914:	3e 00                                               >.

00000916 <_ZZ15printUltrasonicP10UltrasoniciE3__c_0>:
     916:	75 6c 74 72 61 73 6f 6e 69 63 00                    ultrasonic.

00000921 <_ZZ15printUltrasonicP10UltrasoniciE3__c>:
     921:	3c 00                                               <.

00000923 <_ZZ19publishBatteryVoltsiE3__c_5>:
     923:	2f 3e 00                                            />.

00000926 <_ZZ19publishBatteryVoltsiE3__c_4>:
     926:	62 61 74 74 65 72 79 00                             battery.

0000092e <_ZZ19publishBatteryVoltsiE3__c_3>:
     92e:	3c 00                                               <.

00000930 <_ZZ19publishBatteryVoltsiE3__c_2>:
     930:	31 20 00                                            1 .

00000933 <_ZZ19publishBatteryVoltsiE3__c_1>:
     933:	3e 00                                               >.

00000935 <_ZZ19publishBatteryVoltsiE3__c_0>:
     935:	62 61 74 74 65 72 79 00                             battery.

0000093d <_ZZ19publishBatteryVoltsiE3__c>:
     93d:	3c 00                                               <.

0000093f <_ZZ21publishMotorFaultCodeiE3__c_12>:
     93f:	2f 3e 00                                            />.

00000942 <_ZZ21publishMotorFaultCodeiE3__c_11>:
     942:	6d 6f 74 6f 72 66 61 75 6c 74 00                    motorfault.

0000094d <_ZZ21publishMotorFaultCodeiE3__c_10>:
     94d:	3c 00                                               <.

0000094f <_ZZ21publishMotorFaultCodeiE3__c_9>:
     94f:	53 74 61 72 74 75 70 20 63 6f 6e 66 69 67 75 72     Startup configur
     95f:	61 74 69 6f 6e 20 66 61 75 6c 74 00                 ation fault.

0000096b <_ZZ21publishMotorFaultCodeiE3__c_8>:
     96b:	4d 4f 53 46 45 54 20 66 61 69 6c 75 72 65 00        MOSFET failure.

0000097a <_ZZ21publishMotorFaultCodeiE3__c_7>:
     97a:	53 65 70 65 78 20 65 78 63 69 74 61 74 69 6f 6e     Sepex excitation
     98a:	20 66 61 75 6c 74 00                                 fault.

00000991 <_ZZ21publishMotorFaultCodeiE3__c_6>:
     991:	45 6d 65 72 67 65 6e 63 79 20 73 74 6f 70 00        Emergency stop.

000009a0 <_ZZ21publishMotorFaultCodeiE3__c_5>:
     9a0:	53 68 6f 72 74 20 63 69 72 63 75 69 74 00           Short circuit.

000009ae <_ZZ21publishMotorFaultCodeiE3__c_4>:
     9ae:	55 6e 64 65 72 76 6f 6c 74 61 67 65 00              Undervoltage.

000009bb <_ZZ21publishMotorFaultCodeiE3__c_3>:
     9bb:	4f 76 65 72 76 6f 6c 74 61 67 65 00                 Overvoltage.

000009c7 <_ZZ21publishMotorFaultCodeiE3__c_2>:
     9c7:	4f 76 65 72 68 65 61 74 00                          Overheat.

000009d0 <_ZZ21publishMotorFaultCodeiE3__c_1>:
     9d0:	3e 00                                               >.

000009d2 <_ZZ21publishMotorFaultCodeiE3__c_0>:
     9d2:	6d 6f 74 6f 72 66 61 75 6c 74 00                    motorfault.

000009dd <_ZZ21publishMotorFaultCodeiE3__c>:
     9dd:	3c 00                                               <.

000009df <_ZZ24FlushSerialRequestResendvE3__c>:
     9df:	52 65 73 65 6e 64 3a 20 00                          Resend: .

000009e8 <_ZZ12processMCodeiE3__c_302>:
     9e8:	2f 3e 00                                            />.

000009eb <_ZZ12processMCodeiE3__c_301>:
     9eb:	55 6e 6b 6e 6f 77 6e 20 4d 20 63 6f 64 65 20 00     Unknown M code .

000009fb <_ZZ12processMCodeiE3__c_300>:
     9fb:	3c 00                                               <.

000009fd <_ZZ12processMCodeiE3__c_299>:
     9fd:	2f 3e 00                                            />.

00000a00 <_ZZ12processMCodeiE3__c_298>:
     a00:	4d 39 39 39 00                                      M999.

00000a05 <_ZZ12processMCodeiE3__c_297>:
     a05:	3c 00                                               <.

00000a07 <_ZZ12processMCodeiE3__c_296>:
     a07:	2f 3e 00                                            />.

00000a0a <_ZZ12processMCodeiE3__c_295>:
     a0a:	61 6e 61 6c 6f 67 70 69 6e 00                       analogpin.

00000a14 <_ZZ12processMCodeiE3__c_294>:
     a14:	3c 00                                               <.

00000a16 <_ZZ12processMCodeiE3__c_293>:
     a16:	3e 00                                               >.

00000a18 <_ZZ12processMCodeiE3__c_292>:
     a18:	61 6e 61 6c 6f 67 70 69 6e 00                       analogpin.

00000a22 <_ZZ12processMCodeiE3__c_291>:
     a22:	3c 00                                               <.

00000a24 <_ZZ12processMCodeiE3__c_290>:
     a24:	2f 3e 00                                            />.

00000a27 <_ZZ12processMCodeiE3__c_289>:
     a27:	4d 37 39 39 00                                      M799.

00000a2c <_ZZ12processMCodeiE3__c_288>:
     a2c:	3c 00                                               <.

00000a2e <_ZZ12processMCodeiE3__c_287>:
     a2e:	2f 3e 00                                            />.

00000a31 <_ZZ12processMCodeiE3__c_286>:
     a31:	4d 37 39 39 00                                      M799.

00000a36 <_ZZ12processMCodeiE3__c_285>:
     a36:	3c 00                                               <.

00000a38 <_ZZ12processMCodeiE3__c_284>:
     a38:	2f 3e 00                                            />.

00000a3b <_ZZ12processMCodeiE3__c_283>:
     a3b:	4d 37 39 39 00                                      M799.

00000a40 <_ZZ12processMCodeiE3__c_282>:
     a40:	3c 00                                               <.

00000a42 <_ZZ12processMCodeiE3__c_281>:
     a42:	2f 3e 00                                            />.

00000a45 <_ZZ12processMCodeiE3__c_280>:
     a45:	63 6f 6e 74 72 6f 6c 6c 65 72 73 74 61 74 75 73     controllerstatus
	...

00000a56 <_ZZ12processMCodeiE3__c_279>:
     a56:	3c 00                                               <.

00000a58 <_ZZ12processMCodeiE3__c_278>:
     a58:	4d 6f 74 6f 72 20 43 68 61 6e 6e 65 6c 3a 00        Motor Channel:.

00000a67 <_ZZ12processMCodeiE3__c_277>:
     a67:	50 57 4d 20 43 68 61 6e 6e 65 6c 3a 00              PWM Channel:.

00000a74 <_ZZ12processMCodeiE3__c_276>:
     a74:	3e 00                                               >.

00000a76 <_ZZ12processMCodeiE3__c_275>:
     a76:	63 6f 6e 74 72 6f 6c 6c 65 72 73 74 61 74 75 73     controllerstatus
	...

00000a87 <_ZZ12processMCodeiE3__c_274>:
     a87:	3c 00                                               <.

00000a89 <_ZZ12processMCodeiE3__c_273>:
     a89:	2f 3e 00                                            />.

00000a8c <_ZZ12processMCodeiE3__c_272>:
     a8c:	61 73 73 69 67 6e 65 64 70 69 6e 73 00              assignedpins.

00000a99 <_ZZ12processMCodeiE3__c_271>:
     a99:	3c 00                                               <.

00000a9b <_ZZ12processMCodeiE3__c_270>:
     a9b:	3e 00                                               >.

00000a9d <_ZZ12processMCodeiE3__c_269>:
     a9d:	61 73 73 69 67 6e 65 64 70 69 6e 73 00              assignedpins.

00000aaa <_ZZ12processMCodeiE3__c_268>:
     aaa:	3c 00                                               <.

00000aac <_ZZ12processMCodeiE3__c_267>:
     aac:	2f 3e 00                                            />.

00000aaf <_ZZ12processMCodeiE3__c_266>:
     aaf:	70 77 6d 63 6f 6e 74 72 6f 6c 73 65 74 74 69 6e     pwmcontrolsettin
     abf:	67 00                                               g.

00000ac1 <_ZZ12processMCodeiE3__c_265>:
     ac1:	3c 00                                               <.

00000ac3 <_ZZ12processMCodeiE3__c_264>:
     ac3:	20 44 75 72 61 74 69 6f 6e 3a 00                     Duration:.

00000ace <_ZZ12processMCodeiE3__c_263>:
     ace:	20 4d 69 6e 20 4c 65 76 65 6c 3a 00                  Min Level:.

00000ada <_ZZ12processMCodeiE3__c_262>:
     ada:	50 57 4d 20 63 68 61 6e 6e 65 6c 3a 00              PWM channel:.

00000ae7 <_ZZ12processMCodeiE3__c_261>:
     ae7:	3e 00                                               >.

00000ae9 <_ZZ12processMCodeiE3__c_260>:
     ae9:	70 77 6d 63 6f 6e 74 72 6f 6c 73 65 74 74 69 6e     pwmcontrolsettin
     af9:	67 00                                               g.

00000afb <_ZZ12processMCodeiE3__c_259>:
     afb:	3c 00                                               <.

00000afd <_ZZ12processMCodeiE3__c_258>:
     afd:	2f 3e 00                                            />.

00000b00 <_ZZ12processMCodeiE3__c_257>:
     b00:	6d 6f 74 6f 72 63 6f 6e 74 72 6f 6c 73 65 74 74     motorcontrolsett
     b10:	69 6e 67 00                                         ing.

00000b14 <_ZZ12processMCodeiE3__c_256>:
     b14:	3c 00                                               <.

00000b16 <_ZZ12processMCodeiE3__c_255>:
     b16:	4e 6f 6e 65 2e 00                                   None..

00000b1c <_ZZ12processMCodeiE3__c_254>:
     b1c:	20 53 68 75 74 64 6f 77 6e 20 63 6d 3a 00            Shutdown cm:.

00000b2a <_ZZ12processMCodeiE3__c_253>:
     b2a:	20 46 61 63 69 6e 67 3a 00                           Facing:.

00000b33 <_ZZ12processMCodeiE3__c_252>:
     b33:	50 69 6e 3a 00                                      Pin:.

00000b38 <_ZZ12processMCodeiE3__c_251>:
     b38:	55 6c 74 72 61 73 6f 6e 69 63 20 70 69 6e 73 3a     Ultrasonic pins:
	...

00000b49 <_ZZ12processMCodeiE3__c_250>:
     b49:	4e 6f 6e 65 2e 00                                   None..

00000b4f <_ZZ12processMCodeiE3__c_249>:
     b4f:	20 44 75 72 61 74 69 6f 6e 3a 00                     Duration:.

00000b5a <_ZZ12processMCodeiE3__c_248>:
     b5a:	20 43 6f 75 6e 74 3a 00                              Count:.

00000b62 <_ZZ12processMCodeiE3__c_247>:
     b62:	20 45 6e 63 6f 64 65 72 20 50 69 6e 3a 00            Encoder Pin:.

00000b70 <_ZZ12processMCodeiE3__c_246>:
     b70:	20 44 65 66 61 75 6c 74 2e 20 44 69 72 3a 00         Default. Dir:.

00000b7f <_ZZ12processMCodeiE3__c_245>:
     b7f:	20 43 75 72 72 2e 20 44 69 72 3a 00                  Curr. Dir:.

00000b8b <_ZZ12processMCodeiE3__c_244>:
     b8b:	20 53 70 65 65 64 3a 00                              Speed:.

00000b93 <_ZZ12processMCodeiE3__c_243>:
     b93:	20 4d 69 6e 20 50 6f 77 65 72 3a 00                  Min Power:.

00000b9f <_ZZ12processMCodeiE3__c_242>:
     b9f:	4d 6f 74 6f 72 20 63 68 61 6e 6e 65 6c 3a 00        Motor channel:.

00000bae <_ZZ12processMCodeiE3__c_241>:
     bae:	3e 00                                               >.

00000bb0 <_ZZ12processMCodeiE3__c_240>:
     bb0:	6d 6f 74 6f 72 63 6f 6e 74 72 6f 6c 73 65 74 74     motorcontrolsett
     bc0:	69 6e 67 00                                         ing.

00000bc4 <_ZZ12processMCodeiE3__c_239>:
     bc4:	3c 00                                               <.

00000bc6 <_ZZ12processMCodeiE3__c_238>:
     bc6:	2f 3e 00                                            />.

00000bc9 <_ZZ12processMCodeiE3__c_237>:
     bc9:	70 77 6d 70 69 6e 73 65 74 74 69 6e 67 00           pwmpinsetting.

00000bd7 <_ZZ12processMCodeiE3__c_236>:
     bd7:	3c 00                                               <.

00000bd9 <_ZZ12processMCodeiE3__c_235>:
     bd9:	20 45 52 52 4f 52 20 2d 20 55 4e 4b 4e 4f 57 4e      ERROR - UNKNOWN
	...

00000bea <_ZZ12processMCodeiE3__c_234>:
     bea:	20 4f 55 54 50 55 54 00                              OUTPUT.

00000bf2 <_ZZ12processMCodeiE3__c_233>:
     bf2:	20 49 4e 50 55 54 5f 50 55 4c 4c 55 50 00            INPUT_PULLUP.

00000c00 <_ZZ12processMCodeiE3__c_232>:
     c00:	20 49 4e 50 55 54 00                                 INPUT.

00000c07 <_ZZ12processMCodeiE3__c_231>:
     c07:	20 54 69 6d 65 72 20 63 68 61 6e 6e 65 6c 3a 00      Timer channel:.

00000c17 <_ZZ12processMCodeiE3__c_230>:
     c17:	50 69 6e 3a 00                                      Pin:.

00000c1c <_ZZ12processMCodeiE3__c_229>:
     c1c:	3e 00                                               >.

00000c1e <_ZZ12processMCodeiE3__c_228>:
     c1e:	70 77 6d 70 69 6e 73 65 74 74 69 6e 67 00           pwmpinsetting.

00000c2c <_ZZ12processMCodeiE3__c_227>:
     c2c:	3c 00                                               <.

00000c2e <_ZZ12processMCodeiE3__c_226>:
     c2e:	2f 3e 00                                            />.

00000c31 <_ZZ12processMCodeiE3__c_225>:
     c31:	75 6c 74 72 61 73 6f 6e 69 63 70 69 6e 73 65 74     ultrasonicpinset
     c41:	74 69 6e 67 00                                      ting.

00000c46 <_ZZ12processMCodeiE3__c_224>:
     c46:	3c 00                                               <.

00000c48 <_ZZ12processMCodeiE3__c_223>:
     c48:	50 69 6e 3a 00                                      Pin:.

00000c4d <_ZZ12processMCodeiE3__c_222>:
     c4d:	3e 00                                               >.

00000c4f <_ZZ12processMCodeiE3__c_221>:
     c4f:	75 6c 74 72 61 73 6f 6e 69 63 70 69 6e 73 65 74     ultrasonicpinset
     c5f:	74 69 6e 67 00                                      ting.

00000c64 <_ZZ12processMCodeiE3__c_220>:
     c64:	3c 00                                               <.

00000c66 <_ZZ12processMCodeiE3__c_219>:
     c66:	2f 3e 00                                            />.

00000c69 <_ZZ12processMCodeiE3__c_218>:
     c69:	61 6e 61 6c 6f 67 70 69 6e 73 65 74 74 69 6e 67     analogpinsetting
	...

00000c7a <_ZZ12processMCodeiE3__c_217>:
     c7a:	3c 00                                               <.

00000c7c <_ZZ12processMCodeiE3__c_216>:
     c7c:	20 45 52 52 4f 52 20 2d 20 55 4e 4b 4e 4f 57 4e      ERROR - UNKNOWN
	...

00000c8d <_ZZ12processMCodeiE3__c_215>:
     c8d:	20 4f 55 54 50 55 54 00                              OUTPUT.

00000c95 <_ZZ12processMCodeiE3__c_214>:
     c95:	20 49 4e 50 55 54 5f 50 55 4c 4c 55 50 00            INPUT_PULLUP.

00000ca3 <_ZZ12processMCodeiE3__c_213>:
     ca3:	20 49 4e 50 55 54 00                                 INPUT.

00000caa <_ZZ12processMCodeiE3__c_212>:
     caa:	3e 00                                               >.

00000cac <_ZZ12processMCodeiE3__c_211>:
     cac:	61 6e 61 6c 6f 67 70 69 6e 73 65 74 74 69 6e 67     analogpinsetting
	...

00000cbd <_ZZ12processMCodeiE3__c_210>:
     cbd:	3c 00                                               <.

00000cbf <_ZZ12processMCodeiE3__c_209>:
     cbf:	2f 3e 00                                            />.

00000cc2 <_ZZ12processMCodeiE3__c_208>:
     cc2:	64 69 67 69 74 61 6c 70 69 6e 73 65 74 74 69 6e     digitalpinsettin
     cd2:	67 00                                               g.

00000cd4 <_ZZ12processMCodeiE3__c_207>:
     cd4:	3c 00                                               <.

00000cd6 <_ZZ12processMCodeiE3__c_206>:
     cd6:	20 45 52 52 4f 52 20 2d 20 55 4e 4b 4e 4f 57 4e      ERROR - UNKNOWN
	...

00000ce7 <_ZZ12processMCodeiE3__c_205>:
     ce7:	20 4f 55 54 50 55 54 00                              OUTPUT.

00000cef <_ZZ12processMCodeiE3__c_204>:
     cef:	20 49 4e 50 55 54 5f 50 55 4c 4c 55 50 00            INPUT_PULLUP.

00000cfd <_ZZ12processMCodeiE3__c_203>:
     cfd:	20 49 4e 50 55 54 00                                 INPUT.

00000d04 <_ZZ12processMCodeiE3__c_202>:
     d04:	3e 00                                               >.

00000d06 <_ZZ12processMCodeiE3__c_201>:
     d06:	64 69 67 69 74 61 6c 70 69 6e 73 65 74 74 69 6e     digitalpinsettin
     d16:	67 00                                               g.

00000d18 <_ZZ12processMCodeiE3__c_200>:
     d18:	3c 00                                               <.

00000d1a <_ZZ12processMCodeiE3__c_199>:
     d1a:	2f 3e 00                                            />.

00000d1d <_ZZ12processMCodeiE3__c_198>:
     d1d:	73 74 61 74 75 73 00                                status.

00000d24 <_ZZ12processMCodeiE3__c_197>:
     d24:	3c 00                                               <.

00000d26 <_ZZ12processMCodeiE3__c_196>:
     d26:	20 46 72 65 65 20 4d 65 6d 6f 72 79 3a 20 00         Free Memory: .

00000d35 <_ZZ12processMCodeiE3__c_195>:
     d35:	28 47 72 6f 66 66 2c 20 64 65 66 61 75 6c 74 20     (Groff, default 
     d45:	63 6f 6e 66 69 67 29 00                             config).

00000d4d <_ZZ12processMCodeiE3__c_194>:
     d4d:	20 7c 20 41 75 74 68 6f 72 3a 20 00                  | Author: .

00000d59 <_ZZ12processMCodeiE3__c_193>:
     d59:	4d 61 79 20 32 36 20 32 30 32 32 20 31 33 3a 31     May 26 2022 13:1
     d69:	31 3a 30 31 00                                      1:01.

00000d6e <_ZZ12processMCodeiE3__c_192>:
     d6e:	20 4c 61 73 74 20 55 70 64 61 74 65 64 3a 20 00      Last Updated: .

00000d7e <_ZZ12processMCodeiE3__c_191>:
     d7e:	31 2e 33 2e 30 00                                   1.3.0.

00000d84 <_ZZ12processMCodeiE3__c_190>:
     d84:	53 6f 66 74 77 61 72 65 20 52 65 73 65 74 00        Software Reset.

00000d93 <_ZZ12processMCodeiE3__c_189>:
     d93:	57 61 74 63 68 64 6f 67 20 52 65 73 65 74 00        Watchdog Reset.

00000da2 <_ZZ12processMCodeiE3__c_188>:
     da2:	42 72 6f 77 6e 20 6f 75 74 20 52 65 73 65 74 00     Brown out Reset.

00000db2 <_ZZ12processMCodeiE3__c_187>:
     db2:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

00000dc1 <_ZZ12processMCodeiE3__c_186>:
     dc1:	50 6f 77 65 72 55 70 00                             PowerUp.

00000dc9 <_ZZ12processMCodeiE3__c_185>:
     dc9:	3e 00                                               >.

00000dcb <_ZZ12processMCodeiE3__c_184>:
     dcb:	73 74 61 74 75 73 00                                status.

00000dd2 <_ZZ12processMCodeiE3__c_183>:
     dd2:	3c 00                                               <.

00000dd4 <_ZZ12processMCodeiE3__c_182>:
     dd4:	2f 3e 00                                            />.

00000dd7 <_ZZ12processMCodeiE3__c_181>:
     dd7:	4d 35 30 32 00                                      M502.

00000ddc <_ZZ12processMCodeiE3__c_180>:
     ddc:	3c 00                                               <.

00000dde <_ZZ12processMCodeiE3__c_179>:
     dde:	2f 3e 00                                            />.

00000de1 <_ZZ12processMCodeiE3__c_178>:
     de1:	4d 35 30 31 00                                      M501.

00000de6 <_ZZ12processMCodeiE3__c_177>:
     de6:	3c 00                                               <.

00000de8 <_ZZ12processMCodeiE3__c_176>:
     de8:	2f 3e 00                                            />.

00000deb <_ZZ12processMCodeiE3__c_175>:
     deb:	4d 35 30 30 00                                      M500.

00000df0 <_ZZ12processMCodeiE3__c_174>:
     df0:	3c 00                                               <.

00000df2 <_ZZ12processMCodeiE3__c_173>:
     df2:	2f 3e 00                                            />.

00000df5 <_ZZ12processMCodeiE3__c_172>:
     df5:	4d 34 34 35 00                                      M445.

00000dfa <_ZZ12processMCodeiE3__c_171>:
     dfa:	3c 00                                               <.

00000dfc <_ZZ12processMCodeiE3__c_170>:
     dfc:	2f 3e 00                                            />.

00000dff <_ZZ12processMCodeiE3__c_169>:
     dff:	4d 33 30 36 00                                      M306.

00000e04 <_ZZ12processMCodeiE3__c_168>:
     e04:	3c 00                                               <.

00000e06 <_ZZ12processMCodeiE3__c_167>:
     e06:	2f 3e 00                                            />.

00000e09 <_ZZ12processMCodeiE3__c_166>:
     e09:	4d 33 30 36 00                                      M306.

00000e0e <_ZZ12processMCodeiE3__c_165>:
     e0e:	3c 00                                               <.

00000e10 <_ZZ12processMCodeiE3__c_164>:
     e10:	2f 3e 00                                            />.

00000e13 <_ZZ12processMCodeiE3__c_163>:
     e13:	4d 33 30 34 00                                      M304.

00000e18 <_ZZ12processMCodeiE3__c_162>:
     e18:	3c 00                                               <.

00000e1a <_ZZ12processMCodeiE3__c_161>:
     e1a:	2f 3e 00                                            />.

00000e1d <_ZZ12processMCodeiE3__c_160>:
     e1d:	4d 33 30 34 00                                      M304.

00000e22 <_ZZ12processMCodeiE3__c_159>:
     e22:	3c 00                                               <.

00000e24 <_ZZ12processMCodeiE3__c_158>:
     e24:	2f 3e 00                                            />.

00000e27 <_ZZ12processMCodeiE3__c_157>:
     e27:	4d 33 30 32 00                                      M302.

00000e2c <_ZZ12processMCodeiE3__c_156>:
     e2c:	3c 00                                               <.

00000e2e <_ZZ12processMCodeiE3__c_155>:
     e2e:	2f 3e 00                                            />.

00000e31 <_ZZ12processMCodeiE3__c_154>:
     e31:	4d 33 30 31 00                                      M301.

00000e36 <_ZZ12processMCodeiE3__c_153>:
     e36:	3c 00                                               <.

00000e38 <_ZZ12processMCodeiE3__c_152>:
     e38:	2f 3e 00                                            />.

00000e3b <_ZZ12processMCodeiE3__c_151>:
     e3b:	75 6c 74 72 61 73 6f 6e 69 63 00                    ultrasonic.

00000e46 <_ZZ12processMCodeiE3__c_150>:
     e46:	3c 00                                               <.

00000e48 <_ZZ12processMCodeiE3__c_149>:
     e48:	32 20 00                                            2 .

00000e4b <_ZZ12processMCodeiE3__c_148>:
     e4b:	31 20 00                                            1 .

00000e4e <_ZZ12processMCodeiE3__c_147>:
     e4e:	3e 00                                               >.

00000e50 <_ZZ12processMCodeiE3__c_146>:
     e50:	75 6c 74 72 61 73 6f 6e 69 63 00                    ultrasonic.

00000e5b <_ZZ12processMCodeiE3__c_145>:
     e5b:	3c 00                                               <.

00000e5d <_ZZ12processMCodeiE3__c_144>:
     e5d:	2f 3e 00                                            />.

00000e60 <_ZZ12processMCodeiE3__c_143>:
     e60:	46 49 52 4d 57 41 52 45 5f 4e 41 4d 45 3a 4d 61     FIRMWARE_NAME:Ma
     e70:	72 6c 69 6e 73 70 69 6b 65 20 52 6f 62 6f 43 6f     rlinspike RoboCo
     e80:	72 65 00                                            re.

00000e83 <_ZZ12processMCodeiE3__c_142>:
     e83:	3c 00                                               <.

00000e85 <_ZZ12processMCodeiE3__c_141>:
     e85:	46 49 52 4d 57 41 52 45 5f 55 52 4c 3a 68 74 74     FIRMWARE_URL:htt
     e95:	70 3a 2f 2f 77 77 77 2e 6e 65 6f 63 6f 72 65 74     p://www.neocoret
     ea5:	65 63 68 73 2e 63 6f 6d 0d 0a 50 52 4f 54 4f 43     echs.com..PROTOC
     eb5:	4f 4c 5f 56 45 52 53 49 4f 4e 3a 31 2e 31 0d 0a     OL_VERSION:1.1..
     ec5:	4d 41 43 48 49 4e 45 5f 54 59 50 45 3a 52 6f 62     MACHINE_TYPE:Rob
     ed5:	6f 43 6f 72 65 0d 0a 55 55 49 44 3a 30 38 64 38     oCore..UUID:08d8
     ee5:	35 65 63 31 2d 36 35 31 61 2d 34 61 32 66 2d 61     5ec1-651a-4a2f-a
     ef5:	31 61 37 2d 34 61 66 62 31 35 34 62 63 63 38 31     1a7-4afb154bcc81
	...

00000f06 <_ZZ12processMCodeiE3__c_140>:
     f06:	3e 00                                               >.

00000f08 <_ZZ12processMCodeiE3__c_139>:
     f08:	46 49 52 4d 57 41 52 45 5f 4e 41 4d 45 3a 4d 61     FIRMWARE_NAME:Ma
     f18:	72 6c 69 6e 73 70 69 6b 65 20 52 6f 62 6f 43 6f     rlinspike RoboCo
     f28:	72 65 00                                            re.

00000f2b <_ZZ12processMCodeiE3__c_138>:
     f2b:	3c 00                                               <.

00000f2d <_ZZ12processMCodeiE3__c_137>:
     f2d:	2f 3e 00                                            />.

00000f30 <_ZZ12processMCodeiE3__c_136>:
     f30:	4d 38 31 00                                         M81.

00000f34 <_ZZ12processMCodeiE3__c_135>:
     f34:	3c 00                                               <.

00000f36 <_ZZ12processMCodeiE3__c_134>:
     f36:	2f 3e 00                                            />.

00000f39 <_ZZ12processMCodeiE3__c_133>:
     f39:	4d 38 30 00                                         M80.

00000f3d <_ZZ12processMCodeiE3__c_132>:
     f3d:	3c 00                                               <.

00000f3f <_ZZ12processMCodeiE3__c_131>:
     f3f:	2f 3e 00                                            />.

00000f42 <_ZZ12processMCodeiE3__c_130>:
     f42:	4d 34 37 00                                         M47.

00000f46 <_ZZ12processMCodeiE3__c_129>:
     f46:	3c 00                                               <.

00000f48 <_ZZ12processMCodeiE3__c_128>:
     f48:	2f 3e 00                                            />.

00000f4b <_ZZ12processMCodeiE3__c_127>:
     f4b:	61 6e 61 6c 6f 67 70 69 6e 00                       analogpin.

00000f55 <_ZZ12processMCodeiE3__c_126>:
     f55:	3c 00                                               <.

00000f57 <_ZZ12processMCodeiE3__c_125>:
     f57:	32 20 00                                            2 .

00000f5a <_ZZ12processMCodeiE3__c_124>:
     f5a:	31 20 00                                            1 .

00000f5d <_ZZ12processMCodeiE3__c_123>:
     f5d:	3e 00                                               >.

00000f5f <_ZZ12processMCodeiE3__c_122>:
     f5f:	61 6e 61 6c 6f 67 70 69 6e 00                       analogpin.

00000f69 <_ZZ12processMCodeiE3__c_121>:
     f69:	3c 00                                               <.

00000f6b <_ZZ12processMCodeiE3__c_120>:
     f6b:	2f 3e 00                                            />.

00000f6e <_ZZ12processMCodeiE3__c_119>:
     f6e:	4d 34 35 00                                         M45.

00000f72 <_ZZ12processMCodeiE3__c_118>:
     f72:	3c 00                                               <.

00000f74 <_ZZ12processMCodeiE3__c_117>:
     f74:	2f 3e 00                                            />.

00000f77 <_ZZ12processMCodeiE3__c_116>:
     f77:	4d 34 35 00                                         M45.

00000f7b <_ZZ12processMCodeiE3__c_115>:
     f7b:	3c 00                                               <.

00000f7d <_ZZ12processMCodeiE3__c_114>:
     f7d:	2f 3e 00                                            />.

00000f80 <_ZZ12processMCodeiE3__c_113>:
     f80:	64 69 67 69 74 61 6c 70 69 6e 00                    digitalpin.

00000f8b <_ZZ12processMCodeiE3__c_112>:
     f8b:	3c 00                                               <.

00000f8d <_ZZ12processMCodeiE3__c_111>:
     f8d:	32 20 00                                            2 .

00000f90 <_ZZ12processMCodeiE3__c_110>:
     f90:	31 20 00                                            1 .

00000f93 <_ZZ12processMCodeiE3__c_109>:
     f93:	3e 00                                               >.

00000f95 <_ZZ12processMCodeiE3__c_108>:
     f95:	64 69 67 69 74 61 6c 70 69 6e 00                    digitalpin.

00000fa0 <_ZZ12processMCodeiE3__c_107>:
     fa0:	3c 00                                               <.

00000fa2 <_ZZ12processMCodeiE3__c_106>:
     fa2:	2f 3e 00                                            />.

00000fa5 <_ZZ12processMCodeiE3__c_105>:
     fa5:	4d 34 32 00                                         M42.

00000fa9 <_ZZ12processMCodeiE3__c_104>:
     fa9:	3c 00                                               <.

00000fab <_ZZ12processMCodeiE3__c_103>:
     fab:	2f 3e 00                                            />.

00000fae <_ZZ12processMCodeiE3__c_102>:
     fae:	4d 34 32 00                                         M42.

00000fb2 <_ZZ12processMCodeiE3__c_101>:
     fb2:	3c 00                                               <.

00000fb4 <_ZZ12processMCodeiE3__c_100>:
     fb4:	2f 3e 00                                            />.

00000fb7 <_ZZ12processMCodeiE3__c_99>:
     fb7:	4d 34 31 00                                         M41.

00000fbb <_ZZ12processMCodeiE3__c_98>:
     fbb:	3c 00                                               <.

00000fbd <_ZZ12processMCodeiE3__c_97>:
     fbd:	2f 3e 00                                            />.

00000fc0 <_ZZ12processMCodeiE3__c_96>:
     fc0:	4d 34 31 00                                         M41.

00000fc4 <_ZZ12processMCodeiE3__c_95>:
     fc4:	3c 00                                               <.

00000fc6 <_ZZ12processMCodeiE3__c_94>:
     fc6:	2f 3e 00                                            />.

00000fc9 <_ZZ12processMCodeiE3__c_93>:
     fc9:	4d 34 30 00                                         M40.

00000fcd <_ZZ12processMCodeiE3__c_92>:
     fcd:	3c 00                                               <.

00000fcf <_ZZ12processMCodeiE3__c_91>:
     fcf:	2f 3e 00                                            />.

00000fd2 <_ZZ12processMCodeiE3__c_90>:
     fd2:	4d 33 39 00                                         M39.

00000fd6 <_ZZ12processMCodeiE3__c_89>:
     fd6:	3c 00                                               <.

00000fd8 <_ZZ12processMCodeiE3__c_88>:
     fd8:	2f 3e 00                                            />.

00000fdb <_ZZ12processMCodeiE3__c_87>:
     fdb:	4d 33 38 00                                         M38.

00000fdf <_ZZ12processMCodeiE3__c_86>:
     fdf:	3c 00                                               <.

00000fe1 <_ZZ12processMCodeiE3__c_85>:
     fe1:	2f 3e 00                                            />.

00000fe4 <_ZZ12processMCodeiE3__c_84>:
     fe4:	4d 33 37 00                                         M37.

00000fe8 <_ZZ12processMCodeiE3__c_83>:
     fe8:	3c 00                                               <.

00000fea <_ZZ12processMCodeiE3__c_82>:
     fea:	2f 3e 00                                            />.

00000fed <_ZZ12processMCodeiE3__c_81>:
     fed:	4d 33 36 00                                         M36.

00000ff1 <_ZZ12processMCodeiE3__c_80>:
     ff1:	3c 00                                               <.

00000ff3 <_ZZ12processMCodeiE3__c_79>:
     ff3:	2f 3e 00                                            />.

00000ff6 <_ZZ12processMCodeiE3__c_78>:
     ff6:	4d 33 35 00                                         M35.

00000ffa <_ZZ12processMCodeiE3__c_77>:
     ffa:	3c 00                                               <.

00000ffc <_ZZ12processMCodeiE3__c_76>:
     ffc:	2f 3e 00                                            />.

00000fff <_ZZ12processMCodeiE3__c_75>:
     fff:	4d 33 33 00                                         M33.

00001003 <_ZZ12processMCodeiE3__c_74>:
    1003:	3c 00                                               <.

00001005 <_ZZ12processMCodeiE3__c_73>:
    1005:	2f 3e 00                                            />.

00001008 <_ZZ12processMCodeiE3__c_72>:
    1008:	4d 35 00                                            M5.

0000100b <_ZZ12processMCodeiE3__c_71>:
    100b:	3c 00                                               <.

0000100d <_ZZ12processMCodeiE3__c_70>:
    100d:	2f 3e 00                                            />.

00001010 <_ZZ12processMCodeiE3__c_69>:
    1010:	4d 35 00                                            M5.

00001013 <_ZZ12processMCodeiE3__c_68>:
    1013:	3c 00                                               <.

00001015 <_ZZ12processMCodeiE3__c_67>:
    1015:	2f 3e 00                                            />.

00001018 <_ZZ12processMCodeiE3__c_66>:
    1018:	4d 31 32 00                                         M12.

0000101c <_ZZ12processMCodeiE3__c_65>:
    101c:	3c 00                                               <.

0000101e <_ZZ12processMCodeiE3__c_64>:
    101e:	2f 3e 00                                            />.

00001021 <_ZZ12processMCodeiE3__c_63>:
    1021:	4d 31 32 00                                         M12.

00001025 <_ZZ12processMCodeiE3__c_62>:
    1025:	3c 00                                               <.

00001027 <_ZZ12processMCodeiE3__c_61>:
    1027:	2f 3e 00                                            />.

0000102a <_ZZ12processMCodeiE3__c_60>:
    102a:	4d 31 31 00                                         M11.

0000102e <_ZZ12processMCodeiE3__c_59>:
    102e:	3c 00                                               <.

00001030 <_ZZ12processMCodeiE3__c_58>:
    1030:	2f 3e 00                                            />.

00001033 <_ZZ12processMCodeiE3__c_57>:
    1033:	4d 31 31 00                                         M11.

00001037 <_ZZ12processMCodeiE3__c_56>:
    1037:	3c 00                                               <.

00001039 <_ZZ12processMCodeiE3__c_55>:
    1039:	2f 3e 00                                            />.

0000103c <_ZZ12processMCodeiE3__c_54>:
    103c:	42 41 44 20 43 4f 4e 54 52 4f 4c 4c 45 52 20 54     BAD CONTROLLER T
    104c:	59 50 45 3a 00                                      YPE:.

00001051 <_ZZ12processMCodeiE3__c_53>:
    1051:	3c 00                                               <.

00001053 <_ZZ12processMCodeiE3__c_52>:
    1053:	2f 3e 00                                            />.

00001056 <_ZZ12processMCodeiE3__c_51>:
    1056:	4d 31 30 00                                         M10.

0000105a <_ZZ12processMCodeiE3__c_50>:
    105a:	3c 00                                               <.

0000105c <_ZZ12processMCodeiE3__c_49>:
    105c:	2f 3e 00                                            />.

0000105f <_ZZ12processMCodeiE3__c_48>:
    105f:	4d 31 30 00                                         M10.

00001063 <_ZZ12processMCodeiE3__c_47>:
    1063:	3c 00                                               <.

00001065 <_ZZ12processMCodeiE3__c_46>:
    1065:	2f 3e 00                                            />.

00001068 <_ZZ12processMCodeiE3__c_45>:
    1068:	4d 31 30 00                                         M10.

0000106c <_ZZ12processMCodeiE3__c_44>:
    106c:	3c 00                                               <.

0000106e <_ZZ12processMCodeiE3__c_43>:
    106e:	2f 3e 00                                            />.

00001071 <_ZZ12processMCodeiE3__c_42>:
    1071:	4d 31 30 00                                         M10.

00001075 <_ZZ12processMCodeiE3__c_41>:
    1075:	3c 00                                               <.

00001077 <_ZZ12processMCodeiE3__c_40>:
    1077:	2f 3e 00                                            />.

0000107a <_ZZ12processMCodeiE3__c_39>:
    107a:	4d 31 30 00                                         M10.

0000107e <_ZZ12processMCodeiE3__c_38>:
    107e:	3c 00                                               <.

00001080 <_ZZ12processMCodeiE3__c_37>:
    1080:	2f 3e 00                                            />.

00001083 <_ZZ12processMCodeiE3__c_36>:
    1083:	4d 39 00                                            M9.

00001086 <_ZZ12processMCodeiE3__c_35>:
    1086:	3c 00                                               <.

00001088 <_ZZ12processMCodeiE3__c_34>:
    1088:	2f 3e 00                                            />.

0000108b <_ZZ12processMCodeiE3__c_33>:
    108b:	4d 38 00                                            M8.

0000108e <_ZZ12processMCodeiE3__c_32>:
    108e:	3c 00                                               <.

00001090 <_ZZ12processMCodeiE3__c_31>:
    1090:	2f 3e 00                                            />.

00001093 <_ZZ12processMCodeiE3__c_30>:
    1093:	4d 38 00                                            M8.

00001096 <_ZZ12processMCodeiE3__c_29>:
    1096:	3c 00                                               <.

00001098 <_ZZ12processMCodeiE3__c_28>:
    1098:	2f 3e 00                                            />.

0000109b <_ZZ12processMCodeiE3__c_27>:
    109b:	4d 37 00                                            M7.

0000109e <_ZZ12processMCodeiE3__c_26>:
    109e:	3c 00                                               <.

000010a0 <_ZZ12processMCodeiE3__c_25>:
    10a0:	2f 3e 00                                            />.

000010a3 <_ZZ12processMCodeiE3__c_24>:
    10a3:	4d 37 00                                            M7.

000010a6 <_ZZ12processMCodeiE3__c_23>:
    10a6:	3c 00                                               <.

000010a8 <_ZZ12processMCodeiE3__c_22>:
    10a8:	2f 3e 00                                            />.

000010ab <_ZZ12processMCodeiE3__c_21>:
    10ab:	4d 36 00                                            M6.

000010ae <_ZZ12processMCodeiE3__c_20>:
    10ae:	3c 00                                               <.

000010b0 <_ZZ12processMCodeiE3__c_19>:
    10b0:	2f 3e 00                                            />.

000010b3 <_ZZ12processMCodeiE3__c_18>:
    10b3:	4d 36 00                                            M6.

000010b6 <_ZZ12processMCodeiE3__c_17>:
    10b6:	3c 00                                               <.

000010b8 <_ZZ12processMCodeiE3__c_16>:
    10b8:	2f 3e 00                                            />.

000010bb <_ZZ12processMCodeiE3__c_15>:
    10bb:	4d 35 00                                            M5.

000010be <_ZZ12processMCodeiE3__c_14>:
    10be:	3c 00                                               <.

000010c0 <_ZZ12processMCodeiE3__c_13>:
    10c0:	2f 3e 00                                            />.

000010c3 <_ZZ12processMCodeiE3__c_12>:
    10c3:	4d 34 00                                            M4.

000010c6 <_ZZ12processMCodeiE3__c_11>:
    10c6:	3c 00                                               <.

000010c8 <_ZZ12processMCodeiE3__c_10>:
    10c8:	2f 3e 00                                            />.

000010cb <_ZZ12processMCodeiE3__c_9>:
    10cb:	4d 33 00                                            M3.

000010ce <_ZZ12processMCodeiE3__c_8>:
    10ce:	3c 00                                               <.

000010d0 <_ZZ12processMCodeiE3__c_7>:
    10d0:	2f 3e 00                                            />.

000010d3 <_ZZ12processMCodeiE3__c_6>:
    10d3:	4d 32 00                                            M2.

000010d6 <_ZZ12processMCodeiE3__c_5>:
    10d6:	3c 00                                               <.

000010d8 <_ZZ12processMCodeiE3__c_4>:
    10d8:	2f 3e 00                                            />.

000010db <_ZZ12processMCodeiE3__c_3>:
    10db:	4d 31 00                                            M1.

000010de <_ZZ12processMCodeiE3__c_2>:
    10de:	3c 00                                               <.

000010e0 <_ZZ12processMCodeiE3__c_1>:
    10e0:	2f 3e 00                                            />.

000010e3 <_ZZ12processMCodeiE3__c_0>:
    10e3:	4d 30 00                                            M0.

000010e6 <_ZZ12processMCodeiE3__c>:
    10e6:	3c 00                                               <.

000010e8 <_ZZ12processGCodeiE3__c_34>:
    10e8:	2f 3e 00                                            />.

000010eb <_ZZ12processGCodeiE3__c_33>:
    10eb:	55 6e 6b 6e 6f 77 6e 20 47 20 63 6f 64 65 20 00     Unknown G code .

000010fb <_ZZ12processGCodeiE3__c_32>:
    10fb:	3c 00                                               <.

000010fd <_ZZ12processGCodeiE3__c_31>:
    10fd:	2f 3e 00                                            />.

00001100 <_ZZ12processGCodeiE3__c_30>:
    1100:	47 32 30 33 00                                      G203.

00001105 <_ZZ12processGCodeiE3__c_29>:
    1105:	3c 00                                               <.

00001107 <_ZZ12processGCodeiE3__c_28>:
    1107:	2f 3e 00                                            />.

0000110a <_ZZ12processGCodeiE3__c_27>:
    110a:	47 32 30 32 00                                      G202.

0000110f <_ZZ12processGCodeiE3__c_26>:
    110f:	3c 00                                               <.

00001111 <_ZZ12processGCodeiE3__c_25>:
    1111:	2f 3e 00                                            />.

00001114 <_ZZ12processGCodeiE3__c_24>:
    1114:	47 32 30 31 00                                      G201.

00001119 <_ZZ12processGCodeiE3__c_23>:
    1119:	3c 00                                               <.

0000111b <_ZZ12processGCodeiE3__c_22>:
    111b:	2f 3e 00                                            />.

0000111e <_ZZ12processGCodeiE3__c_21>:
    111e:	47 32 30 30 00                                      G200.

00001123 <_ZZ12processGCodeiE3__c_20>:
    1123:	3c 00                                               <.

00001125 <_ZZ12processGCodeiE3__c_19>:
    1125:	2f 3e 00                                            />.

00001128 <_ZZ12processGCodeiE3__c_18>:
    1128:	47 31 30 30 00                                      G100.

0000112d <_ZZ12processGCodeiE3__c_17>:
    112d:	3c 00                                               <.

0000112f <_ZZ12processGCodeiE3__c_16>:
    112f:	2f 3e 00                                            />.

00001132 <_ZZ12processGCodeiE3__c_15>:
    1132:	47 39 39 00                                         G99.

00001136 <_ZZ12processGCodeiE3__c_14>:
    1136:	3c 00                                               <.

00001138 <_ZZ12processGCodeiE3__c_13>:
    1138:	2f 3e 00                                            />.

0000113b <_ZZ12processGCodeiE3__c_12>:
    113b:	47 35 00                                            G5.

0000113e <_ZZ12processGCodeiE3__c_11>:
    113e:	3c 00                                               <.

00001140 <_ZZ12processGCodeiE3__c_10>:
    1140:	2f 3e 00                                            />.

00001143 <_ZZ12processGCodeiE3__c_9>:
    1143:	42 61 64 20 50 57 4d 20 44 72 69 76 65 72 20 63     Bad PWM Driver c
    1153:	6f 6d 6d 61 6e 64 20 00                             ommand .

0000115b <_ZZ12processGCodeiE3__c_8>:
    115b:	3c 00                                               <.

0000115d <_ZZ12processGCodeiE3__c_7>:
    115d:	2f 3e 00                                            />.

00001160 <_ZZ12processGCodeiE3__c_6>:
    1160:	47 35 00                                            G5.

00001163 <_ZZ12processGCodeiE3__c_5>:
    1163:	3c 00                                               <.

00001165 <_ZZ12processGCodeiE3__c_4>:
    1165:	2f 3e 00                                            />.

00001168 <_ZZ12processGCodeiE3__c_3>:
    1168:	42 61 64 20 4d 6f 74 6f 72 20 63 6f 6d 6d 61 6e     Bad Motor comman
    1178:	64 20 00                                            d .

0000117b <_ZZ12processGCodeiE3__c_2>:
    117b:	3c 00                                               <.

0000117d <_ZZ12processGCodeiE3__c_1>:
    117d:	2f 3e 00                                            />.

00001180 <_ZZ12processGCodeiE3__c_0>:
    1180:	47 34 00                                            G4.

00001183 <_ZZ12processGCodeiE3__c>:
    1183:	3c 00                                               <.

00001185 <_ZZ16process_commandsvE3__c_1>:
    1185:	2f 3e 00                                            />.

00001188 <_ZZ16process_commandsvE3__c_0>:
    1188:	4e 65 69 74 68 65 72 20 47 20 6e 6f 72 20 4d 20     Neither G nor M 
    1198:	63 6f 64 65 20 66 6f 75 6e 64 20 00                 code found .

000011a4 <_ZZ16process_commandsvE3__c>:
    11a4:	3c 00                                               <.

000011a6 <_ZZ11get_commandvE3__c_14>:
    11a6:	2f 3e 00                                            />.

000011a9 <_ZZ11get_commandvE3__c_13>:
    11a9:	43 6f 6e 74 72 6f 6c 6c 65 72 20 73 74 6f 70 70     Controller stopp
    11b9:	65 64 20 64 75 65 20 74 6f 20 65 72 72 6f 72 73     ed due to errors
	...

000011ca <_ZZ11get_commandvE3__c_12>:
    11ca:	3c 00                                               <.

000011cc <_ZZ11get_commandvE3__c_11>:
    11cc:	2f 3e 00                                            />.

000011cf <_ZZ11get_commandvE3__c_10>:
    11cf:	4e 6f 20 4c 69 6e 65 20 4e 75 6d 62 65 72 20 77     No Line Number w
    11df:	69 74 68 20 63 68 65 63 6b 73 75 6d 2c 20 4c 61     ith checksum, La
    11ef:	73 74 20 4c 69 6e 65 3a 20 00                       st Line: .

000011f9 <_ZZ11get_commandvE3__c_9>:
    11f9:	3c 00                                               <.

000011fb <_ZZ11get_commandvE3__c_8>:
    11fb:	2f 3e 00                                            />.

000011fe <_ZZ11get_commandvE3__c_7>:
    11fe:	4e 6f 20 43 68 65 63 6b 73 75 6d 20 77 69 74 68     No Checksum with
    120e:	20 6c 69 6e 65 20 6e 75 6d 62 65 72 2c 20 4c 61      line number, La
    121e:	73 74 20 4c 69 6e 65 3a 20 00                       st Line: .

00001228 <_ZZ11get_commandvE3__c_6>:
    1228:	3c 00                                               <.

0000122a <_ZZ11get_commandvE3__c_5>:
    122a:	2f 3e 00                                            />.

0000122d <_ZZ11get_commandvE3__c_4>:
    122d:	63 68 65 63 6b 73 75 6d 20 6d 69 73 6d 61 74 63     checksum mismatc
    123d:	68 2c 20 4c 61 73 74 20 4c 69 6e 65 3a 20 00        h, Last Line: .

0000124c <_ZZ11get_commandvE3__c_3>:
    124c:	3c 00                                               <.

0000124e <_ZZ11get_commandvE3__c_2>:
    124e:	2f 3e 00                                            />.

00001251 <_ZZ11get_commandvE3__c_1>:
    1251:	4c 69 6e 65 20 4e 75 6d 62 65 72 20 69 73 20 6e     Line Number is n
    1261:	6f 74 20 4c 61 73 74 20 4c 69 6e 65 20 4e 75 6d     ot Last Line Num
    1271:	62 65 72 2b 31 2c 20 4c 61 73 74 20 4c 69 6e 65     ber+1, Last Line
    1281:	3a 20 00                                            : .

00001284 <_ZZ11get_commandvE3__c_0>:
    1284:	3c 00                                               <.

00001286 <_ZZ11get_commandvE3__c>:
    1286:	4d 31 31 30 00                                      M110.

0000128b <_ZL24digital_pin_to_timer_PGM>:
    128b:	00 00 08 09 02 07 0a 0b 0c 06 05 03 04 01 00 00     ................
	...
    12b7:	10 0f 0e 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000012d1 <_ZL27digital_pin_to_bit_mask_PGM>:
    12d1:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
    12e1:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
    12f1:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
    1301:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
    1311:	04 08 10 20 40 80                                   ... @.

00001317 <_ZL23digital_pin_to_port_PGM>:
    1317:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
    1327:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
    1337:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
    1347:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
    1357:	0b 0b 0b 0b 0b 0b                                   ......

0000135d <_ZL17port_to_input_PGM>:
    135d:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
    136d:	00 01 00 00 03 01 06 01 09 01                       ..........

00001377 <_ZL18port_to_output_PGM>:
    1377:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
    1387:	02 01 00 00 05 01 08 01 0b 01                       ..........

00001391 <_ZL16port_to_mode_PGM>:
    1391:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
    13a1:	01 01 00 00 04 01 07 01 0a 01                       ..........

000013ab <_ZL24digital_pin_to_timer_PGM>:
    13ab:	00 00 08 09 02 07 0a 0b 0c 06 05 03 04 01 00 00     ................
	...
    13d7:	10 0f 0e 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000013f1 <_ZL27digital_pin_to_bit_mask_PGM>:
    13f1:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
    1401:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
    1411:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
    1421:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
    1431:	04 08 10 20 40 80                                   ... @.

00001437 <_ZL23digital_pin_to_port_PGM>:
    1437:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
    1447:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
    1457:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
    1467:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
    1477:	0b 0b 0b 0b 0b 0b                                   ......

0000147d <_ZL17port_to_input_PGM>:
    147d:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
    148d:	00 01 00 00 03 01 06 01 09 01                       ..........

00001497 <_ZL18port_to_output_PGM>:
    1497:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
    14a7:	02 01 00 00 05 01 08 01 0b 01                       ..........

000014b1 <_ZL16port_to_mode_PGM>:
    14b1:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
    14c1:	01 01 00 00 04 01 07 01 0a 01                       ..........

000014cb <_ZL24digital_pin_to_timer_PGM>:
    14cb:	00 00 08 09 02 07 0a 0b 0c 06 05 03 04 01 00 00     ................
	...
    14f7:	10 0f 0e 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00001511 <_ZL27digital_pin_to_bit_mask_PGM>:
    1511:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
    1521:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
    1531:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
    1541:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
    1551:	04 08 10 20 40 80                                   ... @.

00001557 <_ZL23digital_pin_to_port_PGM>:
    1557:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
    1567:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
    1577:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
    1587:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
    1597:	0b 0b 0b 0b 0b 0b                                   ......

0000159d <_ZL18port_to_output_PGM>:
    159d:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
    15ad:	02 01 00 00 05 01 08 01 0b 01                       ..........

000015b7 <_ZL16port_to_mode_PGM>:
    15b7:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
    15c7:	01 01 00 00 04 01 07 01 0a 01                       ..........

000015d1 <_ZL27digital_pin_to_bit_mask_PGM>:
    15d1:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
    15e1:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
    15f1:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
    1601:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
    1611:	04 08 10 20 40 80                                   ... @.

00001617 <_ZL23digital_pin_to_port_PGM>:
    1617:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
    1627:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
    1637:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
    1647:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
    1657:	0b 0b 0b 0b 0b 0b                                   ......

0000165d <_ZL17port_to_input_PGM>:
    165d:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
    166d:	00 01 00 00 03 01 06 01 09 01                       ..........

00001677 <_ZL24digital_pin_to_timer_PGM>:
    1677:	00 00 08 09 02 07 0a 0b 0c 06 05 03 04 01 00 00     ................
	...
    16a3:	10 0f 0e 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000016bd <_ZL27digital_pin_to_bit_mask_PGM>:
    16bd:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
    16cd:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
    16dd:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
    16ed:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
    16fd:	04 08 10 20 40 80                                   ... @.

00001703 <_ZL23digital_pin_to_port_PGM>:
    1703:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
    1713:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
    1723:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
    1733:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
    1743:	0b 0b 0b 0b 0b 0b                                   ......

00001749 <_ZL18port_to_output_PGM>:
    1749:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
    1759:	02 01 00 00 05 01 08 01 0b 01                       ..........

00001763 <_ZL16port_to_mode_PGM>:
    1763:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
    1773:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

0000177e <__ctors_start>:
    177e:	5e 1a       	sub	r5, r30
    1780:	ef 1a       	sub	r14, r31
    1782:	80 1b       	sub	r24, r16
    1784:	11 1c       	adc	r1, r1
    1786:	e7 42       	sbci	r30, 0x27	; 39
    1788:	f3 9e       	mul	r15, r19

0000178a <__ctors_end>:
    178a:	ee 42       	sbci	r30, 0x2E	; 46

0000178c <__dtors_end>:
    178c:	11 24       	eor	r1, r1
    178e:	1f be       	out	0x3f, r1	; 63
    1790:	cf ef       	ldi	r28, 0xFF	; 255
    1792:	d1 e2       	ldi	r29, 0x21	; 33
    1794:	de bf       	out	0x3e, r29	; 62
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	00 e0       	ldi	r16, 0x00	; 0
    179a:	0c bf       	out	0x3c, r16	; 60

0000179c <__do_copy_data>:
    179c:	1a e0       	ldi	r17, 0x0A	; 10
    179e:	a0 e0       	ldi	r26, 0x00	; 0
    17a0:	b2 e0       	ldi	r27, 0x02	; 2
    17a2:	e2 ea       	ldi	r30, 0xA2	; 162
    17a4:	f5 e6       	ldi	r31, 0x65	; 101
    17a6:	01 e0       	ldi	r16, 0x01	; 1
    17a8:	0b bf       	out	0x3b, r16	; 59
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <__do_copy_data+0x14>
    17ac:	07 90       	elpm	r0, Z+
    17ae:	0d 92       	st	X+, r0
    17b0:	a8 30       	cpi	r26, 0x08	; 8
    17b2:	b1 07       	cpc	r27, r17
    17b4:	d9 f7       	brne	.-10     	; 0x17ac <__do_copy_data+0x10>

000017b6 <__do_clear_bss>:
    17b6:	28 e1       	ldi	r18, 0x18	; 24
    17b8:	a8 e0       	ldi	r26, 0x08	; 8
    17ba:	ba e0       	ldi	r27, 0x0A	; 10
    17bc:	01 c0       	rjmp	.+2      	; 0x17c0 <.do_clear_bss_start>

000017be <.do_clear_bss_loop>:
    17be:	1d 92       	st	X+, r1

000017c0 <.do_clear_bss_start>:
    17c0:	ac 31       	cpi	r26, 0x1C	; 28
    17c2:	b2 07       	cpc	r27, r18
    17c4:	e1 f7       	brne	.-8      	; 0x17be <.do_clear_bss_loop>

000017c6 <__do_global_ctors>:
    17c6:	1b e0       	ldi	r17, 0x0B	; 11
    17c8:	c5 ec       	ldi	r28, 0xC5	; 197
    17ca:	db e0       	ldi	r29, 0x0B	; 11
    17cc:	00 e0       	ldi	r16, 0x00	; 0
    17ce:	06 c0       	rjmp	.+12     	; 0x17dc <__do_global_ctors+0x16>
    17d0:	21 97       	sbiw	r28, 0x01	; 1
    17d2:	01 09       	sbc	r16, r1
    17d4:	80 2f       	mov	r24, r16
    17d6:	fe 01       	movw	r30, r28
    17d8:	0e 94 43 a7 	call	0x14e86	; 0x14e86 <__tablejump2__>
    17dc:	cf 3b       	cpi	r28, 0xBF	; 191
    17de:	d1 07       	cpc	r29, r17
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	08 07       	cpc	r16, r24
    17e4:	a9 f7       	brne	.-22     	; 0x17d0 <__do_global_ctors+0xa>
    17e6:	0e 94 3e 1c 	call	0x387c	; 0x387c <main>
    17ea:	0c 94 bf b2 	jmp	0x1657e	; 0x1657e <__do_global_dtors>

000017ee <__bad_interrupt>:
    17ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000017f2 <_ZN18AbstractPWMControl11resetLevelsEv>:
* Author: Groff
*/
#include "AbstractPWMControl.h"

// functions
void AbstractPWMControl::resetLevels(void) {
    17f2:	fc 01       	movw	r30, r24
    17f4:	e7 5a       	subi	r30, 0xA7	; 167
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	83 59       	subi	r24, 0x93	; 147
    17fa:	9f 4f       	sbci	r25, 0xFF	; 255
	for(int i = 0; i < 10; i++) pwmLevel[i] = 0; // all channels down
    17fc:	11 92       	st	Z+, r1
    17fe:	11 92       	st	Z+, r1
    1800:	e8 17       	cp	r30, r24
    1802:	f9 07       	cpc	r31, r25
    1804:	d9 f7       	brne	.-10     	; 0x17fc <_ZN18AbstractPWMControl11resetLevelsEv+0xa>
}
    1806:	08 95       	ret

00001808 <_ZN18AbstractPWMControlD1Ev>:

// virtual destructor
AbstractPWMControl::~AbstractPWMControl()
    1808:	08 95       	ret

0000180a <_ZN12AccelStepper4stepEl>:
// Blocks until the new target position is reached
void AccelStepper::runToNewPosition(long position)
{
	moveTo(position);
	runToPosition();
}
    180a:	0f 93       	push	r16
    180c:	1f 93       	push	r17
    180e:	fc 01       	movw	r30, r24
    1810:	03 81       	ldd	r16, Z+3	; 0x03
    1812:	10 e0       	ldi	r17, 0x00	; 0
    1814:	09 30       	cpi	r16, 0x09	; 9
    1816:	11 05       	cpc	r17, r1
    1818:	08 f0       	brcs	.+2      	; 0x181c <_ZN12AccelStepper4stepEl+0x12>
    181a:	46 c0       	rjmp	.+140    	; 0x18a8 <_ZN12AccelStepper4stepEl+0x9e>
    181c:	dc 01       	movw	r26, r24
    181e:	f8 01       	movw	r30, r16
    1820:	88 27       	eor	r24, r24
    1822:	ee 58       	subi	r30, 0x8E	; 142
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	8f 4f       	sbci	r24, 0xFF	; 255
    1828:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
    182c:	ed 91       	ld	r30, X+
    182e:	fc 91       	ld	r31, X
    1830:	11 97       	sbiw	r26, 0x01	; 1
    1832:	00 84       	ldd	r0, Z+8	; 0x08
    1834:	f1 85       	ldd	r31, Z+9	; 0x09
    1836:	e0 2d       	mov	r30, r0
    1838:	cd 01       	movw	r24, r26
    183a:	19 95       	eicall
    183c:	35 c0       	rjmp	.+106    	; 0x18a8 <_ZN12AccelStepper4stepEl+0x9e>
    183e:	ed 91       	ld	r30, X+
    1840:	fc 91       	ld	r31, X
    1842:	11 97       	sbiw	r26, 0x01	; 1
    1844:	02 84       	ldd	r0, Z+10	; 0x0a
    1846:	f3 85       	ldd	r31, Z+11	; 0x0b
    1848:	e0 2d       	mov	r30, r0
    184a:	cd 01       	movw	r24, r26
    184c:	19 95       	eicall
    184e:	2c c0       	rjmp	.+88     	; 0x18a8 <_ZN12AccelStepper4stepEl+0x9e>
    1850:	ed 91       	ld	r30, X+
    1852:	fc 91       	ld	r31, X
    1854:	11 97       	sbiw	r26, 0x01	; 1
    1856:	04 84       	ldd	r0, Z+12	; 0x0c
    1858:	f5 85       	ldd	r31, Z+13	; 0x0d
    185a:	e0 2d       	mov	r30, r0
    185c:	cd 01       	movw	r24, r26
    185e:	19 95       	eicall
    1860:	23 c0       	rjmp	.+70     	; 0x18a8 <_ZN12AccelStepper4stepEl+0x9e>
    1862:	ed 91       	ld	r30, X+
    1864:	fc 91       	ld	r31, X
    1866:	11 97       	sbiw	r26, 0x01	; 1
    1868:	06 84       	ldd	r0, Z+14	; 0x0e
    186a:	f7 85       	ldd	r31, Z+15	; 0x0f
    186c:	e0 2d       	mov	r30, r0
    186e:	cd 01       	movw	r24, r26
    1870:	19 95       	eicall
    1872:	1a c0       	rjmp	.+52     	; 0x18a8 <_ZN12AccelStepper4stepEl+0x9e>
    1874:	ed 91       	ld	r30, X+
    1876:	fc 91       	ld	r31, X
    1878:	11 97       	sbiw	r26, 0x01	; 1
    187a:	00 88       	ldd	r0, Z+16	; 0x10
    187c:	f1 89       	ldd	r31, Z+17	; 0x11
    187e:	e0 2d       	mov	r30, r0
    1880:	cd 01       	movw	r24, r26
    1882:	19 95       	eicall
    1884:	11 c0       	rjmp	.+34     	; 0x18a8 <_ZN12AccelStepper4stepEl+0x9e>
    1886:	ed 91       	ld	r30, X+
    1888:	fc 91       	ld	r31, X
    188a:	11 97       	sbiw	r26, 0x01	; 1
    188c:	02 88       	ldd	r0, Z+18	; 0x12
    188e:	f3 89       	ldd	r31, Z+19	; 0x13
    1890:	e0 2d       	mov	r30, r0
    1892:	cd 01       	movw	r24, r26
    1894:	19 95       	eicall
    1896:	08 c0       	rjmp	.+16     	; 0x18a8 <_ZN12AccelStepper4stepEl+0x9e>
    1898:	ed 91       	ld	r30, X+
    189a:	fc 91       	ld	r31, X
    189c:	11 97       	sbiw	r26, 0x01	; 1
    189e:	04 88       	ldd	r0, Z+20	; 0x14
    18a0:	f5 89       	ldd	r31, Z+21	; 0x15
    18a2:	e0 2d       	mov	r30, r0
    18a4:	cd 01       	movw	r24, r26
    18a6:	19 95       	eicall
    18a8:	1f 91       	pop	r17
    18aa:	0f 91       	pop	r16
    18ac:	08 95       	ret

000018ae <_ZN12AccelStepper5step0El>:
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
    18b2:	ec 01       	movw	r28, r24
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	a9 01       	movw	r20, r18
    18ba:	6c 89       	ldd	r22, Y+20	; 0x14
    18bc:	7d 89       	ldd	r23, Y+21	; 0x15
    18be:	8e 89       	ldd	r24, Y+22	; 0x16
    18c0:	9f 89       	ldd	r25, Y+23	; 0x17
    18c2:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <__gesf2>
    18c6:	18 16       	cp	r1, r24
    18c8:	24 f4       	brge	.+8      	; 0x18d2 <_ZN12AccelStepper5step0El+0x24>
    18ca:	e8 a9       	ldd	r30, Y+48	; 0x30
    18cc:	f9 a9       	ldd	r31, Y+49	; 0x31
    18ce:	19 95       	eicall
    18d0:	03 c0       	rjmp	.+6      	; 0x18d8 <_ZN12AccelStepper5step0El+0x2a>
    18d2:	ea a9       	ldd	r30, Y+50	; 0x32
    18d4:	fb a9       	ldd	r31, Y+51	; 0x33
    18d6:	19 95       	eicall
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	08 95       	ret

000018de <_ZN12AccelStepper5step1El>:
    18de:	4f 92       	push	r4
    18e0:	5f 92       	push	r5
    18e2:	6f 92       	push	r6
    18e4:	7f 92       	push	r7
    18e6:	8f 92       	push	r8
    18e8:	9f 92       	push	r9
    18ea:	af 92       	push	r10
    18ec:	bf 92       	push	r11
    18ee:	cf 92       	push	r12
    18f0:	df 92       	push	r13
    18f2:	ef 92       	push	r14
    18f4:	ff 92       	push	r15
    18f6:	1f 93       	push	r17
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	ec 01       	movw	r28, r24
    18fe:	e8 81       	ld	r30, Y
    1900:	f9 81       	ldd	r31, Y+1	; 0x01
    1902:	04 80       	ldd	r0, Z+4	; 0x04
    1904:	f5 81       	ldd	r31, Z+5	; 0x05
    1906:	e0 2d       	mov	r30, r0
    1908:	6a 81       	ldd	r22, Y+2	; 0x02
    190a:	61 11       	cpse	r22, r1
    190c:	62 e0       	ldi	r22, 0x02	; 2
    190e:	ce 01       	movw	r24, r28
    1910:	19 95       	eicall
    1912:	e8 81       	ld	r30, Y
    1914:	f9 81       	ldd	r31, Y+1	; 0x01
    1916:	04 80       	ldd	r0, Z+4	; 0x04
    1918:	f5 81       	ldd	r31, Z+5	; 0x05
    191a:	e0 2d       	mov	r30, r0
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	81 11       	cpse	r24, r1
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <_ZN12AccelStepper5step1El+0x48>
    1922:	61 e0       	ldi	r22, 0x01	; 1
    1924:	01 c0       	rjmp	.+2      	; 0x1928 <_ZN12AccelStepper5step1El+0x4a>
    1926:	63 e0       	ldi	r22, 0x03	; 3
    1928:	ce 01       	movw	r24, r28
    192a:	19 95       	eicall
    192c:	6c a5       	ldd	r22, Y+44	; 0x2c
    192e:	7d a5       	ldd	r23, Y+45	; 0x2d
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	0e 94 6f a5 	call	0x14ade	; 0x14ade <__floatunsisf>
    1938:	6b 01       	movw	r12, r22
    193a:	7c 01       	movw	r14, r24
    193c:	2b ea       	ldi	r18, 0xAB	; 171
    193e:	3a ea       	ldi	r19, 0xAA	; 170
    1940:	4a ea       	ldi	r20, 0xAA	; 170
    1942:	50 e4       	ldi	r21, 0x40	; 64
    1944:	0e 94 25 a6 	call	0x14c4a	; 0x14c4a <__mulsf3>
    1948:	4b 01       	movw	r8, r22
    194a:	5c 01       	movw	r10, r24
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e8       	ldi	r20, 0x80	; 128
    1952:	5f e3       	ldi	r21, 0x3F	; 63
    1954:	0e 94 d2 a4 	call	0x149a4	; 0x149a4 <__cmpsf2>
    1958:	88 23       	and	r24, r24
    195a:	0c f4       	brge	.+2      	; 0x195e <_ZN12AccelStepper5step1El+0x80>
    195c:	70 c0       	rjmp	.+224    	; 0x1a3e <_ZN12AccelStepper5step1El+0x160>
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e8       	ldi	r20, 0x80	; 128
    1964:	50 e4       	ldi	r21, 0x40	; 64
    1966:	c7 01       	movw	r24, r14
    1968:	b6 01       	movw	r22, r12
    196a:	0e 94 25 a6 	call	0x14c4a	; 0x14c4a <__mulsf3>
    196e:	2b 01       	movw	r4, r22
    1970:	3c 01       	movw	r6, r24
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	3f ef       	ldi	r19, 0xFF	; 255
    1976:	4f e7       	ldi	r20, 0x7F	; 127
    1978:	57 e4       	ldi	r21, 0x47	; 71
    197a:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <__gesf2>
    197e:	18 16       	cp	r1, r24
    1980:	0c f0       	brlt	.+2      	; 0x1984 <_ZN12AccelStepper5step1El+0xa6>
    1982:	45 c0       	rjmp	.+138    	; 0x1a0e <_ZN12AccelStepper5step1El+0x130>
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	4a e7       	ldi	r20, 0x7A	; 122
    198a:	54 e4       	ldi	r21, 0x44	; 68
    198c:	c7 01       	movw	r24, r14
    198e:	b6 01       	movw	r22, r12
    1990:	0e 94 d6 a4 	call	0x149ac	; 0x149ac <__divsf3>
    1994:	4b 01       	movw	r8, r22
    1996:	5c 01       	movw	r10, r24
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	4a e7       	ldi	r20, 0x7A	; 122
    199e:	55 e4       	ldi	r21, 0x45	; 69
    19a0:	0e 94 25 a6 	call	0x14c4a	; 0x14c4a <__mulsf3>
    19a4:	6b 01       	movw	r12, r22
    19a6:	7c 01       	movw	r14, r24
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e8       	ldi	r20, 0x80	; 128
    19ae:	5f e3       	ldi	r21, 0x3F	; 63
    19b0:	0e 94 d2 a4 	call	0x149a4	; 0x149a4 <__cmpsf2>
    19b4:	88 23       	and	r24, r24
    19b6:	2c f1       	brlt	.+74     	; 0x1a02 <_ZN12AccelStepper5step1El+0x124>
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	3f ef       	ldi	r19, 0xFF	; 255
    19bc:	4f e7       	ldi	r20, 0x7F	; 127
    19be:	57 e4       	ldi	r21, 0x47	; 71
    19c0:	c7 01       	movw	r24, r14
    19c2:	b6 01       	movw	r22, r12
    19c4:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <__gesf2>
    19c8:	18 16       	cp	r1, r24
    19ca:	b4 f4       	brge	.+44     	; 0x19f8 <_ZN12AccelStepper5step1El+0x11a>
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e2       	ldi	r20, 0x20	; 32
    19d2:	51 e4       	ldi	r21, 0x41	; 65
    19d4:	c5 01       	movw	r24, r10
    19d6:	b4 01       	movw	r22, r8
    19d8:	0e 94 25 a6 	call	0x14c4a	; 0x14c4a <__mulsf3>
    19dc:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    19e0:	61 15       	cp	r22, r1
    19e2:	71 05       	cpc	r23, r1
    19e4:	69 f1       	breq	.+90     	; 0x1a40 <_ZN12AccelStepper5step1El+0x162>
    19e6:	20 e9       	ldi	r18, 0x90	; 144
    19e8:	31 e0       	ldi	r19, 0x01	; 1
    19ea:	c9 01       	movw	r24, r18
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	f1 f7       	brne	.-4      	; 0x19ec <_ZN12AccelStepper5step1El+0x10e>
    19f0:	61 50       	subi	r22, 0x01	; 1
    19f2:	71 09       	sbc	r23, r1
    19f4:	d1 f7       	brne	.-12     	; 0x19ea <_ZN12AccelStepper5step1El+0x10c>
    19f6:	24 c0       	rjmp	.+72     	; 0x1a40 <_ZN12AccelStepper5step1El+0x162>
    19f8:	c7 01       	movw	r24, r14
    19fa:	b6 01       	movw	r22, r12
    19fc:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <_ZN12AccelStepper5step1El+0x128>
    1a02:	61 e0       	ldi	r22, 0x01	; 1
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	cb 01       	movw	r24, r22
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	f1 f7       	brne	.-4      	; 0x1a08 <_ZN12AccelStepper5step1El+0x12a>
    1a0c:	19 c0       	rjmp	.+50     	; 0x1a40 <_ZN12AccelStepper5step1El+0x162>
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	4f e7       	ldi	r20, 0x7F	; 127
    1a14:	53 e4       	ldi	r21, 0x43	; 67
    1a16:	c5 01       	movw	r24, r10
    1a18:	b4 01       	movw	r22, r8
    1a1a:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <__gesf2>
    1a1e:	18 16       	cp	r1, r24
    1a20:	44 f4       	brge	.+16     	; 0x1a32 <_ZN12AccelStepper5step1El+0x154>
    1a22:	c3 01       	movw	r24, r6
    1a24:	b2 01       	movw	r22, r4
    1a26:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <_ZN12AccelStepper5step1El+0x14e>
    1a30:	0a c0       	rjmp	.+20     	; 0x1a46 <_ZN12AccelStepper5step1El+0x168>
    1a32:	c5 01       	movw	r24, r10
    1a34:	b4 01       	movw	r22, r8
    1a36:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    1a3a:	16 2f       	mov	r17, r22
    1a3c:	01 c0       	rjmp	.+2      	; 0x1a40 <_ZN12AccelStepper5step1El+0x162>
    1a3e:	11 e0       	ldi	r17, 0x01	; 1
    1a40:	61 2f       	mov	r22, r17
    1a42:	6a 95       	dec	r22
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <_ZN12AccelStepper5step1El+0x164>
    1a46:	e8 81       	ld	r30, Y
    1a48:	f9 81       	ldd	r31, Y+1	; 0x01
    1a4a:	04 80       	ldd	r0, Z+4	; 0x04
    1a4c:	f5 81       	ldd	r31, Z+5	; 0x05
    1a4e:	e0 2d       	mov	r30, r0
    1a50:	6a 81       	ldd	r22, Y+2	; 0x02
    1a52:	61 11       	cpse	r22, r1
    1a54:	62 e0       	ldi	r22, 0x02	; 2
    1a56:	ce 01       	movw	r24, r28
    1a58:	19 95       	eicall
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	1f 91       	pop	r17
    1a60:	ff 90       	pop	r15
    1a62:	ef 90       	pop	r14
    1a64:	df 90       	pop	r13
    1a66:	cf 90       	pop	r12
    1a68:	bf 90       	pop	r11
    1a6a:	af 90       	pop	r10
    1a6c:	9f 90       	pop	r9
    1a6e:	8f 90       	pop	r8
    1a70:	7f 90       	pop	r7
    1a72:	6f 90       	pop	r6
    1a74:	5f 90       	pop	r5
    1a76:	4f 90       	pop	r4
    1a78:	08 95       	ret

00001a7a <_ZN12AccelStepper5step2El>:
    1a7a:	43 70       	andi	r20, 0x03	; 3
    1a7c:	55 27       	eor	r21, r21
    1a7e:	66 27       	eor	r22, r22
    1a80:	77 27       	eor	r23, r23
    1a82:	41 30       	cpi	r20, 0x01	; 1
    1a84:	51 05       	cpc	r21, r1
    1a86:	61 05       	cpc	r22, r1
    1a88:	71 05       	cpc	r23, r1
    1a8a:	d1 f0       	breq	.+52     	; 0x1ac0 <_ZN12AccelStepper5step2El+0x46>
    1a8c:	2c f4       	brge	.+10     	; 0x1a98 <_ZN12AccelStepper5step2El+0x1e>
    1a8e:	45 2b       	or	r20, r21
    1a90:	46 2b       	or	r20, r22
    1a92:	47 2b       	or	r20, r23
    1a94:	61 f0       	breq	.+24     	; 0x1aae <_ZN12AccelStepper5step2El+0x34>
    1a96:	08 95       	ret
    1a98:	42 30       	cpi	r20, 0x02	; 2
    1a9a:	51 05       	cpc	r21, r1
    1a9c:	61 05       	cpc	r22, r1
    1a9e:	71 05       	cpc	r23, r1
    1aa0:	c1 f0       	breq	.+48     	; 0x1ad2 <_ZN12AccelStepper5step2El+0x58>
    1aa2:	43 30       	cpi	r20, 0x03	; 3
    1aa4:	51 05       	cpc	r21, r1
    1aa6:	61 05       	cpc	r22, r1
    1aa8:	71 05       	cpc	r23, r1
    1aaa:	e1 f0       	breq	.+56     	; 0x1ae4 <_ZN12AccelStepper5step2El+0x6a>
    1aac:	08 95       	ret
    1aae:	dc 01       	movw	r26, r24
    1ab0:	ed 91       	ld	r30, X+
    1ab2:	fc 91       	ld	r31, X
    1ab4:	04 80       	ldd	r0, Z+4	; 0x04
    1ab6:	f5 81       	ldd	r31, Z+5	; 0x05
    1ab8:	e0 2d       	mov	r30, r0
    1aba:	62 e0       	ldi	r22, 0x02	; 2
    1abc:	19 95       	eicall
    1abe:	08 95       	ret
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	ed 91       	ld	r30, X+
    1ac4:	fc 91       	ld	r31, X
    1ac6:	04 80       	ldd	r0, Z+4	; 0x04
    1ac8:	f5 81       	ldd	r31, Z+5	; 0x05
    1aca:	e0 2d       	mov	r30, r0
    1acc:	63 e0       	ldi	r22, 0x03	; 3
    1ace:	19 95       	eicall
    1ad0:	08 95       	ret
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	ed 91       	ld	r30, X+
    1ad6:	fc 91       	ld	r31, X
    1ad8:	04 80       	ldd	r0, Z+4	; 0x04
    1ada:	f5 81       	ldd	r31, Z+5	; 0x05
    1adc:	e0 2d       	mov	r30, r0
    1ade:	61 e0       	ldi	r22, 0x01	; 1
    1ae0:	19 95       	eicall
    1ae2:	08 95       	ret
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	ed 91       	ld	r30, X+
    1ae8:	fc 91       	ld	r31, X
    1aea:	04 80       	ldd	r0, Z+4	; 0x04
    1aec:	f5 81       	ldd	r31, Z+5	; 0x05
    1aee:	e0 2d       	mov	r30, r0
    1af0:	60 e0       	ldi	r22, 0x00	; 0
    1af2:	19 95       	eicall
    1af4:	08 95       	ret

00001af6 <_ZN12AccelStepper5step3El>:
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	ec 01       	movw	r28, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	ba 01       	movw	r22, r20
    1b00:	23 e0       	ldi	r18, 0x03	; 3
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e0       	ldi	r20, 0x00	; 0
    1b06:	50 e0       	ldi	r21, 0x00	; 0
    1b08:	0e 94 27 a7 	call	0x14e4e	; 0x14e4e <__divmodsi4>
    1b0c:	61 30       	cpi	r22, 0x01	; 1
    1b0e:	71 05       	cpc	r23, r1
    1b10:	81 05       	cpc	r24, r1
    1b12:	91 05       	cpc	r25, r1
    1b14:	91 f0       	breq	.+36     	; 0x1b3a <_ZN12AccelStepper5step3El+0x44>
    1b16:	62 30       	cpi	r22, 0x02	; 2
    1b18:	71 05       	cpc	r23, r1
    1b1a:	81 05       	cpc	r24, r1
    1b1c:	91 05       	cpc	r25, r1
    1b1e:	b1 f0       	breq	.+44     	; 0x1b4c <_ZN12AccelStepper5step3El+0x56>
    1b20:	67 2b       	or	r22, r23
    1b22:	68 2b       	or	r22, r24
    1b24:	69 2b       	or	r22, r25
    1b26:	d1 f4       	brne	.+52     	; 0x1b5c <_ZN12AccelStepper5step3El+0x66>
    1b28:	e8 81       	ld	r30, Y
    1b2a:	f9 81       	ldd	r31, Y+1	; 0x01
    1b2c:	04 80       	ldd	r0, Z+4	; 0x04
    1b2e:	f5 81       	ldd	r31, Z+5	; 0x05
    1b30:	e0 2d       	mov	r30, r0
    1b32:	64 e0       	ldi	r22, 0x04	; 4
    1b34:	ce 01       	movw	r24, r28
    1b36:	19 95       	eicall
    1b38:	11 c0       	rjmp	.+34     	; 0x1b5c <_ZN12AccelStepper5step3El+0x66>
    1b3a:	e8 81       	ld	r30, Y
    1b3c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b3e:	04 80       	ldd	r0, Z+4	; 0x04
    1b40:	f5 81       	ldd	r31, Z+5	; 0x05
    1b42:	e0 2d       	mov	r30, r0
    1b44:	61 e0       	ldi	r22, 0x01	; 1
    1b46:	ce 01       	movw	r24, r28
    1b48:	19 95       	eicall
    1b4a:	08 c0       	rjmp	.+16     	; 0x1b5c <_ZN12AccelStepper5step3El+0x66>
    1b4c:	e8 81       	ld	r30, Y
    1b4e:	f9 81       	ldd	r31, Y+1	; 0x01
    1b50:	04 80       	ldd	r0, Z+4	; 0x04
    1b52:	f5 81       	ldd	r31, Z+5	; 0x05
    1b54:	e0 2d       	mov	r30, r0
    1b56:	62 e0       	ldi	r22, 0x02	; 2
    1b58:	ce 01       	movw	r24, r28
    1b5a:	19 95       	eicall
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	08 95       	ret

00001b62 <_ZN12AccelStepper5step4El>:
    1b62:	43 70       	andi	r20, 0x03	; 3
    1b64:	55 27       	eor	r21, r21
    1b66:	66 27       	eor	r22, r22
    1b68:	77 27       	eor	r23, r23
    1b6a:	41 30       	cpi	r20, 0x01	; 1
    1b6c:	51 05       	cpc	r21, r1
    1b6e:	61 05       	cpc	r22, r1
    1b70:	71 05       	cpc	r23, r1
    1b72:	d1 f0       	breq	.+52     	; 0x1ba8 <_ZN12AccelStepper5step4El+0x46>
    1b74:	2c f4       	brge	.+10     	; 0x1b80 <_ZN12AccelStepper5step4El+0x1e>
    1b76:	45 2b       	or	r20, r21
    1b78:	46 2b       	or	r20, r22
    1b7a:	47 2b       	or	r20, r23
    1b7c:	61 f0       	breq	.+24     	; 0x1b96 <_ZN12AccelStepper5step4El+0x34>
    1b7e:	08 95       	ret
    1b80:	42 30       	cpi	r20, 0x02	; 2
    1b82:	51 05       	cpc	r21, r1
    1b84:	61 05       	cpc	r22, r1
    1b86:	71 05       	cpc	r23, r1
    1b88:	c1 f0       	breq	.+48     	; 0x1bba <_ZN12AccelStepper5step4El+0x58>
    1b8a:	43 30       	cpi	r20, 0x03	; 3
    1b8c:	51 05       	cpc	r21, r1
    1b8e:	61 05       	cpc	r22, r1
    1b90:	71 05       	cpc	r23, r1
    1b92:	e1 f0       	breq	.+56     	; 0x1bcc <_ZN12AccelStepper5step4El+0x6a>
    1b94:	08 95       	ret
    1b96:	dc 01       	movw	r26, r24
    1b98:	ed 91       	ld	r30, X+
    1b9a:	fc 91       	ld	r31, X
    1b9c:	04 80       	ldd	r0, Z+4	; 0x04
    1b9e:	f5 81       	ldd	r31, Z+5	; 0x05
    1ba0:	e0 2d       	mov	r30, r0
    1ba2:	65 e0       	ldi	r22, 0x05	; 5
    1ba4:	19 95       	eicall
    1ba6:	08 95       	ret
    1ba8:	dc 01       	movw	r26, r24
    1baa:	ed 91       	ld	r30, X+
    1bac:	fc 91       	ld	r31, X
    1bae:	04 80       	ldd	r0, Z+4	; 0x04
    1bb0:	f5 81       	ldd	r31, Z+5	; 0x05
    1bb2:	e0 2d       	mov	r30, r0
    1bb4:	66 e0       	ldi	r22, 0x06	; 6
    1bb6:	19 95       	eicall
    1bb8:	08 95       	ret
    1bba:	dc 01       	movw	r26, r24
    1bbc:	ed 91       	ld	r30, X+
    1bbe:	fc 91       	ld	r31, X
    1bc0:	04 80       	ldd	r0, Z+4	; 0x04
    1bc2:	f5 81       	ldd	r31, Z+5	; 0x05
    1bc4:	e0 2d       	mov	r30, r0
    1bc6:	6a e0       	ldi	r22, 0x0A	; 10
    1bc8:	19 95       	eicall
    1bca:	08 95       	ret
    1bcc:	dc 01       	movw	r26, r24
    1bce:	ed 91       	ld	r30, X+
    1bd0:	fc 91       	ld	r31, X
    1bd2:	04 80       	ldd	r0, Z+4	; 0x04
    1bd4:	f5 81       	ldd	r31, Z+5	; 0x05
    1bd6:	e0 2d       	mov	r30, r0
    1bd8:	69 e0       	ldi	r22, 0x09	; 9
    1bda:	19 95       	eicall
    1bdc:	08 95       	ret

00001bde <_ZN12AccelStepper5step6El>:
    1bde:	cf 93       	push	r28
    1be0:	df 93       	push	r29
    1be2:	ec 01       	movw	r28, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	ba 01       	movw	r22, r20
    1be8:	26 e0       	ldi	r18, 0x06	; 6
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	40 e0       	ldi	r20, 0x00	; 0
    1bee:	50 e0       	ldi	r21, 0x00	; 0
    1bf0:	0e 94 27 a7 	call	0x14e4e	; 0x14e4e <__divmodsi4>
    1bf4:	62 30       	cpi	r22, 0x02	; 2
    1bf6:	71 05       	cpc	r23, r1
    1bf8:	81 05       	cpc	r24, r1
    1bfa:	91 05       	cpc	r25, r1
    1bfc:	51 f1       	breq	.+84     	; 0x1c52 <_ZN12AccelStepper5step6El+0x74>
    1bfe:	5c f4       	brge	.+22     	; 0x1c16 <_ZN12AccelStepper5step6El+0x38>
    1c00:	61 15       	cp	r22, r1
    1c02:	71 05       	cpc	r23, r1
    1c04:	81 05       	cpc	r24, r1
    1c06:	91 05       	cpc	r25, r1
    1c08:	91 f0       	breq	.+36     	; 0x1c2e <_ZN12AccelStepper5step6El+0x50>
    1c0a:	61 30       	cpi	r22, 0x01	; 1
    1c0c:	71 05       	cpc	r23, r1
    1c0e:	81 05       	cpc	r24, r1
    1c10:	91 05       	cpc	r25, r1
    1c12:	b1 f0       	breq	.+44     	; 0x1c40 <_ZN12AccelStepper5step6El+0x62>
    1c14:	41 c0       	rjmp	.+130    	; 0x1c98 <_ZN12AccelStepper5step6El+0xba>
    1c16:	64 30       	cpi	r22, 0x04	; 4
    1c18:	71 05       	cpc	r23, r1
    1c1a:	81 05       	cpc	r24, r1
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	59 f1       	breq	.+86     	; 0x1c76 <_ZN12AccelStepper5step6El+0x98>
    1c20:	0c f1       	brlt	.+66     	; 0x1c64 <_ZN12AccelStepper5step6El+0x86>
    1c22:	65 30       	cpi	r22, 0x05	; 5
    1c24:	71 05       	cpc	r23, r1
    1c26:	81 05       	cpc	r24, r1
    1c28:	91 05       	cpc	r25, r1
    1c2a:	71 f1       	breq	.+92     	; 0x1c88 <_ZN12AccelStepper5step6El+0xaa>
    1c2c:	35 c0       	rjmp	.+106    	; 0x1c98 <_ZN12AccelStepper5step6El+0xba>
    1c2e:	e8 81       	ld	r30, Y
    1c30:	f9 81       	ldd	r31, Y+1	; 0x01
    1c32:	04 80       	ldd	r0, Z+4	; 0x04
    1c34:	f5 81       	ldd	r31, Z+5	; 0x05
    1c36:	e0 2d       	mov	r30, r0
    1c38:	64 e0       	ldi	r22, 0x04	; 4
    1c3a:	ce 01       	movw	r24, r28
    1c3c:	19 95       	eicall
    1c3e:	2c c0       	rjmp	.+88     	; 0x1c98 <_ZN12AccelStepper5step6El+0xba>
    1c40:	e8 81       	ld	r30, Y
    1c42:	f9 81       	ldd	r31, Y+1	; 0x01
    1c44:	04 80       	ldd	r0, Z+4	; 0x04
    1c46:	f5 81       	ldd	r31, Z+5	; 0x05
    1c48:	e0 2d       	mov	r30, r0
    1c4a:	65 e0       	ldi	r22, 0x05	; 5
    1c4c:	ce 01       	movw	r24, r28
    1c4e:	19 95       	eicall
    1c50:	23 c0       	rjmp	.+70     	; 0x1c98 <_ZN12AccelStepper5step6El+0xba>
    1c52:	e8 81       	ld	r30, Y
    1c54:	f9 81       	ldd	r31, Y+1	; 0x01
    1c56:	04 80       	ldd	r0, Z+4	; 0x04
    1c58:	f5 81       	ldd	r31, Z+5	; 0x05
    1c5a:	e0 2d       	mov	r30, r0
    1c5c:	61 e0       	ldi	r22, 0x01	; 1
    1c5e:	ce 01       	movw	r24, r28
    1c60:	19 95       	eicall
    1c62:	1a c0       	rjmp	.+52     	; 0x1c98 <_ZN12AccelStepper5step6El+0xba>
    1c64:	e8 81       	ld	r30, Y
    1c66:	f9 81       	ldd	r31, Y+1	; 0x01
    1c68:	04 80       	ldd	r0, Z+4	; 0x04
    1c6a:	f5 81       	ldd	r31, Z+5	; 0x05
    1c6c:	e0 2d       	mov	r30, r0
    1c6e:	63 e0       	ldi	r22, 0x03	; 3
    1c70:	ce 01       	movw	r24, r28
    1c72:	19 95       	eicall
    1c74:	11 c0       	rjmp	.+34     	; 0x1c98 <_ZN12AccelStepper5step6El+0xba>
    1c76:	e8 81       	ld	r30, Y
    1c78:	f9 81       	ldd	r31, Y+1	; 0x01
    1c7a:	04 80       	ldd	r0, Z+4	; 0x04
    1c7c:	f5 81       	ldd	r31, Z+5	; 0x05
    1c7e:	e0 2d       	mov	r30, r0
    1c80:	62 e0       	ldi	r22, 0x02	; 2
    1c82:	ce 01       	movw	r24, r28
    1c84:	19 95       	eicall
    1c86:	08 c0       	rjmp	.+16     	; 0x1c98 <_ZN12AccelStepper5step6El+0xba>
    1c88:	e8 81       	ld	r30, Y
    1c8a:	f9 81       	ldd	r31, Y+1	; 0x01
    1c8c:	04 80       	ldd	r0, Z+4	; 0x04
    1c8e:	f5 81       	ldd	r31, Z+5	; 0x05
    1c90:	e0 2d       	mov	r30, r0
    1c92:	66 e0       	ldi	r22, 0x06	; 6
    1c94:	ce 01       	movw	r24, r28
    1c96:	19 95       	eicall
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	08 95       	ret

00001c9e <_ZN12AccelStepper5step8El>:
    1c9e:	47 70       	andi	r20, 0x07	; 7
    1ca0:	55 27       	eor	r21, r21
    1ca2:	66 27       	eor	r22, r22
    1ca4:	77 27       	eor	r23, r23
    1ca6:	48 30       	cpi	r20, 0x08	; 8
    1ca8:	51 05       	cpc	r21, r1
    1caa:	08 f0       	brcs	.+2      	; 0x1cae <_ZN12AccelStepper5step8El+0x10>
    1cac:	57 c0       	rjmp	.+174    	; 0x1d5c <_ZN12AccelStepper5step8El+0xbe>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	fa 01       	movw	r30, r20
    1cb2:	88 27       	eor	r24, r24
    1cb4:	e5 58       	subi	r30, 0x85	; 133
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1cba:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
    1cbe:	ed 91       	ld	r30, X+
    1cc0:	fc 91       	ld	r31, X
    1cc2:	11 97       	sbiw	r26, 0x01	; 1
    1cc4:	04 80       	ldd	r0, Z+4	; 0x04
    1cc6:	f5 81       	ldd	r31, Z+5	; 0x05
    1cc8:	e0 2d       	mov	r30, r0
    1cca:	61 e0       	ldi	r22, 0x01	; 1
    1ccc:	cd 01       	movw	r24, r26
    1cce:	19 95       	eicall
    1cd0:	08 95       	ret
    1cd2:	ed 91       	ld	r30, X+
    1cd4:	fc 91       	ld	r31, X
    1cd6:	11 97       	sbiw	r26, 0x01	; 1
    1cd8:	04 80       	ldd	r0, Z+4	; 0x04
    1cda:	f5 81       	ldd	r31, Z+5	; 0x05
    1cdc:	e0 2d       	mov	r30, r0
    1cde:	65 e0       	ldi	r22, 0x05	; 5
    1ce0:	cd 01       	movw	r24, r26
    1ce2:	19 95       	eicall
    1ce4:	08 95       	ret
    1ce6:	ed 91       	ld	r30, X+
    1ce8:	fc 91       	ld	r31, X
    1cea:	11 97       	sbiw	r26, 0x01	; 1
    1cec:	04 80       	ldd	r0, Z+4	; 0x04
    1cee:	f5 81       	ldd	r31, Z+5	; 0x05
    1cf0:	e0 2d       	mov	r30, r0
    1cf2:	64 e0       	ldi	r22, 0x04	; 4
    1cf4:	cd 01       	movw	r24, r26
    1cf6:	19 95       	eicall
    1cf8:	08 95       	ret
    1cfa:	ed 91       	ld	r30, X+
    1cfc:	fc 91       	ld	r31, X
    1cfe:	11 97       	sbiw	r26, 0x01	; 1
    1d00:	04 80       	ldd	r0, Z+4	; 0x04
    1d02:	f5 81       	ldd	r31, Z+5	; 0x05
    1d04:	e0 2d       	mov	r30, r0
    1d06:	66 e0       	ldi	r22, 0x06	; 6
    1d08:	cd 01       	movw	r24, r26
    1d0a:	19 95       	eicall
    1d0c:	08 95       	ret
    1d0e:	ed 91       	ld	r30, X+
    1d10:	fc 91       	ld	r31, X
    1d12:	11 97       	sbiw	r26, 0x01	; 1
    1d14:	04 80       	ldd	r0, Z+4	; 0x04
    1d16:	f5 81       	ldd	r31, Z+5	; 0x05
    1d18:	e0 2d       	mov	r30, r0
    1d1a:	62 e0       	ldi	r22, 0x02	; 2
    1d1c:	cd 01       	movw	r24, r26
    1d1e:	19 95       	eicall
    1d20:	08 95       	ret
    1d22:	ed 91       	ld	r30, X+
    1d24:	fc 91       	ld	r31, X
    1d26:	11 97       	sbiw	r26, 0x01	; 1
    1d28:	04 80       	ldd	r0, Z+4	; 0x04
    1d2a:	f5 81       	ldd	r31, Z+5	; 0x05
    1d2c:	e0 2d       	mov	r30, r0
    1d2e:	6a e0       	ldi	r22, 0x0A	; 10
    1d30:	cd 01       	movw	r24, r26
    1d32:	19 95       	eicall
    1d34:	08 95       	ret
    1d36:	ed 91       	ld	r30, X+
    1d38:	fc 91       	ld	r31, X
    1d3a:	11 97       	sbiw	r26, 0x01	; 1
    1d3c:	04 80       	ldd	r0, Z+4	; 0x04
    1d3e:	f5 81       	ldd	r31, Z+5	; 0x05
    1d40:	e0 2d       	mov	r30, r0
    1d42:	68 e0       	ldi	r22, 0x08	; 8
    1d44:	cd 01       	movw	r24, r26
    1d46:	19 95       	eicall
    1d48:	08 95       	ret
    1d4a:	ed 91       	ld	r30, X+
    1d4c:	fc 91       	ld	r31, X
    1d4e:	11 97       	sbiw	r26, 0x01	; 1
    1d50:	04 80       	ldd	r0, Z+4	; 0x04
    1d52:	f5 81       	ldd	r31, Z+5	; 0x05
    1d54:	e0 2d       	mov	r30, r0
    1d56:	69 e0       	ldi	r22, 0x09	; 9
    1d58:	cd 01       	movw	r24, r26
    1d5a:	19 95       	eicall
    1d5c:	08 95       	ret

00001d5e <_ZN12AccelStepper13setOutputPinsEh>:
    1d5e:	7f 92       	push	r7
    1d60:	8f 92       	push	r8
    1d62:	9f 92       	push	r9
    1d64:	af 92       	push	r10
    1d66:	bf 92       	push	r11
    1d68:	cf 92       	push	r12
    1d6a:	df 92       	push	r13
    1d6c:	ef 92       	push	r14
    1d6e:	ff 92       	push	r15
    1d70:	0f 93       	push	r16
    1d72:	1f 93       	push	r17
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	dc 01       	movw	r26, r24
    1d7a:	13 96       	adiw	r26, 0x03	; 3
    1d7c:	2c 91       	ld	r18, X
    1d7e:	24 30       	cpi	r18, 0x04	; 4
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <_ZN12AccelStepper13setOutputPinsEh+0x26>
    1d82:	c5 c0       	rjmp	.+394    	; 0x1f0e <_ZN12AccelStepper13setOutputPinsEh+0x1b0>
    1d84:	28 30       	cpi	r18, 0x08	; 8
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <_ZN12AccelStepper13setOutputPinsEh+0x2c>
    1d88:	c6 c0       	rjmp	.+396    	; 0x1f16 <_ZN12AccelStepper13setOutputPinsEh+0x1b8>
    1d8a:	23 30       	cpi	r18, 0x03	; 3
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <_ZN12AccelStepper13setOutputPinsEh+0x32>
    1d8e:	c7 c0       	rjmp	.+398    	; 0x1f1e <_ZN12AccelStepper13setOutputPinsEh+0x1c0>
    1d90:	26 30       	cpi	r18, 0x06	; 6
    1d92:	09 f0       	breq	.+2      	; 0x1d96 <_ZN12AccelStepper13setOutputPinsEh+0x38>
    1d94:	c9 c0       	rjmp	.+402    	; 0x1f28 <_ZN12AccelStepper13setOutputPinsEh+0x1ca>
    1d96:	0f 2e       	mov	r0, r31
    1d98:	f3 e0       	ldi	r31, 0x03	; 3
    1d9a:	9f 2e       	mov	r9, r31
    1d9c:	f0 2d       	mov	r31, r0
    1d9e:	c7 c0       	rjmp	.+398    	; 0x1f2e <_ZN12AccelStepper13setOutputPinsEh+0x1d0>
    1da0:	c6 01       	movw	r24, r12
    1da2:	0c 2e       	mov	r0, r28
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <_ZN12AccelStepper13setOutputPinsEh+0x4c>
    1da6:	95 95       	asr	r25
    1da8:	87 95       	ror	r24
    1daa:	0a 94       	dec	r0
    1dac:	e2 f7       	brpl	.-8      	; 0x1da6 <_ZN12AccelStepper13setOutputPinsEh+0x48>
    1dae:	80 ff       	sbrs	r24, 0
    1db0:	04 c0       	rjmp	.+8      	; 0x1dba <_ZN12AccelStepper13setOutputPinsEh+0x5c>
    1db2:	f8 01       	movw	r30, r16
    1db4:	a0 84       	ldd	r10, Z+8	; 0x08
    1db6:	a8 24       	eor	r10, r8
    1db8:	03 c0       	rjmp	.+6      	; 0x1dc0 <_ZN12AccelStepper13setOutputPinsEh+0x62>
    1dba:	d8 01       	movw	r26, r16
    1dbc:	18 96       	adiw	r26, 0x08	; 8
    1dbe:	ac 90       	ld	r10, X
    1dc0:	d7 01       	movw	r26, r14
    1dc2:	ed 91       	ld	r30, X+
    1dc4:	fd 91       	ld	r31, X+
    1dc6:	7d 01       	movw	r14, r26
    1dc8:	80 81       	ld	r24, Z
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	fc 01       	movw	r30, r24
    1dce:	e3 57       	subi	r30, 0x73	; 115
    1dd0:	fb 4f       	sbci	r31, 0xFB	; 251
    1dd2:	24 91       	lpm	r18, Z
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	ed 52       	subi	r30, 0x2D	; 45
    1dd8:	fb 4f       	sbci	r31, 0xFB	; 251
    1dda:	b4 90       	lpm	r11, Z
    1ddc:	fc 01       	movw	r30, r24
    1dde:	e7 5e       	subi	r30, 0xE7	; 231
    1de0:	fa 4f       	sbci	r31, 0xFA	; 250
    1de2:	74 90       	lpm	r7, Z
    1de4:	77 20       	and	r7, r7
    1de6:	09 f4       	brne	.+2      	; 0x1dea <_ZN12AccelStepper13setOutputPinsEh+0x8c>
    1de8:	8b c0       	rjmp	.+278    	; 0x1f00 <_ZN12AccelStepper13setOutputPinsEh+0x1a2>
    1dea:	22 23       	and	r18, r18
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <_ZN12AccelStepper13setOutputPinsEh+0x92>
    1dee:	67 c0       	rjmp	.+206    	; 0x1ebe <_ZN12AccelStepper13setOutputPinsEh+0x160>
    1df0:	82 2f       	mov	r24, r18
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	fc 01       	movw	r30, r24
    1df6:	31 97       	sbiw	r30, 0x01	; 1
    1df8:	e0 31       	cpi	r30, 0x10	; 16
    1dfa:	f1 05       	cpc	r31, r1
    1dfc:	08 f0       	brcs	.+2      	; 0x1e00 <_ZN12AccelStepper13setOutputPinsEh+0xa2>
    1dfe:	5f c0       	rjmp	.+190    	; 0x1ebe <_ZN12AccelStepper13setOutputPinsEh+0x160>
    1e00:	88 27       	eor	r24, r24
    1e02:	ed 57       	subi	r30, 0x7D	; 125
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	8f 4f       	sbci	r24, 0xFF	; 255
    1e08:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
    1e0c:	60 e0       	ldi	r22, 0x00	; 0
    1e0e:	84 e7       	ldi	r24, 0x74	; 116
    1e10:	97 e1       	ldi	r25, 0x17	; 23
    1e12:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    1e16:	53 c0       	rjmp	.+166    	; 0x1ebe <_ZN12AccelStepper13setOutputPinsEh+0x160>
    1e18:	68 2d       	mov	r22, r8
    1e1a:	84 e7       	ldi	r24, 0x74	; 116
    1e1c:	97 e1       	ldi	r25, 0x17	; 23
    1e1e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    1e22:	4d c0       	rjmp	.+154    	; 0x1ebe <_ZN12AccelStepper13setOutputPinsEh+0x160>
    1e24:	60 e0       	ldi	r22, 0x00	; 0
    1e26:	85 e4       	ldi	r24, 0x45	; 69
    1e28:	97 e1       	ldi	r25, 0x17	; 23
    1e2a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    1e2e:	47 c0       	rjmp	.+142    	; 0x1ebe <_ZN12AccelStepper13setOutputPinsEh+0x160>
    1e30:	68 2d       	mov	r22, r8
    1e32:	85 e4       	ldi	r24, 0x45	; 69
    1e34:	97 e1       	ldi	r25, 0x17	; 23
    1e36:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    1e3a:	41 c0       	rjmp	.+130    	; 0x1ebe <_ZN12AccelStepper13setOutputPinsEh+0x160>
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	86 e1       	ldi	r24, 0x16	; 22
    1e40:	97 e1       	ldi	r25, 0x17	; 23
    1e42:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    1e46:	3b c0       	rjmp	.+118    	; 0x1ebe <_ZN12AccelStepper13setOutputPinsEh+0x160>
    1e48:	68 2d       	mov	r22, r8
    1e4a:	86 e1       	ldi	r24, 0x16	; 22
    1e4c:	97 e1       	ldi	r25, 0x17	; 23
    1e4e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    1e52:	35 c0       	rjmp	.+106    	; 0x1ebe <_ZN12AccelStepper13setOutputPinsEh+0x160>
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	87 ee       	ldi	r24, 0xE7	; 231
    1e58:	96 e1       	ldi	r25, 0x16	; 22
    1e5a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    1e5e:	2f c0       	rjmp	.+94     	; 0x1ebe <_ZN12AccelStepper13setOutputPinsEh+0x160>
    1e60:	68 2d       	mov	r22, r8
    1e62:	87 ee       	ldi	r24, 0xE7	; 231
    1e64:	96 e1       	ldi	r25, 0x16	; 22
    1e66:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    1e6a:	29 c0       	rjmp	.+82     	; 0x1ebe <_ZN12AccelStepper13setOutputPinsEh+0x160>
    1e6c:	62 e0       	ldi	r22, 0x02	; 2
    1e6e:	87 ee       	ldi	r24, 0xE7	; 231
    1e70:	96 e1       	ldi	r25, 0x16	; 22
    1e72:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    1e76:	23 c0       	rjmp	.+70     	; 0x1ebe <_ZN12AccelStepper13setOutputPinsEh+0x160>
    1e78:	60 e0       	ldi	r22, 0x00	; 0
    1e7a:	88 eb       	ldi	r24, 0xB8	; 184
    1e7c:	96 e1       	ldi	r25, 0x16	; 22
    1e7e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    1e82:	1d c0       	rjmp	.+58     	; 0x1ebe <_ZN12AccelStepper13setOutputPinsEh+0x160>
    1e84:	68 2d       	mov	r22, r8
    1e86:	88 eb       	ldi	r24, 0xB8	; 184
    1e88:	96 e1       	ldi	r25, 0x16	; 22
    1e8a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    1e8e:	17 c0       	rjmp	.+46     	; 0x1ebe <_ZN12AccelStepper13setOutputPinsEh+0x160>
    1e90:	62 e0       	ldi	r22, 0x02	; 2
    1e92:	88 eb       	ldi	r24, 0xB8	; 184
    1e94:	96 e1       	ldi	r25, 0x16	; 22
    1e96:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    1e9a:	11 c0       	rjmp	.+34     	; 0x1ebe <_ZN12AccelStepper13setOutputPinsEh+0x160>
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
    1e9e:	89 e8       	ldi	r24, 0x89	; 137
    1ea0:	96 e1       	ldi	r25, 0x16	; 22
    1ea2:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    1ea6:	0b c0       	rjmp	.+22     	; 0x1ebe <_ZN12AccelStepper13setOutputPinsEh+0x160>
    1ea8:	68 2d       	mov	r22, r8
    1eaa:	89 e8       	ldi	r24, 0x89	; 137
    1eac:	96 e1       	ldi	r25, 0x16	; 22
    1eae:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    1eb2:	05 c0       	rjmp	.+10     	; 0x1ebe <_ZN12AccelStepper13setOutputPinsEh+0x160>
    1eb4:	62 e0       	ldi	r22, 0x02	; 2
    1eb6:	89 e8       	ldi	r24, 0x89	; 137
    1eb8:	96 e1       	ldi	r25, 0x16	; 22
    1eba:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    1ebe:	e7 2d       	mov	r30, r7
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	ee 0f       	add	r30, r30
    1ec4:	ff 1f       	adc	r31, r31
    1ec6:	e1 5a       	subi	r30, 0xA1	; 161
    1ec8:	fa 4f       	sbci	r31, 0xFA	; 250
    1eca:	a5 91       	lpm	r26, Z+
    1ecc:	b4 91       	lpm	r27, Z
    1ece:	8f b7       	in	r24, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	a1 10       	cpse	r10, r1
    1ed4:	0d c0       	rjmp	.+26     	; 0x1ef0 <_ZN12AccelStepper13setOutputPinsEh+0x192>
    1ed6:	2d 91       	ld	r18, X+
    1ed8:	3c 91       	ld	r19, X
    1eda:	11 97       	sbiw	r26, 0x01	; 1
    1edc:	eb 2d       	mov	r30, r11
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	e0 95       	com	r30
    1ee2:	f0 95       	com	r31
    1ee4:	e2 23       	and	r30, r18
    1ee6:	f3 23       	and	r31, r19
    1ee8:	11 96       	adiw	r26, 0x01	; 1
    1eea:	fc 93       	st	X, r31
    1eec:	ee 93       	st	-X, r30
    1eee:	07 c0       	rjmp	.+14     	; 0x1efe <_ZN12AccelStepper13setOutputPinsEh+0x1a0>
    1ef0:	2d 91       	ld	r18, X+
    1ef2:	3c 91       	ld	r19, X
    1ef4:	11 97       	sbiw	r26, 0x01	; 1
    1ef6:	2b 29       	or	r18, r11
    1ef8:	11 96       	adiw	r26, 0x01	; 1
    1efa:	3c 93       	st	X, r19
    1efc:	2e 93       	st	-X, r18
    1efe:	8f bf       	out	0x3f, r24	; 63
    1f00:	21 96       	adiw	r28, 0x01	; 1
    1f02:	0f 5f       	subi	r16, 0xFF	; 255
    1f04:	1f 4f       	sbci	r17, 0xFF	; 255
    1f06:	c9 15       	cp	r28, r9
    1f08:	08 f4       	brcc	.+2      	; 0x1f0c <_ZN12AccelStepper13setOutputPinsEh+0x1ae>
    1f0a:	4a cf       	rjmp	.-364    	; 0x1da0 <_ZN12AccelStepper13setOutputPinsEh+0x42>
    1f0c:	1c c0       	rjmp	.+56     	; 0x1f46 <_ZN12AccelStepper13setOutputPinsEh+0x1e8>
    1f0e:	68 94       	set
    1f10:	99 24       	eor	r9, r9
    1f12:	92 f8       	bld	r9, 2
    1f14:	0c c0       	rjmp	.+24     	; 0x1f2e <_ZN12AccelStepper13setOutputPinsEh+0x1d0>
    1f16:	68 94       	set
    1f18:	99 24       	eor	r9, r9
    1f1a:	92 f8       	bld	r9, 2
    1f1c:	08 c0       	rjmp	.+16     	; 0x1f2e <_ZN12AccelStepper13setOutputPinsEh+0x1d0>
    1f1e:	0f 2e       	mov	r0, r31
    1f20:	f3 e0       	ldi	r31, 0x03	; 3
    1f22:	9f 2e       	mov	r9, r31
    1f24:	f0 2d       	mov	r31, r0
    1f26:	03 c0       	rjmp	.+6      	; 0x1f2e <_ZN12AccelStepper13setOutputPinsEh+0x1d0>
    1f28:	68 94       	set
    1f2a:	99 24       	eor	r9, r9
    1f2c:	91 f8       	bld	r9, 1
    1f2e:	7c 01       	movw	r14, r24
    1f30:	e4 e4       	ldi	r30, 0x44	; 68
    1f32:	ee 0e       	add	r14, r30
    1f34:	f1 1c       	adc	r15, r1
    1f36:	8c 01       	movw	r16, r24
    1f38:	c0 e0       	ldi	r28, 0x00	; 0
    1f3a:	d0 e0       	ldi	r29, 0x00	; 0
    1f3c:	c6 2e       	mov	r12, r22
    1f3e:	d1 2c       	mov	r13, r1
    1f40:	88 24       	eor	r8, r8
    1f42:	83 94       	inc	r8
    1f44:	2d cf       	rjmp	.-422    	; 0x1da0 <_ZN12AccelStepper13setOutputPinsEh+0x42>
    1f46:	df 91       	pop	r29
    1f48:	cf 91       	pop	r28
    1f4a:	1f 91       	pop	r17
    1f4c:	0f 91       	pop	r16
    1f4e:	ff 90       	pop	r15
    1f50:	ef 90       	pop	r14
    1f52:	df 90       	pop	r13
    1f54:	cf 90       	pop	r12
    1f56:	bf 90       	pop	r11
    1f58:	af 90       	pop	r10
    1f5a:	9f 90       	pop	r9
    1f5c:	8f 90       	pop	r8
    1f5e:	7f 90       	pop	r7
    1f60:	08 95       	ret

00001f62 <_ZN12AccelStepper13enableOutputsEv>:
    1f62:	1f 93       	push	r17
    1f64:	cf 93       	push	r28
    1f66:	df 93       	push	r29
    1f68:	dc 01       	movw	r26, r24
    1f6a:	13 96       	adiw	r26, 0x03	; 3
    1f6c:	8c 91       	ld	r24, X
    1f6e:	13 97       	sbiw	r26, 0x03	; 3
    1f70:	88 23       	and	r24, r24
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <_ZN12AccelStepper13enableOutputsEv+0x14>
    1f74:	bb c1       	rjmp	.+886    	; 0x22ec <__stack+0xed>
    1f76:	fd 01       	movw	r30, r26
    1f78:	ec 5b       	subi	r30, 0xBC	; 188
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	01 90       	ld	r0, Z+
    1f7e:	f0 81       	ld	r31, Z
    1f80:	e0 2d       	mov	r30, r0
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	81 83       	std	Z+1, r24	; 0x01
    1f86:	20 81       	ld	r18, Z
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	f9 01       	movw	r30, r18
    1f8c:	ed 52       	subi	r30, 0x2D	; 45
    1f8e:	fb 4f       	sbci	r31, 0xFB	; 251
    1f90:	84 91       	lpm	r24, Z
    1f92:	f9 01       	movw	r30, r18
    1f94:	e7 5e       	subi	r30, 0xE7	; 231
    1f96:	fa 4f       	sbci	r31, 0xFA	; 250
    1f98:	24 91       	lpm	r18, Z
    1f9a:	22 23       	and	r18, r18
    1f9c:	b9 f0       	breq	.+46     	; 0x1fcc <_ZN12AccelStepper13enableOutputsEv+0x6a>
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	22 0f       	add	r18, r18
    1fa2:	33 1f       	adc	r19, r19
    1fa4:	f9 01       	movw	r30, r18
    1fa6:	e7 58       	subi	r30, 0x87	; 135
    1fa8:	fa 4f       	sbci	r31, 0xFA	; 250
    1faa:	c5 91       	lpm	r28, Z+
    1fac:	d4 91       	lpm	r29, Z
    1fae:	f9 01       	movw	r30, r18
    1fb0:	e1 5a       	subi	r30, 0xA1	; 161
    1fb2:	fa 4f       	sbci	r31, 0xFA	; 250
    1fb4:	25 91       	lpm	r18, Z+
    1fb6:	34 91       	lpm	r19, Z
    1fb8:	4f b7       	in	r20, 0x3f	; 63
    1fba:	f8 94       	cli
    1fbc:	28 81       	ld	r18, Y
    1fbe:	39 81       	ldd	r19, Y+1	; 0x01
    1fc0:	b9 01       	movw	r22, r18
    1fc2:	68 2b       	or	r22, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	99 83       	std	Y+1, r25	; 0x01
    1fc8:	88 83       	st	Y, r24
    1fca:	4f bf       	out	0x3f, r20	; 63
    1fcc:	fd 01       	movw	r30, r26
    1fce:	ea 5b       	subi	r30, 0xBA	; 186
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	01 90       	ld	r0, Z+
    1fd4:	f0 81       	ld	r31, Z
    1fd6:	e0 2d       	mov	r30, r0
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	81 83       	std	Z+1, r24	; 0x01
    1fdc:	20 81       	ld	r18, Z
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	f9 01       	movw	r30, r18
    1fe2:	ed 52       	subi	r30, 0x2D	; 45
    1fe4:	fb 4f       	sbci	r31, 0xFB	; 251
    1fe6:	84 91       	lpm	r24, Z
    1fe8:	f9 01       	movw	r30, r18
    1fea:	e7 5e       	subi	r30, 0xE7	; 231
    1fec:	fa 4f       	sbci	r31, 0xFA	; 250
    1fee:	24 91       	lpm	r18, Z
    1ff0:	22 23       	and	r18, r18
    1ff2:	b9 f0       	breq	.+46     	; 0x2022 <_ZN12AccelStepper13enableOutputsEv+0xc0>
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	22 0f       	add	r18, r18
    1ff8:	33 1f       	adc	r19, r19
    1ffa:	f9 01       	movw	r30, r18
    1ffc:	e7 58       	subi	r30, 0x87	; 135
    1ffe:	fa 4f       	sbci	r31, 0xFA	; 250
    2000:	c5 91       	lpm	r28, Z+
    2002:	d4 91       	lpm	r29, Z
    2004:	f9 01       	movw	r30, r18
    2006:	e1 5a       	subi	r30, 0xA1	; 161
    2008:	fa 4f       	sbci	r31, 0xFA	; 250
    200a:	25 91       	lpm	r18, Z+
    200c:	34 91       	lpm	r19, Z
    200e:	4f b7       	in	r20, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	28 81       	ld	r18, Y
    2014:	39 81       	ldd	r19, Y+1	; 0x01
    2016:	b9 01       	movw	r22, r18
    2018:	68 2b       	or	r22, r24
    201a:	cb 01       	movw	r24, r22
    201c:	99 83       	std	Y+1, r25	; 0x01
    201e:	88 83       	st	Y, r24
    2020:	4f bf       	out	0x3f, r20	; 63
    2022:	13 96       	adiw	r26, 0x03	; 3
    2024:	8c 91       	ld	r24, X
    2026:	13 97       	sbiw	r26, 0x03	; 3
    2028:	84 30       	cpi	r24, 0x04	; 4
    202a:	19 f0       	breq	.+6      	; 0x2032 <_ZN12AccelStepper13enableOutputsEv+0xd0>
    202c:	88 30       	cpi	r24, 0x08	; 8
    202e:	09 f0       	breq	.+2      	; 0x2032 <_ZN12AccelStepper13enableOutputsEv+0xd0>
    2030:	54 c0       	rjmp	.+168    	; 0x20da <_ZN12AccelStepper13enableOutputsEv+0x178>
    2032:	fd 01       	movw	r30, r26
    2034:	e8 5b       	subi	r30, 0xB8	; 184
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	01 90       	ld	r0, Z+
    203a:	f0 81       	ld	r31, Z
    203c:	e0 2d       	mov	r30, r0
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	81 83       	std	Z+1, r24	; 0x01
    2042:	80 81       	ld	r24, Z
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	fc 01       	movw	r30, r24
    2048:	ed 52       	subi	r30, 0x2D	; 45
    204a:	fb 4f       	sbci	r31, 0xFB	; 251
    204c:	24 91       	lpm	r18, Z
    204e:	fc 01       	movw	r30, r24
    2050:	e7 5e       	subi	r30, 0xE7	; 231
    2052:	fa 4f       	sbci	r31, 0xFA	; 250
    2054:	84 91       	lpm	r24, Z
    2056:	88 23       	and	r24, r24
    2058:	a9 f0       	breq	.+42     	; 0x2084 <_ZN12AccelStepper13enableOutputsEv+0x122>
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	88 0f       	add	r24, r24
    205e:	99 1f       	adc	r25, r25
    2060:	fc 01       	movw	r30, r24
    2062:	e7 58       	subi	r30, 0x87	; 135
    2064:	fa 4f       	sbci	r31, 0xFA	; 250
    2066:	c5 91       	lpm	r28, Z+
    2068:	d4 91       	lpm	r29, Z
    206a:	fc 01       	movw	r30, r24
    206c:	e1 5a       	subi	r30, 0xA1	; 161
    206e:	fa 4f       	sbci	r31, 0xFA	; 250
    2070:	85 91       	lpm	r24, Z+
    2072:	94 91       	lpm	r25, Z
    2074:	3f b7       	in	r19, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	88 81       	ld	r24, Y
    207a:	99 81       	ldd	r25, Y+1	; 0x01
    207c:	82 2b       	or	r24, r18
    207e:	99 83       	std	Y+1, r25	; 0x01
    2080:	88 83       	st	Y, r24
    2082:	3f bf       	out	0x3f, r19	; 63
    2084:	fd 01       	movw	r30, r26
    2086:	e6 5b       	subi	r30, 0xB6	; 182
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	01 90       	ld	r0, Z+
    208c:	f0 81       	ld	r31, Z
    208e:	e0 2d       	mov	r30, r0
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	81 83       	std	Z+1, r24	; 0x01
    2094:	80 81       	ld	r24, Z
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	fc 01       	movw	r30, r24
    209a:	ed 52       	subi	r30, 0x2D	; 45
    209c:	fb 4f       	sbci	r31, 0xFB	; 251
    209e:	24 91       	lpm	r18, Z
    20a0:	fc 01       	movw	r30, r24
    20a2:	e7 5e       	subi	r30, 0xE7	; 231
    20a4:	fa 4f       	sbci	r31, 0xFA	; 250
    20a6:	84 91       	lpm	r24, Z
    20a8:	88 23       	and	r24, r24
    20aa:	09 f4       	brne	.+2      	; 0x20ae <_ZN12AccelStepper13enableOutputsEv+0x14c>
    20ac:	43 c0       	rjmp	.+134    	; 0x2134 <_ZN12AccelStepper13enableOutputsEv+0x1d2>
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	88 0f       	add	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	fc 01       	movw	r30, r24
    20b6:	e7 58       	subi	r30, 0x87	; 135
    20b8:	fa 4f       	sbci	r31, 0xFA	; 250
    20ba:	c5 91       	lpm	r28, Z+
    20bc:	d4 91       	lpm	r29, Z
    20be:	fc 01       	movw	r30, r24
    20c0:	e1 5a       	subi	r30, 0xA1	; 161
    20c2:	fa 4f       	sbci	r31, 0xFA	; 250
    20c4:	85 91       	lpm	r24, Z+
    20c6:	94 91       	lpm	r25, Z
    20c8:	3f b7       	in	r19, 0x3f	; 63
    20ca:	f8 94       	cli
    20cc:	88 81       	ld	r24, Y
    20ce:	99 81       	ldd	r25, Y+1	; 0x01
    20d0:	82 2b       	or	r24, r18
    20d2:	99 83       	std	Y+1, r25	; 0x01
    20d4:	88 83       	st	Y, r24
    20d6:	3f bf       	out	0x3f, r19	; 63
    20d8:	2d c0       	rjmp	.+90     	; 0x2134 <_ZN12AccelStepper13enableOutputsEv+0x1d2>
    20da:	83 30       	cpi	r24, 0x03	; 3
    20dc:	11 f0       	breq	.+4      	; 0x20e2 <_ZN12AccelStepper13enableOutputsEv+0x180>
    20de:	86 30       	cpi	r24, 0x06	; 6
    20e0:	49 f5       	brne	.+82     	; 0x2134 <_ZN12AccelStepper13enableOutputsEv+0x1d2>
    20e2:	fd 01       	movw	r30, r26
    20e4:	e8 5b       	subi	r30, 0xB8	; 184
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	01 90       	ld	r0, Z+
    20ea:	f0 81       	ld	r31, Z
    20ec:	e0 2d       	mov	r30, r0
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	81 83       	std	Z+1, r24	; 0x01
    20f2:	80 81       	ld	r24, Z
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	fc 01       	movw	r30, r24
    20f8:	ed 52       	subi	r30, 0x2D	; 45
    20fa:	fb 4f       	sbci	r31, 0xFB	; 251
    20fc:	24 91       	lpm	r18, Z
    20fe:	fc 01       	movw	r30, r24
    2100:	e7 5e       	subi	r30, 0xE7	; 231
    2102:	fa 4f       	sbci	r31, 0xFA	; 250
    2104:	84 91       	lpm	r24, Z
    2106:	88 23       	and	r24, r24
    2108:	a9 f0       	breq	.+42     	; 0x2134 <_ZN12AccelStepper13enableOutputsEv+0x1d2>
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	88 0f       	add	r24, r24
    210e:	99 1f       	adc	r25, r25
    2110:	fc 01       	movw	r30, r24
    2112:	e7 58       	subi	r30, 0x87	; 135
    2114:	fa 4f       	sbci	r31, 0xFA	; 250
    2116:	c5 91       	lpm	r28, Z+
    2118:	d4 91       	lpm	r29, Z
    211a:	fc 01       	movw	r30, r24
    211c:	e1 5a       	subi	r30, 0xA1	; 161
    211e:	fa 4f       	sbci	r31, 0xFA	; 250
    2120:	85 91       	lpm	r24, Z+
    2122:	94 91       	lpm	r25, Z
    2124:	3f b7       	in	r19, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	88 81       	ld	r24, Y
    212a:	99 81       	ldd	r25, Y+1	; 0x01
    212c:	82 2b       	or	r24, r18
    212e:	99 83       	std	Y+1, r25	; 0x01
    2130:	88 83       	st	Y, r24
    2132:	3f bf       	out	0x3f, r19	; 63
    2134:	9f 96       	adiw	r26, 0x2f	; 47
    2136:	ec 91       	ld	r30, X
    2138:	9f 97       	sbiw	r26, 0x2f	; 47
    213a:	ef 3f       	cpi	r30, 0xFF	; 255
    213c:	09 f4       	brne	.+2      	; 0x2140 <_ZN12AccelStepper13enableOutputsEv+0x1de>
    213e:	d6 c0       	rjmp	.+428    	; 0x22ec <__stack+0xed>
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	b2 96       	adiw	r30, 0x22	; 34
    2144:	ee 0f       	add	r30, r30
    2146:	ff 1f       	adc	r31, r31
    2148:	ea 0f       	add	r30, r26
    214a:	fb 1f       	adc	r31, r27
    214c:	01 90       	ld	r0, Z+
    214e:	f0 81       	ld	r31, Z
    2150:	e0 2d       	mov	r30, r0
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	81 83       	std	Z+1, r24	; 0x01
    2156:	80 81       	ld	r24, Z
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	fc 01       	movw	r30, r24
    215c:	ed 52       	subi	r30, 0x2D	; 45
    215e:	fb 4f       	sbci	r31, 0xFB	; 251
    2160:	24 91       	lpm	r18, Z
    2162:	fc 01       	movw	r30, r24
    2164:	e7 5e       	subi	r30, 0xE7	; 231
    2166:	fa 4f       	sbci	r31, 0xFA	; 250
    2168:	84 91       	lpm	r24, Z
    216a:	88 23       	and	r24, r24
    216c:	a9 f0       	breq	.+42     	; 0x2198 <_ZN12AccelStepper13enableOutputsEv+0x236>
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	88 0f       	add	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	fc 01       	movw	r30, r24
    2176:	e7 58       	subi	r30, 0x87	; 135
    2178:	fa 4f       	sbci	r31, 0xFA	; 250
    217a:	c5 91       	lpm	r28, Z+
    217c:	d4 91       	lpm	r29, Z
    217e:	fc 01       	movw	r30, r24
    2180:	e1 5a       	subi	r30, 0xA1	; 161
    2182:	fa 4f       	sbci	r31, 0xFA	; 250
    2184:	85 91       	lpm	r24, Z+
    2186:	94 91       	lpm	r25, Z
    2188:	3f b7       	in	r19, 0x3f	; 63
    218a:	f8 94       	cli
    218c:	88 81       	ld	r24, Y
    218e:	99 81       	ldd	r25, Y+1	; 0x01
    2190:	82 2b       	or	r24, r18
    2192:	99 83       	std	Y+1, r25	; 0x01
    2194:	88 83       	st	Y, r24
    2196:	3f bf       	out	0x3f, r19	; 63
    2198:	9f 96       	adiw	r26, 0x2f	; 47
    219a:	ec 91       	ld	r30, X
    219c:	9f 97       	sbiw	r26, 0x2f	; 47
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	b2 96       	adiw	r30, 0x22	; 34
    21a2:	ee 0f       	add	r30, r30
    21a4:	ff 1f       	adc	r31, r31
    21a6:	ea 0f       	add	r30, r26
    21a8:	fb 1f       	adc	r31, r27
    21aa:	01 90       	ld	r0, Z+
    21ac:	f0 81       	ld	r31, Z
    21ae:	e0 2d       	mov	r30, r0
    21b0:	80 81       	ld	r24, Z
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	fc 01       	movw	r30, r24
    21b6:	e3 57       	subi	r30, 0x73	; 115
    21b8:	fb 4f       	sbci	r31, 0xFB	; 251
    21ba:	24 91       	lpm	r18, Z
    21bc:	fc 01       	movw	r30, r24
    21be:	ed 52       	subi	r30, 0x2D	; 45
    21c0:	fb 4f       	sbci	r31, 0xFB	; 251
    21c2:	d4 91       	lpm	r29, Z
    21c4:	fc 01       	movw	r30, r24
    21c6:	e7 5e       	subi	r30, 0xE7	; 231
    21c8:	fa 4f       	sbci	r31, 0xFA	; 250
    21ca:	c4 91       	lpm	r28, Z
    21cc:	cc 23       	and	r28, r28
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <_ZN12AccelStepper13enableOutputsEv+0x270>
    21d0:	8d c0       	rjmp	.+282    	; 0x22ec <__stack+0xed>
    21d2:	9e 96       	adiw	r26, 0x2e	; 46
    21d4:	1c 91       	ld	r17, X
    21d6:	22 23       	and	r18, r18
    21d8:	09 f4       	brne	.+2      	; 0x21dc <_ZN12AccelStepper13enableOutputsEv+0x27a>
    21da:	67 c0       	rjmp	.+206    	; 0x22aa <__stack+0xab>
    21dc:	82 2f       	mov	r24, r18
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	fc 01       	movw	r30, r24
    21e2:	31 97       	sbiw	r30, 0x01	; 1
    21e4:	e0 31       	cpi	r30, 0x10	; 16
    21e6:	f1 05       	cpc	r31, r1
    21e8:	08 f0       	brcs	.+2      	; 0x21ec <_ZN12AccelStepper13enableOutputsEv+0x28a>
    21ea:	5f c0       	rjmp	.+190    	; 0x22aa <__stack+0xab>
    21ec:	88 27       	eor	r24, r24
    21ee:	ed 56       	subi	r30, 0x6D	; 109
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	8f 4f       	sbci	r24, 0xFF	; 255
    21f4:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
    21f8:	60 e0       	ldi	r22, 0x00	; 0
    21fa:	84 e7       	ldi	r24, 0x74	; 116
    21fc:	97 e1       	ldi	r25, 0x17	; 23
    21fe:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    2202:	53 c0       	rjmp	.+166    	; 0x22aa <__stack+0xab>
    2204:	61 e0       	ldi	r22, 0x01	; 1
    2206:	84 e7       	ldi	r24, 0x74	; 116
    2208:	97 e1       	ldi	r25, 0x17	; 23
    220a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    220e:	4d c0       	rjmp	.+154    	; 0x22aa <__stack+0xab>
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	85 e4       	ldi	r24, 0x45	; 69
    2214:	97 e1       	ldi	r25, 0x17	; 23
    2216:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    221a:	47 c0       	rjmp	.+142    	; 0x22aa <__stack+0xab>
    221c:	61 e0       	ldi	r22, 0x01	; 1
    221e:	85 e4       	ldi	r24, 0x45	; 69
    2220:	97 e1       	ldi	r25, 0x17	; 23
    2222:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    2226:	41 c0       	rjmp	.+130    	; 0x22aa <__stack+0xab>
    2228:	60 e0       	ldi	r22, 0x00	; 0
    222a:	86 e1       	ldi	r24, 0x16	; 22
    222c:	97 e1       	ldi	r25, 0x17	; 23
    222e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    2232:	3b c0       	rjmp	.+118    	; 0x22aa <__stack+0xab>
    2234:	61 e0       	ldi	r22, 0x01	; 1
    2236:	86 e1       	ldi	r24, 0x16	; 22
    2238:	97 e1       	ldi	r25, 0x17	; 23
    223a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    223e:	35 c0       	rjmp	.+106    	; 0x22aa <__stack+0xab>
    2240:	60 e0       	ldi	r22, 0x00	; 0
    2242:	87 ee       	ldi	r24, 0xE7	; 231
    2244:	96 e1       	ldi	r25, 0x16	; 22
    2246:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    224a:	2f c0       	rjmp	.+94     	; 0x22aa <__stack+0xab>
    224c:	61 e0       	ldi	r22, 0x01	; 1
    224e:	87 ee       	ldi	r24, 0xE7	; 231
    2250:	96 e1       	ldi	r25, 0x16	; 22
    2252:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    2256:	29 c0       	rjmp	.+82     	; 0x22aa <__stack+0xab>
    2258:	62 e0       	ldi	r22, 0x02	; 2
    225a:	87 ee       	ldi	r24, 0xE7	; 231
    225c:	96 e1       	ldi	r25, 0x16	; 22
    225e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    2262:	23 c0       	rjmp	.+70     	; 0x22aa <__stack+0xab>
    2264:	60 e0       	ldi	r22, 0x00	; 0
    2266:	88 eb       	ldi	r24, 0xB8	; 184
    2268:	96 e1       	ldi	r25, 0x16	; 22
    226a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    226e:	1d c0       	rjmp	.+58     	; 0x22aa <__stack+0xab>
    2270:	61 e0       	ldi	r22, 0x01	; 1
    2272:	88 eb       	ldi	r24, 0xB8	; 184
    2274:	96 e1       	ldi	r25, 0x16	; 22
    2276:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    227a:	17 c0       	rjmp	.+46     	; 0x22aa <__stack+0xab>
    227c:	62 e0       	ldi	r22, 0x02	; 2
    227e:	88 eb       	ldi	r24, 0xB8	; 184
    2280:	96 e1       	ldi	r25, 0x16	; 22
    2282:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    2286:	11 c0       	rjmp	.+34     	; 0x22aa <__stack+0xab>
    2288:	60 e0       	ldi	r22, 0x00	; 0
    228a:	89 e8       	ldi	r24, 0x89	; 137
    228c:	96 e1       	ldi	r25, 0x16	; 22
    228e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    2292:	0b c0       	rjmp	.+22     	; 0x22aa <__stack+0xab>
    2294:	61 e0       	ldi	r22, 0x01	; 1
    2296:	89 e8       	ldi	r24, 0x89	; 137
    2298:	96 e1       	ldi	r25, 0x16	; 22
    229a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    229e:	05 c0       	rjmp	.+10     	; 0x22aa <__stack+0xab>
    22a0:	62 e0       	ldi	r22, 0x02	; 2
    22a2:	89 e8       	ldi	r24, 0x89	; 137
    22a4:	96 e1       	ldi	r25, 0x16	; 22
    22a6:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    22aa:	ec 2f       	mov	r30, r28
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	ee 0f       	add	r30, r30
    22b0:	ff 1f       	adc	r31, r31
    22b2:	e1 5a       	subi	r30, 0xA1	; 161
    22b4:	fa 4f       	sbci	r31, 0xFA	; 250
    22b6:	a5 91       	lpm	r26, Z+
    22b8:	b4 91       	lpm	r27, Z
    22ba:	8f b7       	in	r24, 0x3f	; 63
    22bc:	f8 94       	cli
    22be:	11 23       	and	r17, r17
    22c0:	69 f0       	breq	.+26     	; 0x22dc <__stack+0xdd>
    22c2:	2d 91       	ld	r18, X+
    22c4:	3c 91       	ld	r19, X
    22c6:	11 97       	sbiw	r26, 0x01	; 1
    22c8:	ed 2f       	mov	r30, r29
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	e0 95       	com	r30
    22ce:	f0 95       	com	r31
    22d0:	e2 23       	and	r30, r18
    22d2:	f3 23       	and	r31, r19
    22d4:	11 96       	adiw	r26, 0x01	; 1
    22d6:	fc 93       	st	X, r31
    22d8:	ee 93       	st	-X, r30
    22da:	07 c0       	rjmp	.+14     	; 0x22ea <__stack+0xeb>
    22dc:	2d 91       	ld	r18, X+
    22de:	3c 91       	ld	r19, X
    22e0:	11 97       	sbiw	r26, 0x01	; 1
    22e2:	2d 2b       	or	r18, r29
    22e4:	11 96       	adiw	r26, 0x01	; 1
    22e6:	3c 93       	st	X, r19
    22e8:	2e 93       	st	-X, r18
    22ea:	8f bf       	out	0x3f, r24	; 63
    22ec:	df 91       	pop	r29
    22ee:	cf 91       	pop	r28
    22f0:	1f 91       	pop	r17
    22f2:	08 95       	ret

000022f4 <_ZN12AccelStepper14disableOutputsEv>:
    22f4:	0f 93       	push	r16
    22f6:	1f 93       	push	r17
    22f8:	cf 93       	push	r28
    22fa:	df 93       	push	r29
    22fc:	fc 01       	movw	r30, r24
    22fe:	23 81       	ldd	r18, Z+3	; 0x03
    2300:	22 23       	and	r18, r18
    2302:	09 f4       	brne	.+2      	; 0x2306 <_ZN12AccelStepper14disableOutputsEv+0x12>
    2304:	e1 c0       	rjmp	.+450    	; 0x24c8 <_ZN12AccelStepper14disableOutputsEv+0x1d4>
    2306:	ec 01       	movw	r28, r24
    2308:	01 90       	ld	r0, Z+
    230a:	f0 81       	ld	r31, Z
    230c:	e0 2d       	mov	r30, r0
    230e:	04 80       	ldd	r0, Z+4	; 0x04
    2310:	f5 81       	ldd	r31, Z+5	; 0x05
    2312:	e0 2d       	mov	r30, r0
    2314:	60 e0       	ldi	r22, 0x00	; 0
    2316:	19 95       	eicall
    2318:	ef a5       	ldd	r30, Y+47	; 0x2f
    231a:	ef 3f       	cpi	r30, 0xFF	; 255
    231c:	09 f4       	brne	.+2      	; 0x2320 <_ZN12AccelStepper14disableOutputsEv+0x2c>
    231e:	d4 c0       	rjmp	.+424    	; 0x24c8 <_ZN12AccelStepper14disableOutputsEv+0x1d4>
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	b2 96       	adiw	r30, 0x22	; 34
    2324:	ee 0f       	add	r30, r30
    2326:	ff 1f       	adc	r31, r31
    2328:	ec 0f       	add	r30, r28
    232a:	fd 1f       	adc	r31, r29
    232c:	01 90       	ld	r0, Z+
    232e:	f0 81       	ld	r31, Z
    2330:	e0 2d       	mov	r30, r0
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	81 83       	std	Z+1, r24	; 0x01
    2336:	80 81       	ld	r24, Z
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	fc 01       	movw	r30, r24
    233c:	ed 52       	subi	r30, 0x2D	; 45
    233e:	fb 4f       	sbci	r31, 0xFB	; 251
    2340:	24 91       	lpm	r18, Z
    2342:	fc 01       	movw	r30, r24
    2344:	e7 5e       	subi	r30, 0xE7	; 231
    2346:	fa 4f       	sbci	r31, 0xFA	; 250
    2348:	84 91       	lpm	r24, Z
    234a:	88 23       	and	r24, r24
    234c:	b9 f0       	breq	.+46     	; 0x237c <_ZN12AccelStepper14disableOutputsEv+0x88>
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	88 0f       	add	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	fc 01       	movw	r30, r24
    2356:	e7 58       	subi	r30, 0x87	; 135
    2358:	fa 4f       	sbci	r31, 0xFA	; 250
    235a:	a5 91       	lpm	r26, Z+
    235c:	b4 91       	lpm	r27, Z
    235e:	fc 01       	movw	r30, r24
    2360:	e1 5a       	subi	r30, 0xA1	; 161
    2362:	fa 4f       	sbci	r31, 0xFA	; 250
    2364:	85 91       	lpm	r24, Z+
    2366:	94 91       	lpm	r25, Z
    2368:	3f b7       	in	r19, 0x3f	; 63
    236a:	f8 94       	cli
    236c:	8d 91       	ld	r24, X+
    236e:	9c 91       	ld	r25, X
    2370:	11 97       	sbiw	r26, 0x01	; 1
    2372:	82 2b       	or	r24, r18
    2374:	11 96       	adiw	r26, 0x01	; 1
    2376:	9c 93       	st	X, r25
    2378:	8e 93       	st	-X, r24
    237a:	3f bf       	out	0x3f, r19	; 63
    237c:	ef a5       	ldd	r30, Y+47	; 0x2f
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	b2 96       	adiw	r30, 0x22	; 34
    2382:	ee 0f       	add	r30, r30
    2384:	ff 1f       	adc	r31, r31
    2386:	ec 0f       	add	r30, r28
    2388:	fd 1f       	adc	r31, r29
    238a:	01 90       	ld	r0, Z+
    238c:	f0 81       	ld	r31, Z
    238e:	e0 2d       	mov	r30, r0
    2390:	80 81       	ld	r24, Z
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	fc 01       	movw	r30, r24
    2396:	e3 57       	subi	r30, 0x73	; 115
    2398:	fb 4f       	sbci	r31, 0xFB	; 251
    239a:	24 91       	lpm	r18, Z
    239c:	fc 01       	movw	r30, r24
    239e:	ed 52       	subi	r30, 0x2D	; 45
    23a0:	fb 4f       	sbci	r31, 0xFB	; 251
    23a2:	04 91       	lpm	r16, Z
    23a4:	fc 01       	movw	r30, r24
    23a6:	e7 5e       	subi	r30, 0xE7	; 231
    23a8:	fa 4f       	sbci	r31, 0xFA	; 250
    23aa:	14 91       	lpm	r17, Z
    23ac:	11 23       	and	r17, r17
    23ae:	09 f4       	brne	.+2      	; 0x23b2 <_ZN12AccelStepper14disableOutputsEv+0xbe>
    23b0:	8b c0       	rjmp	.+278    	; 0x24c8 <_ZN12AccelStepper14disableOutputsEv+0x1d4>
    23b2:	ce a5       	ldd	r28, Y+46	; 0x2e
    23b4:	22 23       	and	r18, r18
    23b6:	09 f4       	brne	.+2      	; 0x23ba <_ZN12AccelStepper14disableOutputsEv+0xc6>
    23b8:	67 c0       	rjmp	.+206    	; 0x2488 <_ZN12AccelStepper14disableOutputsEv+0x194>
    23ba:	82 2f       	mov	r24, r18
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	fc 01       	movw	r30, r24
    23c0:	31 97       	sbiw	r30, 0x01	; 1
    23c2:	e0 31       	cpi	r30, 0x10	; 16
    23c4:	f1 05       	cpc	r31, r1
    23c6:	08 f0       	brcs	.+2      	; 0x23ca <_ZN12AccelStepper14disableOutputsEv+0xd6>
    23c8:	5f c0       	rjmp	.+190    	; 0x2488 <_ZN12AccelStepper14disableOutputsEv+0x194>
    23ca:	88 27       	eor	r24, r24
    23cc:	ed 55       	subi	r30, 0x5D	; 93
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	8f 4f       	sbci	r24, 0xFF	; 255
    23d2:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
    23d6:	60 e0       	ldi	r22, 0x00	; 0
    23d8:	84 e7       	ldi	r24, 0x74	; 116
    23da:	97 e1       	ldi	r25, 0x17	; 23
    23dc:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    23e0:	53 c0       	rjmp	.+166    	; 0x2488 <_ZN12AccelStepper14disableOutputsEv+0x194>
    23e2:	61 e0       	ldi	r22, 0x01	; 1
    23e4:	84 e7       	ldi	r24, 0x74	; 116
    23e6:	97 e1       	ldi	r25, 0x17	; 23
    23e8:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    23ec:	4d c0       	rjmp	.+154    	; 0x2488 <_ZN12AccelStepper14disableOutputsEv+0x194>
    23ee:	60 e0       	ldi	r22, 0x00	; 0
    23f0:	85 e4       	ldi	r24, 0x45	; 69
    23f2:	97 e1       	ldi	r25, 0x17	; 23
    23f4:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    23f8:	47 c0       	rjmp	.+142    	; 0x2488 <_ZN12AccelStepper14disableOutputsEv+0x194>
    23fa:	61 e0       	ldi	r22, 0x01	; 1
    23fc:	85 e4       	ldi	r24, 0x45	; 69
    23fe:	97 e1       	ldi	r25, 0x17	; 23
    2400:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    2404:	41 c0       	rjmp	.+130    	; 0x2488 <_ZN12AccelStepper14disableOutputsEv+0x194>
    2406:	60 e0       	ldi	r22, 0x00	; 0
    2408:	86 e1       	ldi	r24, 0x16	; 22
    240a:	97 e1       	ldi	r25, 0x17	; 23
    240c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    2410:	3b c0       	rjmp	.+118    	; 0x2488 <_ZN12AccelStepper14disableOutputsEv+0x194>
    2412:	61 e0       	ldi	r22, 0x01	; 1
    2414:	86 e1       	ldi	r24, 0x16	; 22
    2416:	97 e1       	ldi	r25, 0x17	; 23
    2418:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    241c:	35 c0       	rjmp	.+106    	; 0x2488 <_ZN12AccelStepper14disableOutputsEv+0x194>
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	87 ee       	ldi	r24, 0xE7	; 231
    2422:	96 e1       	ldi	r25, 0x16	; 22
    2424:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    2428:	2f c0       	rjmp	.+94     	; 0x2488 <_ZN12AccelStepper14disableOutputsEv+0x194>
    242a:	61 e0       	ldi	r22, 0x01	; 1
    242c:	87 ee       	ldi	r24, 0xE7	; 231
    242e:	96 e1       	ldi	r25, 0x16	; 22
    2430:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    2434:	29 c0       	rjmp	.+82     	; 0x2488 <_ZN12AccelStepper14disableOutputsEv+0x194>
    2436:	62 e0       	ldi	r22, 0x02	; 2
    2438:	87 ee       	ldi	r24, 0xE7	; 231
    243a:	96 e1       	ldi	r25, 0x16	; 22
    243c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    2440:	23 c0       	rjmp	.+70     	; 0x2488 <_ZN12AccelStepper14disableOutputsEv+0x194>
    2442:	60 e0       	ldi	r22, 0x00	; 0
    2444:	88 eb       	ldi	r24, 0xB8	; 184
    2446:	96 e1       	ldi	r25, 0x16	; 22
    2448:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    244c:	1d c0       	rjmp	.+58     	; 0x2488 <_ZN12AccelStepper14disableOutputsEv+0x194>
    244e:	61 e0       	ldi	r22, 0x01	; 1
    2450:	88 eb       	ldi	r24, 0xB8	; 184
    2452:	96 e1       	ldi	r25, 0x16	; 22
    2454:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    2458:	17 c0       	rjmp	.+46     	; 0x2488 <_ZN12AccelStepper14disableOutputsEv+0x194>
    245a:	62 e0       	ldi	r22, 0x02	; 2
    245c:	88 eb       	ldi	r24, 0xB8	; 184
    245e:	96 e1       	ldi	r25, 0x16	; 22
    2460:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    2464:	11 c0       	rjmp	.+34     	; 0x2488 <_ZN12AccelStepper14disableOutputsEv+0x194>
    2466:	60 e0       	ldi	r22, 0x00	; 0
    2468:	89 e8       	ldi	r24, 0x89	; 137
    246a:	96 e1       	ldi	r25, 0x16	; 22
    246c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    2470:	0b c0       	rjmp	.+22     	; 0x2488 <_ZN12AccelStepper14disableOutputsEv+0x194>
    2472:	61 e0       	ldi	r22, 0x01	; 1
    2474:	89 e8       	ldi	r24, 0x89	; 137
    2476:	96 e1       	ldi	r25, 0x16	; 22
    2478:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    247c:	05 c0       	rjmp	.+10     	; 0x2488 <_ZN12AccelStepper14disableOutputsEv+0x194>
    247e:	62 e0       	ldi	r22, 0x02	; 2
    2480:	89 e8       	ldi	r24, 0x89	; 137
    2482:	96 e1       	ldi	r25, 0x16	; 22
    2484:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    2488:	e1 2f       	mov	r30, r17
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	ee 0f       	add	r30, r30
    248e:	ff 1f       	adc	r31, r31
    2490:	e1 5a       	subi	r30, 0xA1	; 161
    2492:	fa 4f       	sbci	r31, 0xFA	; 250
    2494:	a5 91       	lpm	r26, Z+
    2496:	b4 91       	lpm	r27, Z
    2498:	8f b7       	in	r24, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	c1 11       	cpse	r28, r1
    249e:	0c c0       	rjmp	.+24     	; 0x24b8 <_ZN12AccelStepper14disableOutputsEv+0x1c4>
    24a0:	2d 91       	ld	r18, X+
    24a2:	3c 91       	ld	r19, X
    24a4:	11 97       	sbiw	r26, 0x01	; 1
    24a6:	10 e0       	ldi	r17, 0x00	; 0
    24a8:	00 95       	com	r16
    24aa:	10 95       	com	r17
    24ac:	02 23       	and	r16, r18
    24ae:	13 23       	and	r17, r19
    24b0:	11 96       	adiw	r26, 0x01	; 1
    24b2:	1c 93       	st	X, r17
    24b4:	0e 93       	st	-X, r16
    24b6:	07 c0       	rjmp	.+14     	; 0x24c6 <_ZN12AccelStepper14disableOutputsEv+0x1d2>
    24b8:	2d 91       	ld	r18, X+
    24ba:	3c 91       	ld	r19, X
    24bc:	11 97       	sbiw	r26, 0x01	; 1
    24be:	20 2b       	or	r18, r16
    24c0:	11 96       	adiw	r26, 0x01	; 1
    24c2:	3c 93       	st	X, r19
    24c4:	2e 93       	st	-X, r18
    24c6:	8f bf       	out	0x3f, r24	; 63
    24c8:	df 91       	pop	r29
    24ca:	cf 91       	pop	r28
    24cc:	1f 91       	pop	r17
    24ce:	0f 91       	pop	r16
    24d0:	08 95       	ret

000024d2 <_ZN12AccelStepper8runSpeedEv>:
    24d2:	4f 92       	push	r4
    24d4:	5f 92       	push	r5
    24d6:	6f 92       	push	r6
    24d8:	7f 92       	push	r7
    24da:	8f 92       	push	r8
    24dc:	9f 92       	push	r9
    24de:	af 92       	push	r10
    24e0:	bf 92       	push	r11
    24e2:	cf 92       	push	r12
    24e4:	df 92       	push	r13
    24e6:	ef 92       	push	r14
    24e8:	ff 92       	push	r15
    24ea:	1f 93       	push	r17
    24ec:	cf 93       	push	r28
    24ee:	df 93       	push	r29
    24f0:	ec 01       	movw	r28, r24
    24f2:	6c a1       	ldd	r22, Y+36	; 0x24
    24f4:	7d a1       	ldd	r23, Y+37	; 0x25
    24f6:	8e a1       	ldd	r24, Y+38	; 0x26
    24f8:	9f a1       	ldd	r25, Y+39	; 0x27
    24fa:	61 15       	cp	r22, r1
    24fc:	71 05       	cpc	r23, r1
    24fe:	81 05       	cpc	r24, r1
    2500:	91 05       	cpc	r25, r1
    2502:	09 f4       	brne	.+2      	; 0x2506 <_ZN12AccelStepper8runSpeedEv+0x34>
    2504:	b0 c0       	rjmp	.+352    	; 0x2666 <_ZN12AccelStepper8runSpeedEv+0x194>
    2506:	0e 94 6f a5 	call	0x14ade	; 0x14ade <__floatunsisf>
    250a:	6b 01       	movw	r12, r22
    250c:	7c 01       	movw	r14, r24
    250e:	2b ea       	ldi	r18, 0xAB	; 171
    2510:	3a ea       	ldi	r19, 0xAA	; 170
    2512:	4a ea       	ldi	r20, 0xAA	; 170
    2514:	50 e4       	ldi	r21, 0x40	; 64
    2516:	0e 94 25 a6 	call	0x14c4a	; 0x14c4a <__mulsf3>
    251a:	4b 01       	movw	r8, r22
    251c:	5c 01       	movw	r10, r24
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e8       	ldi	r20, 0x80	; 128
    2524:	5f e3       	ldi	r21, 0x3F	; 63
    2526:	0e 94 d2 a4 	call	0x149a4	; 0x149a4 <__cmpsf2>
    252a:	88 23       	and	r24, r24
    252c:	0c f4       	brge	.+2      	; 0x2530 <_ZN12AccelStepper8runSpeedEv+0x5e>
    252e:	70 c0       	rjmp	.+224    	; 0x2610 <_ZN12AccelStepper8runSpeedEv+0x13e>
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e8       	ldi	r20, 0x80	; 128
    2536:	50 e4       	ldi	r21, 0x40	; 64
    2538:	c7 01       	movw	r24, r14
    253a:	b6 01       	movw	r22, r12
    253c:	0e 94 25 a6 	call	0x14c4a	; 0x14c4a <__mulsf3>
    2540:	2b 01       	movw	r4, r22
    2542:	3c 01       	movw	r6, r24
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	3f ef       	ldi	r19, 0xFF	; 255
    2548:	4f e7       	ldi	r20, 0x7F	; 127
    254a:	57 e4       	ldi	r21, 0x47	; 71
    254c:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <__gesf2>
    2550:	18 16       	cp	r1, r24
    2552:	0c f0       	brlt	.+2      	; 0x2556 <_ZN12AccelStepper8runSpeedEv+0x84>
    2554:	45 c0       	rjmp	.+138    	; 0x25e0 <_ZN12AccelStepper8runSpeedEv+0x10e>
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	4a e7       	ldi	r20, 0x7A	; 122
    255c:	54 e4       	ldi	r21, 0x44	; 68
    255e:	c7 01       	movw	r24, r14
    2560:	b6 01       	movw	r22, r12
    2562:	0e 94 d6 a4 	call	0x149ac	; 0x149ac <__divsf3>
    2566:	4b 01       	movw	r8, r22
    2568:	5c 01       	movw	r10, r24
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	4a e7       	ldi	r20, 0x7A	; 122
    2570:	55 e4       	ldi	r21, 0x45	; 69
    2572:	0e 94 25 a6 	call	0x14c4a	; 0x14c4a <__mulsf3>
    2576:	6b 01       	movw	r12, r22
    2578:	7c 01       	movw	r14, r24
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e8       	ldi	r20, 0x80	; 128
    2580:	5f e3       	ldi	r21, 0x3F	; 63
    2582:	0e 94 d2 a4 	call	0x149a4	; 0x149a4 <__cmpsf2>
    2586:	88 23       	and	r24, r24
    2588:	2c f1       	brlt	.+74     	; 0x25d4 <_ZN12AccelStepper8runSpeedEv+0x102>
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	3f ef       	ldi	r19, 0xFF	; 255
    258e:	4f e7       	ldi	r20, 0x7F	; 127
    2590:	57 e4       	ldi	r21, 0x47	; 71
    2592:	c7 01       	movw	r24, r14
    2594:	b6 01       	movw	r22, r12
    2596:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <__gesf2>
    259a:	18 16       	cp	r1, r24
    259c:	b4 f4       	brge	.+44     	; 0x25ca <_ZN12AccelStepper8runSpeedEv+0xf8>
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e2       	ldi	r20, 0x20	; 32
    25a4:	51 e4       	ldi	r21, 0x41	; 65
    25a6:	c5 01       	movw	r24, r10
    25a8:	b4 01       	movw	r22, r8
    25aa:	0e 94 25 a6 	call	0x14c4a	; 0x14c4a <__mulsf3>
    25ae:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    25b2:	61 15       	cp	r22, r1
    25b4:	71 05       	cpc	r23, r1
    25b6:	69 f1       	breq	.+90     	; 0x2612 <_ZN12AccelStepper8runSpeedEv+0x140>
    25b8:	20 e9       	ldi	r18, 0x90	; 144
    25ba:	31 e0       	ldi	r19, 0x01	; 1
    25bc:	c9 01       	movw	r24, r18
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <_ZN12AccelStepper8runSpeedEv+0xec>
    25c2:	61 50       	subi	r22, 0x01	; 1
    25c4:	71 09       	sbc	r23, r1
    25c6:	d1 f7       	brne	.-12     	; 0x25bc <_ZN12AccelStepper8runSpeedEv+0xea>
    25c8:	24 c0       	rjmp	.+72     	; 0x2612 <_ZN12AccelStepper8runSpeedEv+0x140>
    25ca:	c7 01       	movw	r24, r14
    25cc:	b6 01       	movw	r22, r12
    25ce:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    25d2:	02 c0       	rjmp	.+4      	; 0x25d8 <_ZN12AccelStepper8runSpeedEv+0x106>
    25d4:	61 e0       	ldi	r22, 0x01	; 1
    25d6:	70 e0       	ldi	r23, 0x00	; 0
    25d8:	cb 01       	movw	r24, r22
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	f1 f7       	brne	.-4      	; 0x25da <_ZN12AccelStepper8runSpeedEv+0x108>
    25de:	19 c0       	rjmp	.+50     	; 0x2612 <_ZN12AccelStepper8runSpeedEv+0x140>
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	4f e7       	ldi	r20, 0x7F	; 127
    25e6:	53 e4       	ldi	r21, 0x43	; 67
    25e8:	c5 01       	movw	r24, r10
    25ea:	b4 01       	movw	r22, r8
    25ec:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <__gesf2>
    25f0:	18 16       	cp	r1, r24
    25f2:	44 f4       	brge	.+16     	; 0x2604 <_ZN12AccelStepper8runSpeedEv+0x132>
    25f4:	c3 01       	movw	r24, r6
    25f6:	b2 01       	movw	r22, r4
    25f8:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    25fc:	cb 01       	movw	r24, r22
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	f1 f7       	brne	.-4      	; 0x25fe <_ZN12AccelStepper8runSpeedEv+0x12c>
    2602:	0a c0       	rjmp	.+20     	; 0x2618 <_ZN12AccelStepper8runSpeedEv+0x146>
    2604:	c5 01       	movw	r24, r10
    2606:	b4 01       	movw	r22, r8
    2608:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    260c:	16 2f       	mov	r17, r22
    260e:	01 c0       	rjmp	.+2      	; 0x2612 <_ZN12AccelStepper8runSpeedEv+0x140>
    2610:	11 e0       	ldi	r17, 0x01	; 1
    2612:	61 2f       	mov	r22, r17
    2614:	6a 95       	dec	r22
    2616:	f1 f7       	brne	.-4      	; 0x2614 <_ZN12AccelStepper8runSpeedEv+0x142>
    2618:	8a 81       	ldd	r24, Y+2	; 0x02
    261a:	81 30       	cpi	r24, 0x01	; 1
    261c:	61 f4       	brne	.+24     	; 0x2636 <_ZN12AccelStepper8runSpeedEv+0x164>
    261e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2620:	9d 85       	ldd	r25, Y+13	; 0x0d
    2622:	ae 85       	ldd	r26, Y+14	; 0x0e
    2624:	bf 85       	ldd	r27, Y+15	; 0x0f
    2626:	01 96       	adiw	r24, 0x01	; 1
    2628:	a1 1d       	adc	r26, r1
    262a:	b1 1d       	adc	r27, r1
    262c:	8c 87       	std	Y+12, r24	; 0x0c
    262e:	9d 87       	std	Y+13, r25	; 0x0d
    2630:	ae 87       	std	Y+14, r26	; 0x0e
    2632:	bf 87       	std	Y+15, r27	; 0x0f
    2634:	0b c0       	rjmp	.+22     	; 0x264c <_ZN12AccelStepper8runSpeedEv+0x17a>
    2636:	8c 85       	ldd	r24, Y+12	; 0x0c
    2638:	9d 85       	ldd	r25, Y+13	; 0x0d
    263a:	ae 85       	ldd	r26, Y+14	; 0x0e
    263c:	bf 85       	ldd	r27, Y+15	; 0x0f
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	a1 09       	sbc	r26, r1
    2642:	b1 09       	sbc	r27, r1
    2644:	8c 87       	std	Y+12, r24	; 0x0c
    2646:	9d 87       	std	Y+13, r25	; 0x0d
    2648:	ae 87       	std	Y+14, r26	; 0x0e
    264a:	bf 87       	std	Y+15, r27	; 0x0f
    264c:	4c 85       	ldd	r20, Y+12	; 0x0c
    264e:	5d 85       	ldd	r21, Y+13	; 0x0d
    2650:	6e 85       	ldd	r22, Y+14	; 0x0e
    2652:	7f 85       	ldd	r23, Y+15	; 0x0f
    2654:	e8 81       	ld	r30, Y
    2656:	f9 81       	ldd	r31, Y+1	; 0x01
    2658:	06 80       	ldd	r0, Z+6	; 0x06
    265a:	f7 81       	ldd	r31, Z+7	; 0x07
    265c:	e0 2d       	mov	r30, r0
    265e:	ce 01       	movw	r24, r28
    2660:	19 95       	eicall
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	01 c0       	rjmp	.+2      	; 0x2668 <_ZN12AccelStepper8runSpeedEv+0x196>
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	df 91       	pop	r29
    266a:	cf 91       	pop	r28
    266c:	1f 91       	pop	r17
    266e:	ff 90       	pop	r15
    2670:	ef 90       	pop	r14
    2672:	df 90       	pop	r13
    2674:	cf 90       	pop	r12
    2676:	bf 90       	pop	r11
    2678:	af 90       	pop	r10
    267a:	9f 90       	pop	r9
    267c:	8f 90       	pop	r8
    267e:	7f 90       	pop	r7
    2680:	6f 90       	pop	r6
    2682:	5f 90       	pop	r5
    2684:	4f 90       	pop	r4
    2686:	08 95       	ret

00002688 <_ZN12AccelStepper15currentPositionEv>:
    2688:	fc 01       	movw	r30, r24
    268a:	64 85       	ldd	r22, Z+12	; 0x0c
    268c:	75 85       	ldd	r23, Z+13	; 0x0d
    268e:	86 85       	ldd	r24, Z+14	; 0x0e
    2690:	97 85       	ldd	r25, Z+15	; 0x0f
    2692:	08 95       	ret

00002694 <_ZN12AccelStepper18setCurrentPositionEl>:
    2694:	fc 01       	movw	r30, r24
    2696:	44 87       	std	Z+12, r20	; 0x0c
    2698:	55 87       	std	Z+13, r21	; 0x0d
    269a:	66 87       	std	Z+14, r22	; 0x0e
    269c:	77 87       	std	Z+15, r23	; 0x0f
    269e:	40 8b       	std	Z+16, r20	; 0x10
    26a0:	51 8b       	std	Z+17, r21	; 0x11
    26a2:	62 8b       	std	Z+18, r22	; 0x12
    26a4:	73 8b       	std	Z+19, r23	; 0x13
    26a6:	14 aa       	std	Z+52, r1	; 0x34
    26a8:	15 aa       	std	Z+53, r1	; 0x35
    26aa:	16 aa       	std	Z+54, r1	; 0x36
    26ac:	17 aa       	std	Z+55, r1	; 0x37
    26ae:	14 a2       	std	Z+36, r1	; 0x24
    26b0:	15 a2       	std	Z+37, r1	; 0x25
    26b2:	16 a2       	std	Z+38, r1	; 0x26
    26b4:	17 a2       	std	Z+39, r1	; 0x27
    26b6:	14 8a       	std	Z+20, r1	; 0x14
    26b8:	15 8a       	std	Z+21, r1	; 0x15
    26ba:	16 8a       	std	Z+22, r1	; 0x16
    26bc:	17 8a       	std	Z+23, r1	; 0x17
    26be:	08 95       	ret

000026c0 <_ZN12AccelStepper15computeNewSpeedEv>:
    26c0:	4f 92       	push	r4
    26c2:	5f 92       	push	r5
    26c4:	6f 92       	push	r6
    26c6:	7f 92       	push	r7
    26c8:	8f 92       	push	r8
    26ca:	9f 92       	push	r9
    26cc:	af 92       	push	r10
    26ce:	bf 92       	push	r11
    26d0:	cf 92       	push	r12
    26d2:	df 92       	push	r13
    26d4:	ef 92       	push	r14
    26d6:	ff 92       	push	r15
    26d8:	0f 93       	push	r16
    26da:	1f 93       	push	r17
    26dc:	cf 93       	push	r28
    26de:	df 93       	push	r29
    26e0:	ec 01       	movw	r28, r24
    26e2:	c8 88       	ldd	r12, Y+16	; 0x10
    26e4:	d9 88       	ldd	r13, Y+17	; 0x11
    26e6:	ea 88       	ldd	r14, Y+18	; 0x12
    26e8:	fb 88       	ldd	r15, Y+19	; 0x13
    26ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    26ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    26ee:	ae 85       	ldd	r26, Y+14	; 0x0e
    26f0:	bf 85       	ldd	r27, Y+15	; 0x0f
    26f2:	c8 1a       	sub	r12, r24
    26f4:	d9 0a       	sbc	r13, r25
    26f6:	ea 0a       	sbc	r14, r26
    26f8:	fb 0a       	sbc	r15, r27
    26fa:	6c 89       	ldd	r22, Y+20	; 0x14
    26fc:	7d 89       	ldd	r23, Y+21	; 0x15
    26fe:	8e 89       	ldd	r24, Y+22	; 0x16
    2700:	9f 89       	ldd	r25, Y+23	; 0x17
    2702:	9b 01       	movw	r18, r22
    2704:	ac 01       	movw	r20, r24
    2706:	0e 94 25 a6 	call	0x14c4a	; 0x14c4a <__mulsf3>
    270a:	4b 01       	movw	r8, r22
    270c:	5c 01       	movw	r10, r24
    270e:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2710:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2712:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2714:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2716:	9b 01       	movw	r18, r22
    2718:	ac 01       	movw	r20, r24
    271a:	0e 94 6e a4 	call	0x148dc	; 0x148dc <__addsf3>
    271e:	9b 01       	movw	r18, r22
    2720:	ac 01       	movw	r20, r24
    2722:	c5 01       	movw	r24, r10
    2724:	b4 01       	movw	r22, r8
    2726:	0e 94 d6 a4 	call	0x149ac	; 0x149ac <__divsf3>
    272a:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    272e:	c1 14       	cp	r12, r1
    2730:	d1 04       	cpc	r13, r1
    2732:	e1 04       	cpc	r14, r1
    2734:	f1 04       	cpc	r15, r1
    2736:	99 f4       	brne	.+38     	; 0x275e <_ZN12AccelStepper15computeNewSpeedEv+0x9e>
    2738:	62 30       	cpi	r22, 0x02	; 2
    273a:	71 05       	cpc	r23, r1
    273c:	81 05       	cpc	r24, r1
    273e:	91 05       	cpc	r25, r1
    2740:	0c f0       	brlt	.+2      	; 0x2744 <_ZN12AccelStepper15computeNewSpeedEv+0x84>
    2742:	8f c0       	rjmp	.+286    	; 0x2862 <_ZN12AccelStepper15computeNewSpeedEv+0x1a2>
    2744:	1c a2       	std	Y+36, r1	; 0x24
    2746:	1d a2       	std	Y+37, r1	; 0x25
    2748:	1e a2       	std	Y+38, r1	; 0x26
    274a:	1f a2       	std	Y+39, r1	; 0x27
    274c:	1c 8a       	std	Y+20, r1	; 0x14
    274e:	1d 8a       	std	Y+21, r1	; 0x15
    2750:	1e 8a       	std	Y+22, r1	; 0x16
    2752:	1f 8a       	std	Y+23, r1	; 0x17
    2754:	1c aa       	std	Y+52, r1	; 0x34
    2756:	1d aa       	std	Y+53, r1	; 0x35
    2758:	1e aa       	std	Y+54, r1	; 0x36
    275a:	1f aa       	std	Y+55, r1	; 0x37
    275c:	10 c1       	rjmp	.+544    	; 0x297e <_ZN12AccelStepper15computeNewSpeedEv+0x2be>
    275e:	1c 14       	cp	r1, r12
    2760:	1d 04       	cpc	r1, r13
    2762:	1e 04       	cpc	r1, r14
    2764:	1f 04       	cpc	r1, r15
    2766:	c4 f5       	brge	.+112    	; 0x27d8 <_ZN12AccelStepper15computeNewSpeedEv+0x118>
    2768:	0c a9       	ldd	r16, Y+52	; 0x34
    276a:	1d a9       	ldd	r17, Y+53	; 0x35
    276c:	2e a9       	ldd	r18, Y+54	; 0x36
    276e:	3f a9       	ldd	r19, Y+55	; 0x37
    2770:	10 16       	cp	r1, r16
    2772:	11 06       	cpc	r1, r17
    2774:	12 06       	cpc	r1, r18
    2776:	13 06       	cpc	r1, r19
    2778:	b4 f4       	brge	.+44     	; 0x27a6 <_ZN12AccelStepper15computeNewSpeedEv+0xe6>
    277a:	6c 15       	cp	r22, r12
    277c:	7d 05       	cpc	r23, r13
    277e:	8e 05       	cpc	r24, r14
    2780:	9f 05       	cpc	r25, r15
    2782:	1c f4       	brge	.+6      	; 0x278a <_ZN12AccelStepper15computeNewSpeedEv+0xca>
    2784:	2a 81       	ldd	r18, Y+2	; 0x02
    2786:	21 11       	cpse	r18, r1
    2788:	6c c0       	rjmp	.+216    	; 0x2862 <_ZN12AccelStepper15computeNewSpeedEv+0x1a2>
    278a:	9b 01       	movw	r18, r22
    278c:	ac 01       	movw	r20, r24
    278e:	88 27       	eor	r24, r24
    2790:	99 27       	eor	r25, r25
    2792:	dc 01       	movw	r26, r24
    2794:	82 1b       	sub	r24, r18
    2796:	93 0b       	sbc	r25, r19
    2798:	a4 0b       	sbc	r26, r20
    279a:	b5 0b       	sbc	r27, r21
    279c:	8c ab       	std	Y+52, r24	; 0x34
    279e:	9d ab       	std	Y+53, r25	; 0x35
    27a0:	ae ab       	std	Y+54, r26	; 0x36
    27a2:	bf ab       	std	Y+55, r27	; 0x37
    27a4:	5e c0       	rjmp	.+188    	; 0x2862 <_ZN12AccelStepper15computeNewSpeedEv+0x1a2>
    27a6:	33 23       	and	r19, r19
    27a8:	0c f0       	brlt	.+2      	; 0x27ac <_ZN12AccelStepper15computeNewSpeedEv+0xec>
    27aa:	5b c0       	rjmp	.+182    	; 0x2862 <_ZN12AccelStepper15computeNewSpeedEv+0x1a2>
    27ac:	6c 15       	cp	r22, r12
    27ae:	7d 05       	cpc	r23, r13
    27b0:	8e 05       	cpc	r24, r14
    27b2:	9f 05       	cpc	r25, r15
    27b4:	0c f0       	brlt	.+2      	; 0x27b8 <_ZN12AccelStepper15computeNewSpeedEv+0xf8>
    27b6:	55 c0       	rjmp	.+170    	; 0x2862 <_ZN12AccelStepper15computeNewSpeedEv+0x1a2>
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	81 30       	cpi	r24, 0x01	; 1
    27bc:	09 f0       	breq	.+2      	; 0x27c0 <_ZN12AccelStepper15computeNewSpeedEv+0x100>
    27be:	51 c0       	rjmp	.+162    	; 0x2862 <_ZN12AccelStepper15computeNewSpeedEv+0x1a2>
    27c0:	30 95       	com	r19
    27c2:	20 95       	com	r18
    27c4:	10 95       	com	r17
    27c6:	01 95       	neg	r16
    27c8:	1f 4f       	sbci	r17, 0xFF	; 255
    27ca:	2f 4f       	sbci	r18, 0xFF	; 255
    27cc:	3f 4f       	sbci	r19, 0xFF	; 255
    27ce:	0c ab       	std	Y+52, r16	; 0x34
    27d0:	1d ab       	std	Y+53, r17	; 0x35
    27d2:	2e ab       	std	Y+54, r18	; 0x36
    27d4:	3f ab       	std	Y+55, r19	; 0x37
    27d6:	45 c0       	rjmp	.+138    	; 0x2862 <_ZN12AccelStepper15computeNewSpeedEv+0x1a2>
    27d8:	ff 20       	and	r15, r15
    27da:	0c f0       	brlt	.+2      	; 0x27de <_ZN12AccelStepper15computeNewSpeedEv+0x11e>
    27dc:	42 c0       	rjmp	.+132    	; 0x2862 <_ZN12AccelStepper15computeNewSpeedEv+0x1a2>
    27de:	0c a9       	ldd	r16, Y+52	; 0x34
    27e0:	1d a9       	ldd	r17, Y+53	; 0x35
    27e2:	2e a9       	ldd	r18, Y+54	; 0x36
    27e4:	3f a9       	ldd	r19, Y+55	; 0x37
    27e6:	10 16       	cp	r1, r16
    27e8:	11 06       	cpc	r1, r17
    27ea:	12 06       	cpc	r1, r18
    27ec:	13 06       	cpc	r1, r19
    27ee:	ec f4       	brge	.+58     	; 0x282a <_ZN12AccelStepper15computeNewSpeedEv+0x16a>
    27f0:	00 27       	eor	r16, r16
    27f2:	11 27       	eor	r17, r17
    27f4:	98 01       	movw	r18, r16
    27f6:	0c 19       	sub	r16, r12
    27f8:	1d 09       	sbc	r17, r13
    27fa:	2e 09       	sbc	r18, r14
    27fc:	3f 09       	sbc	r19, r15
    27fe:	60 17       	cp	r22, r16
    2800:	71 07       	cpc	r23, r17
    2802:	82 07       	cpc	r24, r18
    2804:	93 07       	cpc	r25, r19
    2806:	1c f4       	brge	.+6      	; 0x280e <_ZN12AccelStepper15computeNewSpeedEv+0x14e>
    2808:	2a 81       	ldd	r18, Y+2	; 0x02
    280a:	21 30       	cpi	r18, 0x01	; 1
    280c:	51 f5       	brne	.+84     	; 0x2862 <_ZN12AccelStepper15computeNewSpeedEv+0x1a2>
    280e:	9b 01       	movw	r18, r22
    2810:	ac 01       	movw	r20, r24
    2812:	88 27       	eor	r24, r24
    2814:	99 27       	eor	r25, r25
    2816:	dc 01       	movw	r26, r24
    2818:	82 1b       	sub	r24, r18
    281a:	93 0b       	sbc	r25, r19
    281c:	a4 0b       	sbc	r26, r20
    281e:	b5 0b       	sbc	r27, r21
    2820:	8c ab       	std	Y+52, r24	; 0x34
    2822:	9d ab       	std	Y+53, r25	; 0x35
    2824:	ae ab       	std	Y+54, r26	; 0x36
    2826:	bf ab       	std	Y+55, r27	; 0x37
    2828:	1c c0       	rjmp	.+56     	; 0x2862 <_ZN12AccelStepper15computeNewSpeedEv+0x1a2>
    282a:	33 23       	and	r19, r19
    282c:	d4 f4       	brge	.+52     	; 0x2862 <_ZN12AccelStepper15computeNewSpeedEv+0x1a2>
    282e:	88 24       	eor	r8, r8
    2830:	99 24       	eor	r9, r9
    2832:	54 01       	movw	r10, r8
    2834:	8c 18       	sub	r8, r12
    2836:	9d 08       	sbc	r9, r13
    2838:	ae 08       	sbc	r10, r14
    283a:	bf 08       	sbc	r11, r15
    283c:	68 15       	cp	r22, r8
    283e:	79 05       	cpc	r23, r9
    2840:	8a 05       	cpc	r24, r10
    2842:	9b 05       	cpc	r25, r11
    2844:	74 f4       	brge	.+28     	; 0x2862 <_ZN12AccelStepper15computeNewSpeedEv+0x1a2>
    2846:	8a 81       	ldd	r24, Y+2	; 0x02
    2848:	81 11       	cpse	r24, r1
    284a:	0b c0       	rjmp	.+22     	; 0x2862 <_ZN12AccelStepper15computeNewSpeedEv+0x1a2>
    284c:	30 95       	com	r19
    284e:	20 95       	com	r18
    2850:	10 95       	com	r17
    2852:	01 95       	neg	r16
    2854:	1f 4f       	sbci	r17, 0xFF	; 255
    2856:	2f 4f       	sbci	r18, 0xFF	; 255
    2858:	3f 4f       	sbci	r19, 0xFF	; 255
    285a:	0c ab       	std	Y+52, r16	; 0x34
    285c:	1d ab       	std	Y+53, r17	; 0x35
    285e:	2e ab       	std	Y+54, r18	; 0x36
    2860:	3f ab       	std	Y+55, r19	; 0x37
    2862:	8c a8       	ldd	r8, Y+52	; 0x34
    2864:	9d a8       	ldd	r9, Y+53	; 0x35
    2866:	ae a8       	ldd	r10, Y+54	; 0x36
    2868:	bf a8       	ldd	r11, Y+55	; 0x37
    286a:	81 14       	cp	r8, r1
    286c:	91 04       	cpc	r9, r1
    286e:	a1 04       	cpc	r10, r1
    2870:	b1 04       	cpc	r11, r1
    2872:	89 f4       	brne	.+34     	; 0x2896 <_ZN12AccelStepper15computeNewSpeedEv+0x1d6>
    2874:	88 ad       	ldd	r24, Y+56	; 0x38
    2876:	99 ad       	ldd	r25, Y+57	; 0x39
    2878:	aa ad       	ldd	r26, Y+58	; 0x3a
    287a:	bb ad       	ldd	r27, Y+59	; 0x3b
    287c:	8c af       	std	Y+60, r24	; 0x3c
    287e:	9d af       	std	Y+61, r25	; 0x3d
    2880:	ae af       	std	Y+62, r26	; 0x3e
    2882:	bf af       	std	Y+63, r27	; 0x3f
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	1c 14       	cp	r1, r12
    2888:	1d 04       	cpc	r1, r13
    288a:	1e 04       	cpc	r1, r14
    288c:	1f 04       	cpc	r1, r15
    288e:	0c f0       	brlt	.+2      	; 0x2892 <_ZN12AccelStepper15computeNewSpeedEv+0x1d2>
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	8a 83       	std	Y+2, r24	; 0x02
    2894:	47 c0       	rjmp	.+142    	; 0x2924 <_ZN12AccelStepper15computeNewSpeedEv+0x264>
    2896:	cc ac       	ldd	r12, Y+60	; 0x3c
    2898:	dd ac       	ldd	r13, Y+61	; 0x3d
    289a:	ee ac       	ldd	r14, Y+62	; 0x3e
    289c:	ff ac       	ldd	r15, Y+63	; 0x3f
    289e:	a7 01       	movw	r20, r14
    28a0:	96 01       	movw	r18, r12
    28a2:	c7 01       	movw	r24, r14
    28a4:	b6 01       	movw	r22, r12
    28a6:	0e 94 6e a4 	call	0x148dc	; 0x148dc <__addsf3>
    28aa:	2b 01       	movw	r4, r22
    28ac:	3c 01       	movw	r6, r24
    28ae:	c5 01       	movw	r24, r10
    28b0:	b4 01       	movw	r22, r8
    28b2:	0e 94 71 a5 	call	0x14ae2	; 0x14ae2 <__floatsisf>
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e8       	ldi	r20, 0x80	; 128
    28bc:	50 e4       	ldi	r21, 0x40	; 64
    28be:	0e 94 25 a6 	call	0x14c4a	; 0x14c4a <__mulsf3>
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	40 e8       	ldi	r20, 0x80	; 128
    28c8:	5f e3       	ldi	r21, 0x3F	; 63
    28ca:	0e 94 6e a4 	call	0x148dc	; 0x148dc <__addsf3>
    28ce:	9b 01       	movw	r18, r22
    28d0:	ac 01       	movw	r20, r24
    28d2:	c3 01       	movw	r24, r6
    28d4:	b2 01       	movw	r22, r4
    28d6:	0e 94 d6 a4 	call	0x149ac	; 0x149ac <__divsf3>
    28da:	9b 01       	movw	r18, r22
    28dc:	ac 01       	movw	r20, r24
    28de:	c7 01       	movw	r24, r14
    28e0:	b6 01       	movw	r22, r12
    28e2:	0e 94 6d a4 	call	0x148da	; 0x148da <__subsf3>
    28e6:	a6 2e       	mov	r10, r22
    28e8:	b7 2e       	mov	r11, r23
    28ea:	08 2f       	mov	r16, r24
    28ec:	19 2f       	mov	r17, r25
    28ee:	fe 01       	movw	r30, r28
    28f0:	e0 5c       	subi	r30, 0xC0	; 192
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	c0 80       	ld	r12, Z
    28f6:	d1 80       	ldd	r13, Z+1	; 0x01
    28f8:	e2 80       	ldd	r14, Z+2	; 0x02
    28fa:	f3 80       	ldd	r15, Z+3	; 0x03
    28fc:	2c 2d       	mov	r18, r12
    28fe:	3d 2d       	mov	r19, r13
    2900:	4e 2d       	mov	r20, r14
    2902:	5f 2d       	mov	r21, r15
    2904:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <__gesf2>
    2908:	18 16       	cp	r1, r24
    290a:	24 f4       	brge	.+8      	; 0x2914 <_ZN12AccelStepper15computeNewSpeedEv+0x254>
    290c:	ca 2c       	mov	r12, r10
    290e:	db 2c       	mov	r13, r11
    2910:	e0 2e       	mov	r14, r16
    2912:	f1 2e       	mov	r15, r17
    2914:	8c 2d       	mov	r24, r12
    2916:	9d 2d       	mov	r25, r13
    2918:	ae 2d       	mov	r26, r14
    291a:	bf 2d       	mov	r27, r15
    291c:	8c af       	std	Y+60, r24	; 0x3c
    291e:	9d af       	std	Y+61, r25	; 0x3d
    2920:	ae af       	std	Y+62, r26	; 0x3e
    2922:	bf af       	std	Y+63, r27	; 0x3f
    2924:	8c a9       	ldd	r24, Y+52	; 0x34
    2926:	9d a9       	ldd	r25, Y+53	; 0x35
    2928:	ae a9       	ldd	r26, Y+54	; 0x36
    292a:	bf a9       	ldd	r27, Y+55	; 0x37
    292c:	01 96       	adiw	r24, 0x01	; 1
    292e:	a1 1d       	adc	r26, r1
    2930:	b1 1d       	adc	r27, r1
    2932:	8c ab       	std	Y+52, r24	; 0x34
    2934:	9d ab       	std	Y+53, r25	; 0x35
    2936:	ae ab       	std	Y+54, r26	; 0x36
    2938:	bf ab       	std	Y+55, r27	; 0x37
    293a:	cc ac       	ldd	r12, Y+60	; 0x3c
    293c:	dd ac       	ldd	r13, Y+61	; 0x3d
    293e:	ee ac       	ldd	r14, Y+62	; 0x3e
    2940:	ff ac       	ldd	r15, Y+63	; 0x3f
    2942:	c7 01       	movw	r24, r14
    2944:	b6 01       	movw	r22, r12
    2946:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    294a:	6c a3       	std	Y+36, r22	; 0x24
    294c:	7d a3       	std	Y+37, r23	; 0x25
    294e:	8e a3       	std	Y+38, r24	; 0x26
    2950:	9f a3       	std	Y+39, r25	; 0x27
    2952:	a7 01       	movw	r20, r14
    2954:	96 01       	movw	r18, r12
    2956:	60 e0       	ldi	r22, 0x00	; 0
    2958:	74 e2       	ldi	r23, 0x24	; 36
    295a:	84 e7       	ldi	r24, 0x74	; 116
    295c:	99 e4       	ldi	r25, 0x49	; 73
    295e:	0e 94 d6 a4 	call	0x149ac	; 0x149ac <__divsf3>
    2962:	6c 8b       	std	Y+20, r22	; 0x14
    2964:	7d 8b       	std	Y+21, r23	; 0x15
    2966:	8e 8b       	std	Y+22, r24	; 0x16
    2968:	9f 8b       	std	Y+23, r25	; 0x17
    296a:	2a 81       	ldd	r18, Y+2	; 0x02
    296c:	21 11       	cpse	r18, r1
    296e:	07 c0       	rjmp	.+14     	; 0x297e <_ZN12AccelStepper15computeNewSpeedEv+0x2be>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	b0 58       	subi	r27, 0x80	; 128
    2976:	8c 8b       	std	Y+20, r24	; 0x14
    2978:	9d 8b       	std	Y+21, r25	; 0x15
    297a:	ae 8b       	std	Y+22, r26	; 0x16
    297c:	bf 8b       	std	Y+23, r27	; 0x17
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	1f 91       	pop	r17
    2984:	0f 91       	pop	r16
    2986:	ff 90       	pop	r15
    2988:	ef 90       	pop	r14
    298a:	df 90       	pop	r13
    298c:	cf 90       	pop	r12
    298e:	bf 90       	pop	r11
    2990:	af 90       	pop	r10
    2992:	9f 90       	pop	r9
    2994:	8f 90       	pop	r8
    2996:	7f 90       	pop	r7
    2998:	6f 90       	pop	r6
    299a:	5f 90       	pop	r5
    299c:	4f 90       	pop	r4
    299e:	08 95       	ret

000029a0 <_ZN12AccelStepper6moveToEl>:
    29a0:	0f 93       	push	r16
    29a2:	1f 93       	push	r17
    29a4:	fc 01       	movw	r30, r24
    29a6:	00 89       	ldd	r16, Z+16	; 0x10
    29a8:	11 89       	ldd	r17, Z+17	; 0x11
    29aa:	22 89       	ldd	r18, Z+18	; 0x12
    29ac:	33 89       	ldd	r19, Z+19	; 0x13
    29ae:	04 17       	cp	r16, r20
    29b0:	15 07       	cpc	r17, r21
    29b2:	26 07       	cpc	r18, r22
    29b4:	37 07       	cpc	r19, r23
    29b6:	29 f0       	breq	.+10     	; 0x29c2 <_ZN12AccelStepper6moveToEl+0x22>
    29b8:	40 8b       	std	Z+16, r20	; 0x10
    29ba:	51 8b       	std	Z+17, r21	; 0x11
    29bc:	62 8b       	std	Z+18, r22	; 0x12
    29be:	73 8b       	std	Z+19, r23	; 0x13
    29c0:	7f de       	rcall	.-770    	; 0x26c0 <_ZN12AccelStepper15computeNewSpeedEv>
    29c2:	1f 91       	pop	r17
    29c4:	0f 91       	pop	r16
    29c6:	08 95       	ret

000029c8 <_ZN12AccelStepper4moveEl>:
    29c8:	0f 93       	push	r16
    29ca:	1f 93       	push	r17
    29cc:	fc 01       	movw	r30, r24
    29ce:	04 85       	ldd	r16, Z+12	; 0x0c
    29d0:	15 85       	ldd	r17, Z+13	; 0x0d
    29d2:	26 85       	ldd	r18, Z+14	; 0x0e
    29d4:	37 85       	ldd	r19, Z+15	; 0x0f
    29d6:	40 0f       	add	r20, r16
    29d8:	51 1f       	adc	r21, r17
    29da:	62 1f       	adc	r22, r18
    29dc:	73 1f       	adc	r23, r19
    29de:	e0 df       	rcall	.-64     	; 0x29a0 <_ZN12AccelStepper6moveToEl>
    29e0:	1f 91       	pop	r17
    29e2:	0f 91       	pop	r16
    29e4:	08 95       	ret

000029e6 <_ZN12AccelStepper3runEv>:
    29e6:	0f 93       	push	r16
    29e8:	1f 93       	push	r17
    29ea:	cf 93       	push	r28
    29ec:	df 93       	push	r29
    29ee:	ec 01       	movw	r28, r24
    29f0:	70 dd       	rcall	.-1312   	; 0x24d2 <_ZN12AccelStepper8runSpeedEv>
    29f2:	88 23       	and	r24, r24
    29f4:	11 f0       	breq	.+4      	; 0x29fa <_ZN12AccelStepper3runEv+0x14>
    29f6:	ce 01       	movw	r24, r28
    29f8:	63 de       	rcall	.-826    	; 0x26c0 <_ZN12AccelStepper15computeNewSpeedEv>
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	a9 01       	movw	r20, r18
    2a00:	6c 89       	ldd	r22, Y+20	; 0x14
    2a02:	7d 89       	ldd	r23, Y+21	; 0x15
    2a04:	8e 89       	ldd	r24, Y+22	; 0x16
    2a06:	9f 89       	ldd	r25, Y+23	; 0x17
    2a08:	0e 94 d2 a4 	call	0x149a4	; 0x149a4 <__cmpsf2>
    2a0c:	81 11       	cpse	r24, r1
    2a0e:	10 c0       	rjmp	.+32     	; 0x2a30 <_ZN12AccelStepper3runEv+0x4a>
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	08 89       	ldd	r16, Y+16	; 0x10
    2a14:	19 89       	ldd	r17, Y+17	; 0x11
    2a16:	2a 89       	ldd	r18, Y+18	; 0x12
    2a18:	3b 89       	ldd	r19, Y+19	; 0x13
    2a1a:	4c 85       	ldd	r20, Y+12	; 0x0c
    2a1c:	5d 85       	ldd	r21, Y+13	; 0x0d
    2a1e:	6e 85       	ldd	r22, Y+14	; 0x0e
    2a20:	7f 85       	ldd	r23, Y+15	; 0x0f
    2a22:	04 17       	cp	r16, r20
    2a24:	15 07       	cpc	r17, r21
    2a26:	26 07       	cpc	r18, r22
    2a28:	37 07       	cpc	r19, r23
    2a2a:	19 f4       	brne	.+6      	; 0x2a32 <_ZN12AccelStepper3runEv+0x4c>
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	01 c0       	rjmp	.+2      	; 0x2a32 <_ZN12AccelStepper3runEv+0x4c>
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	df 91       	pop	r29
    2a34:	cf 91       	pop	r28
    2a36:	1f 91       	pop	r17
    2a38:	0f 91       	pop	r16
    2a3a:	08 95       	ret

00002a3c <_ZN12AccelStepper11setMaxSpeedEf>:
    2a3c:	cf 92       	push	r12
    2a3e:	df 92       	push	r13
    2a40:	ef 92       	push	r14
    2a42:	ff 92       	push	r15
    2a44:	0f 93       	push	r16
    2a46:	1f 93       	push	r17
    2a48:	cf 93       	push	r28
    2a4a:	df 93       	push	r29
    2a4c:	ec 01       	movw	r28, r24
    2a4e:	6a 01       	movw	r12, r20
    2a50:	7b 01       	movw	r14, r22
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	a9 01       	movw	r20, r18
    2a58:	c7 01       	movw	r24, r14
    2a5a:	b6 01       	movw	r22, r12
    2a5c:	0e 94 d2 a4 	call	0x149a4	; 0x149a4 <__cmpsf2>
    2a60:	88 23       	and	r24, r24
    2a62:	24 f4       	brge	.+8      	; 0x2a6c <_ZN12AccelStepper11setMaxSpeedEf+0x30>
    2a64:	f7 fa       	bst	r15, 7
    2a66:	f0 94       	com	r15
    2a68:	f7 f8       	bld	r15, 7
    2a6a:	f0 94       	com	r15
    2a6c:	28 8d       	ldd	r18, Y+24	; 0x18
    2a6e:	39 8d       	ldd	r19, Y+25	; 0x19
    2a70:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2a72:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2a74:	c7 01       	movw	r24, r14
    2a76:	b6 01       	movw	r22, r12
    2a78:	0e 94 d2 a4 	call	0x149a4	; 0x149a4 <__cmpsf2>
    2a7c:	88 23       	and	r24, r24
    2a7e:	e9 f1       	breq	.+122    	; 0x2afa <_ZN12AccelStepper11setMaxSpeedEf+0xbe>
    2a80:	c8 8e       	std	Y+24, r12	; 0x18
    2a82:	d9 8e       	std	Y+25, r13	; 0x19
    2a84:	ea 8e       	std	Y+26, r14	; 0x1a
    2a86:	fb 8e       	std	Y+27, r15	; 0x1b
    2a88:	8e 01       	movw	r16, r28
    2a8a:	00 5c       	subi	r16, 0xC0	; 192
    2a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a8e:	a7 01       	movw	r20, r14
    2a90:	96 01       	movw	r18, r12
    2a92:	60 e0       	ldi	r22, 0x00	; 0
    2a94:	74 e2       	ldi	r23, 0x24	; 36
    2a96:	84 e7       	ldi	r24, 0x74	; 116
    2a98:	99 e4       	ldi	r25, 0x49	; 73
    2a9a:	0e 94 d6 a4 	call	0x149ac	; 0x149ac <__divsf3>
    2a9e:	f8 01       	movw	r30, r16
    2aa0:	60 83       	st	Z, r22
    2aa2:	71 83       	std	Z+1, r23	; 0x01
    2aa4:	82 83       	std	Z+2, r24	; 0x02
    2aa6:	93 83       	std	Z+3, r25	; 0x03
    2aa8:	8c a9       	ldd	r24, Y+52	; 0x34
    2aaa:	9d a9       	ldd	r25, Y+53	; 0x35
    2aac:	ae a9       	ldd	r26, Y+54	; 0x36
    2aae:	bf a9       	ldd	r27, Y+55	; 0x37
    2ab0:	18 16       	cp	r1, r24
    2ab2:	19 06       	cpc	r1, r25
    2ab4:	1a 06       	cpc	r1, r26
    2ab6:	1b 06       	cpc	r1, r27
    2ab8:	04 f5       	brge	.+64     	; 0x2afa <_ZN12AccelStepper11setMaxSpeedEf+0xbe>
    2aba:	6c 89       	ldd	r22, Y+20	; 0x14
    2abc:	7d 89       	ldd	r23, Y+21	; 0x15
    2abe:	8e 89       	ldd	r24, Y+22	; 0x16
    2ac0:	9f 89       	ldd	r25, Y+23	; 0x17
    2ac2:	9b 01       	movw	r18, r22
    2ac4:	ac 01       	movw	r20, r24
    2ac6:	0e 94 25 a6 	call	0x14c4a	; 0x14c4a <__mulsf3>
    2aca:	6b 01       	movw	r12, r22
    2acc:	7c 01       	movw	r14, r24
    2ace:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2ad0:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2ad2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ad4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ad6:	9b 01       	movw	r18, r22
    2ad8:	ac 01       	movw	r20, r24
    2ada:	0e 94 6e a4 	call	0x148dc	; 0x148dc <__addsf3>
    2ade:	9b 01       	movw	r18, r22
    2ae0:	ac 01       	movw	r20, r24
    2ae2:	c7 01       	movw	r24, r14
    2ae4:	b6 01       	movw	r22, r12
    2ae6:	0e 94 d6 a4 	call	0x149ac	; 0x149ac <__divsf3>
    2aea:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    2aee:	6c ab       	std	Y+52, r22	; 0x34
    2af0:	7d ab       	std	Y+53, r23	; 0x35
    2af2:	8e ab       	std	Y+54, r24	; 0x36
    2af4:	9f ab       	std	Y+55, r25	; 0x37
    2af6:	ce 01       	movw	r24, r28
    2af8:	e3 dd       	rcall	.-1082   	; 0x26c0 <_ZN12AccelStepper15computeNewSpeedEv>
    2afa:	df 91       	pop	r29
    2afc:	cf 91       	pop	r28
    2afe:	1f 91       	pop	r17
    2b00:	0f 91       	pop	r16
    2b02:	ff 90       	pop	r15
    2b04:	ef 90       	pop	r14
    2b06:	df 90       	pop	r13
    2b08:	cf 90       	pop	r12
    2b0a:	08 95       	ret

00002b0c <_ZN12AccelStepper15setAccelerationEf>:
    2b0c:	4f 92       	push	r4
    2b0e:	5f 92       	push	r5
    2b10:	6f 92       	push	r6
    2b12:	7f 92       	push	r7
    2b14:	8f 92       	push	r8
    2b16:	9f 92       	push	r9
    2b18:	af 92       	push	r10
    2b1a:	bf 92       	push	r11
    2b1c:	cf 92       	push	r12
    2b1e:	df 92       	push	r13
    2b20:	ef 92       	push	r14
    2b22:	ff 92       	push	r15
    2b24:	cf 93       	push	r28
    2b26:	df 93       	push	r29
    2b28:	ec 01       	movw	r28, r24
    2b2a:	6a 01       	movw	r12, r20
    2b2c:	7b 01       	movw	r14, r22
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	a9 01       	movw	r20, r18
    2b34:	c7 01       	movw	r24, r14
    2b36:	b6 01       	movw	r22, r12
    2b38:	0e 94 d2 a4 	call	0x149a4	; 0x149a4 <__cmpsf2>
    2b3c:	88 23       	and	r24, r24
    2b3e:	09 f4       	brne	.+2      	; 0x2b42 <_ZN12AccelStepper15setAccelerationEf+0x36>
    2b40:	53 c0       	rjmp	.+166    	; 0x2be8 <_ZN12AccelStepper15setAccelerationEf+0xdc>
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	a9 01       	movw	r20, r18
    2b48:	c7 01       	movw	r24, r14
    2b4a:	b6 01       	movw	r22, r12
    2b4c:	0e 94 d2 a4 	call	0x149a4	; 0x149a4 <__cmpsf2>
    2b50:	88 23       	and	r24, r24
    2b52:	24 f4       	brge	.+8      	; 0x2b5c <_ZN12AccelStepper15setAccelerationEf+0x50>
    2b54:	f7 fa       	bst	r15, 7
    2b56:	f0 94       	com	r15
    2b58:	f7 f8       	bld	r15, 7
    2b5a:	f0 94       	com	r15
    2b5c:	8c 8c       	ldd	r8, Y+28	; 0x1c
    2b5e:	9d 8c       	ldd	r9, Y+29	; 0x1d
    2b60:	ae 8c       	ldd	r10, Y+30	; 0x1e
    2b62:	bf 8c       	ldd	r11, Y+31	; 0x1f
    2b64:	a5 01       	movw	r20, r10
    2b66:	94 01       	movw	r18, r8
    2b68:	c7 01       	movw	r24, r14
    2b6a:	b6 01       	movw	r22, r12
    2b6c:	0e 94 d2 a4 	call	0x149a4	; 0x149a4 <__cmpsf2>
    2b70:	88 23       	and	r24, r24
    2b72:	d1 f1       	breq	.+116    	; 0x2be8 <_ZN12AccelStepper15setAccelerationEf+0xdc>
    2b74:	6c a9       	ldd	r22, Y+52	; 0x34
    2b76:	7d a9       	ldd	r23, Y+53	; 0x35
    2b78:	8e a9       	ldd	r24, Y+54	; 0x36
    2b7a:	9f a9       	ldd	r25, Y+55	; 0x37
    2b7c:	0e 94 71 a5 	call	0x14ae2	; 0x14ae2 <__floatsisf>
    2b80:	2b 01       	movw	r4, r22
    2b82:	3c 01       	movw	r6, r24
    2b84:	a7 01       	movw	r20, r14
    2b86:	96 01       	movw	r18, r12
    2b88:	c5 01       	movw	r24, r10
    2b8a:	b4 01       	movw	r22, r8
    2b8c:	0e 94 d6 a4 	call	0x149ac	; 0x149ac <__divsf3>
    2b90:	9b 01       	movw	r18, r22
    2b92:	ac 01       	movw	r20, r24
    2b94:	c3 01       	movw	r24, r6
    2b96:	b2 01       	movw	r22, r4
    2b98:	0e 94 25 a6 	call	0x14c4a	; 0x14c4a <__mulsf3>
    2b9c:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    2ba0:	6c ab       	std	Y+52, r22	; 0x34
    2ba2:	7d ab       	std	Y+53, r23	; 0x35
    2ba4:	8e ab       	std	Y+54, r24	; 0x36
    2ba6:	9f ab       	std	Y+55, r25	; 0x37
    2ba8:	a7 01       	movw	r20, r14
    2baa:	96 01       	movw	r18, r12
    2bac:	60 e0       	ldi	r22, 0x00	; 0
    2bae:	70 e0       	ldi	r23, 0x00	; 0
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	90 e4       	ldi	r25, 0x40	; 64
    2bb4:	0e 94 d6 a4 	call	0x149ac	; 0x149ac <__divsf3>
    2bb8:	0e 94 8c a6 	call	0x14d18	; 0x14d18 <sqrt>
    2bbc:	26 e5       	ldi	r18, 0x56	; 86
    2bbe:	3e e0       	ldi	r19, 0x0E	; 14
    2bc0:	4d e2       	ldi	r20, 0x2D	; 45
    2bc2:	5f e3       	ldi	r21, 0x3F	; 63
    2bc4:	0e 94 25 a6 	call	0x14c4a	; 0x14c4a <__mulsf3>
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	34 e2       	ldi	r19, 0x24	; 36
    2bcc:	44 e7       	ldi	r20, 0x74	; 116
    2bce:	59 e4       	ldi	r21, 0x49	; 73
    2bd0:	0e 94 25 a6 	call	0x14c4a	; 0x14c4a <__mulsf3>
    2bd4:	68 af       	std	Y+56, r22	; 0x38
    2bd6:	79 af       	std	Y+57, r23	; 0x39
    2bd8:	8a af       	std	Y+58, r24	; 0x3a
    2bda:	9b af       	std	Y+59, r25	; 0x3b
    2bdc:	cc 8e       	std	Y+28, r12	; 0x1c
    2bde:	dd 8e       	std	Y+29, r13	; 0x1d
    2be0:	ee 8e       	std	Y+30, r14	; 0x1e
    2be2:	ff 8e       	std	Y+31, r15	; 0x1f
    2be4:	ce 01       	movw	r24, r28
    2be6:	6c dd       	rcall	.-1320   	; 0x26c0 <_ZN12AccelStepper15computeNewSpeedEv>
    2be8:	df 91       	pop	r29
    2bea:	cf 91       	pop	r28
    2bec:	ff 90       	pop	r15
    2bee:	ef 90       	pop	r14
    2bf0:	df 90       	pop	r13
    2bf2:	cf 90       	pop	r12
    2bf4:	bf 90       	pop	r11
    2bf6:	af 90       	pop	r10
    2bf8:	9f 90       	pop	r9
    2bfa:	8f 90       	pop	r8
    2bfc:	7f 90       	pop	r7
    2bfe:	6f 90       	pop	r6
    2c00:	5f 90       	pop	r5
    2c02:	4f 90       	pop	r4
    2c04:	08 95       	ret

00002c06 <_ZN12AccelStepperC1Ehhhhhb>:
    2c06:	8f 92       	push	r8
    2c08:	9f 92       	push	r9
    2c0a:	af 92       	push	r10
    2c0c:	bf 92       	push	r11
    2c0e:	cf 92       	push	r12
    2c10:	ef 92       	push	r14
    2c12:	0f 93       	push	r16
    2c14:	cf 93       	push	r28
    2c16:	df 93       	push	r29
    2c18:	ec 01       	movw	r28, r24
    2c1a:	8f ef       	ldi	r24, 0xFF	; 255
    2c1c:	97 e0       	ldi	r25, 0x07	; 7
    2c1e:	99 83       	std	Y+1, r25	; 0x01
    2c20:	88 83       	st	Y, r24
    2c22:	6b 83       	std	Y+3, r22	; 0x03
    2c24:	1c 86       	std	Y+12, r1	; 0x0c
    2c26:	1d 86       	std	Y+13, r1	; 0x0d
    2c28:	1e 86       	std	Y+14, r1	; 0x0e
    2c2a:	1f 86       	std	Y+15, r1	; 0x0f
    2c2c:	18 8a       	std	Y+16, r1	; 0x10
    2c2e:	19 8a       	std	Y+17, r1	; 0x11
    2c30:	1a 8a       	std	Y+18, r1	; 0x12
    2c32:	1b 8a       	std	Y+19, r1	; 0x13
    2c34:	1c 8a       	std	Y+20, r1	; 0x14
    2c36:	1d 8a       	std	Y+21, r1	; 0x15
    2c38:	1e 8a       	std	Y+22, r1	; 0x16
    2c3a:	1f 8a       	std	Y+23, r1	; 0x17
    2c3c:	0f 2e       	mov	r0, r31
    2c3e:	81 2c       	mov	r8, r1
    2c40:	91 2c       	mov	r9, r1
    2c42:	f0 e8       	ldi	r31, 0x80	; 128
    2c44:	af 2e       	mov	r10, r31
    2c46:	ff e3       	ldi	r31, 0x3F	; 63
    2c48:	bf 2e       	mov	r11, r31
    2c4a:	f0 2d       	mov	r31, r0
    2c4c:	88 8e       	std	Y+24, r8	; 0x18
    2c4e:	99 8e       	std	Y+25, r9	; 0x19
    2c50:	aa 8e       	std	Y+26, r10	; 0x1a
    2c52:	bb 8e       	std	Y+27, r11	; 0x1b
    2c54:	1c 8e       	std	Y+28, r1	; 0x1c
    2c56:	1d 8e       	std	Y+29, r1	; 0x1d
    2c58:	1e 8e       	std	Y+30, r1	; 0x1e
    2c5a:	1f 8e       	std	Y+31, r1	; 0x1f
    2c5c:	88 a2       	std	Y+32, r8	; 0x20
    2c5e:	99 a2       	std	Y+33, r9	; 0x21
    2c60:	aa a2       	std	Y+34, r10	; 0x22
    2c62:	bb a2       	std	Y+35, r11	; 0x23
    2c64:	1c a2       	std	Y+36, r1	; 0x24
    2c66:	1d a2       	std	Y+37, r1	; 0x25
    2c68:	1e a2       	std	Y+38, r1	; 0x26
    2c6a:	1f a2       	std	Y+39, r1	; 0x27
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	9d a7       	std	Y+45, r25	; 0x2d
    2c72:	8c a7       	std	Y+44, r24	; 0x2c
    2c74:	8f ef       	ldi	r24, 0xFF	; 255
    2c76:	8f a7       	std	Y+47, r24	; 0x2f
    2c78:	18 a6       	std	Y+40, r1	; 0x28
    2c7a:	19 a6       	std	Y+41, r1	; 0x29
    2c7c:	1a a6       	std	Y+42, r1	; 0x2a
    2c7e:	1b a6       	std	Y+43, r1	; 0x2b
    2c80:	4c 83       	std	Y+4, r20	; 0x04
    2c82:	2d 83       	std	Y+5, r18	; 0x05
    2c84:	0e 83       	std	Y+6, r16	; 0x06
    2c86:	ef 82       	std	Y+7, r14	; 0x07
    2c88:	1e a6       	std	Y+46, r1	; 0x2e
    2c8a:	82 e0       	ldi	r24, 0x02	; 2
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    2c92:	2c 81       	ldd	r18, Y+4	; 0x04
    2c94:	fc 01       	movw	r30, r24
    2c96:	11 82       	std	Z+1, r1	; 0x01
    2c98:	20 83       	st	Z, r18
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	ec 5b       	subi	r30, 0xBC	; 188
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	91 83       	std	Z+1, r25	; 0x01
    2ca2:	80 83       	st	Z, r24
    2ca4:	82 e0       	ldi	r24, 0x02	; 2
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    2cac:	2d 81       	ldd	r18, Y+5	; 0x05
    2cae:	fc 01       	movw	r30, r24
    2cb0:	11 82       	std	Z+1, r1	; 0x01
    2cb2:	20 83       	st	Z, r18
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	ea 5b       	subi	r30, 0xBA	; 186
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	91 83       	std	Z+1, r25	; 0x01
    2cbc:	80 83       	st	Z, r24
    2cbe:	82 e0       	ldi	r24, 0x02	; 2
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    2cc6:	2e 81       	ldd	r18, Y+6	; 0x06
    2cc8:	fc 01       	movw	r30, r24
    2cca:	11 82       	std	Z+1, r1	; 0x01
    2ccc:	20 83       	st	Z, r18
    2cce:	fe 01       	movw	r30, r28
    2cd0:	e8 5b       	subi	r30, 0xB8	; 184
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	91 83       	std	Z+1, r25	; 0x01
    2cd6:	80 83       	st	Z, r24
    2cd8:	82 e0       	ldi	r24, 0x02	; 2
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    2ce0:	2f 81       	ldd	r18, Y+7	; 0x07
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	11 82       	std	Z+1, r1	; 0x01
    2ce6:	20 83       	st	Z, r18
    2ce8:	fe 01       	movw	r30, r28
    2cea:	e6 5b       	subi	r30, 0xB6	; 182
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	91 83       	std	Z+1, r25	; 0x01
    2cf0:	80 83       	st	Z, r24
    2cf2:	1c aa       	std	Y+52, r1	; 0x34
    2cf4:	1d aa       	std	Y+53, r1	; 0x35
    2cf6:	1e aa       	std	Y+54, r1	; 0x36
    2cf8:	1f aa       	std	Y+55, r1	; 0x37
    2cfa:	18 ae       	std	Y+56, r1	; 0x38
    2cfc:	19 ae       	std	Y+57, r1	; 0x39
    2cfe:	1a ae       	std	Y+58, r1	; 0x3a
    2d00:	1b ae       	std	Y+59, r1	; 0x3b
    2d02:	1c ae       	std	Y+60, r1	; 0x3c
    2d04:	1d ae       	std	Y+61, r1	; 0x3d
    2d06:	1e ae       	std	Y+62, r1	; 0x3e
    2d08:	1f ae       	std	Y+63, r1	; 0x3f
    2d0a:	3a 97       	sbiw	r30, 0x0a	; 10
    2d0c:	80 82       	st	Z, r8
    2d0e:	91 82       	std	Z+1, r9	; 0x01
    2d10:	a2 82       	std	Z+2, r10	; 0x02
    2d12:	b3 82       	std	Z+3, r11	; 0x03
    2d14:	1a 82       	std	Y+2, r1	; 0x02
    2d16:	18 86       	std	Y+8, r1	; 0x08
    2d18:	19 86       	std	Y+9, r1	; 0x09
    2d1a:	1a 86       	std	Y+10, r1	; 0x0a
    2d1c:	1b 86       	std	Y+11, r1	; 0x0b
    2d1e:	cc 20       	and	r12, r12
    2d20:	11 f0       	breq	.+4      	; 0x2d26 <_ZN12AccelStepperC1Ehhhhhb+0x120>
    2d22:	ce 01       	movw	r24, r28
    2d24:	1e d9       	rcall	.-3524   	; 0x1f62 <_ZN12AccelStepper13enableOutputsEv>
    2d26:	40 e0       	ldi	r20, 0x00	; 0
    2d28:	50 e0       	ldi	r21, 0x00	; 0
    2d2a:	60 e8       	ldi	r22, 0x80	; 128
    2d2c:	7f e3       	ldi	r23, 0x3F	; 63
    2d2e:	ce 01       	movw	r24, r28
    2d30:	ed de       	rcall	.-550    	; 0x2b0c <_ZN12AccelStepper15setAccelerationEf>
    2d32:	df 91       	pop	r29
    2d34:	cf 91       	pop	r28
    2d36:	0f 91       	pop	r16
    2d38:	ef 90       	pop	r14
    2d3a:	cf 90       	pop	r12
    2d3c:	bf 90       	pop	r11
    2d3e:	af 90       	pop	r10
    2d40:	9f 90       	pop	r9
    2d42:	8f 90       	pop	r8
    2d44:	08 95       	ret

00002d46 <_ZN12AccelStepper8setSpeedEf>:
    2d46:	6f 92       	push	r6
    2d48:	7f 92       	push	r7
    2d4a:	8f 92       	push	r8
    2d4c:	9f 92       	push	r9
    2d4e:	af 92       	push	r10
    2d50:	bf 92       	push	r11
    2d52:	cf 92       	push	r12
    2d54:	df 92       	push	r13
    2d56:	ef 92       	push	r14
    2d58:	ff 92       	push	r15
    2d5a:	0f 93       	push	r16
    2d5c:	1f 93       	push	r17
    2d5e:	cf 93       	push	r28
    2d60:	df 93       	push	r29
    2d62:	ec 01       	movw	r28, r24
    2d64:	14 2f       	mov	r17, r20
    2d66:	05 2f       	mov	r16, r21
    2d68:	76 2e       	mov	r7, r22
    2d6a:	67 2e       	mov	r6, r23
    2d6c:	24 2f       	mov	r18, r20
    2d6e:	35 2f       	mov	r19, r21
    2d70:	46 2f       	mov	r20, r22
    2d72:	57 2f       	mov	r21, r23
    2d74:	6c 89       	ldd	r22, Y+20	; 0x14
    2d76:	7d 89       	ldd	r23, Y+21	; 0x15
    2d78:	8e 89       	ldd	r24, Y+22	; 0x16
    2d7a:	9f 89       	ldd	r25, Y+23	; 0x17
    2d7c:	0e 94 d2 a4 	call	0x149a4	; 0x149a4 <__cmpsf2>
    2d80:	88 23       	and	r24, r24
    2d82:	09 f4       	brne	.+2      	; 0x2d86 <_ZN12AccelStepper8setSpeedEf+0x40>
    2d84:	52 c0       	rjmp	.+164    	; 0x2e2a <_ZN12AccelStepper8setSpeedEf+0xe4>
    2d86:	c8 8c       	ldd	r12, Y+24	; 0x18
    2d88:	d9 8c       	ldd	r13, Y+25	; 0x19
    2d8a:	ea 8c       	ldd	r14, Y+26	; 0x1a
    2d8c:	fb 8c       	ldd	r15, Y+27	; 0x1b
    2d8e:	46 01       	movw	r8, r12
    2d90:	57 01       	movw	r10, r14
    2d92:	b7 fa       	bst	r11, 7
    2d94:	b0 94       	com	r11
    2d96:	b7 f8       	bld	r11, 7
    2d98:	b0 94       	com	r11
    2d9a:	a5 01       	movw	r20, r10
    2d9c:	94 01       	movw	r18, r8
    2d9e:	61 2f       	mov	r22, r17
    2da0:	70 2f       	mov	r23, r16
    2da2:	87 2d       	mov	r24, r7
    2da4:	96 2d       	mov	r25, r6
    2da6:	0e 94 d2 a4 	call	0x149a4	; 0x149a4 <__cmpsf2>
    2daa:	88 23       	and	r24, r24
    2dac:	8c f0       	brlt	.+34     	; 0x2dd0 <_ZN12AccelStepper8setSpeedEf+0x8a>
    2dae:	a7 01       	movw	r20, r14
    2db0:	96 01       	movw	r18, r12
    2db2:	61 2f       	mov	r22, r17
    2db4:	70 2f       	mov	r23, r16
    2db6:	87 2d       	mov	r24, r7
    2db8:	96 2d       	mov	r25, r6
    2dba:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <__gesf2>
    2dbe:	18 16       	cp	r1, r24
    2dc0:	2c f0       	brlt	.+10     	; 0x2dcc <_ZN12AccelStepper8setSpeedEf+0x86>
    2dc2:	81 2e       	mov	r8, r17
    2dc4:	90 2e       	mov	r9, r16
    2dc6:	a7 2c       	mov	r10, r7
    2dc8:	b6 2c       	mov	r11, r6
    2dca:	02 c0       	rjmp	.+4      	; 0x2dd0 <_ZN12AccelStepper8setSpeedEf+0x8a>
    2dcc:	46 01       	movw	r8, r12
    2dce:	57 01       	movw	r10, r14
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	a9 01       	movw	r20, r18
    2dd6:	c5 01       	movw	r24, r10
    2dd8:	b4 01       	movw	r22, r8
    2dda:	0e 94 d2 a4 	call	0x149a4	; 0x149a4 <__cmpsf2>
    2dde:	81 11       	cpse	r24, r1
    2de0:	05 c0       	rjmp	.+10     	; 0x2dec <_ZN12AccelStepper8setSpeedEf+0xa6>
    2de2:	1c a2       	std	Y+36, r1	; 0x24
    2de4:	1d a2       	std	Y+37, r1	; 0x25
    2de6:	1e a2       	std	Y+38, r1	; 0x26
    2de8:	1f a2       	std	Y+39, r1	; 0x27
    2dea:	1b c0       	rjmp	.+54     	; 0x2e22 <_ZN12AccelStepper8setSpeedEf+0xdc>
    2dec:	a5 01       	movw	r20, r10
    2dee:	94 01       	movw	r18, r8
    2df0:	60 e0       	ldi	r22, 0x00	; 0
    2df2:	74 e2       	ldi	r23, 0x24	; 36
    2df4:	84 e7       	ldi	r24, 0x74	; 116
    2df6:	99 e4       	ldi	r25, 0x49	; 73
    2df8:	0e 94 d6 a4 	call	0x149ac	; 0x149ac <__divsf3>
    2dfc:	9f 77       	andi	r25, 0x7F	; 127
    2dfe:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    2e02:	6c a3       	std	Y+36, r22	; 0x24
    2e04:	7d a3       	std	Y+37, r23	; 0x25
    2e06:	8e a3       	std	Y+38, r24	; 0x26
    2e08:	9f a3       	std	Y+39, r25	; 0x27
    2e0a:	11 e0       	ldi	r17, 0x01	; 1
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	a9 01       	movw	r20, r18
    2e12:	c5 01       	movw	r24, r10
    2e14:	b4 01       	movw	r22, r8
    2e16:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <__gesf2>
    2e1a:	18 16       	cp	r1, r24
    2e1c:	0c f0       	brlt	.+2      	; 0x2e20 <_ZN12AccelStepper8setSpeedEf+0xda>
    2e1e:	10 e0       	ldi	r17, 0x00	; 0
    2e20:	1a 83       	std	Y+2, r17	; 0x02
    2e22:	8c 8a       	std	Y+20, r8	; 0x14
    2e24:	9d 8a       	std	Y+21, r9	; 0x15
    2e26:	ae 8a       	std	Y+22, r10	; 0x16
    2e28:	bf 8a       	std	Y+23, r11	; 0x17
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	1f 91       	pop	r17
    2e30:	0f 91       	pop	r16
    2e32:	ff 90       	pop	r15
    2e34:	ef 90       	pop	r14
    2e36:	df 90       	pop	r13
    2e38:	cf 90       	pop	r12
    2e3a:	bf 90       	pop	r11
    2e3c:	af 90       	pop	r10
    2e3e:	9f 90       	pop	r9
    2e40:	8f 90       	pop	r8
    2e42:	7f 90       	pop	r7
    2e44:	6f 90       	pop	r6
    2e46:	08 95       	ret

00002e48 <_ZN12AccelStepper16setMinPulseWidthEj>:
    2e48:	fc 01       	movw	r30, r24
    2e4a:	75 a7       	std	Z+45, r23	; 0x2d
    2e4c:	64 a7       	std	Z+44, r22	; 0x2c
    2e4e:	08 95       	ret

00002e50 <_ZN12AccelStepper13runToPositionEv>:
    2e50:	cf 93       	push	r28
    2e52:	df 93       	push	r29
    2e54:	ec 01       	movw	r28, r24
    2e56:	ce 01       	movw	r24, r28
    2e58:	c6 dd       	rcall	.-1140   	; 0x29e6 <_ZN12AccelStepper3runEv>
    2e5a:	81 11       	cpse	r24, r1
    2e5c:	fc cf       	rjmp	.-8      	; 0x2e56 <_ZN12AccelStepper13runToPositionEv+0x6>
    2e5e:	df 91       	pop	r29
    2e60:	cf 91       	pop	r28
    2e62:	08 95       	ret

00002e64 <_ZN12AccelStepper4stopEv>:

void AccelStepper::stop()
{
    2e64:	8f 92       	push	r8
    2e66:	9f 92       	push	r9
    2e68:	af 92       	push	r10
    2e6a:	bf 92       	push	r11
    2e6c:	cf 92       	push	r12
    2e6e:	df 92       	push	r13
    2e70:	ef 92       	push	r14
    2e72:	ff 92       	push	r15
    2e74:	cf 93       	push	r28
    2e76:	df 93       	push	r29
    2e78:	ec 01       	movw	r28, r24
	if (_speed != 0.0)
    2e7a:	cc 88       	ldd	r12, Y+20	; 0x14
    2e7c:	dd 88       	ldd	r13, Y+21	; 0x15
    2e7e:	ee 88       	ldd	r14, Y+22	; 0x16
    2e80:	ff 88       	ldd	r15, Y+23	; 0x17
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	a9 01       	movw	r20, r18
    2e88:	c7 01       	movw	r24, r14
    2e8a:	b6 01       	movw	r22, r12
    2e8c:	0e 94 d2 a4 	call	0x149a4	; 0x149a4 <__cmpsf2>
    2e90:	88 23       	and	r24, r24
    2e92:	b1 f1       	breq	.+108    	; 0x2f00 <_ZN12AccelStepper4stopEv+0x9c>
	{
		long stepsToStop = (long)((_speed * _speed) / (2.0 * _acceleration)) + 1; // Equation 16 (+integer rounding)
    2e94:	a7 01       	movw	r20, r14
    2e96:	96 01       	movw	r18, r12
    2e98:	c7 01       	movw	r24, r14
    2e9a:	b6 01       	movw	r22, r12
    2e9c:	0e 94 25 a6 	call	0x14c4a	; 0x14c4a <__mulsf3>
    2ea0:	4b 01       	movw	r8, r22
    2ea2:	5c 01       	movw	r10, r24
    2ea4:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2ea6:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2ea8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2eaa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2eac:	9b 01       	movw	r18, r22
    2eae:	ac 01       	movw	r20, r24
    2eb0:	0e 94 6e a4 	call	0x148dc	; 0x148dc <__addsf3>
    2eb4:	9b 01       	movw	r18, r22
    2eb6:	ac 01       	movw	r20, r24
    2eb8:	c5 01       	movw	r24, r10
    2eba:	b4 01       	movw	r22, r8
    2ebc:	0e 94 d6 a4 	call	0x149ac	; 0x149ac <__divsf3>
    2ec0:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    2ec4:	4b 01       	movw	r8, r22
    2ec6:	5c 01       	movw	r10, r24
    2ec8:	2f ef       	ldi	r18, 0xFF	; 255
    2eca:	82 1a       	sub	r8, r18
    2ecc:	92 0a       	sbc	r9, r18
    2ece:	a2 0a       	sbc	r10, r18
    2ed0:	b2 0a       	sbc	r11, r18
		if (_speed > 0)
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	a9 01       	movw	r20, r18
    2ed8:	c7 01       	movw	r24, r14
    2eda:	b6 01       	movw	r22, r12
    2edc:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <__gesf2>
    2ee0:	18 16       	cp	r1, r24
    2ee2:	2c f4       	brge	.+10     	; 0x2eee <_ZN12AccelStepper4stopEv+0x8a>
		move(stepsToStop);
    2ee4:	b5 01       	movw	r22, r10
    2ee6:	a4 01       	movw	r20, r8
    2ee8:	ce 01       	movw	r24, r28
    2eea:	6e dd       	rcall	.-1316   	; 0x29c8 <_ZN12AccelStepper4moveEl>
    2eec:	09 c0       	rjmp	.+18     	; 0x2f00 <_ZN12AccelStepper4stopEv+0x9c>
		else
		move(-stepsToStop);
    2eee:	44 27       	eor	r20, r20
    2ef0:	55 27       	eor	r21, r21
    2ef2:	ba 01       	movw	r22, r20
    2ef4:	48 19       	sub	r20, r8
    2ef6:	59 09       	sbc	r21, r9
    2ef8:	6a 09       	sbc	r22, r10
    2efa:	7b 09       	sbc	r23, r11
    2efc:	ce 01       	movw	r24, r28
    2efe:	64 dd       	rcall	.-1336   	; 0x29c8 <_ZN12AccelStepper4moveEl>
	}
}
    2f00:	df 91       	pop	r29
    2f02:	cf 91       	pop	r28
    2f04:	ff 90       	pop	r15
    2f06:	ef 90       	pop	r14
    2f08:	df 90       	pop	r13
    2f0a:	cf 90       	pop	r12
    2f0c:	bf 90       	pop	r11
    2f0e:	af 90       	pop	r10
    2f10:	9f 90       	pop	r9
    2f12:	8f 90       	pop	r8
    2f14:	08 95       	ret

00002f16 <_Z17_EEPROM_writeDataRiPhh>:
#include "RoboCore.h"
#include "ConfigurationStore.h"

void _EEPROM_writeData(int &pos, uint8_t* value, uint8_t size)
{
    2f16:	ef 92       	push	r14
    2f18:	ff 92       	push	r15
    2f1a:	0f 93       	push	r16
    2f1c:	1f 93       	push	r17
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	8c 01       	movw	r16, r24
    2f24:	eb 01       	movw	r28, r22
    2f26:	41 50       	subi	r20, 0x01	; 1
    2f28:	e4 2e       	mov	r14, r20
    2f2a:	f1 2c       	mov	r15, r1
    2f2c:	8f ef       	ldi	r24, 0xFF	; 255
    2f2e:	e8 1a       	sub	r14, r24
    2f30:	f8 0a       	sbc	r15, r24
    2f32:	e6 0e       	add	r14, r22
    2f34:	f7 1e       	adc	r15, r23
    do {
        eeprom_write_byte((unsigned char*)pos, *value);
    2f36:	69 91       	ld	r22, Y+
    2f38:	f8 01       	movw	r30, r16
    2f3a:	80 81       	ld	r24, Z
    2f3c:	91 81       	ldd	r25, Z+1	; 0x01
    2f3e:	0e 94 b1 b2 	call	0x16562	; 0x16562 <eeprom_write_byte>
        pos++;
    2f42:	f8 01       	movw	r30, r16
    2f44:	80 81       	ld	r24, Z
    2f46:	91 81       	ldd	r25, Z+1	; 0x01
    2f48:	01 96       	adiw	r24, 0x01	; 1
    2f4a:	91 83       	std	Z+1, r25	; 0x01
    2f4c:	80 83       	st	Z, r24
#include "RoboCore.h"
#include "ConfigurationStore.h"

void _EEPROM_writeData(int &pos, uint8_t* value, uint8_t size)
{
    do {
    2f4e:	ce 15       	cp	r28, r14
    2f50:	df 05       	cpc	r29, r15
    2f52:	89 f7       	brne	.-30     	; 0x2f36 <_Z17_EEPROM_writeDataRiPhh+0x20>
        eeprom_write_byte((unsigned char*)pos, *value);
        pos++;
        value++;
    } while(--size);
}
    2f54:	df 91       	pop	r29
    2f56:	cf 91       	pop	r28
    2f58:	1f 91       	pop	r17
    2f5a:	0f 91       	pop	r16
    2f5c:	ff 90       	pop	r15
    2f5e:	ef 90       	pop	r14
    2f60:	08 95       	ret

00002f62 <_Z16_EEPROM_readDataRiPhh>:
#define EEPROM_WRITE_VAR(pos, value) _EEPROM_writeData(pos, (uint8_t*)&value, sizeof(value))
void _EEPROM_readData(int &pos, uint8_t* value, uint8_t size)
{
    2f62:	ef 92       	push	r14
    2f64:	ff 92       	push	r15
    2f66:	0f 93       	push	r16
    2f68:	1f 93       	push	r17
    2f6a:	cf 93       	push	r28
    2f6c:	8c 01       	movw	r16, r24
    2f6e:	7b 01       	movw	r14, r22
    2f70:	c4 2f       	mov	r28, r20
    do {
        *value = eeprom_read_byte((unsigned char*)pos);
    2f72:	f8 01       	movw	r30, r16
    2f74:	80 81       	ld	r24, Z
    2f76:	91 81       	ldd	r25, Z+1	; 0x01
    2f78:	0e 94 a9 b2 	call	0x16552	; 0x16552 <eeprom_read_byte>
    2f7c:	f7 01       	movw	r30, r14
    2f7e:	81 93       	st	Z+, r24
    2f80:	7f 01       	movw	r14, r30
        pos++;
    2f82:	f8 01       	movw	r30, r16
    2f84:	80 81       	ld	r24, Z
    2f86:	91 81       	ldd	r25, Z+1	; 0x01
    2f88:	01 96       	adiw	r24, 0x01	; 1
    2f8a:	91 83       	std	Z+1, r25	; 0x01
    2f8c:	80 83       	st	Z, r24
    } while(--size);
}
#define EEPROM_WRITE_VAR(pos, value) _EEPROM_writeData(pos, (uint8_t*)&value, sizeof(value))
void _EEPROM_readData(int &pos, uint8_t* value, uint8_t size)
{
    do {
    2f8e:	c1 50       	subi	r28, 0x01	; 1
    2f90:	81 f7       	brne	.-32     	; 0x2f72 <_Z16_EEPROM_readDataRiPhh+0x10>
        *value = eeprom_read_byte((unsigned char*)pos);
        pos++;
        value++;
    } while(--size);
}
    2f92:	cf 91       	pop	r28
    2f94:	1f 91       	pop	r17
    2f96:	0f 91       	pop	r16
    2f98:	ff 90       	pop	r15
    2f9a:	ef 90       	pop	r14
    2f9c:	08 95       	ret

00002f9e <_Z20Config_StoreSettingsv>:
// wrong data being written to the variables.
// ALSO:  always make sure the variables in the Store and retrieve sections are in the same order.
#define EEPROM_VERSION "V10"

void Config_StoreSettings() 
{
    2f9e:	ef 92       	push	r14
    2fa0:	ff 92       	push	r15
    2fa2:	0f 93       	push	r16
    2fa4:	1f 93       	push	r17
    2fa6:	cf 93       	push	r28
    2fa8:	df 93       	push	r29
    2faa:	cd b7       	in	r28, 0x3d	; 61
    2fac:	de b7       	in	r29, 0x3e	; 62
    2fae:	2a 97       	sbiw	r28, 0x0a	; 10
    2fb0:	0f b6       	in	r0, 0x3f	; 63
    2fb2:	f8 94       	cli
    2fb4:	de bf       	out	0x3e, r29	; 62
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	cd bf       	out	0x3d, r28	; 61
  char ver[4]= "000";
    2fba:	80 e3       	ldi	r24, 0x30	; 48
    2fbc:	90 e3       	ldi	r25, 0x30	; 48
    2fbe:	9a 83       	std	Y+2, r25	; 0x02
    2fc0:	89 83       	std	Y+1, r24	; 0x01
    2fc2:	0f 2e       	mov	r0, r31
    2fc4:	f0 e3       	ldi	r31, 0x30	; 48
    2fc6:	ef 2e       	mov	r14, r31
    2fc8:	f1 2c       	mov	r15, r1
    2fca:	f0 2d       	mov	r31, r0
    2fcc:	fc 82       	std	Y+4, r15	; 0x04
    2fce:	eb 82       	std	Y+3, r14	; 0x03
  int i=EEPROM_OFFSET;
    2fd0:	04 e6       	ldi	r16, 0x64	; 100
    2fd2:	10 e0       	ldi	r17, 0x00	; 0
    2fd4:	1e 83       	std	Y+6, r17	; 0x06
    2fd6:	0d 83       	std	Y+5, r16	; 0x05
  EEPROM_WRITE_VAR(i,ver); // invalidate data first  
    2fd8:	44 e0       	ldi	r20, 0x04	; 4
    2fda:	be 01       	movw	r22, r28
    2fdc:	6f 5f       	subi	r22, 0xFF	; 255
    2fde:	7f 4f       	sbci	r23, 0xFF	; 255
    2fe0:	ce 01       	movw	r24, r28
    2fe2:	05 96       	adiw	r24, 0x05	; 5
    2fe4:	98 df       	rcall	.-208    	; 0x2f16 <_Z17_EEPROM_writeDataRiPhh>
  //EEPROM_WRITE_VAR(i,max_acceleration_units_per_sq_second);
  //EEPROM_WRITE_VAR(i,acceleration);
  char ver2[4]=EEPROM_VERSION;
    2fe6:	86 e5       	ldi	r24, 0x56	; 86
    2fe8:	91 e3       	ldi	r25, 0x31	; 49
    2fea:	98 87       	std	Y+8, r25	; 0x08
    2fec:	8f 83       	std	Y+7, r24	; 0x07
    2fee:	fa 86       	std	Y+10, r15	; 0x0a
    2ff0:	e9 86       	std	Y+9, r14	; 0x09
  i=EEPROM_OFFSET;
    2ff2:	1e 83       	std	Y+6, r17	; 0x06
    2ff4:	0d 83       	std	Y+5, r16	; 0x05
  EEPROM_WRITE_VAR(i,ver2); // validate data
    2ff6:	44 e0       	ldi	r20, 0x04	; 4
    2ff8:	be 01       	movw	r22, r28
    2ffa:	69 5f       	subi	r22, 0xF9	; 249
    2ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ffe:	ce 01       	movw	r24, r28
    3000:	05 96       	adiw	r24, 0x05	; 5
    3002:	89 df       	rcall	.-238    	; 0x2f16 <_Z17_EEPROM_writeDataRiPhh>
}
    3004:	2a 96       	adiw	r28, 0x0a	; 10
    3006:	0f b6       	in	r0, 0x3f	; 63
    3008:	f8 94       	cli
    300a:	de bf       	out	0x3e, r29	; 62
    300c:	0f be       	out	0x3f, r0	; 63
    300e:	cd bf       	out	0x3d, r28	; 61
    3010:	df 91       	pop	r29
    3012:	cf 91       	pop	r28
    3014:	1f 91       	pop	r17
    3016:	0f 91       	pop	r16
    3018:	ff 90       	pop	r15
    301a:	ef 90       	pop	r14
    301c:	08 95       	ret

0000301e <_Z20Config_PrintSettingsv>:

void Config_PrintSettings()

{  // Always have this function, even with EEPROM_SETTINGS disabled, the current values will be shown
    301e:	0f 93       	push	r16
    3020:	1f 93       	push	r17
    3022:	cf 93       	push	r28
    3024:	df 93       	push	r29
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    3026:	ee ea       	ldi	r30, 0xAE	; 174
    3028:	f5 e0       	ldi	r31, 0x05	; 5
    302a:	64 91       	lpm	r22, Z
	while(ch)
    302c:	66 23       	and	r22, r22
    302e:	81 f0       	breq	.+32     	; 0x3050 <_Z20Config_PrintSettingsv+0x32>
    3030:	ef 01       	movw	r28, r30
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    3032:	08 e0       	ldi	r16, 0x08	; 8
    3034:	1a e0       	ldi	r17, 0x0A	; 10
    3036:	d8 01       	movw	r26, r16
    3038:	ed 91       	ld	r30, X+
    303a:	fc 91       	ld	r31, X
    303c:	01 90       	ld	r0, Z+
    303e:	f0 81       	ld	r31, Z
    3040:	e0 2d       	mov	r30, r0
    3042:	c8 01       	movw	r24, r16
    3044:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    3046:	21 96       	adiw	r28, 0x01	; 1
    3048:	fe 01       	movw	r30, r28
    304a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    304c:	61 11       	cpse	r22, r1
    304e:	f3 cf       	rjmp	.-26     	; 0x3036 <_Z20Config_PrintSettingsv+0x18>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    3050:	e7 ea       	ldi	r30, 0xA7	; 167
    3052:	f5 e0       	ldi	r31, 0x05	; 5
    3054:	64 91       	lpm	r22, Z
	while(ch)
    3056:	66 23       	and	r22, r22
    3058:	81 f0       	breq	.+32     	; 0x307a <_Z20Config_PrintSettingsv+0x5c>
    305a:	ef 01       	movw	r28, r30
    305c:	08 e0       	ldi	r16, 0x08	; 8
    305e:	1a e0       	ldi	r17, 0x0A	; 10
    3060:	d8 01       	movw	r26, r16
    3062:	ed 91       	ld	r30, X+
    3064:	fc 91       	ld	r31, X
    3066:	01 90       	ld	r0, Z+
    3068:	f0 81       	ld	r31, Z
    306a:	e0 2d       	mov	r30, r0
    306c:	c8 01       	movw	r24, r16
    306e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    3070:	21 96       	adiw	r28, 0x01	; 1
    3072:	fe 01       	movw	r30, r28
    3074:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    3076:	61 11       	cpse	r22, r1
    3078:	f3 cf       	rjmp	.-26     	; 0x3060 <_Z20Config_PrintSettingsv+0x42>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    307a:	e5 ea       	ldi	r30, 0xA5	; 165
    307c:	f5 e0       	ldi	r31, 0x05	; 5
    307e:	64 91       	lpm	r22, Z
	while(ch)
    3080:	66 23       	and	r22, r22
    3082:	81 f0       	breq	.+32     	; 0x30a4 <_Z20Config_PrintSettingsv+0x86>
    3084:	ef 01       	movw	r28, r30
    3086:	08 e0       	ldi	r16, 0x08	; 8
    3088:	1a e0       	ldi	r17, 0x0A	; 10
    308a:	d8 01       	movw	r26, r16
    308c:	ed 91       	ld	r30, X+
    308e:	fc 91       	ld	r31, X
    3090:	01 90       	ld	r0, Z+
    3092:	f0 81       	ld	r31, Z
    3094:	e0 2d       	mov	r30, r0
    3096:	c8 01       	movw	r24, r16
    3098:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    309a:	21 96       	adiw	r28, 0x01	; 1
    309c:	fe 01       	movw	r30, r28
    309e:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    30a0:	61 11       	cpse	r22, r1
    30a2:	f3 cf       	rjmp	.-26     	; 0x308a <_Z20Config_PrintSettingsv+0x6c>
	SERIAL_PGM(MSG_BEGIN);
	SERIAL_PGM(eepromHdr);
	SERIAL_PGMLN(MSG_DELIMIT);
    30a4:	88 e0       	ldi	r24, 0x08	; 8
    30a6:	9a e0       	ldi	r25, 0x0A	; 10
    30a8:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    30ac:	e2 ea       	ldi	r30, 0xA2	; 162
    30ae:	f5 e0       	ldi	r31, 0x05	; 5
    30b0:	64 91       	lpm	r22, Z
	while(ch)
    30b2:	66 23       	and	r22, r22
    30b4:	81 f0       	breq	.+32     	; 0x30d6 <_Z20Config_PrintSettingsv+0xb8>
    30b6:	ef 01       	movw	r28, r30
    30b8:	08 e0       	ldi	r16, 0x08	; 8
    30ba:	1a e0       	ldi	r17, 0x0A	; 10
    30bc:	d8 01       	movw	r26, r16
    30be:	ed 91       	ld	r30, X+
    30c0:	fc 91       	ld	r31, X
    30c2:	01 90       	ld	r0, Z+
    30c4:	f0 81       	ld	r31, Z
    30c6:	e0 2d       	mov	r30, r0
    30c8:	c8 01       	movw	r24, r16
    30ca:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    30cc:	21 96       	adiw	r28, 0x01	; 1
    30ce:	fe 01       	movw	r30, r28
    30d0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    30d2:	61 11       	cpse	r22, r1
    30d4:	f3 cf       	rjmp	.-26     	; 0x30bc <_Z20Config_PrintSettingsv+0x9e>
    SERIAL_PGMLN("1 ");
    30d6:	88 e0       	ldi	r24, 0x08	; 8
    30d8:	9a e0       	ldi	r25, 0x0A	; 10
    30da:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    30de:	ef e9       	ldi	r30, 0x9F	; 159
    30e0:	f5 e0       	ldi	r31, 0x05	; 5
    30e2:	64 91       	lpm	r22, Z
	while(ch)
    30e4:	66 23       	and	r22, r22
    30e6:	81 f0       	breq	.+32     	; 0x3108 <_Z20Config_PrintSettingsv+0xea>
    30e8:	ef 01       	movw	r28, r30
    30ea:	08 e0       	ldi	r16, 0x08	; 8
    30ec:	1a e0       	ldi	r17, 0x0A	; 10
    30ee:	d8 01       	movw	r26, r16
    30f0:	ed 91       	ld	r30, X+
    30f2:	fc 91       	ld	r31, X
    30f4:	01 90       	ld	r0, Z+
    30f6:	f0 81       	ld	r31, Z
    30f8:	e0 2d       	mov	r30, r0
    30fa:	c8 01       	movw	r24, r16
    30fc:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    30fe:	21 96       	adiw	r28, 0x01	; 1
    3100:	fe 01       	movw	r30, r28
    3102:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    3104:	61 11       	cpse	r22, r1
    3106:	f3 cf       	rjmp	.-26     	; 0x30ee <_Z20Config_PrintSettingsv+0xd0>
    //SERIAL_ECHOPAIR("  M201 X" ,max_acceleration_units_per_sq_second[0] ); 
    SERIAL_PGMLN("2 ");
    3108:	88 e0       	ldi	r24, 0x08	; 8
    310a:	9a e0       	ldi	r25, 0x0A	; 10
    310c:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    3110:	ed e9       	ldi	r30, 0x9D	; 157
    3112:	f5 e0       	ldi	r31, 0x05	; 5
    3114:	64 91       	lpm	r22, Z
	while(ch)
    3116:	66 23       	and	r22, r22
    3118:	81 f0       	breq	.+32     	; 0x313a <_Z20Config_PrintSettingsv+0x11c>
    311a:	ef 01       	movw	r28, r30
    311c:	08 e0       	ldi	r16, 0x08	; 8
    311e:	1a e0       	ldi	r17, 0x0A	; 10
    3120:	d8 01       	movw	r26, r16
    3122:	ed 91       	ld	r30, X+
    3124:	fc 91       	ld	r31, X
    3126:	01 90       	ld	r0, Z+
    3128:	f0 81       	ld	r31, Z
    312a:	e0 2d       	mov	r30, r0
    312c:	c8 01       	movw	r24, r16
    312e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    3130:	21 96       	adiw	r28, 0x01	; 1
    3132:	fe 01       	movw	r30, r28
    3134:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    3136:	61 11       	cpse	r22, r1
    3138:	f3 cf       	rjmp	.-26     	; 0x3120 <_Z20Config_PrintSettingsv+0x102>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    313a:	e6 e9       	ldi	r30, 0x96	; 150
    313c:	f5 e0       	ldi	r31, 0x05	; 5
    313e:	64 91       	lpm	r22, Z
	while(ch)
    3140:	66 23       	and	r22, r22
    3142:	81 f0       	breq	.+32     	; 0x3164 <_Z20Config_PrintSettingsv+0x146>
    3144:	ef 01       	movw	r28, r30
    3146:	08 e0       	ldi	r16, 0x08	; 8
    3148:	1a e0       	ldi	r17, 0x0A	; 10
    314a:	d8 01       	movw	r26, r16
    314c:	ed 91       	ld	r30, X+
    314e:	fc 91       	ld	r31, X
    3150:	01 90       	ld	r0, Z+
    3152:	f0 81       	ld	r31, Z
    3154:	e0 2d       	mov	r30, r0
    3156:	c8 01       	movw	r24, r16
    3158:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    315a:	21 96       	adiw	r28, 0x01	; 1
    315c:	fe 01       	movw	r30, r28
    315e:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    3160:	61 11       	cpse	r22, r1
    3162:	f3 cf       	rjmp	.-26     	; 0x314a <_Z20Config_PrintSettingsv+0x12c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    3164:	e3 e9       	ldi	r30, 0x93	; 147
    3166:	f5 e0       	ldi	r31, 0x05	; 5
    3168:	64 91       	lpm	r22, Z
	while(ch)
    316a:	66 23       	and	r22, r22
    316c:	81 f0       	breq	.+32     	; 0x318e <_Z20Config_PrintSettingsv+0x170>
    316e:	ef 01       	movw	r28, r30
    3170:	08 e0       	ldi	r16, 0x08	; 8
    3172:	1a e0       	ldi	r17, 0x0A	; 10
    3174:	d8 01       	movw	r26, r16
    3176:	ed 91       	ld	r30, X+
    3178:	fc 91       	ld	r31, X
    317a:	01 90       	ld	r0, Z+
    317c:	f0 81       	ld	r31, Z
    317e:	e0 2d       	mov	r30, r0
    3180:	c8 01       	movw	r24, r16
    3182:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    3184:	21 96       	adiw	r28, 0x01	; 1
    3186:	fe 01       	movw	r30, r28
    3188:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    318a:	61 11       	cpse	r22, r1
    318c:	f3 cf       	rjmp	.-26     	; 0x3174 <_Z20Config_PrintSettingsv+0x156>
    //SERIAL_ECHOPAIR("  M204 S",acceleration );
	SERIAL_PGM(MSG_BEGIN);
	SERIAL_PGM(eepromHdr);
	SERIAL_PGMLN(MSG_TERMINATE);
    318e:	88 e0       	ldi	r24, 0x08	; 8
    3190:	9a e0       	ldi	r25, 0x0A	; 10
    3192:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
} 
    3196:	df 91       	pop	r29
    3198:	cf 91       	pop	r28
    319a:	1f 91       	pop	r17
    319c:	0f 91       	pop	r16
    319e:	08 95       	ret

000031a0 <_Z23Config_RetrieveSettingsv>:

void Config_RetrieveSettings()
{
    31a0:	cf 93       	push	r28
    31a2:	df 93       	push	r29
    31a4:	00 d0       	rcall	.+0      	; 0x31a6 <_Z23Config_RetrieveSettingsv+0x6>
    31a6:	00 d0       	rcall	.+0      	; 0x31a8 <_Z23Config_RetrieveSettingsv+0x8>
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
    int i=EEPROM_OFFSET;
    31ac:	84 e6       	ldi	r24, 0x64	; 100
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	9a 83       	std	Y+2, r25	; 0x02
    31b2:	89 83       	std	Y+1, r24	; 0x01
    char stored_ver[4];
    char ver[4]=EEPROM_VERSION;
    EEPROM_READ_VAR(i,stored_ver); //read stored version
    31b4:	44 e0       	ldi	r20, 0x04	; 4
    31b6:	be 01       	movw	r22, r28
    31b8:	6d 5f       	subi	r22, 0xFD	; 253
    31ba:	7f 4f       	sbci	r23, 0xFF	; 255
    31bc:	ce 01       	movw	r24, r28
    31be:	01 96       	adiw	r24, 0x01	; 1
    31c0:	d0 de       	rcall	.-608    	; 0x2f62 <_Z16_EEPROM_readDataRiPhh>
    }
    else
    {
        Config_ResetDefault();
    }
}
    31c2:	26 96       	adiw	r28, 0x06	; 6
    31c4:	0f b6       	in	r0, 0x3f	; 63
    31c6:	f8 94       	cli
    31c8:	de bf       	out	0x3e, r29	; 62
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	cd bf       	out	0x3d, r28	; 61
    31ce:	df 91       	pop	r29
    31d0:	cf 91       	pop	r28
    31d2:	08 95       	ret

000031d4 <_Z19Config_ResetDefaultv>:

void Config_ResetDefault()
{
    31d4:	08 95       	ret

000031d6 <_ZN14HardwareSerial9availableEv>:
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    31d6:	fc 01       	movw	r30, r24
    31d8:	91 8d       	ldd	r25, Z+25	; 0x19
    31da:	82 8d       	ldd	r24, Z+26	; 0x1a
    31dc:	98 1b       	sub	r25, r24
    31de:	89 2f       	mov	r24, r25
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	08 95       	ret

000031e4 <_ZN14HardwareSerial4peekEv>:
    31e4:	fc 01       	movw	r30, r24
    31e6:	91 8d       	ldd	r25, Z+25	; 0x19
    31e8:	82 8d       	ldd	r24, Z+26	; 0x1a
    31ea:	98 17       	cp	r25, r24
    31ec:	31 f0       	breq	.+12     	; 0x31fa <_ZN14HardwareSerial4peekEv+0x16>
    31ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    31f0:	e8 0f       	add	r30, r24
    31f2:	f1 1d       	adc	r31, r1
    31f4:	85 8d       	ldd	r24, Z+29	; 0x1d
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	08 95       	ret
    31fa:	8f ef       	ldi	r24, 0xFF	; 255
    31fc:	9f ef       	ldi	r25, 0xFF	; 255
    31fe:	08 95       	ret

00003200 <_ZN14HardwareSerial4readEv>:
    3200:	fc 01       	movw	r30, r24
    3202:	91 8d       	ldd	r25, Z+25	; 0x19
    3204:	82 8d       	ldd	r24, Z+26	; 0x1a
    3206:	98 17       	cp	r25, r24
    3208:	59 f0       	breq	.+22     	; 0x3220 <_ZN14HardwareSerial4readEv+0x20>
    320a:	82 8d       	ldd	r24, Z+26	; 0x1a
    320c:	df 01       	movw	r26, r30
    320e:	a8 0f       	add	r26, r24
    3210:	b1 1d       	adc	r27, r1
    3212:	5d 96       	adiw	r26, 0x1d	; 29
    3214:	8c 91       	ld	r24, X
    3216:	92 8d       	ldd	r25, Z+26	; 0x1a
    3218:	9f 5f       	subi	r25, 0xFF	; 255
    321a:	92 8f       	std	Z+26, r25	; 0x1a
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	08 95       	ret
    3220:	8f ef       	ldi	r24, 0xFF	; 255
    3222:	9f ef       	ldi	r25, 0xFF	; 255
    3224:	08 95       	ret

00003226 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3226:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3228:	84 8d       	ldd	r24, Z+28	; 0x1c
    322a:	df 01       	movw	r26, r30
    322c:	a8 0f       	add	r26, r24
    322e:	b1 1d       	adc	r27, r1
    3230:	a3 5e       	subi	r26, 0xE3	; 227
    3232:	be 4f       	sbci	r27, 0xFE	; 254
    3234:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3236:	84 8d       	ldd	r24, Z+28	; 0x1c
    3238:	8f 5f       	subi	r24, 0xFF	; 255
    323a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    323c:	a6 89       	ldd	r26, Z+22	; 0x16
    323e:	b7 89       	ldd	r27, Z+23	; 0x17
    3240:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    3242:	a0 89       	ldd	r26, Z+16	; 0x10
    3244:	b1 89       	ldd	r27, Z+17	; 0x11
    3246:	8c 91       	ld	r24, X
    3248:	80 64       	ori	r24, 0x40	; 64
    324a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    324c:	93 8d       	ldd	r25, Z+27	; 0x1b
    324e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3250:	98 13       	cpse	r25, r24
    3252:	06 c0       	rjmp	.+12     	; 0x3260 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x3a>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3254:	02 88       	ldd	r0, Z+18	; 0x12
    3256:	f3 89       	ldd	r31, Z+19	; 0x13
    3258:	e0 2d       	mov	r30, r0
    325a:	80 81       	ld	r24, Z
    325c:	8f 7d       	andi	r24, 0xDF	; 223
    325e:	80 83       	st	Z, r24
    3260:	08 95       	ret

00003262 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3262:	cf 93       	push	r28
    3264:	df 93       	push	r29
    3266:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3268:	88 8d       	ldd	r24, Y+24	; 0x18
    326a:	88 23       	and	r24, r24
    326c:	d1 f0       	breq	.+52     	; 0x32a2 <_ZN14HardwareSerial5flushEv+0x40>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    326e:	ea 89       	ldd	r30, Y+18	; 0x12
    3270:	fb 89       	ldd	r31, Y+19	; 0x13
    3272:	80 81       	ld	r24, Z
    3274:	85 fd       	sbrc	r24, 5
    3276:	05 c0       	rjmp	.+10     	; 0x3282 <_ZN14HardwareSerial5flushEv+0x20>
    3278:	a8 89       	ldd	r26, Y+16	; 0x10
    327a:	b9 89       	ldd	r27, Y+17	; 0x11
    327c:	8c 91       	ld	r24, X
    327e:	86 fd       	sbrc	r24, 6
    3280:	10 c0       	rjmp	.+32     	; 0x32a2 <_ZN14HardwareSerial5flushEv+0x40>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3282:	0f b6       	in	r0, 0x3f	; 63
    3284:	07 fc       	sbrc	r0, 7
    3286:	f5 cf       	rjmp	.-22     	; 0x3272 <_ZN14HardwareSerial5flushEv+0x10>
    3288:	80 81       	ld	r24, Z
    328a:	85 ff       	sbrs	r24, 5
    328c:	f2 cf       	rjmp	.-28     	; 0x3272 <_ZN14HardwareSerial5flushEv+0x10>
    328e:	03 c0       	rjmp	.+6      	; 0x3296 <_ZN14HardwareSerial5flushEv+0x34>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
    3290:	ce 01       	movw	r24, r28
    3292:	c9 df       	rcall	.-110    	; 0x3226 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3294:	ec cf       	rjmp	.-40     	; 0x326e <_ZN14HardwareSerial5flushEv+0xc>
  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3296:	a8 89       	ldd	r26, Y+16	; 0x10
    3298:	b9 89       	ldd	r27, Y+17	; 0x11
    329a:	8c 91       	ld	r24, X
    329c:	85 ff       	sbrs	r24, 5
    329e:	e9 cf       	rjmp	.-46     	; 0x3272 <_ZN14HardwareSerial5flushEv+0x10>
    32a0:	f7 cf       	rjmp	.-18     	; 0x3290 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    32a2:	df 91       	pop	r29
    32a4:	cf 91       	pop	r28
    32a6:	08 95       	ret

000032a8 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    32a8:	0f 93       	push	r16
    32aa:	1f 93       	push	r17
    32ac:	cf 93       	push	r28
    32ae:	df 93       	push	r29
    32b0:	ec 01       	movw	r28, r24
  _written = true;
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    32b6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    32b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32ba:	98 13       	cpse	r25, r24
    32bc:	22 c0       	rjmp	.+68     	; 0x3302 <_ZN14HardwareSerial5writeEh+0x5a>
    32be:	e8 89       	ldd	r30, Y+16	; 0x10
    32c0:	f9 89       	ldd	r31, Y+17	; 0x11
    32c2:	80 81       	ld	r24, Z
    32c4:	85 fd       	sbrc	r24, 5
    32c6:	22 c0       	rjmp	.+68     	; 0x330c <_ZN14HardwareSerial5writeEh+0x64>
    32c8:	1c c0       	rjmp	.+56     	; 0x3302 <_ZN14HardwareSerial5writeEh+0x5a>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    32ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32cc:	19 13       	cpse	r17, r25
    32ce:	0b c0       	rjmp	.+22     	; 0x32e6 <_ZN14HardwareSerial5writeEh+0x3e>
    if (bit_is_clear(SREG, SREG_I)) {
    32d0:	0f b6       	in	r0, 0x3f	; 63
    32d2:	07 fc       	sbrc	r0, 7
    32d4:	fa cf       	rjmp	.-12     	; 0x32ca <_ZN14HardwareSerial5writeEh+0x22>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    32d6:	e8 89       	ldd	r30, Y+16	; 0x10
    32d8:	f9 89       	ldd	r31, Y+17	; 0x11
    32da:	80 81       	ld	r24, Z
    32dc:	85 ff       	sbrs	r24, 5
    32de:	f5 cf       	rjmp	.-22     	; 0x32ca <_ZN14HardwareSerial5writeEh+0x22>
	_tx_udr_empty_irq();
    32e0:	ce 01       	movw	r24, r28
    32e2:	a1 df       	rcall	.-190    	; 0x3226 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    32e4:	f2 cf       	rjmp	.-28     	; 0x32ca <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    32e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32e8:	fe 01       	movw	r30, r28
    32ea:	e8 0f       	add	r30, r24
    32ec:	f1 1d       	adc	r31, r1
    32ee:	e3 5e       	subi	r30, 0xE3	; 227
    32f0:	fe 4f       	sbci	r31, 0xFE	; 254
    32f2:	00 83       	st	Z, r16
  _tx_buffer_head = i;
    32f4:	1b 8f       	std	Y+27, r17	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    32f6:	ea 89       	ldd	r30, Y+18	; 0x12
    32f8:	fb 89       	ldd	r31, Y+19	; 0x13
    32fa:	80 81       	ld	r24, Z
    32fc:	80 62       	ori	r24, 0x20	; 32
    32fe:	80 83       	st	Z, r24
  
  return 1;
    3300:	0d c0       	rjmp	.+26     	; 0x331c <_ZN14HardwareSerial5writeEh+0x74>
    3302:	06 2f       	mov	r16, r22
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3304:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3306:	8f 5f       	subi	r24, 0xFF	; 255
    3308:	18 2f       	mov	r17, r24
    330a:	df cf       	rjmp	.-66     	; 0x32ca <_ZN14HardwareSerial5writeEh+0x22>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    330c:	ee 89       	ldd	r30, Y+22	; 0x16
    330e:	ff 89       	ldd	r31, Y+23	; 0x17
    3310:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    3312:	e8 89       	ldd	r30, Y+16	; 0x10
    3314:	f9 89       	ldd	r31, Y+17	; 0x11
    3316:	80 81       	ld	r24, Z
    3318:	80 64       	ori	r24, 0x40	; 64
    331a:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	df 91       	pop	r29
    3322:	cf 91       	pop	r28
    3324:	1f 91       	pop	r17
    3326:	0f 91       	pop	r16
    3328:	08 95       	ret

0000332a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    332a:	cf 92       	push	r12
    332c:	df 92       	push	r13
    332e:	ef 92       	push	r14
    3330:	ff 92       	push	r15
    3332:	1f 93       	push	r17
    3334:	cf 93       	push	r28
    3336:	df 93       	push	r29
    3338:	ec 01       	movw	r28, r24
    333a:	6a 01       	movw	r12, r20
    333c:	7b 01       	movw	r14, r22
    333e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3340:	e8 89       	ldd	r30, Y+16	; 0x10
    3342:	f9 89       	ldd	r31, Y+17	; 0x11
    3344:	82 e0       	ldi	r24, 0x02	; 2
    3346:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3348:	41 15       	cp	r20, r1
    334a:	51 4e       	sbci	r21, 0xE1	; 225
    334c:	61 05       	cpc	r22, r1
    334e:	71 05       	cpc	r23, r1
    3350:	b1 f0       	breq	.+44     	; 0x337e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3352:	60 e0       	ldi	r22, 0x00	; 0
    3354:	79 e0       	ldi	r23, 0x09	; 9
    3356:	8d e3       	ldi	r24, 0x3D	; 61
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	a7 01       	movw	r20, r14
    335c:	96 01       	movw	r18, r12
    335e:	0e 94 05 a7 	call	0x14e0a	; 0x14e0a <__udivmodsi4>
    3362:	da 01       	movw	r26, r20
    3364:	c9 01       	movw	r24, r18
    3366:	01 97       	sbiw	r24, 0x01	; 1
    3368:	a1 09       	sbc	r26, r1
    336a:	b1 09       	sbc	r27, r1
    336c:	b6 95       	lsr	r27
    336e:	a7 95       	ror	r26
    3370:	97 95       	ror	r25
    3372:	87 95       	ror	r24
    3374:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3376:	21 15       	cp	r18, r1
    3378:	80 e1       	ldi	r24, 0x10	; 16
    337a:	38 07       	cpc	r19, r24
    337c:	a8 f0       	brcs	.+42     	; 0x33a8 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    337e:	e8 89       	ldd	r30, Y+16	; 0x10
    3380:	f9 89       	ldd	r31, Y+17	; 0x11
    3382:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3384:	60 e8       	ldi	r22, 0x80	; 128
    3386:	74 e8       	ldi	r23, 0x84	; 132
    3388:	8e e1       	ldi	r24, 0x1E	; 30
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	a7 01       	movw	r20, r14
    338e:	96 01       	movw	r18, r12
    3390:	0e 94 05 a7 	call	0x14e0a	; 0x14e0a <__udivmodsi4>
    3394:	da 01       	movw	r26, r20
    3396:	c9 01       	movw	r24, r18
    3398:	01 97       	sbiw	r24, 0x01	; 1
    339a:	a1 09       	sbc	r26, r1
    339c:	b1 09       	sbc	r27, r1
    339e:	b6 95       	lsr	r27
    33a0:	a7 95       	ror	r26
    33a2:	97 95       	ror	r25
    33a4:	87 95       	ror	r24
    33a6:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    33a8:	ec 85       	ldd	r30, Y+12	; 0x0c
    33aa:	fd 85       	ldd	r31, Y+13	; 0x0d
    33ac:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    33ae:	ee 85       	ldd	r30, Y+14	; 0x0e
    33b0:	ff 85       	ldd	r31, Y+15	; 0x0f
    33b2:	20 83       	st	Z, r18

  _written = false;
    33b4:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    33b6:	ec 89       	ldd	r30, Y+20	; 0x14
    33b8:	fd 89       	ldd	r31, Y+21	; 0x15
    33ba:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    33bc:	ea 89       	ldd	r30, Y+18	; 0x12
    33be:	fb 89       	ldd	r31, Y+19	; 0x13
    33c0:	80 81       	ld	r24, Z
    33c2:	80 61       	ori	r24, 0x10	; 16
    33c4:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    33c6:	ea 89       	ldd	r30, Y+18	; 0x12
    33c8:	fb 89       	ldd	r31, Y+19	; 0x13
    33ca:	80 81       	ld	r24, Z
    33cc:	88 60       	ori	r24, 0x08	; 8
    33ce:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    33d0:	ea 89       	ldd	r30, Y+18	; 0x12
    33d2:	fb 89       	ldd	r31, Y+19	; 0x13
    33d4:	80 81       	ld	r24, Z
    33d6:	80 68       	ori	r24, 0x80	; 128
    33d8:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    33da:	ea 89       	ldd	r30, Y+18	; 0x12
    33dc:	fb 89       	ldd	r31, Y+19	; 0x13
    33de:	80 81       	ld	r24, Z
    33e0:	8f 7d       	andi	r24, 0xDF	; 223
    33e2:	80 83       	st	Z, r24
}
    33e4:	df 91       	pop	r29
    33e6:	cf 91       	pop	r28
    33e8:	1f 91       	pop	r17
    33ea:	ff 90       	pop	r15
    33ec:	ef 90       	pop	r14
    33ee:	df 90       	pop	r13
    33f0:	cf 90       	pop	r12
    33f2:	08 95       	ret

000033f4 <__vector_25>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    33f4:	1f 92       	push	r1
    33f6:	0f 92       	push	r0
    33f8:	0f b6       	in	r0, 0x3f	; 63
    33fa:	0f 92       	push	r0
    33fc:	11 24       	eor	r1, r1
    33fe:	0b b6       	in	r0, 0x3b	; 59
    3400:	0f 92       	push	r0
    3402:	2f 93       	push	r18
    3404:	8f 93       	push	r24
    3406:	9f 93       	push	r25
    3408:	af 93       	push	r26
    340a:	bf 93       	push	r27
    340c:	ef 93       	push	r30
    340e:	ff 93       	push	r31
    3410:	e0 91 18 0a 	lds	r30, 0x0A18	; 0x800a18 <__data_end+0x10>
    3414:	f0 91 19 0a 	lds	r31, 0x0A19	; 0x800a19 <__data_end+0x11>
    3418:	80 81       	ld	r24, Z
    341a:	82 fd       	sbrc	r24, 2
    341c:	13 c0       	rjmp	.+38     	; 0x3444 <__vector_25+0x50>
    341e:	e8 e0       	ldi	r30, 0x08	; 8
    3420:	fa e0       	ldi	r31, 0x0A	; 10
    3422:	a6 89       	ldd	r26, Z+22	; 0x16
    3424:	b7 89       	ldd	r27, Z+23	; 0x17
    3426:	2c 91       	ld	r18, X
    3428:	81 8d       	ldd	r24, Z+25	; 0x19
    342a:	8f 5f       	subi	r24, 0xFF	; 255
    342c:	92 8d       	ldd	r25, Z+26	; 0x1a
    342e:	89 17       	cp	r24, r25
    3430:	71 f0       	breq	.+28     	; 0x344e <__vector_25+0x5a>
    3432:	df 01       	movw	r26, r30
    3434:	e1 8d       	ldd	r30, Z+25	; 0x19
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	e8 5f       	subi	r30, 0xF8	; 248
    343a:	f5 4f       	sbci	r31, 0xF5	; 245
    343c:	25 8f       	std	Z+29, r18	; 0x1d
    343e:	59 96       	adiw	r26, 0x19	; 25
    3440:	8c 93       	st	X, r24
    3442:	05 c0       	rjmp	.+10     	; 0x344e <__vector_25+0x5a>
    3444:	e0 91 1e 0a 	lds	r30, 0x0A1E	; 0x800a1e <__data_end+0x16>
    3448:	f0 91 1f 0a 	lds	r31, 0x0A1F	; 0x800a1f <__data_end+0x17>
    344c:	80 81       	ld	r24, Z
    344e:	ff 91       	pop	r31
    3450:	ef 91       	pop	r30
    3452:	bf 91       	pop	r27
    3454:	af 91       	pop	r26
    3456:	9f 91       	pop	r25
    3458:	8f 91       	pop	r24
    345a:	2f 91       	pop	r18
    345c:	0f 90       	pop	r0
    345e:	0b be       	out	0x3b, r0	; 59
    3460:	0f 90       	pop	r0
    3462:	0f be       	out	0x3f, r0	; 63
    3464:	0f 90       	pop	r0
    3466:	1f 90       	pop	r1
    3468:	18 95       	reti

0000346a <__vector_26>:
    346a:	1f 92       	push	r1
    346c:	0f 92       	push	r0
    346e:	0f b6       	in	r0, 0x3f	; 63
    3470:	0f 92       	push	r0
    3472:	11 24       	eor	r1, r1
    3474:	0b b6       	in	r0, 0x3b	; 59
    3476:	0f 92       	push	r0
    3478:	2f 93       	push	r18
    347a:	3f 93       	push	r19
    347c:	4f 93       	push	r20
    347e:	5f 93       	push	r21
    3480:	6f 93       	push	r22
    3482:	7f 93       	push	r23
    3484:	8f 93       	push	r24
    3486:	9f 93       	push	r25
    3488:	af 93       	push	r26
    348a:	bf 93       	push	r27
    348c:	ef 93       	push	r30
    348e:	ff 93       	push	r31
    3490:	88 e0       	ldi	r24, 0x08	; 8
    3492:	9a e0       	ldi	r25, 0x0A	; 10
    3494:	c8 de       	rcall	.-624    	; 0x3226 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3496:	ff 91       	pop	r31
    3498:	ef 91       	pop	r30
    349a:	bf 91       	pop	r27
    349c:	af 91       	pop	r26
    349e:	9f 91       	pop	r25
    34a0:	8f 91       	pop	r24
    34a2:	7f 91       	pop	r23
    34a4:	6f 91       	pop	r22
    34a6:	5f 91       	pop	r21
    34a8:	4f 91       	pop	r20
    34aa:	3f 91       	pop	r19
    34ac:	2f 91       	pop	r18
    34ae:	0f 90       	pop	r0
    34b0:	0b be       	out	0x3b, r0	; 59
    34b2:	0f 90       	pop	r0
    34b4:	0f be       	out	0x3f, r0	; 63
    34b6:	0f 90       	pop	r0
    34b8:	1f 90       	pop	r1
    34ba:	18 95       	reti

000034bc <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    34bc:	e8 e0       	ldi	r30, 0x08	; 8
    34be:	fa e0       	ldi	r31, 0x0A	; 10
    34c0:	13 82       	std	Z+3, r1	; 0x03
    34c2:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    34c4:	88 ee       	ldi	r24, 0xE8	; 232
    34c6:	93 e0       	ldi	r25, 0x03	; 3
    34c8:	a0 e0       	ldi	r26, 0x00	; 0
    34ca:	b0 e0       	ldi	r27, 0x00	; 0
    34cc:	84 83       	std	Z+4, r24	; 0x04
    34ce:	95 83       	std	Z+5, r25	; 0x05
    34d0:	a6 83       	std	Z+6, r26	; 0x06
    34d2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    34d4:	89 e1       	ldi	r24, 0x19	; 25
    34d6:	98 e0       	ldi	r25, 0x08	; 8
    34d8:	91 83       	std	Z+1, r25	; 0x01
    34da:	80 83       	st	Z, r24
    34dc:	85 ec       	ldi	r24, 0xC5	; 197
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	95 87       	std	Z+13, r25	; 0x0d
    34e2:	84 87       	std	Z+12, r24	; 0x0c
    34e4:	84 ec       	ldi	r24, 0xC4	; 196
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	97 87       	std	Z+15, r25	; 0x0f
    34ea:	86 87       	std	Z+14, r24	; 0x0e
    34ec:	80 ec       	ldi	r24, 0xC0	; 192
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	91 8b       	std	Z+17, r25	; 0x11
    34f2:	80 8b       	std	Z+16, r24	; 0x10
    34f4:	81 ec       	ldi	r24, 0xC1	; 193
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	93 8b       	std	Z+19, r25	; 0x13
    34fa:	82 8b       	std	Z+18, r24	; 0x12
    34fc:	82 ec       	ldi	r24, 0xC2	; 194
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	95 8b       	std	Z+21, r25	; 0x15
    3502:	84 8b       	std	Z+20, r24	; 0x14
    3504:	86 ec       	ldi	r24, 0xC6	; 198
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	97 8b       	std	Z+23, r25	; 0x17
    350a:	86 8b       	std	Z+22, r24	; 0x16
    350c:	11 8e       	std	Z+25, r1	; 0x19
    350e:	12 8e       	std	Z+26, r1	; 0x1a
    3510:	13 8e       	std	Z+27, r1	; 0x1b
    3512:	14 8e       	std	Z+28, r1	; 0x1c
    3514:	08 95       	ret

00003516 <__vector_36>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
    3516:	1f 92       	push	r1
    3518:	0f 92       	push	r0
    351a:	0f b6       	in	r0, 0x3f	; 63
    351c:	0f 92       	push	r0
    351e:	11 24       	eor	r1, r1
    3520:	0b b6       	in	r0, 0x3b	; 59
    3522:	0f 92       	push	r0
    3524:	2f 93       	push	r18
    3526:	8f 93       	push	r24
    3528:	9f 93       	push	r25
    352a:	af 93       	push	r26
    352c:	bf 93       	push	r27
    352e:	ef 93       	push	r30
    3530:	ff 93       	push	r31
    3532:	e0 91 35 0c 	lds	r30, 0x0C35	; 0x800c35 <Serial1+0x10>
    3536:	f0 91 36 0c 	lds	r31, 0x0C36	; 0x800c36 <Serial1+0x11>
    353a:	80 81       	ld	r24, Z
    353c:	82 fd       	sbrc	r24, 2
    353e:	13 c0       	rjmp	.+38     	; 0x3566 <__vector_36+0x50>
    3540:	e5 e2       	ldi	r30, 0x25	; 37
    3542:	fc e0       	ldi	r31, 0x0C	; 12
    3544:	a6 89       	ldd	r26, Z+22	; 0x16
    3546:	b7 89       	ldd	r27, Z+23	; 0x17
    3548:	2c 91       	ld	r18, X
    354a:	81 8d       	ldd	r24, Z+25	; 0x19
    354c:	8f 5f       	subi	r24, 0xFF	; 255
    354e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3550:	89 17       	cp	r24, r25
    3552:	71 f0       	breq	.+28     	; 0x3570 <__vector_36+0x5a>
    3554:	df 01       	movw	r26, r30
    3556:	e1 8d       	ldd	r30, Z+25	; 0x19
    3558:	f0 e0       	ldi	r31, 0x00	; 0
    355a:	eb 5d       	subi	r30, 0xDB	; 219
    355c:	f3 4f       	sbci	r31, 0xF3	; 243
    355e:	25 8f       	std	Z+29, r18	; 0x1d
    3560:	59 96       	adiw	r26, 0x19	; 25
    3562:	8c 93       	st	X, r24
    3564:	05 c0       	rjmp	.+10     	; 0x3570 <__vector_36+0x5a>
    3566:	e0 91 3b 0c 	lds	r30, 0x0C3B	; 0x800c3b <Serial1+0x16>
    356a:	f0 91 3c 0c 	lds	r31, 0x0C3C	; 0x800c3c <Serial1+0x17>
    356e:	80 81       	ld	r24, Z
    3570:	ff 91       	pop	r31
    3572:	ef 91       	pop	r30
    3574:	bf 91       	pop	r27
    3576:	af 91       	pop	r26
    3578:	9f 91       	pop	r25
    357a:	8f 91       	pop	r24
    357c:	2f 91       	pop	r18
    357e:	0f 90       	pop	r0
    3580:	0b be       	out	0x3b, r0	; 59
    3582:	0f 90       	pop	r0
    3584:	0f be       	out	0x3f, r0	; 63
    3586:	0f 90       	pop	r0
    3588:	1f 90       	pop	r1
    358a:	18 95       	reti

0000358c <__vector_37>:
    358c:	1f 92       	push	r1
    358e:	0f 92       	push	r0
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	0f 92       	push	r0
    3594:	11 24       	eor	r1, r1
    3596:	0b b6       	in	r0, 0x3b	; 59
    3598:	0f 92       	push	r0
    359a:	2f 93       	push	r18
    359c:	3f 93       	push	r19
    359e:	4f 93       	push	r20
    35a0:	5f 93       	push	r21
    35a2:	6f 93       	push	r22
    35a4:	7f 93       	push	r23
    35a6:	8f 93       	push	r24
    35a8:	9f 93       	push	r25
    35aa:	af 93       	push	r26
    35ac:	bf 93       	push	r27
    35ae:	ef 93       	push	r30
    35b0:	ff 93       	push	r31
    35b2:	85 e2       	ldi	r24, 0x25	; 37
    35b4:	9c e0       	ldi	r25, 0x0C	; 12
    35b6:	37 de       	rcall	.-914    	; 0x3226 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    35b8:	ff 91       	pop	r31
    35ba:	ef 91       	pop	r30
    35bc:	bf 91       	pop	r27
    35be:	af 91       	pop	r26
    35c0:	9f 91       	pop	r25
    35c2:	8f 91       	pop	r24
    35c4:	7f 91       	pop	r23
    35c6:	6f 91       	pop	r22
    35c8:	5f 91       	pop	r21
    35ca:	4f 91       	pop	r20
    35cc:	3f 91       	pop	r19
    35ce:	2f 91       	pop	r18
    35d0:	0f 90       	pop	r0
    35d2:	0b be       	out	0x3b, r0	; 59
    35d4:	0f 90       	pop	r0
    35d6:	0f be       	out	0x3f, r0	; 63
    35d8:	0f 90       	pop	r0
    35da:	1f 90       	pop	r1
    35dc:	18 95       	reti

000035de <_GLOBAL__sub_I___vector_36>:
    35de:	e5 e2       	ldi	r30, 0x25	; 37
    35e0:	fc e0       	ldi	r31, 0x0C	; 12
    35e2:	13 82       	std	Z+3, r1	; 0x03
    35e4:	12 82       	std	Z+2, r1	; 0x02
    35e6:	88 ee       	ldi	r24, 0xE8	; 232
    35e8:	93 e0       	ldi	r25, 0x03	; 3
    35ea:	a0 e0       	ldi	r26, 0x00	; 0
    35ec:	b0 e0       	ldi	r27, 0x00	; 0
    35ee:	84 83       	std	Z+4, r24	; 0x04
    35f0:	95 83       	std	Z+5, r25	; 0x05
    35f2:	a6 83       	std	Z+6, r26	; 0x06
    35f4:	b7 83       	std	Z+7, r27	; 0x07
    35f6:	89 e1       	ldi	r24, 0x19	; 25
    35f8:	98 e0       	ldi	r25, 0x08	; 8
    35fa:	91 83       	std	Z+1, r25	; 0x01
    35fc:	80 83       	st	Z, r24
    35fe:	8d ec       	ldi	r24, 0xCD	; 205
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	95 87       	std	Z+13, r25	; 0x0d
    3604:	84 87       	std	Z+12, r24	; 0x0c
    3606:	8c ec       	ldi	r24, 0xCC	; 204
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	97 87       	std	Z+15, r25	; 0x0f
    360c:	86 87       	std	Z+14, r24	; 0x0e
    360e:	88 ec       	ldi	r24, 0xC8	; 200
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	91 8b       	std	Z+17, r25	; 0x11
    3614:	80 8b       	std	Z+16, r24	; 0x10
    3616:	89 ec       	ldi	r24, 0xC9	; 201
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	93 8b       	std	Z+19, r25	; 0x13
    361c:	82 8b       	std	Z+18, r24	; 0x12
    361e:	8a ec       	ldi	r24, 0xCA	; 202
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	95 8b       	std	Z+21, r25	; 0x15
    3624:	84 8b       	std	Z+20, r24	; 0x14
    3626:	8e ec       	ldi	r24, 0xCE	; 206
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	97 8b       	std	Z+23, r25	; 0x17
    362c:	86 8b       	std	Z+22, r24	; 0x16
    362e:	11 8e       	std	Z+25, r1	; 0x19
    3630:	12 8e       	std	Z+26, r1	; 0x1a
    3632:	13 8e       	std	Z+27, r1	; 0x1b
    3634:	14 8e       	std	Z+28, r1	; 0x1c
    3636:	08 95       	ret

00003638 <__vector_51>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
}
    3638:	1f 92       	push	r1
    363a:	0f 92       	push	r0
    363c:	0f b6       	in	r0, 0x3f	; 63
    363e:	0f 92       	push	r0
    3640:	11 24       	eor	r1, r1
    3642:	0b b6       	in	r0, 0x3b	; 59
    3644:	0f 92       	push	r0
    3646:	2f 93       	push	r18
    3648:	8f 93       	push	r24
    364a:	9f 93       	push	r25
    364c:	af 93       	push	r26
    364e:	bf 93       	push	r27
    3650:	ef 93       	push	r30
    3652:	ff 93       	push	r31
    3654:	e0 91 52 0e 	lds	r30, 0x0E52	; 0x800e52 <Serial2+0x10>
    3658:	f0 91 53 0e 	lds	r31, 0x0E53	; 0x800e53 <Serial2+0x11>
    365c:	80 81       	ld	r24, Z
    365e:	82 fd       	sbrc	r24, 2
    3660:	13 c0       	rjmp	.+38     	; 0x3688 <__vector_51+0x50>
    3662:	e2 e4       	ldi	r30, 0x42	; 66
    3664:	fe e0       	ldi	r31, 0x0E	; 14
    3666:	a6 89       	ldd	r26, Z+22	; 0x16
    3668:	b7 89       	ldd	r27, Z+23	; 0x17
    366a:	2c 91       	ld	r18, X
    366c:	81 8d       	ldd	r24, Z+25	; 0x19
    366e:	8f 5f       	subi	r24, 0xFF	; 255
    3670:	92 8d       	ldd	r25, Z+26	; 0x1a
    3672:	89 17       	cp	r24, r25
    3674:	71 f0       	breq	.+28     	; 0x3692 <__vector_51+0x5a>
    3676:	df 01       	movw	r26, r30
    3678:	e1 8d       	ldd	r30, Z+25	; 0x19
    367a:	f0 e0       	ldi	r31, 0x00	; 0
    367c:	ee 5b       	subi	r30, 0xBE	; 190
    367e:	f1 4f       	sbci	r31, 0xF1	; 241
    3680:	25 8f       	std	Z+29, r18	; 0x1d
    3682:	59 96       	adiw	r26, 0x19	; 25
    3684:	8c 93       	st	X, r24
    3686:	05 c0       	rjmp	.+10     	; 0x3692 <__vector_51+0x5a>
    3688:	e0 91 58 0e 	lds	r30, 0x0E58	; 0x800e58 <Serial2+0x16>
    368c:	f0 91 59 0e 	lds	r31, 0x0E59	; 0x800e59 <Serial2+0x17>
    3690:	80 81       	ld	r24, Z
    3692:	ff 91       	pop	r31
    3694:	ef 91       	pop	r30
    3696:	bf 91       	pop	r27
    3698:	af 91       	pop	r26
    369a:	9f 91       	pop	r25
    369c:	8f 91       	pop	r24
    369e:	2f 91       	pop	r18
    36a0:	0f 90       	pop	r0
    36a2:	0b be       	out	0x3b, r0	; 59
    36a4:	0f 90       	pop	r0
    36a6:	0f be       	out	0x3f, r0	; 63
    36a8:	0f 90       	pop	r0
    36aa:	1f 90       	pop	r1
    36ac:	18 95       	reti

000036ae <__vector_52>:
    36ae:	1f 92       	push	r1
    36b0:	0f 92       	push	r0
    36b2:	0f b6       	in	r0, 0x3f	; 63
    36b4:	0f 92       	push	r0
    36b6:	11 24       	eor	r1, r1
    36b8:	0b b6       	in	r0, 0x3b	; 59
    36ba:	0f 92       	push	r0
    36bc:	2f 93       	push	r18
    36be:	3f 93       	push	r19
    36c0:	4f 93       	push	r20
    36c2:	5f 93       	push	r21
    36c4:	6f 93       	push	r22
    36c6:	7f 93       	push	r23
    36c8:	8f 93       	push	r24
    36ca:	9f 93       	push	r25
    36cc:	af 93       	push	r26
    36ce:	bf 93       	push	r27
    36d0:	ef 93       	push	r30
    36d2:	ff 93       	push	r31
    36d4:	82 e4       	ldi	r24, 0x42	; 66
    36d6:	9e e0       	ldi	r25, 0x0E	; 14
    36d8:	a6 dd       	rcall	.-1204   	; 0x3226 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    36da:	ff 91       	pop	r31
    36dc:	ef 91       	pop	r30
    36de:	bf 91       	pop	r27
    36e0:	af 91       	pop	r26
    36e2:	9f 91       	pop	r25
    36e4:	8f 91       	pop	r24
    36e6:	7f 91       	pop	r23
    36e8:	6f 91       	pop	r22
    36ea:	5f 91       	pop	r21
    36ec:	4f 91       	pop	r20
    36ee:	3f 91       	pop	r19
    36f0:	2f 91       	pop	r18
    36f2:	0f 90       	pop	r0
    36f4:	0b be       	out	0x3b, r0	; 59
    36f6:	0f 90       	pop	r0
    36f8:	0f be       	out	0x3f, r0	; 63
    36fa:	0f 90       	pop	r0
    36fc:	1f 90       	pop	r1
    36fe:	18 95       	reti

00003700 <_GLOBAL__sub_I___vector_51>:
    3700:	e2 e4       	ldi	r30, 0x42	; 66
    3702:	fe e0       	ldi	r31, 0x0E	; 14
    3704:	13 82       	std	Z+3, r1	; 0x03
    3706:	12 82       	std	Z+2, r1	; 0x02
    3708:	88 ee       	ldi	r24, 0xE8	; 232
    370a:	93 e0       	ldi	r25, 0x03	; 3
    370c:	a0 e0       	ldi	r26, 0x00	; 0
    370e:	b0 e0       	ldi	r27, 0x00	; 0
    3710:	84 83       	std	Z+4, r24	; 0x04
    3712:	95 83       	std	Z+5, r25	; 0x05
    3714:	a6 83       	std	Z+6, r26	; 0x06
    3716:	b7 83       	std	Z+7, r27	; 0x07
    3718:	89 e1       	ldi	r24, 0x19	; 25
    371a:	98 e0       	ldi	r25, 0x08	; 8
    371c:	91 83       	std	Z+1, r25	; 0x01
    371e:	80 83       	st	Z, r24
    3720:	85 ed       	ldi	r24, 0xD5	; 213
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	95 87       	std	Z+13, r25	; 0x0d
    3726:	84 87       	std	Z+12, r24	; 0x0c
    3728:	84 ed       	ldi	r24, 0xD4	; 212
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	97 87       	std	Z+15, r25	; 0x0f
    372e:	86 87       	std	Z+14, r24	; 0x0e
    3730:	80 ed       	ldi	r24, 0xD0	; 208
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	91 8b       	std	Z+17, r25	; 0x11
    3736:	80 8b       	std	Z+16, r24	; 0x10
    3738:	81 ed       	ldi	r24, 0xD1	; 209
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	93 8b       	std	Z+19, r25	; 0x13
    373e:	82 8b       	std	Z+18, r24	; 0x12
    3740:	82 ed       	ldi	r24, 0xD2	; 210
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	95 8b       	std	Z+21, r25	; 0x15
    3746:	84 8b       	std	Z+20, r24	; 0x14
    3748:	86 ed       	ldi	r24, 0xD6	; 214
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	97 8b       	std	Z+23, r25	; 0x17
    374e:	86 8b       	std	Z+22, r24	; 0x16
    3750:	11 8e       	std	Z+25, r1	; 0x19
    3752:	12 8e       	std	Z+26, r1	; 0x1a
    3754:	13 8e       	std	Z+27, r1	; 0x1b
    3756:	14 8e       	std	Z+28, r1	; 0x1c
    3758:	08 95       	ret

0000375a <__vector_54>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
}
    375a:	1f 92       	push	r1
    375c:	0f 92       	push	r0
    375e:	0f b6       	in	r0, 0x3f	; 63
    3760:	0f 92       	push	r0
    3762:	11 24       	eor	r1, r1
    3764:	0b b6       	in	r0, 0x3b	; 59
    3766:	0f 92       	push	r0
    3768:	2f 93       	push	r18
    376a:	8f 93       	push	r24
    376c:	9f 93       	push	r25
    376e:	af 93       	push	r26
    3770:	bf 93       	push	r27
    3772:	ef 93       	push	r30
    3774:	ff 93       	push	r31
    3776:	e0 91 6f 10 	lds	r30, 0x106F	; 0x80106f <Serial3+0x10>
    377a:	f0 91 70 10 	lds	r31, 0x1070	; 0x801070 <Serial3+0x11>
    377e:	80 81       	ld	r24, Z
    3780:	82 fd       	sbrc	r24, 2
    3782:	13 c0       	rjmp	.+38     	; 0x37aa <__vector_54+0x50>
    3784:	ef e5       	ldi	r30, 0x5F	; 95
    3786:	f0 e1       	ldi	r31, 0x10	; 16
    3788:	a6 89       	ldd	r26, Z+22	; 0x16
    378a:	b7 89       	ldd	r27, Z+23	; 0x17
    378c:	2c 91       	ld	r18, X
    378e:	81 8d       	ldd	r24, Z+25	; 0x19
    3790:	8f 5f       	subi	r24, 0xFF	; 255
    3792:	92 8d       	ldd	r25, Z+26	; 0x1a
    3794:	89 17       	cp	r24, r25
    3796:	71 f0       	breq	.+28     	; 0x37b4 <__vector_54+0x5a>
    3798:	df 01       	movw	r26, r30
    379a:	e1 8d       	ldd	r30, Z+25	; 0x19
    379c:	f0 e0       	ldi	r31, 0x00	; 0
    379e:	e1 5a       	subi	r30, 0xA1	; 161
    37a0:	ff 4e       	sbci	r31, 0xEF	; 239
    37a2:	25 8f       	std	Z+29, r18	; 0x1d
    37a4:	59 96       	adiw	r26, 0x19	; 25
    37a6:	8c 93       	st	X, r24
    37a8:	05 c0       	rjmp	.+10     	; 0x37b4 <__vector_54+0x5a>
    37aa:	e0 91 75 10 	lds	r30, 0x1075	; 0x801075 <Serial3+0x16>
    37ae:	f0 91 76 10 	lds	r31, 0x1076	; 0x801076 <Serial3+0x17>
    37b2:	80 81       	ld	r24, Z
    37b4:	ff 91       	pop	r31
    37b6:	ef 91       	pop	r30
    37b8:	bf 91       	pop	r27
    37ba:	af 91       	pop	r26
    37bc:	9f 91       	pop	r25
    37be:	8f 91       	pop	r24
    37c0:	2f 91       	pop	r18
    37c2:	0f 90       	pop	r0
    37c4:	0b be       	out	0x3b, r0	; 59
    37c6:	0f 90       	pop	r0
    37c8:	0f be       	out	0x3f, r0	; 63
    37ca:	0f 90       	pop	r0
    37cc:	1f 90       	pop	r1
    37ce:	18 95       	reti

000037d0 <__vector_55>:
    37d0:	1f 92       	push	r1
    37d2:	0f 92       	push	r0
    37d4:	0f b6       	in	r0, 0x3f	; 63
    37d6:	0f 92       	push	r0
    37d8:	11 24       	eor	r1, r1
    37da:	0b b6       	in	r0, 0x3b	; 59
    37dc:	0f 92       	push	r0
    37de:	2f 93       	push	r18
    37e0:	3f 93       	push	r19
    37e2:	4f 93       	push	r20
    37e4:	5f 93       	push	r21
    37e6:	6f 93       	push	r22
    37e8:	7f 93       	push	r23
    37ea:	8f 93       	push	r24
    37ec:	9f 93       	push	r25
    37ee:	af 93       	push	r26
    37f0:	bf 93       	push	r27
    37f2:	ef 93       	push	r30
    37f4:	ff 93       	push	r31
    37f6:	8f e5       	ldi	r24, 0x5F	; 95
    37f8:	90 e1       	ldi	r25, 0x10	; 16
    37fa:	15 dd       	rcall	.-1494   	; 0x3226 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    37fc:	ff 91       	pop	r31
    37fe:	ef 91       	pop	r30
    3800:	bf 91       	pop	r27
    3802:	af 91       	pop	r26
    3804:	9f 91       	pop	r25
    3806:	8f 91       	pop	r24
    3808:	7f 91       	pop	r23
    380a:	6f 91       	pop	r22
    380c:	5f 91       	pop	r21
    380e:	4f 91       	pop	r20
    3810:	3f 91       	pop	r19
    3812:	2f 91       	pop	r18
    3814:	0f 90       	pop	r0
    3816:	0b be       	out	0x3b, r0	; 59
    3818:	0f 90       	pop	r0
    381a:	0f be       	out	0x3f, r0	; 63
    381c:	0f 90       	pop	r0
    381e:	1f 90       	pop	r1
    3820:	18 95       	reti

00003822 <_GLOBAL__sub_I___vector_54>:
    3822:	ef e5       	ldi	r30, 0x5F	; 95
    3824:	f0 e1       	ldi	r31, 0x10	; 16
    3826:	13 82       	std	Z+3, r1	; 0x03
    3828:	12 82       	std	Z+2, r1	; 0x02
    382a:	88 ee       	ldi	r24, 0xE8	; 232
    382c:	93 e0       	ldi	r25, 0x03	; 3
    382e:	a0 e0       	ldi	r26, 0x00	; 0
    3830:	b0 e0       	ldi	r27, 0x00	; 0
    3832:	84 83       	std	Z+4, r24	; 0x04
    3834:	95 83       	std	Z+5, r25	; 0x05
    3836:	a6 83       	std	Z+6, r26	; 0x06
    3838:	b7 83       	std	Z+7, r27	; 0x07
    383a:	89 e1       	ldi	r24, 0x19	; 25
    383c:	98 e0       	ldi	r25, 0x08	; 8
    383e:	91 83       	std	Z+1, r25	; 0x01
    3840:	80 83       	st	Z, r24
    3842:	85 e3       	ldi	r24, 0x35	; 53
    3844:	91 e0       	ldi	r25, 0x01	; 1
    3846:	95 87       	std	Z+13, r25	; 0x0d
    3848:	84 87       	std	Z+12, r24	; 0x0c
    384a:	84 e3       	ldi	r24, 0x34	; 52
    384c:	91 e0       	ldi	r25, 0x01	; 1
    384e:	97 87       	std	Z+15, r25	; 0x0f
    3850:	86 87       	std	Z+14, r24	; 0x0e
    3852:	80 e3       	ldi	r24, 0x30	; 48
    3854:	91 e0       	ldi	r25, 0x01	; 1
    3856:	91 8b       	std	Z+17, r25	; 0x11
    3858:	80 8b       	std	Z+16, r24	; 0x10
    385a:	81 e3       	ldi	r24, 0x31	; 49
    385c:	91 e0       	ldi	r25, 0x01	; 1
    385e:	93 8b       	std	Z+19, r25	; 0x13
    3860:	82 8b       	std	Z+18, r24	; 0x12
    3862:	82 e3       	ldi	r24, 0x32	; 50
    3864:	91 e0       	ldi	r25, 0x01	; 1
    3866:	95 8b       	std	Z+21, r25	; 0x15
    3868:	84 8b       	std	Z+20, r24	; 0x14
    386a:	86 e3       	ldi	r24, 0x36	; 54
    386c:	91 e0       	ldi	r25, 0x01	; 1
    386e:	97 8b       	std	Z+23, r25	; 0x17
    3870:	86 8b       	std	Z+22, r24	; 0x16
    3872:	11 8e       	std	Z+25, r1	; 0x19
    3874:	12 8e       	std	Z+26, r1	; 0x1a
    3876:	13 8e       	std	Z+27, r1	; 0x1b
    3878:	14 8e       	std	Z+28, r1	; 0x1c
    387a:	08 95       	ret

0000387c <main>:
* Author: Jonathan N. Groff. Copyright NeoCoreTechs 2012,2013,2014,2015,2016,2020
*/
int main(void)
{
	// Clear the reset bit
	MCUSR &= ~_BV(WDRF);
    387c:	84 b7       	in	r24, 0x34	; 52
    387e:	87 7f       	andi	r24, 0xF7	; 247
    3880:	84 bf       	out	0x34, r24	; 52
	// Disable the WDT
	WDTCSR |= _BV(WDCE) | _BV(WDE);
    3882:	e0 e6       	ldi	r30, 0x60	; 96
    3884:	f0 e0       	ldi	r31, 0x00	; 0
    3886:	80 81       	ld	r24, Z
    3888:	88 61       	ori	r24, 0x18	; 24
    388a:	80 83       	st	Z, r24
	WDTCSR = 0;
    388c:	10 82       	st	Z, r1
	// Enter the main processing setup
	setup();
    388e:	0e 94 4c 3c 	call	0x7898	; 0x7898 <_Z5setupv>
	for (;;) {
		loop();
    3892:	0e 94 b0 89 	call	0x11360	; 0x11360 <_Z4loopv>
    3896:	fd cf       	rjmp	.-6      	; 0x3892 <main+0x16>

00003898 <_Z9assignPinh>:
extern void *memset(void *, int, size_t);
/*
* Return true if pin was newly assigned, false if previously assigned
*/
bool assignPin(uint8_t tpin) {
		if( !initialized) {
    3898:	90 91 7c 12 	lds	r25, 0x127C	; 0x80127c <initialized>
    389c:	91 11       	cpse	r25, r1
    389e:	1c c0       	rjmp	.+56     	; 0x38d8 <_Z9assignPinh+0x40>
			initialized = true;
    38a0:	91 e0       	ldi	r25, 0x01	; 1
    38a2:	90 93 7c 12 	sts	0x127C, r25	; 0x80127c <initialized>
			memset(&assignedPins, 0, 100);
    38a6:	94 e6       	ldi	r25, 0x64	; 100
    38a8:	ed e7       	ldi	r30, 0x7D	; 125
    38aa:	f2 e1       	ldi	r31, 0x12	; 18
    38ac:	df 01       	movw	r26, r30
    38ae:	1d 92       	st	X+, r1
    38b0:	9a 95       	dec	r25
    38b2:	e9 f7       	brne	.-6      	; 0x38ae <_Z9assignPinh+0x16>
    38b4:	e5 e2       	ldi	r30, 0x25	; 37
    38b6:	f8 e0       	ldi	r31, 0x08	; 8
    38b8:	45 e3       	ldi	r20, 0x35	; 53
    38ba:	58 e0       	ldi	r21, 0x08	; 8
			for(int8_t i = 0; i < (int8_t)sizeof(sensitive_pins); i++) {
				if (sensitive_pins[i] != -1) {
					assignedPins[sensitive_pins[i]] = PIN_RESERVED;
    38bc:	91 e0       	ldi	r25, 0x01	; 1
bool assignPin(uint8_t tpin) {
		if( !initialized) {
			initialized = true;
			memset(&assignedPins, 0, 100);
			for(int8_t i = 0; i < (int8_t)sizeof(sensitive_pins); i++) {
				if (sensitive_pins[i] != -1) {
    38be:	21 91       	ld	r18, Z+
    38c0:	31 91       	ld	r19, Z+
    38c2:	2f 3f       	cpi	r18, 0xFF	; 255
    38c4:	bf ef       	ldi	r27, 0xFF	; 255
    38c6:	3b 07       	cpc	r19, r27
    38c8:	21 f0       	breq	.+8      	; 0x38d2 <_Z9assignPinh+0x3a>
					assignedPins[sensitive_pins[i]] = PIN_RESERVED;
    38ca:	d9 01       	movw	r26, r18
    38cc:	a3 58       	subi	r26, 0x83	; 131
    38ce:	bd 4e       	sbci	r27, 0xED	; 237
    38d0:	9c 93       	st	X, r25
*/
bool assignPin(uint8_t tpin) {
		if( !initialized) {
			initialized = true;
			memset(&assignedPins, 0, 100);
			for(int8_t i = 0; i < (int8_t)sizeof(sensitive_pins); i++) {
    38d2:	e4 17       	cp	r30, r20
    38d4:	f5 07       	cpc	r31, r21
    38d6:	99 f7       	brne	.-26     	; 0x38be <_Z9assignPinh+0x26>
				if (sensitive_pins[i] != -1) {
					assignedPins[sensitive_pins[i]] = PIN_RESERVED;
				}
			 }
		}
		if( tpin > 99) return false;
    38d8:	84 36       	cpi	r24, 0x64	; 100
    38da:	70 f4       	brcc	.+28     	; 0x38f8 <_Z9assignPinh+0x60>
		if( assignedPins[tpin] != 0 )
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	fc 01       	movw	r30, r24
    38e0:	e3 58       	subi	r30, 0x83	; 131
    38e2:	fd 4e       	sbci	r31, 0xED	; 237
    38e4:	20 81       	ld	r18, Z
    38e6:	21 11       	cpse	r18, r1
    38e8:	09 c0       	rjmp	.+18     	; 0x38fc <_Z9assignPinh+0x64>
				return false;
		assignedPins[tpin] = PIN_ASSIGNED;
    38ea:	fc 01       	movw	r30, r24
    38ec:	e3 58       	subi	r30, 0x83	; 131
    38ee:	fd 4e       	sbci	r31, 0xED	; 237
    38f0:	22 e0       	ldi	r18, 0x02	; 2
    38f2:	20 83       	st	Z, r18
		return true;
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	08 95       	ret
				if (sensitive_pins[i] != -1) {
					assignedPins[sensitive_pins[i]] = PIN_RESERVED;
				}
			 }
		}
		if( tpin > 99) return false;
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	08 95       	ret
		if( assignedPins[tpin] != 0 )
				return false;
    38fc:	80 e0       	ldi	r24, 0x00	; 0
		assignedPins[tpin] = PIN_ASSIGNED;
		return true;
}
    38fe:	08 95       	ret

00003900 <_Z11unassignPinh>:
/*
* Unassign pin regardless of its status
*/
bool unassignPin(uint8_t tpin) {
	if( tpin > 99) return false;
    3900:	84 36       	cpi	r24, 0x64	; 100
    3902:	38 f4       	brcc	.+14     	; 0x3912 <_Z11unassignPinh+0x12>
	assignedPins[tpin] = 0;
    3904:	e8 2f       	mov	r30, r24
    3906:	f0 e0       	ldi	r31, 0x00	; 0
    3908:	e3 58       	subi	r30, 0x83	; 131
    390a:	fd 4e       	sbci	r31, 0xED	; 237
    390c:	10 82       	st	Z, r1
	return true;
    390e:	81 e0       	ldi	r24, 0x01	; 1
    3910:	08 95       	ret
}
/*
* Unassign pin regardless of its status
*/
bool unassignPin(uint8_t tpin) {
	if( tpin > 99) return false;
    3912:	80 e0       	ldi	r24, 0x00	; 0
	assignedPins[tpin] = 0;
	return true;
}
    3914:	08 95       	ret

00003916 <_Z13pinAssignmenth>:
/*
* Return the status of the pin assignment: 0 - unassigned, PIN_ASSIGNED, PIN_RESERVED
*/
int pinAssignment(uint8_t tpin) {
	if( tpin > 99 ) return -1;
    3916:	84 36       	cpi	r24, 0x64	; 100
    3918:	38 f4       	brcc	.+14     	; 0x3928 <_Z13pinAssignmenth+0x12>
	return assignedPins[tpin];
    391a:	e8 2f       	mov	r30, r24
    391c:	f0 e0       	ldi	r31, 0x00	; 0
    391e:	e3 58       	subi	r30, 0x83	; 131
    3920:	fd 4e       	sbci	r31, 0xED	; 237
    3922:	80 81       	ld	r24, Z
    3924:	90 e0       	ldi	r25, 0x00	; 0
    3926:	08 95       	ret
}
/*
* Return the status of the pin assignment: 0 - unassigned, PIN_ASSIGNED, PIN_RESERVED
*/
int pinAssignment(uint8_t tpin) {
	if( tpin > 99 ) return -1;
    3928:	8f ef       	ldi	r24, 0xFF	; 255
    392a:	9f ef       	ldi	r25, 0xFF	; 255
	return assignedPins[tpin];
    392c:	08 95       	ret

0000392e <_ZN23CounterInterruptService7serviceEv>:
	CounterInterruptService(int tmax) {
		this->maxcount = tmax;
		counter = 0;
	}
	//Interrupt Service Routine. RoboCore provides a virtual base defining the 'service' method for all unified interrupt requests
	void service(void)
    392e:	fc 01       	movw	r30, r24
	{	
		if( counter < maxcount ) {
    3930:	22 81       	ldd	r18, Z+2	; 0x02
    3932:	33 81       	ldd	r19, Z+3	; 0x03
    3934:	84 81       	ldd	r24, Z+4	; 0x04
    3936:	95 81       	ldd	r25, Z+5	; 0x05
    3938:	28 17       	cp	r18, r24
    393a:	39 07       	cpc	r19, r25
    393c:	2c f4       	brge	.+10     	; 0x3948 <_ZN23CounterInterruptService7serviceEv+0x1a>
			++counter;
    393e:	82 81       	ldd	r24, Z+2	; 0x02
    3940:	93 81       	ldd	r25, Z+3	; 0x03
    3942:	01 96       	adiw	r24, 0x01	; 1
    3944:	93 83       	std	Z+3, r25	; 0x03
    3946:	82 83       	std	Z+2, r24	; 0x02
    3948:	08 95       	ret

0000394a <_ZN20AbstractMotorControl18linkDistanceSensorEPP10Ultrasonichmh>:
* us - the Ultrasonic sensor array
* upin - the pin we are linking to, in the element array, if not there we ignore
* distance - min distance before shutdown
* facing - 1 the sensor is facing forward (default), 0 - sensor facing backward
*/
void AbstractMotorControl::linkDistanceSensor(Ultrasonic** us, uint8_t upin, uint32_t distance, uint8_t facing) {
    394a:	8f 92       	push	r8
    394c:	9f 92       	push	r9
    394e:	af 92       	push	r10
    3950:	bf 92       	push	r11
    3952:	ef 92       	push	r14
    3954:	0f 93       	push	r16
    3956:	1f 93       	push	r17
    3958:	cf 93       	push	r28
    395a:	df 93       	push	r29
    395c:	fc 01       	movw	r30, r24
    395e:	48 01       	movw	r8, r16
    3960:	59 01       	movw	r10, r18
	usensor = us;
    3962:	63 83       	std	Z+3, r22	; 0x03
    3964:	74 83       	std	Z+4, r23	; 0x04
    3966:	c6 2f       	mov	r28, r22
    3968:	d7 2f       	mov	r29, r23
	for(int i = 0; i < 10; i++) {
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	30 e0       	ldi	r19, 0x00	; 0
		if( us[i] && us[i]->getPin() == upin ) {
    396e:	a9 91       	ld	r26, Y+
    3970:	b9 91       	ld	r27, Y+
    3972:	10 97       	sbiw	r26, 0x00	; 0
    3974:	01 f1       	breq	.+64     	; 0x39b6 <_ZN20AbstractMotorControl18linkDistanceSensorEPP10Ultrasonichmh+0x6c>
		Digital* pin;
		float getRange();
		Ultrasonic(int ipin) {
			pin = new Digital(ipin);
		}
		uint8_t getPin(void) { return pin->pin; }
    3976:	14 96       	adiw	r26, 0x04	; 4
    3978:	0d 90       	ld	r0, X+
    397a:	bc 91       	ld	r27, X
    397c:	a0 2d       	mov	r26, r0
    397e:	9c 91       	ld	r25, X
    3980:	49 13       	cpse	r20, r25
    3982:	19 c0       	rjmp	.+50     	; 0x39b6 <_ZN20AbstractMotorControl18linkDistanceSensorEPP10Ultrasonichmh+0x6c>
			ultrasonicIndex[i][0] = i;
    3984:	d9 01       	movw	r26, r18
    3986:	aa 0f       	add	r26, r26
    3988:	bb 1f       	adc	r27, r27
    398a:	ae 0f       	add	r26, r30
    398c:	bf 1f       	adc	r27, r31
    398e:	9d 96       	adiw	r26, 0x2d	; 45
    3990:	2c 93       	st	X, r18
			ultrasonicIndex[i][1] = facing;
    3992:	d9 01       	movw	r26, r18
    3994:	57 96       	adiw	r26, 0x17	; 23
    3996:	aa 0f       	add	r26, r26
    3998:	bb 1f       	adc	r27, r27
    399a:	ae 0f       	add	r26, r30
    399c:	bf 1f       	adc	r27, r31
    399e:	ec 92       	st	X, r14
			minMotorDist[i] = distance;
    39a0:	22 0f       	add	r18, r18
    39a2:	33 1f       	adc	r19, r19
    39a4:	22 0f       	add	r18, r18
    39a6:	33 1f       	adc	r19, r19
    39a8:	e2 0f       	add	r30, r18
    39aa:	f3 1f       	adc	r31, r19
    39ac:	85 82       	std	Z+5, r8	; 0x05
    39ae:	96 82       	std	Z+6, r9	; 0x06
    39b0:	a7 82       	std	Z+7, r10	; 0x07
    39b2:	b0 86       	std	Z+8, r11	; 0x08
			return;
    39b4:	05 c0       	rjmp	.+10     	; 0x39c0 <_ZN20AbstractMotorControl18linkDistanceSensorEPP10Ultrasonichmh+0x76>
* distance - min distance before shutdown
* facing - 1 the sensor is facing forward (default), 0 - sensor facing backward
*/
void AbstractMotorControl::linkDistanceSensor(Ultrasonic** us, uint8_t upin, uint32_t distance, uint8_t facing) {
	usensor = us;
	for(int i = 0; i < 10; i++) {
    39b6:	2f 5f       	subi	r18, 0xFF	; 255
    39b8:	3f 4f       	sbci	r19, 0xFF	; 255
    39ba:	2a 30       	cpi	r18, 0x0A	; 10
    39bc:	31 05       	cpc	r19, r1
    39be:	b9 f6       	brne	.-82     	; 0x396e <_ZN20AbstractMotorControl18linkDistanceSensorEPP10Ultrasonichmh+0x24>
			ultrasonicIndex[i][1] = facing;
			minMotorDist[i] = distance;
			return;
		}
	}	
}
    39c0:	df 91       	pop	r29
    39c2:	cf 91       	pop	r28
    39c4:	1f 91       	pop	r17
    39c6:	0f 91       	pop	r16
    39c8:	ef 90       	pop	r14
    39ca:	bf 90       	pop	r11
    39cc:	af 90       	pop	r10
    39ce:	9f 90       	pop	r9
    39d0:	8f 90       	pop	r8
    39d2:	08 95       	ret

000039d4 <_ZN20AbstractMotorControl23checkUltrasonicShutdownEv>:
* check all linked ultrasonic sensors, if something is in minimum range, and it is in the direction
* of current travel as defined by the currentDirection array and the direction the sensor is facing, shut down all channels.
* First check to see if any channels are active.
* The premise is that the distance from the sensor to 'front' of robot is set to prevent impact
*/
bool AbstractMotorControl::checkUltrasonicShutdown() {
    39d4:	4f 92       	push	r4
    39d6:	5f 92       	push	r5
    39d8:	6f 92       	push	r6
    39da:	7f 92       	push	r7
    39dc:	af 92       	push	r10
    39de:	bf 92       	push	r11
    39e0:	cf 92       	push	r12
    39e2:	df 92       	push	r13
    39e4:	ef 92       	push	r14
    39e6:	ff 92       	push	r15
    39e8:	0f 93       	push	r16
    39ea:	1f 93       	push	r17
    39ec:	cf 93       	push	r28
    39ee:	df 93       	push	r29
    39f0:	6c 01       	movw	r12, r24
		bool shutdown = false;
		for(int i = 0; i < 10; i++)
			if( motorSpeed[i] != 0 ) {
    39f2:	fc 01       	movw	r30, r24
    39f4:	e7 59       	subi	r30, 0x97	; 151
    39f6:	ff 4f       	sbci	r31, 0xFF	; 255
    39f8:	80 81       	ld	r24, Z
    39fa:	91 81       	ldd	r25, Z+1	; 0x01
    39fc:	89 2b       	or	r24, r25
    39fe:	41 f4       	brne	.+16     	; 0x3a10 <_ZN20AbstractMotorControl23checkUltrasonicShutdownEv+0x3c>
    3a00:	32 96       	adiw	r30, 0x02	; 2
    3a02:	96 01       	movw	r18, r12
    3a04:	23 58       	subi	r18, 0x83	; 131
    3a06:	3f 4f       	sbci	r19, 0xFF	; 255
    3a08:	81 91       	ld	r24, Z+
    3a0a:	91 91       	ld	r25, Z+
    3a0c:	89 2b       	or	r24, r25
    3a0e:	71 f0       	breq	.+28     	; 0x3a2c <_ZN20AbstractMotorControl23checkUltrasonicShutdownEv+0x58>
    3a10:	e6 01       	movw	r28, r12
    3a12:	ad 96       	adiw	r28, 0x2d	; 45
    3a14:	76 01       	movw	r14, r12
    3a16:	85 e0       	ldi	r24, 0x05	; 5
    3a18:	e8 0e       	add	r14, r24
    3a1a:	f1 1c       	adc	r15, r1
    3a1c:	86 01       	movw	r16, r12
    3a1e:	03 58       	subi	r16, 0x83	; 131
    3a20:	1f 4f       	sbci	r17, 0xFF	; 255
    3a22:	56 01       	movw	r10, r12
    3a24:	a1 e4       	ldi	r26, 0x41	; 65
    3a26:	aa 0e       	add	r10, r26
    3a28:	b1 1c       	adc	r11, r1
    3a2a:	04 c0       	rjmp	.+8      	; 0x3a34 <_ZN20AbstractMotorControl23checkUltrasonicShutdownEv+0x60>
* First check to see if any channels are active.
* The premise is that the distance from the sensor to 'front' of robot is set to prevent impact
*/
bool AbstractMotorControl::checkUltrasonicShutdown() {
		bool shutdown = false;
		for(int i = 0; i < 10; i++)
    3a2c:	e2 17       	cp	r30, r18
    3a2e:	f3 07       	cpc	r31, r19
    3a30:	59 f7       	brne	.-42     	; 0x3a08 <_ZN20AbstractMotorControl23checkUltrasonicShutdownEv+0x34>
    3a32:	ee cf       	rjmp	.-36     	; 0x3a10 <_ZN20AbstractMotorControl23checkUltrasonicShutdownEv+0x3c>
		if( shutdown )
			return shutdown;
		// If we have a linked distance sensor. check range and possibly skip
		// ultrasonicIndex corresponds to ultrasonic object pointer array, element 0 points to Ultrasonic array element
		for(int i = 0; i < 10; i++) {
			if( ultrasonicIndex[i][0] != 255 ) {
    3a34:	e8 81       	ld	r30, Y
    3a36:	ef 3f       	cpi	r30, 0xFF	; 255
    3a38:	51 f1       	breq	.+84     	; 0x3a8e <_ZN20AbstractMotorControl23checkUltrasonicShutdownEv+0xba>
				// does the direction of sensor match movement direction?
				// we stop if Moving backwards with backward facing sensor or forward with forward facing
				// If motor is mirrored such the speed commands are reversed, then default direction should initially be 1
				// So the decision to stop is based on distance from obstacle, the current direction of travel,
				// the desired direction of travel, and the way the sensor is facing.
				if( !currentDirection[i] && !ultrasonicIndex[i][1] ||
    3a3a:	d8 01       	movw	r26, r16
    3a3c:	8c 91       	ld	r24, X
    3a3e:	81 11       	cpse	r24, r1
    3a40:	04 c0       	rjmp	.+8      	; 0x3a4a <_ZN20AbstractMotorControl23checkUltrasonicShutdownEv+0x76>
    3a42:	89 81       	ldd	r24, Y+1	; 0x01
    3a44:	88 23       	and	r24, r24
    3a46:	21 f0       	breq	.+8      	; 0x3a50 <_ZN20AbstractMotorControl23checkUltrasonicShutdownEv+0x7c>
    3a48:	22 c0       	rjmp	.+68     	; 0x3a8e <_ZN20AbstractMotorControl23checkUltrasonicShutdownEv+0xba>
					 currentDirection[i] && ultrasonicIndex[i][1] ) {
    3a4a:	89 81       	ldd	r24, Y+1	; 0x01
    3a4c:	88 23       	and	r24, r24
    3a4e:	f9 f0       	breq	.+62     	; 0x3a8e <_ZN20AbstractMotorControl23checkUltrasonicShutdownEv+0xba>
					if( usensor[ultrasonicIndex[i][0]]->getRange() < minMotorDist[i] ) {
    3a50:	f0 e0       	ldi	r31, 0x00	; 0
    3a52:	ee 0f       	add	r30, r30
    3a54:	ff 1f       	adc	r31, r31
    3a56:	d6 01       	movw	r26, r12
    3a58:	13 96       	adiw	r26, 0x03	; 3
    3a5a:	8d 91       	ld	r24, X+
    3a5c:	9c 91       	ld	r25, X
    3a5e:	14 97       	sbiw	r26, 0x04	; 4
    3a60:	e8 0f       	add	r30, r24
    3a62:	f9 1f       	adc	r31, r25
    3a64:	80 81       	ld	r24, Z
    3a66:	91 81       	ldd	r25, Z+1	; 0x01
    3a68:	0e 94 15 8c 	call	0x1182a	; 0x1182a <_ZN10Ultrasonic8getRangeEv>
    3a6c:	2b 01       	movw	r4, r22
    3a6e:	3c 01       	movw	r6, r24
    3a70:	f7 01       	movw	r30, r14
    3a72:	60 81       	ld	r22, Z
    3a74:	71 81       	ldd	r23, Z+1	; 0x01
    3a76:	82 81       	ldd	r24, Z+2	; 0x02
    3a78:	93 81       	ldd	r25, Z+3	; 0x03
    3a7a:	0e 94 6f a5 	call	0x14ade	; 0x14ade <__floatunsisf>
    3a7e:	9b 01       	movw	r18, r22
    3a80:	ac 01       	movw	r20, r24
    3a82:	c3 01       	movw	r24, r6
    3a84:	b2 01       	movw	r22, r4
    3a86:	0e 94 d2 a4 	call	0x149a4	; 0x149a4 <__cmpsf2>
    3a8a:	88 23       	and	r24, r24
    3a8c:	5c f0       	brlt	.+22     	; 0x3aa4 <_ZN20AbstractMotorControl23checkUltrasonicShutdownEv+0xd0>
    3a8e:	22 96       	adiw	r28, 0x02	; 2
    3a90:	f4 e0       	ldi	r31, 0x04	; 4
    3a92:	ef 0e       	add	r14, r31
    3a94:	f1 1c       	adc	r15, r1
    3a96:	0f 5f       	subi	r16, 0xFF	; 255
    3a98:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		if( shutdown )
			return shutdown;
		// If we have a linked distance sensor. check range and possibly skip
		// ultrasonicIndex corresponds to ultrasonic object pointer array, element 0 points to Ultrasonic array element
		for(int i = 0; i < 10; i++) {
    3a9a:	ca 15       	cp	r28, r10
    3a9c:	db 05       	cpc	r29, r11
    3a9e:	51 f6       	brne	.-108    	; 0x3a34 <_ZN20AbstractMotorControl23checkUltrasonicShutdownEv+0x60>
* of current travel as defined by the currentDirection array and the direction the sensor is facing, shut down all channels.
* First check to see if any channels are active.
* The premise is that the distance from the sensor to 'front' of robot is set to prevent impact
*/
bool AbstractMotorControl::checkUltrasonicShutdown() {
		bool shutdown = false;
    3aa0:	80 e0       	ldi	r24, 0x00	; 0
    3aa2:	0b c0       	rjmp	.+22     	; 0x3aba <_ZN20AbstractMotorControl23checkUltrasonicShutdownEv+0xe6>
						break;
					}
				}
			}
		}
		if( shutdown ) commandEmergencyStop(8);
    3aa4:	d6 01       	movw	r26, r12
    3aa6:	ed 91       	ld	r30, X+
    3aa8:	fc 91       	ld	r31, X
    3aaa:	06 80       	ldd	r0, Z+6	; 0x06
    3aac:	f7 81       	ldd	r31, Z+7	; 0x07
    3aae:	e0 2d       	mov	r30, r0
    3ab0:	68 e0       	ldi	r22, 0x08	; 8
    3ab2:	70 e0       	ldi	r23, 0x00	; 0
    3ab4:	c6 01       	movw	r24, r12
    3ab6:	19 95       	eicall
				// the desired direction of travel, and the way the sensor is facing.
				if( !currentDirection[i] && !ultrasonicIndex[i][1] ||
					 currentDirection[i] && ultrasonicIndex[i][1] ) {
					if( usensor[ultrasonicIndex[i][0]]->getRange() < minMotorDist[i] ) {
						//commandEmergencyStop();
						shutdown = true;
    3ab8:	81 e0       	ldi	r24, 0x01	; 1
				}
			}
		}
		if( shutdown ) commandEmergencyStop(8);
		return shutdown;
}
    3aba:	df 91       	pop	r29
    3abc:	cf 91       	pop	r28
    3abe:	1f 91       	pop	r17
    3ac0:	0f 91       	pop	r16
    3ac2:	ff 90       	pop	r15
    3ac4:	ef 90       	pop	r14
    3ac6:	df 90       	pop	r13
    3ac8:	cf 90       	pop	r12
    3aca:	bf 90       	pop	r11
    3acc:	af 90       	pop	r10
    3ace:	7f 90       	pop	r7
    3ad0:	6f 90       	pop	r6
    3ad2:	5f 90       	pop	r5
    3ad4:	4f 90       	pop	r4
    3ad6:	08 95       	ret

00003ad8 <_ZN20AbstractMotorControl13createEncoderEhh>:

void AbstractMotorControl::createEncoder(uint8_t channel, uint8_t encode_pin) {
    3ad8:	ff 92       	push	r15
    3ada:	0f 93       	push	r16
    3adc:	1f 93       	push	r17
    3ade:	cf 93       	push	r28
    3ae0:	df 93       	push	r29
    3ae2:	8c 01       	movw	r16, r24
    3ae4:	d6 2f       	mov	r29, r22
    3ae6:	f4 2e       	mov	r15, r20
		wheelEncoderService[channel-1] = new CounterInterruptService(maxMotorDuration[channel-1]);
    3ae8:	86 e0       	ldi	r24, 0x06	; 6
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    3af0:	dc 01       	movw	r26, r24
    3af2:	6d 2f       	mov	r22, r29
    3af4:	70 e0       	ldi	r23, 0x00	; 0
    3af6:	61 50       	subi	r22, 0x01	; 1
    3af8:	71 09       	sbc	r23, r1
    3afa:	fb 01       	movw	r30, r22
    3afc:	ee 0f       	add	r30, r30
    3afe:	ff 1f       	adc	r31, r31
    3b00:	ee 0f       	add	r30, r30
    3b02:	ff 1f       	adc	r31, r31
    3b04:	e0 0f       	add	r30, r16
    3b06:	f1 1f       	adc	r31, r17
    3b08:	ef 5b       	subi	r30, 0xBF	; 191
    3b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0c:	80 81       	ld	r24, Z
    3b0e:	91 81       	ldd	r25, Z+1	; 0x01
class CounterInterruptService: public InterruptService {
	private:
	volatile int counter;
	int maxcount;
	public:
	CounterInterruptService(int tmax) {
    3b10:	21 e3       	ldi	r18, 0x31	; 49
    3b12:	38 e0       	ldi	r19, 0x08	; 8
    3b14:	11 96       	adiw	r26, 0x01	; 1
    3b16:	3c 93       	st	X, r19
    3b18:	2e 93       	st	-X, r18
		this->maxcount = tmax;
    3b1a:	15 96       	adiw	r26, 0x05	; 5
    3b1c:	9c 93       	st	X, r25
    3b1e:	8e 93       	st	-X, r24
    3b20:	14 97       	sbiw	r26, 0x04	; 4
		counter = 0;
    3b22:	13 96       	adiw	r26, 0x03	; 3
    3b24:	1c 92       	st	X, r1
    3b26:	1e 92       	st	-X, r1
    3b28:	12 97       	sbiw	r26, 0x02	; 2
    3b2a:	66 0f       	add	r22, r22
    3b2c:	77 1f       	adc	r23, r23
    3b2e:	e8 01       	movw	r28, r16
    3b30:	c6 0f       	add	r28, r22
    3b32:	d7 1f       	adc	r29, r23
    3b34:	8e 01       	movw	r16, r28
    3b36:	07 54       	subi	r16, 0x47	; 71
    3b38:	1f 4f       	sbci	r17, 0xFF	; 255
    3b3a:	f8 01       	movw	r30, r16
    3b3c:	b1 83       	std	Z+1, r27	; 0x01
    3b3e:	a0 83       	st	Z, r26
		wheelEncoder[channel-1] = new PCInterrupts();
    3b40:	83 e0       	ldi	r24, 0x03	; 3
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
	
class PCInterrupts: public InterruptsBase {
	private:
	public:
	uint8_t pin;
	PCInterrupts(void){}
    3b48:	26 ef       	ldi	r18, 0xF6	; 246
    3b4a:	39 e0       	ldi	r19, 0x09	; 9
    3b4c:	fc 01       	movw	r30, r24
    3b4e:	31 83       	std	Z+1, r19	; 0x01
    3b50:	20 83       	st	Z, r18
    3b52:	c3 53       	subi	r28, 0x33	; 51
    3b54:	df 4f       	sbci	r29, 0xFF	; 255
    3b56:	99 83       	std	Y+1, r25	; 0x01
    3b58:	88 83       	st	Y, r24
		wheelEncoder[channel-1]->attachInterrupt(encode_pin, wheelEncoderService[channel-1], CHANGE);
    3b5a:	f8 01       	movw	r30, r16
    3b5c:	40 81       	ld	r20, Z
    3b5e:	51 81       	ldd	r21, Z+1	; 0x01
    3b60:	21 e0       	ldi	r18, 0x01	; 1
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	6f 2d       	mov	r22, r15
    3b66:	0e 94 96 a0 	call	0x1412c	; 0x1412c <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei>
}
    3b6a:	df 91       	pop	r29
    3b6c:	cf 91       	pop	r28
    3b6e:	1f 91       	pop	r17
    3b70:	0f 91       	pop	r16
    3b72:	ff 90       	pop	r15
    3b74:	08 95       	ret

00003b76 <_ZN20AbstractMotorControl20checkEncoderShutdownEv>:
* If we are using an encoder check the interval since last command.
* Interrupt service counter counts number of timer compare match resets.
* If number is exceeded issue shutdown and await next G5.
* This shutdown is to prevent unchecked freewheeling.
*/
bool AbstractMotorControl::checkEncoderShutdown() {
    3b76:	cf 92       	push	r12
    3b78:	df 92       	push	r13
    3b7a:	ef 92       	push	r14
    3b7c:	ff 92       	push	r15
    3b7e:	cf 93       	push	r28
    3b80:	df 93       	push	r29
	bool running = false;
	for(int i = 0; i < 10; i++)
		if( motorSpeed[i] != 0 ) {
    3b82:	fc 01       	movw	r30, r24
    3b84:	e7 59       	subi	r30, 0x97	; 151
    3b86:	ff 4f       	sbci	r31, 0xFF	; 255
    3b88:	20 81       	ld	r18, Z
    3b8a:	31 81       	ldd	r19, Z+1	; 0x01
    3b8c:	23 2b       	or	r18, r19
    3b8e:	61 f4       	brne	.+24     	; 0x3ba8 <_ZN20AbstractMotorControl20checkEncoderShutdownEv+0x32>
    3b90:	32 96       	adiw	r30, 0x02	; 2
    3b92:	ac 01       	movw	r20, r24
    3b94:	43 58       	subi	r20, 0x83	; 131
    3b96:	5f 4f       	sbci	r21, 0xFF	; 255
    3b98:	21 91       	ld	r18, Z+
    3b9a:	31 91       	ld	r19, Z+
    3b9c:	23 2b       	or	r18, r19
    3b9e:	21 f4       	brne	.+8      	; 0x3ba8 <_ZN20AbstractMotorControl20checkEncoderShutdownEv+0x32>
* If number is exceeded issue shutdown and await next G5.
* This shutdown is to prevent unchecked freewheeling.
*/
bool AbstractMotorControl::checkEncoderShutdown() {
	bool running = false;
	for(int i = 0; i < 10; i++)
    3ba0:	e4 17       	cp	r30, r20
    3ba2:	f5 07       	cpc	r31, r21
    3ba4:	c9 f7       	brne	.-14     	; 0x3b98 <_ZN20AbstractMotorControl20checkEncoderShutdownEv+0x22>
    3ba6:	32 c0       	rjmp	.+100    	; 0x3c0c <_ZN20AbstractMotorControl20checkEncoderShutdownEv+0x96>
    3ba8:	fc 01       	movw	r30, r24
    3baa:	e7 54       	subi	r30, 0x47	; 71
    3bac:	ff 4f       	sbci	r31, 0xFF	; 255
    3bae:	ec 01       	movw	r28, r24
    3bb0:	cf 5b       	subi	r28, 0xBF	; 191
    3bb2:	df 4f       	sbci	r29, 0xFF	; 255
    3bb4:	9c 01       	movw	r18, r24
    3bb6:	23 53       	subi	r18, 0x33	; 51
    3bb8:	3f 4f       	sbci	r19, 0xFF	; 255
			break;
		}
	if( !running )
		return running;
	for(int j = 0; j < 10; j++) { // by channel
		if( wheelEncoderService[j] ) {
    3bba:	a1 91       	ld	r26, Z+
    3bbc:	b1 91       	ld	r27, Z+
    3bbe:	10 97       	sbiw	r26, 0x00	; 0
    3bc0:	f9 f0       	breq	.+62     	; 0x3c00 <_ZN20AbstractMotorControl20checkEncoderShutdownEv+0x8a>
			
	}
	
	int get_counter() {
		int cntx;
		uint8_t oldSREG = SREG;
    3bc2:	6f b7       	in	r22, 0x3f	; 63
		cli();
    3bc4:	f8 94       	cli
		cntx = counter;
    3bc6:	12 96       	adiw	r26, 0x02	; 2
    3bc8:	4d 91       	ld	r20, X+
    3bca:	5c 91       	ld	r21, X
    3bcc:	13 97       	sbiw	r26, 0x03	; 3
		SREG = oldSREG;
    3bce:	6f bf       	out	0x3f, r22	; 63
			  int cntxmd = wheelEncoderService[j]->get_counter();
			  if( cntxmd >= maxMotorDuration[j] ) {
    3bd0:	05 2e       	mov	r0, r21
    3bd2:	00 0c       	add	r0, r0
    3bd4:	66 0b       	sbc	r22, r22
    3bd6:	77 0b       	sbc	r23, r23
    3bd8:	c8 80       	ld	r12, Y
    3bda:	d9 80       	ldd	r13, Y+1	; 0x01
    3bdc:	ea 80       	ldd	r14, Y+2	; 0x02
    3bde:	fb 80       	ldd	r15, Y+3	; 0x03
    3be0:	4c 15       	cp	r20, r12
    3be2:	5d 05       	cpc	r21, r13
    3be4:	6e 05       	cpc	r22, r14
    3be6:	7f 05       	cpc	r23, r15
    3be8:	58 f0       	brcs	.+22     	; 0x3c00 <_ZN20AbstractMotorControl20checkEncoderShutdownEv+0x8a>
					commandEmergencyStop(10);
    3bea:	dc 01       	movw	r26, r24
    3bec:	ed 91       	ld	r30, X+
    3bee:	fc 91       	ld	r31, X
    3bf0:	06 80       	ldd	r0, Z+6	; 0x06
    3bf2:	f7 81       	ldd	r31, Z+7	; 0x07
    3bf4:	e0 2d       	mov	r30, r0
    3bf6:	6a e0       	ldi	r22, 0x0A	; 10
    3bf8:	70 e0       	ldi	r23, 0x00	; 0
    3bfa:	19 95       	eicall
					return true;
    3bfc:	81 e0       	ldi	r24, 0x01	; 1
    3bfe:	07 c0       	rjmp	.+14     	; 0x3c0e <_ZN20AbstractMotorControl20checkEncoderShutdownEv+0x98>
    3c00:	24 96       	adiw	r28, 0x04	; 4
			running = true;
			break;
		}
	if( !running )
		return running;
	for(int j = 0; j < 10; j++) { // by channel
    3c02:	e2 17       	cp	r30, r18
    3c04:	f3 07       	cpc	r31, r19
    3c06:	c9 f6       	brne	.-78     	; 0x3bba <_ZN20AbstractMotorControl20checkEncoderShutdownEv+0x44>
					commandEmergencyStop(10);
					return true;
			  }
		}
	}
	return false;
    3c08:	80 e0       	ldi	r24, 0x00	; 0
    3c0a:	01 c0       	rjmp	.+2      	; 0x3c0e <_ZN20AbstractMotorControl20checkEncoderShutdownEv+0x98>
		if( motorSpeed[i] != 0 ) {
			running = true;
			break;
		}
	if( !running )
		return running;
    3c0c:	80 e0       	ldi	r24, 0x00	; 0
					return true;
			  }
		}
	}
	return false;
}
    3c0e:	df 91       	pop	r29
    3c10:	cf 91       	pop	r28
    3c12:	ff 90       	pop	r15
    3c14:	ef 90       	pop	r14
    3c16:	df 90       	pop	r13
    3c18:	cf 90       	pop	r12
    3c1a:	08 95       	ret

00003c1c <_ZN20AbstractMotorControl15getEncoderCountEh>:

int AbstractMotorControl::getEncoderCount(uint8_t ch) {
	if( wheelEncoderService[ch-1] )
    3c1c:	70 e0       	ldi	r23, 0x00	; 0
    3c1e:	61 50       	subi	r22, 0x01	; 1
    3c20:	71 09       	sbc	r23, r1
    3c22:	66 0f       	add	r22, r22
    3c24:	77 1f       	adc	r23, r23
    3c26:	86 0f       	add	r24, r22
    3c28:	97 1f       	adc	r25, r23
    3c2a:	fc 01       	movw	r30, r24
    3c2c:	e7 54       	subi	r30, 0x47	; 71
    3c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c30:	01 90       	ld	r0, Z+
    3c32:	f0 81       	ld	r31, Z
    3c34:	e0 2d       	mov	r30, r0
    3c36:	30 97       	sbiw	r30, 0x00	; 0
    3c38:	41 f0       	breq	.+16     	; 0x3c4a <_ZN20AbstractMotorControl15getEncoderCountEh+0x2e>
			
	}
	
	int get_counter() {
		int cntx;
		uint8_t oldSREG = SREG;
    3c3a:	8f b7       	in	r24, 0x3f	; 63
		cli();
    3c3c:	f8 94       	cli
		cntx = counter;
    3c3e:	22 81       	ldd	r18, Z+2	; 0x02
    3c40:	33 81       	ldd	r19, Z+3	; 0x03
		SREG = oldSREG;
    3c42:	8f bf       	out	0x3f, r24	; 63
		return wheelEncoderService[ch-1]->get_counter();
    3c44:	82 2f       	mov	r24, r18
    3c46:	93 2f       	mov	r25, r19
    3c48:	08 95       	ret
	return -1;
    3c4a:	8f ef       	ldi	r24, 0xFF	; 255
    3c4c:	9f ef       	ldi	r25, 0xFF	; 255
}
    3c4e:	08 95       	ret

00003c50 <_ZN20AbstractMotorControl13resetEncodersEv>:

void AbstractMotorControl::resetEncoders(void) {
    3c50:	fc 01       	movw	r30, r24
    3c52:	e7 54       	subi	r30, 0x47	; 71
    3c54:	ff 4f       	sbci	r31, 0xFF	; 255
    3c56:	9c 01       	movw	r18, r24
    3c58:	23 53       	subi	r18, 0x33	; 51
    3c5a:	3f 4f       	sbci	r19, 0xFF	; 255
	for(int i = 0; i < 10; i++) {
		if( wheelEncoderService[i] ) {
    3c5c:	a1 91       	ld	r26, Z+
    3c5e:	b1 91       	ld	r27, Z+
    3c60:	10 97       	sbiw	r26, 0x00	; 0
    3c62:	39 f0       	breq	.+14     	; 0x3c72 <_ZN20AbstractMotorControl13resetEncodersEv+0x22>
		return cntx; 
	}
		
	void set_counter(int cntx) {
		uint8_t oldSREG = SREG;
    3c64:	9f b7       	in	r25, 0x3f	; 63
		cli();
    3c66:	f8 94       	cli
		counter = cntx;
    3c68:	13 96       	adiw	r26, 0x03	; 3
    3c6a:	1c 92       	st	X, r1
    3c6c:	1e 92       	st	-X, r1
    3c6e:	12 97       	sbiw	r26, 0x02	; 2
		SREG = oldSREG;
    3c70:	9f bf       	out	0x3f, r25	; 63
		return wheelEncoderService[ch-1]->get_counter();
	return -1;
}

void AbstractMotorControl::resetEncoders(void) {
	for(int i = 0; i < 10; i++) {
    3c72:	e2 17       	cp	r30, r18
    3c74:	f3 07       	cpc	r31, r19
    3c76:	91 f7       	brne	.-28     	; 0x3c5c <_ZN20AbstractMotorControl13resetEncodersEv+0xc>
		if( wheelEncoderService[i] ) {
			wheelEncoderService[i]->set_counter(0);
		}
	}
}
    3c78:	08 95       	ret

00003c7a <_ZN20AbstractMotorControl11resetSpeedsEv>:

void AbstractMotorControl::resetSpeeds(void) {
    3c7a:	fc 01       	movw	r30, r24
    3c7c:	e7 59       	subi	r30, 0x97	; 151
    3c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c80:	83 58       	subi	r24, 0x83	; 131
    3c82:	9f 4f       	sbci	r25, 0xFF	; 255
	for(int i = 0; i < 10; i++) motorSpeed[i] = 0; // all channels down
    3c84:	11 92       	st	Z+, r1
    3c86:	11 92       	st	Z+, r1
    3c88:	e8 17       	cp	r30, r24
    3c8a:	f9 07       	cpc	r31, r25
    3c8c:	d9 f7       	brne	.-10     	; 0x3c84 <_ZN20AbstractMotorControl11resetSpeedsEv+0xa>
}
    3c8e:	08 95       	ret

00003c90 <_ZN20AbstractMotorControlD1Ev>:

// virtual destructor
AbstractMotorControl::~AbstractMotorControl() {} //~AbstractMotorControl
    3c90:	08 95       	ret

00003c92 <_ZN13HBridgeDriver18resetMaxMotorPowerEv>:
//functions
private:
public:
	HBridgeDriver(void) : AbstractPWMMotorControl(255){};
	~HBridgeDriver();
	void resetMaxMotorPower() { MAXMOTORPOWER = 255; }
    3c92:	8c 51       	subi	r24, 0x1C	; 28
    3c94:	9f 4f       	sbci	r25, 0xFF	; 255
    3c96:	2f ef       	ldi	r18, 0xFF	; 255
    3c98:	30 e0       	ldi	r19, 0x00	; 0
    3c9a:	fc 01       	movw	r30, r24
    3c9c:	31 83       	std	Z+1, r19	; 0x01
    3c9e:	20 83       	st	Z, r18
    3ca0:	08 95       	ret

00003ca2 <_ZN13HBridgeDriver11isConnectedEv>:
	int commandMotorPower(uint8_t ch, int16_t p);
	int commandEmergencyStop(int status);
	int isConnected(void) { return true; }
    3ca2:	81 e0       	ldi	r24, 0x01	; 1
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	08 95       	ret

00003ca8 <_ZN13HBridgeDriver14queryFaultFlagEv>:
	void setDirectionPins(Digital** dpin) { pdigitals = dpin; }
	uint8_t getMotorPWMPin(uint8_t channel) { return motorDrive[channel-1][0]; }
	uint8_t getMotorEnablePin(uint8_t channel) {return motorDrive[channel-1][1]; }
	void createPWM(uint8_t channel, uint8_t pin_number, uint8_t dir_pin, uint8_t dir_default, int timer_pre, int timer_res);
	void getDriverInfo(uint8_t ch, char* outStr);
	int queryFaultFlag(void) { return fault_flag; }
    3ca8:	8a 51       	subi	r24, 0x1A	; 26
    3caa:	9f 4f       	sbci	r25, 0xFF	; 255
    3cac:	fc 01       	movw	r30, r24
    3cae:	80 81       	ld	r24, Z
    3cb0:	91 81       	ldd	r25, Z+1	; 0x01
    3cb2:	08 95       	ret

00003cb4 <_ZN13HBridgeDriver15queryStatusFlagEv>:
    int queryStatusFlag(void) { return status_flag; }
    3cb4:	8c 5e       	subi	r24, 0xEC	; 236
    3cb6:	9e 4f       	sbci	r25, 0xFE	; 254
    3cb8:	fc 01       	movw	r30, r24
    3cba:	80 81       	ld	r24, Z
    3cbc:	91 81       	ldd	r25, Z+1	; 0x01
    3cbe:	08 95       	ret

00003cc0 <_ZN13HBridgeDriver20commandEmergencyStopEi>:
#include "HBridgeDriver.h"
#include "..\Configuration_adv.h"


int HBridgeDriver::commandEmergencyStop(int status)
{
    3cc0:	8f 92       	push	r8
    3cc2:	9f 92       	push	r9
    3cc4:	af 92       	push	r10
    3cc6:	bf 92       	push	r11
    3cc8:	cf 92       	push	r12
    3cca:	df 92       	push	r13
    3ccc:	ef 92       	push	r14
    3cce:	ff 92       	push	r15
    3cd0:	0f 93       	push	r16
    3cd2:	1f 93       	push	r17
    3cd4:	cf 93       	push	r28
    3cd6:	df 93       	push	r29
    3cd8:	6c 01       	movw	r12, r24
    3cda:	5b 01       	movw	r10, r22
    3cdc:	4c 01       	movw	r8, r24
    3cde:	8c ee       	ldi	r24, 0xEC	; 236
    3ce0:	88 0e       	add	r8, r24
    3ce2:	91 1c       	adc	r9, r1
    3ce4:	76 01       	movw	r14, r12
    3ce6:	ac ee       	ldi	r26, 0xEC	; 236
    3ce8:	ea 1a       	sub	r14, r26
    3cea:	ae ef       	ldi	r26, 0xFE	; 254
    3cec:	fa 0a       	sbc	r15, r26
	for(int j=0; j < 10; j++) {
		int pindex = motorDrive[j][0];
		if(pindex != 255) {
			ppwms[pindex]->init(ppwms[pindex]->pin);
    3cee:	86 01       	movw	r16, r12
    3cf0:	08 51       	subi	r16, 0x18	; 24
    3cf2:	1f 4f       	sbci	r17, 0xFF	; 255


int HBridgeDriver::commandEmergencyStop(int status)
{
	for(int j=0; j < 10; j++) {
		int pindex = motorDrive[j][0];
    3cf4:	f4 01       	movw	r30, r8
    3cf6:	c0 81       	ld	r28, Z
		if(pindex != 255) {
    3cf8:	cf 3f       	cpi	r28, 0xFF	; 255
    3cfa:	91 f1       	breq	.+100    	; 0x3d60 <_ZN13HBridgeDriver20commandEmergencyStopEi+0xa0>
			ppwms[pindex]->init(ppwms[pindex]->pin);
    3cfc:	d0 e0       	ldi	r29, 0x00	; 0
    3cfe:	cc 0f       	add	r28, r28
    3d00:	dd 1f       	adc	r29, r29
    3d02:	d8 01       	movw	r26, r16
    3d04:	ed 91       	ld	r30, X+
    3d06:	fc 91       	ld	r31, X
    3d08:	ec 0f       	add	r30, r28
    3d0a:	fd 1f       	adc	r31, r29
    3d0c:	80 81       	ld	r24, Z
    3d0e:	91 81       	ldd	r25, Z+1	; 0x01
    3d10:	fc 01       	movw	r30, r24
    3d12:	60 81       	ld	r22, Z
    3d14:	0e 94 6d a3 	call	0x146da	; 0x146da <_ZN3PWM4initEh>
			ppwms[pindex]->setPWMPrescale(motorDrive[j][2]);
    3d18:	d8 01       	movw	r26, r16
    3d1a:	ed 91       	ld	r30, X+
    3d1c:	fc 91       	ld	r31, X
    3d1e:	ec 0f       	add	r30, r28
    3d20:	fd 1f       	adc	r31, r29
    3d22:	d4 01       	movw	r26, r8
    3d24:	12 96       	adiw	r26, 0x02	; 2
    3d26:	6c 91       	ld	r22, X
    3d28:	80 81       	ld	r24, Z
    3d2a:	91 81       	ldd	r25, Z+1	; 0x01
    3d2c:	0e 94 76 a2 	call	0x144ec	; 0x144ec <_ZN3PWM14setPWMPrescaleEh>
			ppwms[pindex]->setPWMResolution(motorDrive[j][3]);
    3d30:	d8 01       	movw	r26, r16
    3d32:	ed 91       	ld	r30, X+
    3d34:	fc 91       	ld	r31, X
    3d36:	ec 0f       	add	r30, r28
    3d38:	fd 1f       	adc	r31, r29
    3d3a:	d4 01       	movw	r26, r8
    3d3c:	13 96       	adiw	r26, 0x03	; 3
    3d3e:	6c 91       	ld	r22, X
    3d40:	80 81       	ld	r24, Z
    3d42:	91 81       	ldd	r25, Z+1	; 0x01
    3d44:	0e 94 54 a2 	call	0x144a8	; 0x144a8 <_ZN3PWM16setPWMResolutionEh>
			ppwms[pindex]->pwmOff();
    3d48:	f8 01       	movw	r30, r16
    3d4a:	80 81       	ld	r24, Z
    3d4c:	91 81       	ldd	r25, Z+1	; 0x01
    3d4e:	c8 0f       	add	r28, r24
    3d50:	d9 1f       	adc	r29, r25
	uint8_t channel = 0;
	InterruptService* interruptService=NULL;
	PWM(uint8_t spin);
	void init(uint8_t spin);
	void pwmWrite(uint16_t val, uint8_t outputMode = 0b10);
	inline void pwmOff() { pwmWrite(0, 0); };
    3d52:	40 e0       	ldi	r20, 0x00	; 0
    3d54:	60 e0       	ldi	r22, 0x00	; 0
    3d56:	70 e0       	ldi	r23, 0x00	; 0
    3d58:	88 81       	ld	r24, Y
    3d5a:	99 81       	ldd	r25, Y+1	; 0x01
    3d5c:	0e 94 12 a3 	call	0x14624	; 0x14624 <_ZN3PWM8pwmWriteEjh>
    3d60:	f4 e0       	ldi	r31, 0x04	; 4
    3d62:	8f 0e       	add	r8, r31
    3d64:	91 1c       	adc	r9, r1
#include "..\Configuration_adv.h"


int HBridgeDriver::commandEmergencyStop(int status)
{
	for(int j=0; j < 10; j++) {
    3d66:	8e 14       	cp	r8, r14
    3d68:	9f 04       	cpc	r9, r15
    3d6a:	21 f6       	brne	.-120    	; 0x3cf4 <_ZN13HBridgeDriver20commandEmergencyStopEi+0x34>
			ppwms[pindex]->setPWMPrescale(motorDrive[j][2]);
			ppwms[pindex]->setPWMResolution(motorDrive[j][3]);
			ppwms[pindex]->pwmOff();
		}
	}
	fault_flag = 16;
    3d6c:	f6 01       	movw	r30, r12
    3d6e:	ea 51       	subi	r30, 0x1A	; 26
    3d70:	ff 4f       	sbci	r31, 0xFF	; 255
    3d72:	80 e1       	ldi	r24, 0x10	; 16
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	91 83       	std	Z+1, r25	; 0x01
    3d78:	80 83       	st	Z, r24
	resetSpeeds();
    3d7a:	c6 01       	movw	r24, r12
    3d7c:	7e df       	rcall	.-260    	; 0x3c7a <_ZN20AbstractMotorControl11resetSpeedsEv>
	resetEncoders();
    3d7e:	c6 01       	movw	r24, r12
    3d80:	67 df       	rcall	.-306    	; 0x3c50 <_ZN20AbstractMotorControl13resetEncodersEv>
	return status;
}
    3d82:	c5 01       	movw	r24, r10
    3d84:	df 91       	pop	r29
    3d86:	cf 91       	pop	r28
    3d88:	1f 91       	pop	r17
    3d8a:	0f 91       	pop	r16
    3d8c:	ff 90       	pop	r15
    3d8e:	ef 90       	pop	r14
    3d90:	df 90       	pop	r13
    3d92:	cf 90       	pop	r12
    3d94:	bf 90       	pop	r11
    3d96:	af 90       	pop	r10
    3d98:	9f 90       	pop	r9
    3d9a:	8f 90       	pop	r8
    3d9c:	08 95       	ret

00003d9e <_ZN13HBridgeDriverD1Ev>:
class AbstractPWMMotorControl : public AbstractMotorControl
{
//functions
public:
	AbstractPWMMotorControl(uint32_t maxPower) {MAXMOTORPOWER = maxPower;}
	~AbstractPWMMotorControl(){};
    3d9e:	2b e4       	ldi	r18, 0x4B	; 75
    3da0:	38 e0       	ldi	r19, 0x08	; 8
    3da2:	fc 01       	movw	r30, r24
    3da4:	31 83       	std	Z+1, r19	; 0x01
    3da6:	20 83       	st	Z, r18
    3da8:	73 cf       	rjmp	.-282    	; 0x3c90 <_ZN20AbstractMotorControlD1Ev>
    3daa:	08 95       	ret

00003dac <_ZN13HBridgeDriverD0Ev>:
	}

}

// default destructor
HBridgeDriver::~HBridgeDriver() 
    3dac:	cf 93       	push	r28
    3dae:	df 93       	push	r29
    3db0:	ec 01       	movw	r28, r24
{
} //~HBridgeDriver
    3db2:	f5 df       	rcall	.-22     	; 0x3d9e <_ZN13HBridgeDriverD1Ev>
    3db4:	ce 01       	movw	r24, r28
    3db6:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
    3dba:	df 91       	pop	r29
    3dbc:	cf 91       	pop	r28
    3dbe:	08 95       	ret

00003dc0 <_ZN13HBridgeDriver13getDriverInfoEhPc>:
		}
		fault_flag = 0;
		return 0;
}

void HBridgeDriver::getDriverInfo(uint8_t ch, char* outStr) {
    3dc0:	8f 92       	push	r8
    3dc2:	9f 92       	push	r9
    3dc4:	af 92       	push	r10
    3dc6:	bf 92       	push	r11
    3dc8:	cf 92       	push	r12
    3dca:	df 92       	push	r13
    3dcc:	ef 92       	push	r14
    3dce:	ff 92       	push	r15
    3dd0:	0f 93       	push	r16
    3dd2:	1f 93       	push	r17
    3dd4:	cf 93       	push	r28
    3dd6:	df 93       	push	r29
    3dd8:	cd b7       	in	r28, 0x3d	; 61
    3dda:	de b7       	in	r29, 0x3e	; 62
    3ddc:	cb 54       	subi	r28, 0x4B	; 75
    3dde:	d1 40       	sbci	r29, 0x01	; 1
    3de0:	0f b6       	in	r0, 0x3f	; 63
    3de2:	f8 94       	cli
    3de4:	de bf       	out	0x3e, r29	; 62
    3de6:	0f be       	out	0x3f, r0	; 63
    3de8:	cd bf       	out	0x3d, r28	; 61
    3dea:	7c 01       	movw	r14, r24
    3dec:	8a 01       	movw	r16, r20
	char dpin6[5];
	char dpin7[5];
	char dpin8[5];
	char dpin9[5];
	
	if( motorDrive[ch-1][0] == 255 ) {
    3dee:	c6 2e       	mov	r12, r22
    3df0:	d1 2c       	mov	r13, r1
    3df2:	56 01       	movw	r10, r12
    3df4:	81 e0       	ldi	r24, 0x01	; 1
    3df6:	a8 1a       	sub	r10, r24
    3df8:	b1 08       	sbc	r11, r1
    3dfa:	cc 0c       	add	r12, r12
    3dfc:	dd 1c       	adc	r13, r13
    3dfe:	cc 0c       	add	r12, r12
    3e00:	dd 1c       	adc	r13, r13
    3e02:	ce 0c       	add	r12, r14
    3e04:	df 1c       	adc	r13, r15
    3e06:	f6 01       	movw	r30, r12
    3e08:	e8 51       	subi	r30, 0x18	; 24
    3e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0c:	e0 81       	ld	r30, Z
    3e0e:	ef 3f       	cpi	r30, 0xFF	; 255
    3e10:	89 f4       	brne	.+34     	; 0x3e34 <_ZN13HBridgeDriver13getDriverInfoEhPc+0x74>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3e12:	4a e0       	ldi	r20, 0x0A	; 10
    3e14:	be 01       	movw	r22, r28
    3e16:	6f 5f       	subi	r22, 0xFF	; 255
    3e18:	7e 4f       	sbci	r23, 0xFE	; 254
    3e1a:	8f ef       	ldi	r24, 0xFF	; 255
    3e1c:	9f ef       	ldi	r25, 0xFF	; 255
    3e1e:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    3e22:	4a e0       	ldi	r20, 0x0A	; 10
    3e24:	be 01       	movw	r22, r28
    3e26:	6a 5f       	subi	r22, 0xFA	; 250
    3e28:	7e 4f       	sbci	r23, 0xFE	; 254
    3e2a:	8f ef       	ldi	r24, 0xFF	; 255
    3e2c:	9f ef       	ldi	r25, 0xFF	; 255
    3e2e:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    3e32:	2e c0       	rjmp	.+92     	; 0x3e90 <_ZN13HBridgeDriver13getDriverInfoEhPc+0xd0>
		itoa(-1, dout1, 10);
		itoa(-1, dout2, 10);
	} else {
		itoa(ppwms[motorDrive[ch-1][0]]->pin, dout1, 10);
    3e34:	f0 e0       	ldi	r31, 0x00	; 0
    3e36:	ee 0f       	add	r30, r30
    3e38:	ff 1f       	adc	r31, r31
    3e3a:	47 01       	movw	r8, r14
    3e3c:	98 ee       	ldi	r25, 0xE8	; 232
    3e3e:	89 0e       	add	r8, r25
    3e40:	91 1c       	adc	r9, r1
    3e42:	d4 01       	movw	r26, r8
    3e44:	8d 91       	ld	r24, X+
    3e46:	9c 91       	ld	r25, X
    3e48:	e8 0f       	add	r30, r24
    3e4a:	f9 1f       	adc	r31, r25
    3e4c:	01 90       	ld	r0, Z+
    3e4e:	f0 81       	ld	r31, Z
    3e50:	e0 2d       	mov	r30, r0
    3e52:	80 81       	ld	r24, Z
    3e54:	4a e0       	ldi	r20, 0x0A	; 10
    3e56:	be 01       	movw	r22, r28
    3e58:	6f 5f       	subi	r22, 0xFF	; 255
    3e5a:	7e 4f       	sbci	r23, 0xFE	; 254
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(ppwms[motorDrive[ch-1][0]]->mode, dout2, 10);
    3e62:	f6 01       	movw	r30, r12
    3e64:	e8 51       	subi	r30, 0x18	; 24
    3e66:	ff 4f       	sbci	r31, 0xFF	; 255
    3e68:	e0 81       	ld	r30, Z
    3e6a:	f0 e0       	ldi	r31, 0x00	; 0
    3e6c:	ee 0f       	add	r30, r30
    3e6e:	ff 1f       	adc	r31, r31
    3e70:	d4 01       	movw	r26, r8
    3e72:	8d 91       	ld	r24, X+
    3e74:	9c 91       	ld	r25, X
    3e76:	e8 0f       	add	r30, r24
    3e78:	f9 1f       	adc	r31, r25
    3e7a:	01 90       	ld	r0, Z+
    3e7c:	f0 81       	ld	r31, Z
    3e7e:	e0 2d       	mov	r30, r0
    3e80:	81 81       	ldd	r24, Z+1	; 0x01
    3e82:	4a e0       	ldi	r20, 0x0A	; 10
    3e84:	be 01       	movw	r22, r28
    3e86:	6a 5f       	subi	r22, 0xFA	; 250
    3e88:	7e 4f       	sbci	r23, 0xFE	; 254
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
	}
	itoa(motorDrive[ch-1][1], dout3, 10);
    3e90:	aa 0c       	add	r10, r10
    3e92:	bb 1c       	adc	r11, r11
    3e94:	aa 0c       	add	r10, r10
    3e96:	bb 1c       	adc	r11, r11
    3e98:	ae 0c       	add	r10, r14
    3e9a:	bf 1c       	adc	r11, r15
    3e9c:	f5 01       	movw	r30, r10
    3e9e:	e3 51       	subi	r30, 0x13	; 19
    3ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea2:	80 81       	ld	r24, Z
    3ea4:	4a e0       	ldi	r20, 0x0A	; 10
    3ea6:	be 01       	movw	r22, r28
    3ea8:	65 5f       	subi	r22, 0xF5	; 245
    3eaa:	7e 4f       	sbci	r23, 0xFE	; 254
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
	itoa(motorDrive[ch-1][2], dout4, 10);
    3eb2:	f5 01       	movw	r30, r10
    3eb4:	e2 51       	subi	r30, 0x12	; 18
    3eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb8:	80 81       	ld	r24, Z
    3eba:	4a e0       	ldi	r20, 0x0A	; 10
    3ebc:	be 01       	movw	r22, r28
    3ebe:	60 5f       	subi	r22, 0xF0	; 240
    3ec0:	7e 4f       	sbci	r23, 0xFE	; 254
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
	itoa(motorDrive[ch-1][3], dout5, 10);
    3ec8:	f5 01       	movw	r30, r10
    3eca:	e1 51       	subi	r30, 0x11	; 17
    3ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ece:	80 81       	ld	r24, Z
    3ed0:	4a e0       	ldi	r20, 0x0A	; 10
    3ed2:	be 01       	movw	r22, r28
    3ed4:	6b 5e       	subi	r22, 0xEB	; 235
    3ed6:	7e 4f       	sbci	r23, 0xFE	; 254
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
	if(pdigitals[0])
    3ede:	f7 01       	movw	r30, r14
    3ee0:	e6 51       	subi	r30, 0x16	; 22
    3ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee4:	01 90       	ld	r0, Z+
    3ee6:	f0 81       	ld	r31, Z
    3ee8:	e0 2d       	mov	r30, r0
    3eea:	01 90       	ld	r0, Z+
    3eec:	f0 81       	ld	r31, Z
    3eee:	e0 2d       	mov	r30, r0
    3ef0:	30 97       	sbiw	r30, 0x00	; 0
    3ef2:	49 f0       	breq	.+18     	; 0x3f06 <_ZN13HBridgeDriver13getDriverInfoEhPc+0x146>
    3ef4:	80 81       	ld	r24, Z
    3ef6:	4a e0       	ldi	r20, 0x0A	; 10
    3ef8:	be 01       	movw	r22, r28
    3efa:	66 5e       	subi	r22, 0xE6	; 230
    3efc:	7e 4f       	sbci	r23, 0xFE	; 254
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    3f04:	08 c0       	rjmp	.+16     	; 0x3f16 <_ZN13HBridgeDriver13getDriverInfoEhPc+0x156>
    3f06:	4a e0       	ldi	r20, 0x0A	; 10
    3f08:	be 01       	movw	r22, r28
    3f0a:	66 5e       	subi	r22, 0xE6	; 230
    3f0c:	7e 4f       	sbci	r23, 0xFE	; 254
    3f0e:	80 e0       	ldi	r24, 0x00	; 0
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[0]->pin, dpin0, 10);
	else
		itoa(0, dpin0, 10);
	if(pdigitals[1])
    3f16:	f7 01       	movw	r30, r14
    3f18:	e6 51       	subi	r30, 0x16	; 22
    3f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1c:	01 90       	ld	r0, Z+
    3f1e:	f0 81       	ld	r31, Z
    3f20:	e0 2d       	mov	r30, r0
    3f22:	02 80       	ldd	r0, Z+2	; 0x02
    3f24:	f3 81       	ldd	r31, Z+3	; 0x03
    3f26:	e0 2d       	mov	r30, r0
    3f28:	30 97       	sbiw	r30, 0x00	; 0
    3f2a:	49 f0       	breq	.+18     	; 0x3f3e <_ZN13HBridgeDriver13getDriverInfoEhPc+0x17e>
    3f2c:	80 81       	ld	r24, Z
    3f2e:	4a e0       	ldi	r20, 0x0A	; 10
    3f30:	be 01       	movw	r22, r28
    3f32:	61 5e       	subi	r22, 0xE1	; 225
    3f34:	7e 4f       	sbci	r23, 0xFE	; 254
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    3f3c:	08 c0       	rjmp	.+16     	; 0x3f4e <_ZN13HBridgeDriver13getDriverInfoEhPc+0x18e>
    3f3e:	4a e0       	ldi	r20, 0x0A	; 10
    3f40:	be 01       	movw	r22, r28
    3f42:	61 5e       	subi	r22, 0xE1	; 225
    3f44:	7e 4f       	sbci	r23, 0xFE	; 254
    3f46:	80 e0       	ldi	r24, 0x00	; 0
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[1]->pin, dpin1, 10);
	else
		itoa(0, dpin1, 10);
	if(pdigitals[2])
    3f4e:	f7 01       	movw	r30, r14
    3f50:	e6 51       	subi	r30, 0x16	; 22
    3f52:	ff 4f       	sbci	r31, 0xFF	; 255
    3f54:	01 90       	ld	r0, Z+
    3f56:	f0 81       	ld	r31, Z
    3f58:	e0 2d       	mov	r30, r0
    3f5a:	04 80       	ldd	r0, Z+4	; 0x04
    3f5c:	f5 81       	ldd	r31, Z+5	; 0x05
    3f5e:	e0 2d       	mov	r30, r0
    3f60:	30 97       	sbiw	r30, 0x00	; 0
    3f62:	49 f0       	breq	.+18     	; 0x3f76 <_ZN13HBridgeDriver13getDriverInfoEhPc+0x1b6>
    3f64:	80 81       	ld	r24, Z
    3f66:	4a e0       	ldi	r20, 0x0A	; 10
    3f68:	be 01       	movw	r22, r28
    3f6a:	6c 5d       	subi	r22, 0xDC	; 220
    3f6c:	7e 4f       	sbci	r23, 0xFE	; 254
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    3f74:	08 c0       	rjmp	.+16     	; 0x3f86 <_ZN13HBridgeDriver13getDriverInfoEhPc+0x1c6>
    3f76:	4a e0       	ldi	r20, 0x0A	; 10
    3f78:	be 01       	movw	r22, r28
    3f7a:	6c 5d       	subi	r22, 0xDC	; 220
    3f7c:	7e 4f       	sbci	r23, 0xFE	; 254
    3f7e:	80 e0       	ldi	r24, 0x00	; 0
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[2]->pin, dpin2, 10);
	else
		itoa(0, dpin2, 10);
	if(pdigitals[3])
    3f86:	f7 01       	movw	r30, r14
    3f88:	e6 51       	subi	r30, 0x16	; 22
    3f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8c:	01 90       	ld	r0, Z+
    3f8e:	f0 81       	ld	r31, Z
    3f90:	e0 2d       	mov	r30, r0
    3f92:	06 80       	ldd	r0, Z+6	; 0x06
    3f94:	f7 81       	ldd	r31, Z+7	; 0x07
    3f96:	e0 2d       	mov	r30, r0
    3f98:	30 97       	sbiw	r30, 0x00	; 0
    3f9a:	49 f0       	breq	.+18     	; 0x3fae <_ZN13HBridgeDriver13getDriverInfoEhPc+0x1ee>
    3f9c:	80 81       	ld	r24, Z
    3f9e:	4a e0       	ldi	r20, 0x0A	; 10
    3fa0:	be 01       	movw	r22, r28
    3fa2:	67 5d       	subi	r22, 0xD7	; 215
    3fa4:	7e 4f       	sbci	r23, 0xFE	; 254
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    3fac:	08 c0       	rjmp	.+16     	; 0x3fbe <_ZN13HBridgeDriver13getDriverInfoEhPc+0x1fe>
    3fae:	4a e0       	ldi	r20, 0x0A	; 10
    3fb0:	be 01       	movw	r22, r28
    3fb2:	67 5d       	subi	r22, 0xD7	; 215
    3fb4:	7e 4f       	sbci	r23, 0xFE	; 254
    3fb6:	80 e0       	ldi	r24, 0x00	; 0
    3fb8:	90 e0       	ldi	r25, 0x00	; 0
    3fba:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[3]->pin, dpin3, 10);
	else
		itoa(0, dpin3, 10);
	if(pdigitals[4])
    3fbe:	f7 01       	movw	r30, r14
    3fc0:	e6 51       	subi	r30, 0x16	; 22
    3fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc4:	01 90       	ld	r0, Z+
    3fc6:	f0 81       	ld	r31, Z
    3fc8:	e0 2d       	mov	r30, r0
    3fca:	00 84       	ldd	r0, Z+8	; 0x08
    3fcc:	f1 85       	ldd	r31, Z+9	; 0x09
    3fce:	e0 2d       	mov	r30, r0
    3fd0:	30 97       	sbiw	r30, 0x00	; 0
    3fd2:	49 f0       	breq	.+18     	; 0x3fe6 <_ZN13HBridgeDriver13getDriverInfoEhPc+0x226>
    3fd4:	80 81       	ld	r24, Z
    3fd6:	4a e0       	ldi	r20, 0x0A	; 10
    3fd8:	be 01       	movw	r22, r28
    3fda:	62 5d       	subi	r22, 0xD2	; 210
    3fdc:	7e 4f       	sbci	r23, 0xFE	; 254
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    3fe4:	08 c0       	rjmp	.+16     	; 0x3ff6 <_ZN13HBridgeDriver13getDriverInfoEhPc+0x236>
    3fe6:	4a e0       	ldi	r20, 0x0A	; 10
    3fe8:	be 01       	movw	r22, r28
    3fea:	62 5d       	subi	r22, 0xD2	; 210
    3fec:	7e 4f       	sbci	r23, 0xFE	; 254
    3fee:	80 e0       	ldi	r24, 0x00	; 0
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[4]->pin, dpin4, 10);
	else
		itoa(0, dpin4, 10);
	if(pdigitals[5])
    3ff6:	f7 01       	movw	r30, r14
    3ff8:	e6 51       	subi	r30, 0x16	; 22
    3ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffc:	01 90       	ld	r0, Z+
    3ffe:	f0 81       	ld	r31, Z
    4000:	e0 2d       	mov	r30, r0
    4002:	02 84       	ldd	r0, Z+10	; 0x0a
    4004:	f3 85       	ldd	r31, Z+11	; 0x0b
    4006:	e0 2d       	mov	r30, r0
    4008:	30 97       	sbiw	r30, 0x00	; 0
    400a:	49 f0       	breq	.+18     	; 0x401e <_ZN13HBridgeDriver13getDriverInfoEhPc+0x25e>
    400c:	80 81       	ld	r24, Z
    400e:	4a e0       	ldi	r20, 0x0A	; 10
    4010:	be 01       	movw	r22, r28
    4012:	6d 5c       	subi	r22, 0xCD	; 205
    4014:	7e 4f       	sbci	r23, 0xFE	; 254
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    401c:	08 c0       	rjmp	.+16     	; 0x402e <_ZN13HBridgeDriver13getDriverInfoEhPc+0x26e>
    401e:	4a e0       	ldi	r20, 0x0A	; 10
    4020:	be 01       	movw	r22, r28
    4022:	6d 5c       	subi	r22, 0xCD	; 205
    4024:	7e 4f       	sbci	r23, 0xFE	; 254
    4026:	80 e0       	ldi	r24, 0x00	; 0
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[5]->pin, dpin5, 10);
	else
		itoa(0, dpin5, 10);
	if(pdigitals[6])
    402e:	f7 01       	movw	r30, r14
    4030:	e6 51       	subi	r30, 0x16	; 22
    4032:	ff 4f       	sbci	r31, 0xFF	; 255
    4034:	01 90       	ld	r0, Z+
    4036:	f0 81       	ld	r31, Z
    4038:	e0 2d       	mov	r30, r0
    403a:	04 84       	ldd	r0, Z+12	; 0x0c
    403c:	f5 85       	ldd	r31, Z+13	; 0x0d
    403e:	e0 2d       	mov	r30, r0
    4040:	30 97       	sbiw	r30, 0x00	; 0
    4042:	49 f0       	breq	.+18     	; 0x4056 <_ZN13HBridgeDriver13getDriverInfoEhPc+0x296>
    4044:	80 81       	ld	r24, Z
    4046:	4a e0       	ldi	r20, 0x0A	; 10
    4048:	be 01       	movw	r22, r28
    404a:	68 5c       	subi	r22, 0xC8	; 200
    404c:	7e 4f       	sbci	r23, 0xFE	; 254
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    4054:	08 c0       	rjmp	.+16     	; 0x4066 <_ZN13HBridgeDriver13getDriverInfoEhPc+0x2a6>
    4056:	4a e0       	ldi	r20, 0x0A	; 10
    4058:	be 01       	movw	r22, r28
    405a:	68 5c       	subi	r22, 0xC8	; 200
    405c:	7e 4f       	sbci	r23, 0xFE	; 254
    405e:	80 e0       	ldi	r24, 0x00	; 0
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[6]->pin, dpin6, 10);
	else
		itoa(0, dpin6, 10);
	if(pdigitals[7])
    4066:	f7 01       	movw	r30, r14
    4068:	e6 51       	subi	r30, 0x16	; 22
    406a:	ff 4f       	sbci	r31, 0xFF	; 255
    406c:	01 90       	ld	r0, Z+
    406e:	f0 81       	ld	r31, Z
    4070:	e0 2d       	mov	r30, r0
    4072:	06 84       	ldd	r0, Z+14	; 0x0e
    4074:	f7 85       	ldd	r31, Z+15	; 0x0f
    4076:	e0 2d       	mov	r30, r0
    4078:	30 97       	sbiw	r30, 0x00	; 0
    407a:	49 f0       	breq	.+18     	; 0x408e <_ZN13HBridgeDriver13getDriverInfoEhPc+0x2ce>
    407c:	80 81       	ld	r24, Z
    407e:	4a e0       	ldi	r20, 0x0A	; 10
    4080:	be 01       	movw	r22, r28
    4082:	63 5c       	subi	r22, 0xC3	; 195
    4084:	7e 4f       	sbci	r23, 0xFE	; 254
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    408c:	08 c0       	rjmp	.+16     	; 0x409e <_ZN13HBridgeDriver13getDriverInfoEhPc+0x2de>
    408e:	4a e0       	ldi	r20, 0x0A	; 10
    4090:	be 01       	movw	r22, r28
    4092:	63 5c       	subi	r22, 0xC3	; 195
    4094:	7e 4f       	sbci	r23, 0xFE	; 254
    4096:	80 e0       	ldi	r24, 0x00	; 0
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[7]->pin, dpin7, 10);
	else
		itoa(0, dpin7, 10);
	if(pdigitals[8])
    409e:	f7 01       	movw	r30, r14
    40a0:	e6 51       	subi	r30, 0x16	; 22
    40a2:	ff 4f       	sbci	r31, 0xFF	; 255
    40a4:	01 90       	ld	r0, Z+
    40a6:	f0 81       	ld	r31, Z
    40a8:	e0 2d       	mov	r30, r0
    40aa:	00 88       	ldd	r0, Z+16	; 0x10
    40ac:	f1 89       	ldd	r31, Z+17	; 0x11
    40ae:	e0 2d       	mov	r30, r0
    40b0:	30 97       	sbiw	r30, 0x00	; 0
    40b2:	49 f0       	breq	.+18     	; 0x40c6 <_ZN13HBridgeDriver13getDriverInfoEhPc+0x306>
    40b4:	80 81       	ld	r24, Z
    40b6:	4a e0       	ldi	r20, 0x0A	; 10
    40b8:	be 01       	movw	r22, r28
    40ba:	6e 5b       	subi	r22, 0xBE	; 190
    40bc:	7e 4f       	sbci	r23, 0xFE	; 254
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    40c4:	08 c0       	rjmp	.+16     	; 0x40d6 <_ZN13HBridgeDriver13getDriverInfoEhPc+0x316>
    40c6:	4a e0       	ldi	r20, 0x0A	; 10
    40c8:	be 01       	movw	r22, r28
    40ca:	6e 5b       	subi	r22, 0xBE	; 190
    40cc:	7e 4f       	sbci	r23, 0xFE	; 254
    40ce:	80 e0       	ldi	r24, 0x00	; 0
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[8]->pin, dpin8, 10);
	else
		itoa(0, dpin8, 10);
	if(pdigitals[9])
    40d6:	f7 01       	movw	r30, r14
    40d8:	e6 51       	subi	r30, 0x16	; 22
    40da:	ff 4f       	sbci	r31, 0xFF	; 255
    40dc:	01 90       	ld	r0, Z+
    40de:	f0 81       	ld	r31, Z
    40e0:	e0 2d       	mov	r30, r0
    40e2:	02 88       	ldd	r0, Z+18	; 0x12
    40e4:	f3 89       	ldd	r31, Z+19	; 0x13
    40e6:	e0 2d       	mov	r30, r0
    40e8:	30 97       	sbiw	r30, 0x00	; 0
    40ea:	49 f0       	breq	.+18     	; 0x40fe <_ZN13HBridgeDriver13getDriverInfoEhPc+0x33e>
    40ec:	80 81       	ld	r24, Z
    40ee:	4a e0       	ldi	r20, 0x0A	; 10
    40f0:	be 01       	movw	r22, r28
    40f2:	69 5b       	subi	r22, 0xB9	; 185
    40f4:	7e 4f       	sbci	r23, 0xFE	; 254
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    40fc:	08 c0       	rjmp	.+16     	; 0x410e <_ZN13HBridgeDriver13getDriverInfoEhPc+0x34e>
    40fe:	4a e0       	ldi	r20, 0x0A	; 10
    4100:	be 01       	movw	r22, r28
    4102:	69 5b       	subi	r22, 0xB9	; 185
    4104:	7e 4f       	sbci	r23, 0xFE	; 254
    4106:	80 e0       	ldi	r24, 0x00	; 0
    4108:	90 e0       	ldi	r25, 0x00	; 0
    410a:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[9]->pin, dpin9, 10);
	else
		itoa(0, dpin9, 10);
	if( motorDrive[ch-1][0] == 255 ) {
    410e:	f6 01       	movw	r30, r12
    4110:	e8 51       	subi	r30, 0x18	; 24
    4112:	ff 4f       	sbci	r31, 0xFF	; 255
    4114:	80 81       	ld	r24, Z
    4116:	8f 3f       	cpi	r24, 0xFF	; 255
    4118:	09 f0       	breq	.+2      	; 0x411c <_ZN13HBridgeDriver13getDriverInfoEhPc+0x35c>
    411a:	3f c0       	rjmp	.+126    	; 0x419a <_ZN13HBridgeDriver13getDriverInfoEhPc+0x3da>
		sprintf(cout,"HB-PWM UNINITIALIZED Pin:%s, Mode:%s, Dir Pin:%s, Timer Prescale:%s, Timer Res.:%s\r\nDir Pins:0=%s,1=%s,2=%s,3=%s,4=%s,5=%s,6=%s,7=%s,8=%s,9=%s\0",
		dout1, dout2, dout3, dout4, dout5, dpin0, dpin1, dpin2, dpin3, dpin4, dpin5, dpin6, dpin7, dpin8, dpin9);
    411c:	ce 01       	movw	r24, r28
    411e:	89 5b       	subi	r24, 0xB9	; 185
    4120:	9e 4f       	sbci	r25, 0xFE	; 254
    4122:	9f 93       	push	r25
    4124:	8f 93       	push	r24
    4126:	05 97       	sbiw	r24, 0x05	; 5
    4128:	9f 93       	push	r25
    412a:	8f 93       	push	r24
    412c:	05 97       	sbiw	r24, 0x05	; 5
    412e:	9f 93       	push	r25
    4130:	8f 93       	push	r24
    4132:	05 97       	sbiw	r24, 0x05	; 5
    4134:	9f 93       	push	r25
    4136:	8f 93       	push	r24
    4138:	05 97       	sbiw	r24, 0x05	; 5
    413a:	9f 93       	push	r25
    413c:	8f 93       	push	r24
    413e:	05 97       	sbiw	r24, 0x05	; 5
    4140:	9f 93       	push	r25
    4142:	8f 93       	push	r24
    4144:	05 97       	sbiw	r24, 0x05	; 5
    4146:	9f 93       	push	r25
    4148:	8f 93       	push	r24
    414a:	05 97       	sbiw	r24, 0x05	; 5
    414c:	9f 93       	push	r25
    414e:	8f 93       	push	r24
    4150:	05 97       	sbiw	r24, 0x05	; 5
    4152:	9f 93       	push	r25
    4154:	8f 93       	push	r24
    4156:	05 97       	sbiw	r24, 0x05	; 5
    4158:	9f 93       	push	r25
    415a:	8f 93       	push	r24
    415c:	05 97       	sbiw	r24, 0x05	; 5
    415e:	9f 93       	push	r25
    4160:	8f 93       	push	r24
    4162:	05 97       	sbiw	r24, 0x05	; 5
    4164:	9f 93       	push	r25
    4166:	8f 93       	push	r24
    4168:	05 97       	sbiw	r24, 0x05	; 5
    416a:	9f 93       	push	r25
    416c:	8f 93       	push	r24
    416e:	05 97       	sbiw	r24, 0x05	; 5
    4170:	9f 93       	push	r25
    4172:	8f 93       	push	r24
    4174:	05 97       	sbiw	r24, 0x05	; 5
    4176:	9f 93       	push	r25
    4178:	8f 93       	push	r24
    417a:	8b e0       	ldi	r24, 0x0B	; 11
    417c:	92 e0       	ldi	r25, 0x02	; 2
    417e:	9f 93       	push	r25
    4180:	8f 93       	push	r24
    4182:	ce 01       	movw	r24, r28
    4184:	01 96       	adiw	r24, 0x01	; 1
    4186:	9f 93       	push	r25
    4188:	8f 93       	push	r24
    418a:	0e 94 6f ac 	call	0x158de	; 0x158de <sprintf>
    418e:	0f b6       	in	r0, 0x3f	; 63
    4190:	f8 94       	cli
    4192:	de bf       	out	0x3e, r29	; 62
    4194:	0f be       	out	0x3f, r0	; 63
    4196:	cd bf       	out	0x3d, r28	; 61
    4198:	47 c0       	rjmp	.+142    	; 0x4228 <_ZN13HBridgeDriver13getDriverInfoEhPc+0x468>
	} else {
		sprintf(cout,"HB-PWM Pin:%s, Mode:%s, Dir Pin:%s, Timer Prescale:%s, Timer Res.:%s\r\nDir Pins:0=%s,1=%s,2=%s,3=%s,4=%s,5=%s,6=%s,7=%s,8=%s,9=%s\0",
		 dout1, dout2, dout3, dout4, dout5, dpin0, dpin1, dpin2, dpin3, dpin4, dpin5, dpin6, dpin7, dpin8, dpin9);
    419a:	ce 01       	movw	r24, r28
    419c:	89 5b       	subi	r24, 0xB9	; 185
    419e:	9e 4f       	sbci	r25, 0xFE	; 254
    41a0:	9f 93       	push	r25
    41a2:	8f 93       	push	r24
    41a4:	05 97       	sbiw	r24, 0x05	; 5
    41a6:	9f 93       	push	r25
    41a8:	8f 93       	push	r24
    41aa:	05 97       	sbiw	r24, 0x05	; 5
    41ac:	9f 93       	push	r25
    41ae:	8f 93       	push	r24
    41b0:	05 97       	sbiw	r24, 0x05	; 5
    41b2:	9f 93       	push	r25
    41b4:	8f 93       	push	r24
    41b6:	05 97       	sbiw	r24, 0x05	; 5
    41b8:	9f 93       	push	r25
    41ba:	8f 93       	push	r24
    41bc:	05 97       	sbiw	r24, 0x05	; 5
    41be:	9f 93       	push	r25
    41c0:	8f 93       	push	r24
    41c2:	05 97       	sbiw	r24, 0x05	; 5
    41c4:	9f 93       	push	r25
    41c6:	8f 93       	push	r24
    41c8:	05 97       	sbiw	r24, 0x05	; 5
    41ca:	9f 93       	push	r25
    41cc:	8f 93       	push	r24
    41ce:	05 97       	sbiw	r24, 0x05	; 5
    41d0:	9f 93       	push	r25
    41d2:	8f 93       	push	r24
    41d4:	05 97       	sbiw	r24, 0x05	; 5
    41d6:	9f 93       	push	r25
    41d8:	8f 93       	push	r24
    41da:	05 97       	sbiw	r24, 0x05	; 5
    41dc:	9f 93       	push	r25
    41de:	8f 93       	push	r24
    41e0:	05 97       	sbiw	r24, 0x05	; 5
    41e2:	9f 93       	push	r25
    41e4:	8f 93       	push	r24
    41e6:	05 97       	sbiw	r24, 0x05	; 5
    41e8:	9f 93       	push	r25
    41ea:	8f 93       	push	r24
    41ec:	05 97       	sbiw	r24, 0x05	; 5
    41ee:	9f 93       	push	r25
    41f0:	8f 93       	push	r24
    41f2:	05 97       	sbiw	r24, 0x05	; 5
    41f4:	9f 93       	push	r25
    41f6:	8f 93       	push	r24
    41f8:	8b e9       	ldi	r24, 0x9B	; 155
    41fa:	92 e0       	ldi	r25, 0x02	; 2
    41fc:	9f 93       	push	r25
    41fe:	8f 93       	push	r24
    4200:	ce 01       	movw	r24, r28
    4202:	01 96       	adiw	r24, 0x01	; 1
    4204:	9f 93       	push	r25
    4206:	8f 93       	push	r24
    4208:	0e 94 6f ac 	call	0x158de	; 0x158de <sprintf>
    420c:	0f b6       	in	r0, 0x3f	; 63
    420e:	f8 94       	cli
    4210:	de bf       	out	0x3e, r29	; 62
    4212:	0f be       	out	0x3f, r0	; 63
    4214:	cd bf       	out	0x3d, r28	; 61
    4216:	08 c0       	rjmp	.+16     	; 0x4228 <_ZN13HBridgeDriver13getDriverInfoEhPc+0x468>
	}
	
	for(int i=0; i < OUT_BUFFER_SIZE; ++i){
		 outStr[i] = cout[i];
    4218:	81 91       	ld	r24, Z+
    421a:	8d 93       	st	X+, r24
		 if(!outStr[i])
    421c:	88 23       	and	r24, r24
    421e:	81 f0       	breq	.+32     	; 0x4240 <_ZN13HBridgeDriver13getDriverInfoEhPc+0x480>
	} else {
		sprintf(cout,"HB-PWM Pin:%s, Mode:%s, Dir Pin:%s, Timer Prescale:%s, Timer Res.:%s\r\nDir Pins:0=%s,1=%s,2=%s,3=%s,4=%s,5=%s,6=%s,7=%s,8=%s,9=%s\0",
		 dout1, dout2, dout3, dout4, dout5, dpin0, dpin1, dpin2, dpin3, dpin4, dpin5, dpin6, dpin7, dpin8, dpin9);
	}
	
	for(int i=0; i < OUT_BUFFER_SIZE; ++i){
    4220:	e2 17       	cp	r30, r18
    4222:	f3 07       	cpc	r31, r19
    4224:	c9 f7       	brne	.-14     	; 0x4218 <_ZN13HBridgeDriver13getDriverInfoEhPc+0x458>
    4226:	0c c0       	rjmp	.+24     	; 0x4240 <_ZN13HBridgeDriver13getDriverInfoEhPc+0x480>
		 outStr[i] = cout[i];
    4228:	89 81       	ldd	r24, Y+1	; 0x01
    422a:	d8 01       	movw	r26, r16
    422c:	8c 93       	st	X, r24
		 if(!outStr[i])
    422e:	88 23       	and	r24, r24
    4230:	39 f0       	breq	.+14     	; 0x4240 <_ZN13HBridgeDriver13getDriverInfoEhPc+0x480>
    4232:	fe 01       	movw	r30, r28
    4234:	32 96       	adiw	r30, 0x02	; 2
    4236:	11 96       	adiw	r26, 0x01	; 1
    4238:	9e 01       	movw	r18, r28
    423a:	2f 5f       	subi	r18, 0xFF	; 255
    423c:	3e 4f       	sbci	r19, 0xFE	; 254
    423e:	ec cf       	rjmp	.-40     	; 0x4218 <_ZN13HBridgeDriver13getDriverInfoEhPc+0x458>
		 break;
	}

}
    4240:	c5 5b       	subi	r28, 0xB5	; 181
    4242:	de 4f       	sbci	r29, 0xFE	; 254
    4244:	0f b6       	in	r0, 0x3f	; 63
    4246:	f8 94       	cli
    4248:	de bf       	out	0x3e, r29	; 62
    424a:	0f be       	out	0x3f, r0	; 63
    424c:	cd bf       	out	0x3d, r28	; 61
    424e:	df 91       	pop	r29
    4250:	cf 91       	pop	r28
    4252:	1f 91       	pop	r17
    4254:	0f 91       	pop	r16
    4256:	ff 90       	pop	r15
    4258:	ef 90       	pop	r14
    425a:	df 90       	pop	r13
    425c:	cf 90       	pop	r12
    425e:	bf 90       	pop	r11
    4260:	af 90       	pop	r10
    4262:	9f 90       	pop	r9
    4264:	8f 90       	pop	r8
    4266:	08 95       	ret

00004268 <_ZN13HBridgeDriver17commandMotorPowerEhi>:
/*
* Command the bridge driver power level. Manage direction pin. If necessary limit min and max power and
* scale to the MOTORPOWERSCALE if > 0. After calculation and saved values in the 0-1000 range scale it to 0-255 for 8 bit PWM.
* Each channel is an axle/motor
*/
int HBridgeDriver::commandMotorPower(uint8_t motorChannel, int16_t motorPower) {
    4268:	af 92       	push	r10
    426a:	bf 92       	push	r11
    426c:	cf 92       	push	r12
    426e:	df 92       	push	r13
    4270:	ef 92       	push	r14
    4272:	ff 92       	push	r15
    4274:	0f 93       	push	r16
    4276:	1f 93       	push	r17
    4278:	cf 93       	push	r28
    427a:	df 93       	push	r29
    427c:	ec 01       	movw	r28, r24
    427e:	8a 01       	movw	r16, r20
		// check shutdown override
		if( MOTORSHUTDOWN )
    4280:	fc 01       	movw	r30, r24
    4282:	ed 51       	subi	r30, 0x1D	; 29
    4284:	ff 4f       	sbci	r31, 0xFF	; 255
    4286:	80 81       	ld	r24, Z
    4288:	81 11       	cpse	r24, r1
    428a:	c6 c3       	rjmp	.+1932   	; 0x4a18 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x7b0>
			return 0;
		int foundPin = 0;
		motorSpeed[motorChannel-1] = motorPower;
    428c:	e6 2e       	mov	r14, r22
    428e:	f1 2c       	mov	r15, r1
    4290:	81 e0       	ldi	r24, 0x01	; 1
    4292:	e8 1a       	sub	r14, r24
    4294:	f1 08       	sbc	r15, r1
    4296:	f7 01       	movw	r30, r14
    4298:	ee 0f       	add	r30, r30
    429a:	ff 1f       	adc	r31, r31
    429c:	ec 0f       	add	r30, r28
    429e:	fd 1f       	adc	r31, r29
    42a0:	e7 59       	subi	r30, 0x97	; 151
    42a2:	ff 4f       	sbci	r31, 0xFF	; 255
    42a4:	51 83       	std	Z+1, r21	; 0x01
    42a6:	40 83       	st	Z, r20
		// get mapping of channel to pin
		// see if we need to make a direction change, check array of [PWM pin][dir pin][dir]
		if( currentDirection[motorChannel-1]) { // if dir 1, we are going what we define as 'forward' 
    42a8:	fe 01       	movw	r30, r28
    42aa:	ee 0d       	add	r30, r14
    42ac:	ff 1d       	adc	r31, r15
    42ae:	e3 58       	subi	r30, 0x83	; 131
    42b0:	ff 4f       	sbci	r31, 0xFF	; 255
    42b2:	80 81       	ld	r24, Z
    42b4:	88 23       	and	r24, r24
    42b6:	09 f4       	brne	.+2      	; 0x42ba <_ZN13HBridgeDriver17commandMotorPowerEhi+0x52>
    42b8:	94 c1       	rjmp	.+808    	; 0x45e2 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x37a>
			if( motorPower < 0 ) { // and we want to go backward
    42ba:	55 23       	and	r21, r21
    42bc:	0c f0       	brlt	.+2      	; 0x42c0 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x58>
    42be:	b9 c3       	rjmp	.+1906   	; 0x4a32 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x7ca>
				// reverse dir, send dir change to pin
				for(int i = 0; i < 10; i++) {
					if(pdigitals[i] && pdigitals[i]->pin == motorDrive[motorChannel-1][1]) {
    42c0:	fe 01       	movw	r30, r28
    42c2:	e6 51       	subi	r30, 0x16	; 22
    42c4:	ff 4f       	sbci	r31, 0xFF	; 255
    42c6:	c0 80       	ld	r12, Z
    42c8:	d1 80       	ldd	r13, Z+1	; 0x01
    42ca:	80 e0       	ldi	r24, 0x00	; 0
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	b7 01       	movw	r22, r14
    42d0:	66 0f       	add	r22, r22
    42d2:	77 1f       	adc	r23, r23
    42d4:	66 0f       	add	r22, r22
    42d6:	77 1f       	adc	r23, r23
    42d8:	6c 0f       	add	r22, r28
    42da:	7d 1f       	adc	r23, r29
    42dc:	63 51       	subi	r22, 0x13	; 19
    42de:	7f 4f       	sbci	r23, 0xFF	; 255
    42e0:	9c 01       	movw	r18, r24
    42e2:	d6 01       	movw	r26, r12
    42e4:	ed 91       	ld	r30, X+
    42e6:	fd 91       	ld	r31, X+
    42e8:	6d 01       	movw	r12, r26
    42ea:	30 97       	sbiw	r30, 0x00	; 0
    42ec:	09 f4       	brne	.+2      	; 0x42f0 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x88>
    42ee:	73 c1       	rjmp	.+742    	; 0x45d6 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x36e>
    42f0:	db 01       	movw	r26, r22
    42f2:	4c 91       	ld	r20, X
    42f4:	50 81       	ld	r21, Z
    42f6:	54 13       	cpse	r21, r20
    42f8:	6e c1       	rjmp	.+732    	; 0x45d6 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x36e>
	}
	
void setPin(uint8_t spin) { this->pin = spin; }
	
void pinMode(uint8_t pmode) {
	this->mode = pmode;
    42fa:	81 e0       	ldi	r24, 0x01	; 1
    42fc:	81 83       	std	Z+1, r24	; 0x01
	uint8_t bit = digitalPinToBitMask(this->pin);
    42fe:	84 2f       	mov	r24, r20
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	fc 01       	movw	r30, r24
    4304:	ea 50       	subi	r30, 0x0A	; 10
    4306:	fa 4f       	sbci	r31, 0xFA	; 250
    4308:	44 91       	lpm	r20, Z
	uint8_t port = digitalPinToPort(this->pin);
    430a:	fc 01       	movw	r30, r24
    430c:	e4 5c       	subi	r30, 0xC4	; 196
    430e:	f9 4f       	sbci	r31, 0xF9	; 249
    4310:	84 91       	lpm	r24, Z
	volatile uint16_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4312:	88 23       	and	r24, r24
    4314:	b9 f0       	breq	.+46     	; 0x4344 <_ZN13HBridgeDriver17commandMotorPowerEhi+0xdc>

	reg = portModeRegister(port);
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	88 0f       	add	r24, r24
    431a:	99 1f       	adc	r25, r25
    431c:	fc 01       	movw	r30, r24
    431e:	e4 56       	subi	r30, 0x64	; 100
    4320:	f9 4f       	sbci	r31, 0xF9	; 249
    4322:	a5 91       	lpm	r26, Z+
    4324:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    4326:	fc 01       	movw	r30, r24
    4328:	ee 57       	subi	r30, 0x7E	; 126
    432a:	f9 4f       	sbci	r31, 0xF9	; 249
    432c:	85 91       	lpm	r24, Z+
    432e:	94 91       	lpm	r25, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    4330:	5f b7       	in	r21, 0x3f	; 63
                cli();
    4332:	f8 94       	cli
		*reg |= bit;
    4334:	8d 91       	ld	r24, X+
    4336:	9c 91       	ld	r25, X
    4338:	11 97       	sbiw	r26, 0x01	; 1
    433a:	84 2b       	or	r24, r20
    433c:	11 96       	adiw	r26, 0x01	; 1
    433e:	9c 93       	st	X, r25
    4340:	8e 93       	st	-X, r24
		SREG = oldSREG;
    4342:	5f bf       	out	0x3f, r21	; 63
							//pdigitals[i]->setPin(motorDrive[motorChannel-1][1]);
							pdigitals[i]->pinMode(OUTPUT);
							// default is 0 (LOW), if we changed the direction to reverse wheel rotation call the opposite dir change signal
							defaultDirection[motorChannel-1] ? pdigitals[i]->digitalWrite(HIGH) : pdigitals[i]->digitalWrite(LOW);
    4344:	fe 01       	movw	r30, r28
    4346:	ee 0d       	add	r30, r14
    4348:	ff 1d       	adc	r31, r15
    434a:	e9 57       	subi	r30, 0x79	; 121
    434c:	ff 4f       	sbci	r31, 0xFF	; 255
    434e:	80 81       	ld	r24, Z
    4350:	88 23       	and	r24, r24
    4352:	09 f4       	brne	.+2      	; 0x4356 <_ZN13HBridgeDriver17commandMotorPowerEhi+0xee>
    4354:	99 c0       	rjmp	.+306    	; 0x4488 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x220>
    4356:	fe 01       	movw	r30, r28
    4358:	e6 51       	subi	r30, 0x16	; 22
    435a:	ff 4f       	sbci	r31, 0xFF	; 255
    435c:	80 81       	ld	r24, Z
    435e:	91 81       	ldd	r25, Z+1	; 0x01
    4360:	fc 01       	movw	r30, r24
    4362:	e2 0f       	add	r30, r18
    4364:	f3 1f       	adc	r31, r19
	}
}

void digitalWrite(uint8_t val)
{
	uint8_t timer = digitalPinToTimer(this->pin);
    4366:	01 90       	ld	r0, Z+
    4368:	f0 81       	ld	r31, Z
    436a:	e0 2d       	mov	r30, r0
    436c:	80 81       	ld	r24, Z
    436e:	90 e0       	ldi	r25, 0x00	; 0
    4370:	fc 01       	movw	r30, r24
    4372:	e0 55       	subi	r30, 0x50	; 80
    4374:	fa 4f       	sbci	r31, 0xFA	; 250
    4376:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(this->pin);
    4378:	fc 01       	movw	r30, r24
    437a:	ea 50       	subi	r30, 0x0A	; 10
    437c:	fa 4f       	sbci	r31, 0xFA	; 250
    437e:	d4 90       	lpm	r13, Z
	uint8_t port = digitalPinToPort(this->pin);
    4380:	fc 01       	movw	r30, r24
    4382:	e4 5c       	subi	r30, 0xC4	; 196
    4384:	f9 4f       	sbci	r31, 0xF9	; 249
    4386:	c4 90       	lpm	r12, Z
	volatile uint16_t *out;

	if (port == NOT_A_PIN) return;
    4388:	cc 20       	and	r12, r12
    438a:	09 f4       	brne	.+2      	; 0x438e <_ZN13HBridgeDriver17commandMotorPowerEhi+0x126>
    438c:	1a c1       	rjmp	.+564    	; 0x45c2 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x35a>

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    438e:	22 23       	and	r18, r18
    4390:	09 f4       	brne	.+2      	; 0x4394 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x12c>
    4392:	67 c0       	rjmp	.+206    	; 0x4462 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x1fa>

// If we detect the pin is on a timer, we may need to defuse PWM output, 
// we need to turn pin off before doing a digital write.
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4394:	82 2f       	mov	r24, r18
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	fc 01       	movw	r30, r24
    439a:	31 97       	sbiw	r30, 0x01	; 1
    439c:	e0 31       	cpi	r30, 0x10	; 16
    439e:	f1 05       	cpc	r31, r1
    43a0:	08 f0       	brcs	.+2      	; 0x43a4 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x13c>
    43a2:	5f c0       	rjmp	.+190    	; 0x4462 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x1fa>
    43a4:	88 27       	eor	r24, r24
    43a6:	ed 54       	subi	r30, 0x4D	; 77
    43a8:	ff 4f       	sbci	r31, 0xFF	; 255
    43aa:	8f 4f       	sbci	r24, 0xFF	; 255
    43ac:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
	{
		case TIMER0A: Timer0.stopChannel(CHANNEL_A); break;
    43b0:	60 e0       	ldi	r22, 0x00	; 0
    43b2:	84 e7       	ldi	r24, 0x74	; 116
    43b4:	97 e1       	ldi	r25, 0x17	; 23
    43b6:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    43ba:	53 c0       	rjmp	.+166    	; 0x4462 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x1fa>
		case TIMER0B: Timer0.stopChannel(CHANNEL_B); break;
    43bc:	61 e0       	ldi	r22, 0x01	; 1
    43be:	84 e7       	ldi	r24, 0x74	; 116
    43c0:	97 e1       	ldi	r25, 0x17	; 23
    43c2:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    43c6:	4d c0       	rjmp	.+154    	; 0x4462 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x1fa>
	
		case TIMER1A: Timer1.stopChannel(CHANNEL_A); break;
    43c8:	60 e0       	ldi	r22, 0x00	; 0
    43ca:	85 e4       	ldi	r24, 0x45	; 69
    43cc:	97 e1       	ldi	r25, 0x17	; 23
    43ce:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    43d2:	47 c0       	rjmp	.+142    	; 0x4462 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x1fa>
		case TIMER1B: Timer1.stopChannel(CHANNEL_B); break;
    43d4:	61 e0       	ldi	r22, 0x01	; 1
    43d6:	85 e4       	ldi	r24, 0x45	; 69
    43d8:	97 e1       	ldi	r25, 0x17	; 23
    43da:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    43de:	41 c0       	rjmp	.+130    	; 0x4462 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x1fa>
		
		case TIMER2A: Timer2.stopChannel(CHANNEL_A); break;
    43e0:	60 e0       	ldi	r22, 0x00	; 0
    43e2:	86 e1       	ldi	r24, 0x16	; 22
    43e4:	97 e1       	ldi	r25, 0x17	; 23
    43e6:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    43ea:	3b c0       	rjmp	.+118    	; 0x4462 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x1fa>
		case TIMER2B: Timer2.stopChannel(CHANNEL_B); break;
    43ec:	61 e0       	ldi	r22, 0x01	; 1
    43ee:	86 e1       	ldi	r24, 0x16	; 22
    43f0:	97 e1       	ldi	r25, 0x17	; 23
    43f2:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    43f6:	35 c0       	rjmp	.+106    	; 0x4462 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x1fa>
	
		case TIMER3A: Timer3.stopChannel(CHANNEL_A); break;
    43f8:	60 e0       	ldi	r22, 0x00	; 0
    43fa:	87 ee       	ldi	r24, 0xE7	; 231
    43fc:	96 e1       	ldi	r25, 0x16	; 22
    43fe:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4402:	2f c0       	rjmp	.+94     	; 0x4462 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x1fa>
		case TIMER3B: Timer3.stopChannel(CHANNEL_B); break; 
    4404:	61 e0       	ldi	r22, 0x01	; 1
    4406:	87 ee       	ldi	r24, 0xE7	; 231
    4408:	96 e1       	ldi	r25, 0x16	; 22
    440a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    440e:	29 c0       	rjmp	.+82     	; 0x4462 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x1fa>
		case TIMER3C: Timer3.stopChannel(CHANNEL_C); break;
    4410:	62 e0       	ldi	r22, 0x02	; 2
    4412:	87 ee       	ldi	r24, 0xE7	; 231
    4414:	96 e1       	ldi	r25, 0x16	; 22
    4416:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    441a:	23 c0       	rjmp	.+70     	; 0x4462 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x1fa>
		
		case TIMER4A: Timer4.stopChannel(CHANNEL_A); break;
    441c:	60 e0       	ldi	r22, 0x00	; 0
    441e:	88 eb       	ldi	r24, 0xB8	; 184
    4420:	96 e1       	ldi	r25, 0x16	; 22
    4422:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4426:	1d c0       	rjmp	.+58     	; 0x4462 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x1fa>
		case TIMER4B: Timer4.stopChannel(CHANNEL_B); break; 
    4428:	61 e0       	ldi	r22, 0x01	; 1
    442a:	88 eb       	ldi	r24, 0xB8	; 184
    442c:	96 e1       	ldi	r25, 0x16	; 22
    442e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4432:	17 c0       	rjmp	.+46     	; 0x4462 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x1fa>
		case TIMER4C: Timer4.stopChannel(CHANNEL_C); break;
    4434:	62 e0       	ldi	r22, 0x02	; 2
    4436:	88 eb       	ldi	r24, 0xB8	; 184
    4438:	96 e1       	ldi	r25, 0x16	; 22
    443a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    443e:	11 c0       	rjmp	.+34     	; 0x4462 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x1fa>
		
		case TIMER5A: Timer5.stopChannel(CHANNEL_A); break;
    4440:	60 e0       	ldi	r22, 0x00	; 0
    4442:	89 e8       	ldi	r24, 0x89	; 137
    4444:	96 e1       	ldi	r25, 0x16	; 22
    4446:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    444a:	0b c0       	rjmp	.+22     	; 0x4462 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x1fa>
		case TIMER5B: Timer5.stopChannel(CHANNEL_B); break; 
    444c:	61 e0       	ldi	r22, 0x01	; 1
    444e:	89 e8       	ldi	r24, 0x89	; 137
    4450:	96 e1       	ldi	r25, 0x16	; 22
    4452:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4456:	05 c0       	rjmp	.+10     	; 0x4462 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x1fa>
		case TIMER5C: Timer5.stopChannel(CHANNEL_C); break;
    4458:	62 e0       	ldi	r22, 0x02	; 2
    445a:	89 e8       	ldi	r24, 0x89	; 137
    445c:	96 e1       	ldi	r25, 0x16	; 22
    445e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
	if (port == NOT_A_PIN) return;

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    4462:	ec 2d       	mov	r30, r12
    4464:	f0 e0       	ldi	r31, 0x00	; 0
    4466:	ee 0f       	add	r30, r30
    4468:	ff 1f       	adc	r31, r31
    446a:	ee 57       	subi	r30, 0x7E	; 126
    446c:	f9 4f       	sbci	r31, 0xF9	; 249
    446e:	a5 91       	lpm	r26, Z+
    4470:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    4472:	2f b7       	in	r18, 0x3f	; 63
	cli();
    4474:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
    4476:	8d 91       	ld	r24, X+
    4478:	9c 91       	ld	r25, X
    447a:	11 97       	sbiw	r26, 0x01	; 1
    447c:	8d 29       	or	r24, r13
    447e:	11 96       	adiw	r26, 0x01	; 1
    4480:	9c 93       	st	X, r25
    4482:	8e 93       	st	-X, r24
	}

	SREG = oldSREG;
    4484:	2f bf       	out	0x3f, r18	; 63
    4486:	9d c0       	rjmp	.+314    	; 0x45c2 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x35a>
    4488:	fe 01       	movw	r30, r28
    448a:	e6 51       	subi	r30, 0x16	; 22
    448c:	ff 4f       	sbci	r31, 0xFF	; 255
    448e:	80 81       	ld	r24, Z
    4490:	91 81       	ldd	r25, Z+1	; 0x01
    4492:	fc 01       	movw	r30, r24
    4494:	e2 0f       	add	r30, r18
    4496:	f3 1f       	adc	r31, r19
	}
}

void digitalWrite(uint8_t val)
{
	uint8_t timer = digitalPinToTimer(this->pin);
    4498:	01 90       	ld	r0, Z+
    449a:	f0 81       	ld	r31, Z
    449c:	e0 2d       	mov	r30, r0
    449e:	80 81       	ld	r24, Z
    44a0:	90 e0       	ldi	r25, 0x00	; 0
    44a2:	fc 01       	movw	r30, r24
    44a4:	e0 55       	subi	r30, 0x50	; 80
    44a6:	fa 4f       	sbci	r31, 0xFA	; 250
    44a8:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(this->pin);
    44aa:	fc 01       	movw	r30, r24
    44ac:	ea 50       	subi	r30, 0x0A	; 10
    44ae:	fa 4f       	sbci	r31, 0xFA	; 250
    44b0:	d4 90       	lpm	r13, Z
	uint8_t port = digitalPinToPort(this->pin);
    44b2:	fc 01       	movw	r30, r24
    44b4:	e4 5c       	subi	r30, 0xC4	; 196
    44b6:	f9 4f       	sbci	r31, 0xF9	; 249
    44b8:	c4 90       	lpm	r12, Z
	volatile uint16_t *out;

	if (port == NOT_A_PIN) return;
    44ba:	cc 20       	and	r12, r12
    44bc:	09 f4       	brne	.+2      	; 0x44c0 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x258>
    44be:	81 c0       	rjmp	.+258    	; 0x45c2 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x35a>

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    44c0:	22 23       	and	r18, r18
    44c2:	09 f4       	brne	.+2      	; 0x44c6 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x25e>
    44c4:	67 c0       	rjmp	.+206    	; 0x4594 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x32c>

// If we detect the pin is on a timer, we may need to defuse PWM output, 
// we need to turn pin off before doing a digital write.
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    44c6:	82 2f       	mov	r24, r18
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	fc 01       	movw	r30, r24
    44cc:	31 97       	sbiw	r30, 0x01	; 1
    44ce:	e0 31       	cpi	r30, 0x10	; 16
    44d0:	f1 05       	cpc	r31, r1
    44d2:	08 f0       	brcs	.+2      	; 0x44d6 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x26e>
    44d4:	5f c0       	rjmp	.+190    	; 0x4594 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x32c>
    44d6:	88 27       	eor	r24, r24
    44d8:	ed 53       	subi	r30, 0x3D	; 61
    44da:	ff 4f       	sbci	r31, 0xFF	; 255
    44dc:	8f 4f       	sbci	r24, 0xFF	; 255
    44de:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
	{
		case TIMER0A: Timer0.stopChannel(CHANNEL_A); break;
    44e2:	60 e0       	ldi	r22, 0x00	; 0
    44e4:	84 e7       	ldi	r24, 0x74	; 116
    44e6:	97 e1       	ldi	r25, 0x17	; 23
    44e8:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    44ec:	53 c0       	rjmp	.+166    	; 0x4594 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x32c>
		case TIMER0B: Timer0.stopChannel(CHANNEL_B); break;
    44ee:	61 e0       	ldi	r22, 0x01	; 1
    44f0:	84 e7       	ldi	r24, 0x74	; 116
    44f2:	97 e1       	ldi	r25, 0x17	; 23
    44f4:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    44f8:	4d c0       	rjmp	.+154    	; 0x4594 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x32c>
	
		case TIMER1A: Timer1.stopChannel(CHANNEL_A); break;
    44fa:	60 e0       	ldi	r22, 0x00	; 0
    44fc:	85 e4       	ldi	r24, 0x45	; 69
    44fe:	97 e1       	ldi	r25, 0x17	; 23
    4500:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4504:	47 c0       	rjmp	.+142    	; 0x4594 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x32c>
		case TIMER1B: Timer1.stopChannel(CHANNEL_B); break;
    4506:	61 e0       	ldi	r22, 0x01	; 1
    4508:	85 e4       	ldi	r24, 0x45	; 69
    450a:	97 e1       	ldi	r25, 0x17	; 23
    450c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4510:	41 c0       	rjmp	.+130    	; 0x4594 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x32c>
		
		case TIMER2A: Timer2.stopChannel(CHANNEL_A); break;
    4512:	60 e0       	ldi	r22, 0x00	; 0
    4514:	86 e1       	ldi	r24, 0x16	; 22
    4516:	97 e1       	ldi	r25, 0x17	; 23
    4518:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    451c:	3b c0       	rjmp	.+118    	; 0x4594 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x32c>
		case TIMER2B: Timer2.stopChannel(CHANNEL_B); break;
    451e:	61 e0       	ldi	r22, 0x01	; 1
    4520:	86 e1       	ldi	r24, 0x16	; 22
    4522:	97 e1       	ldi	r25, 0x17	; 23
    4524:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4528:	35 c0       	rjmp	.+106    	; 0x4594 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x32c>
	
		case TIMER3A: Timer3.stopChannel(CHANNEL_A); break;
    452a:	60 e0       	ldi	r22, 0x00	; 0
    452c:	87 ee       	ldi	r24, 0xE7	; 231
    452e:	96 e1       	ldi	r25, 0x16	; 22
    4530:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4534:	2f c0       	rjmp	.+94     	; 0x4594 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x32c>
		case TIMER3B: Timer3.stopChannel(CHANNEL_B); break; 
    4536:	61 e0       	ldi	r22, 0x01	; 1
    4538:	87 ee       	ldi	r24, 0xE7	; 231
    453a:	96 e1       	ldi	r25, 0x16	; 22
    453c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4540:	29 c0       	rjmp	.+82     	; 0x4594 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x32c>
		case TIMER3C: Timer3.stopChannel(CHANNEL_C); break;
    4542:	62 e0       	ldi	r22, 0x02	; 2
    4544:	87 ee       	ldi	r24, 0xE7	; 231
    4546:	96 e1       	ldi	r25, 0x16	; 22
    4548:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    454c:	23 c0       	rjmp	.+70     	; 0x4594 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x32c>
		
		case TIMER4A: Timer4.stopChannel(CHANNEL_A); break;
    454e:	60 e0       	ldi	r22, 0x00	; 0
    4550:	88 eb       	ldi	r24, 0xB8	; 184
    4552:	96 e1       	ldi	r25, 0x16	; 22
    4554:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4558:	1d c0       	rjmp	.+58     	; 0x4594 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x32c>
		case TIMER4B: Timer4.stopChannel(CHANNEL_B); break; 
    455a:	61 e0       	ldi	r22, 0x01	; 1
    455c:	88 eb       	ldi	r24, 0xB8	; 184
    455e:	96 e1       	ldi	r25, 0x16	; 22
    4560:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4564:	17 c0       	rjmp	.+46     	; 0x4594 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x32c>
		case TIMER4C: Timer4.stopChannel(CHANNEL_C); break;
    4566:	62 e0       	ldi	r22, 0x02	; 2
    4568:	88 eb       	ldi	r24, 0xB8	; 184
    456a:	96 e1       	ldi	r25, 0x16	; 22
    456c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4570:	11 c0       	rjmp	.+34     	; 0x4594 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x32c>
		
		case TIMER5A: Timer5.stopChannel(CHANNEL_A); break;
    4572:	60 e0       	ldi	r22, 0x00	; 0
    4574:	89 e8       	ldi	r24, 0x89	; 137
    4576:	96 e1       	ldi	r25, 0x16	; 22
    4578:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    457c:	0b c0       	rjmp	.+22     	; 0x4594 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x32c>
		case TIMER5B: Timer5.stopChannel(CHANNEL_B); break; 
    457e:	61 e0       	ldi	r22, 0x01	; 1
    4580:	89 e8       	ldi	r24, 0x89	; 137
    4582:	96 e1       	ldi	r25, 0x16	; 22
    4584:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4588:	05 c0       	rjmp	.+10     	; 0x4594 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x32c>
		case TIMER5C: Timer5.stopChannel(CHANNEL_C); break;
    458a:	62 e0       	ldi	r22, 0x02	; 2
    458c:	89 e8       	ldi	r24, 0x89	; 137
    458e:	96 e1       	ldi	r25, 0x16	; 22
    4590:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
	if (port == NOT_A_PIN) return;

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    4594:	ec 2d       	mov	r30, r12
    4596:	f0 e0       	ldi	r31, 0x00	; 0
    4598:	ee 0f       	add	r30, r30
    459a:	ff 1f       	adc	r31, r31
    459c:	ee 57       	subi	r30, 0x7E	; 126
    459e:	f9 4f       	sbci	r31, 0xF9	; 249
    45a0:	a5 91       	lpm	r26, Z+
    45a2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    45a4:	4f b7       	in	r20, 0x3f	; 63
	cli();
    45a6:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    45a8:	2d 91       	ld	r18, X+
    45aa:	3c 91       	ld	r19, X
    45ac:	11 97       	sbiw	r26, 0x01	; 1
    45ae:	8d 2d       	mov	r24, r13
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	80 95       	com	r24
    45b4:	90 95       	com	r25
    45b6:	82 23       	and	r24, r18
    45b8:	93 23       	and	r25, r19
    45ba:	11 96       	adiw	r26, 0x01	; 1
    45bc:	9c 93       	st	X, r25
    45be:	8e 93       	st	-X, r24
	} else {
		*out |= bit;
	}

	SREG = oldSREG;
    45c0:	4f bf       	out	0x3f, r20	; 63
							currentDirection[motorChannel-1] = 0; // set new direction value
    45c2:	fe 01       	movw	r30, r28
    45c4:	ee 0d       	add	r30, r14
    45c6:	ff 1d       	adc	r31, r15
    45c8:	e3 58       	subi	r30, 0x83	; 131
    45ca:	ff 4f       	sbci	r31, 0xFF	; 255
    45cc:	10 82       	st	Z, r1
							motorPower = -motorPower; // absolute val
    45ce:	11 95       	neg	r17
    45d0:	01 95       	neg	r16
    45d2:	11 09       	sbc	r17, r1
							foundPin = 1;
							break;
    45d4:	2e c2       	rjmp	.+1116   	; 0x4a32 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x7ca>
    45d6:	02 96       	adiw	r24, 0x02	; 2
		// get mapping of channel to pin
		// see if we need to make a direction change, check array of [PWM pin][dir pin][dir]
		if( currentDirection[motorChannel-1]) { // if dir 1, we are going what we define as 'forward' 
			if( motorPower < 0 ) { // and we want to go backward
				// reverse dir, send dir change to pin
				for(int i = 0; i < 10; i++) {
    45d8:	84 31       	cpi	r24, 0x14	; 20
    45da:	91 05       	cpc	r25, r1
    45dc:	09 f0       	breq	.+2      	; 0x45e0 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x378>
    45de:	80 ce       	rjmp	.-768    	; 0x42e0 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x78>
    45e0:	1e c2       	rjmp	.+1084   	; 0x4a1e <_ZN13HBridgeDriver17commandMotorPowerEhi+0x7b6>
				}
			} else { // wieter weiter
				foundPin = 1;
			}
		} else { // dir is 0
			if( motorPower > 0 ) { // we are going 'backward' as defined by our initial default direction and we want 'forward'
    45e2:	14 16       	cp	r1, r20
    45e4:	15 06       	cpc	r1, r21
    45e6:	0c f0       	brlt	.+2      	; 0x45ea <_ZN13HBridgeDriver17commandMotorPowerEhi+0x382>
    45e8:	8f c1       	rjmp	.+798    	; 0x4908 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x6a0>
				// reverse, send dir change to pin
				for(int i = 0; i < 10; i++) {
					if(pdigitals[i] && pdigitals[i]->pin == motorDrive[motorChannel-1][1]) {
    45ea:	fe 01       	movw	r30, r28
    45ec:	e6 51       	subi	r30, 0x16	; 22
    45ee:	ff 4f       	sbci	r31, 0xFF	; 255
    45f0:	c0 80       	ld	r12, Z
    45f2:	d1 80       	ldd	r13, Z+1	; 0x01
    45f4:	80 e0       	ldi	r24, 0x00	; 0
    45f6:	90 e0       	ldi	r25, 0x00	; 0
    45f8:	b7 01       	movw	r22, r14
    45fa:	66 0f       	add	r22, r22
    45fc:	77 1f       	adc	r23, r23
    45fe:	66 0f       	add	r22, r22
    4600:	77 1f       	adc	r23, r23
    4602:	6c 0f       	add	r22, r28
    4604:	7d 1f       	adc	r23, r29
    4606:	63 51       	subi	r22, 0x13	; 19
    4608:	7f 4f       	sbci	r23, 0xFF	; 255
    460a:	9c 01       	movw	r18, r24
    460c:	d6 01       	movw	r26, r12
    460e:	ed 91       	ld	r30, X+
    4610:	fd 91       	ld	r31, X+
    4612:	6d 01       	movw	r12, r26
    4614:	30 97       	sbiw	r30, 0x00	; 0
    4616:	09 f4       	brne	.+2      	; 0x461a <_ZN13HBridgeDriver17commandMotorPowerEhi+0x3b2>
    4618:	71 c1       	rjmp	.+738    	; 0x48fc <_ZN13HBridgeDriver17commandMotorPowerEhi+0x694>
    461a:	db 01       	movw	r26, r22
    461c:	4c 91       	ld	r20, X
    461e:	50 81       	ld	r21, Z
    4620:	54 13       	cpse	r21, r20
    4622:	6c c1       	rjmp	.+728    	; 0x48fc <_ZN13HBridgeDriver17commandMotorPowerEhi+0x694>
	}
	
void setPin(uint8_t spin) { this->pin = spin; }
	
void pinMode(uint8_t pmode) {
	this->mode = pmode;
    4624:	81 e0       	ldi	r24, 0x01	; 1
    4626:	81 83       	std	Z+1, r24	; 0x01
	uint8_t bit = digitalPinToBitMask(this->pin);
    4628:	84 2f       	mov	r24, r20
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	fc 01       	movw	r30, r24
    462e:	ea 50       	subi	r30, 0x0A	; 10
    4630:	fa 4f       	sbci	r31, 0xFA	; 250
    4632:	44 91       	lpm	r20, Z
	uint8_t port = digitalPinToPort(this->pin);
    4634:	fc 01       	movw	r30, r24
    4636:	e4 5c       	subi	r30, 0xC4	; 196
    4638:	f9 4f       	sbci	r31, 0xF9	; 249
    463a:	84 91       	lpm	r24, Z
	volatile uint16_t *reg, *out;

	if (port == NOT_A_PIN) return;
    463c:	88 23       	and	r24, r24
    463e:	b9 f0       	breq	.+46     	; 0x466e <_ZN13HBridgeDriver17commandMotorPowerEhi+0x406>

	reg = portModeRegister(port);
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	88 0f       	add	r24, r24
    4644:	99 1f       	adc	r25, r25
    4646:	fc 01       	movw	r30, r24
    4648:	e4 56       	subi	r30, 0x64	; 100
    464a:	f9 4f       	sbci	r31, 0xF9	; 249
    464c:	a5 91       	lpm	r26, Z+
    464e:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    4650:	fc 01       	movw	r30, r24
    4652:	ee 57       	subi	r30, 0x7E	; 126
    4654:	f9 4f       	sbci	r31, 0xF9	; 249
    4656:	85 91       	lpm	r24, Z+
    4658:	94 91       	lpm	r25, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    465a:	5f b7       	in	r21, 0x3f	; 63
                cli();
    465c:	f8 94       	cli
		*reg |= bit;
    465e:	8d 91       	ld	r24, X+
    4660:	9c 91       	ld	r25, X
    4662:	11 97       	sbiw	r26, 0x01	; 1
    4664:	84 2b       	or	r24, r20
    4666:	11 96       	adiw	r26, 0x01	; 1
    4668:	9c 93       	st	X, r25
    466a:	8e 93       	st	-X, r24
		SREG = oldSREG;
    466c:	5f bf       	out	0x3f, r21	; 63
						//pdigitals[i]->setPin(motorDrive[motorChannel-1][1]);
						pdigitals[i]->pinMode(OUTPUT);
						// default is 0 (HIGH), if we changed the direction to reverse wheel rotation call the opposite dir change signal
						defaultDirection[motorChannel-1] ? pdigitals[i]->digitalWrite(LOW) : pdigitals[i]->digitalWrite(HIGH);
    466e:	fe 01       	movw	r30, r28
    4670:	ee 0d       	add	r30, r14
    4672:	ff 1d       	adc	r31, r15
    4674:	e9 57       	subi	r30, 0x79	; 121
    4676:	ff 4f       	sbci	r31, 0xFF	; 255
    4678:	80 81       	ld	r24, Z
    467a:	88 23       	and	r24, r24
    467c:	09 f4       	brne	.+2      	; 0x4680 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x418>
    467e:	9e c0       	rjmp	.+316    	; 0x47bc <_ZN13HBridgeDriver17commandMotorPowerEhi+0x554>
    4680:	fe 01       	movw	r30, r28
    4682:	e6 51       	subi	r30, 0x16	; 22
    4684:	ff 4f       	sbci	r31, 0xFF	; 255
    4686:	80 81       	ld	r24, Z
    4688:	91 81       	ldd	r25, Z+1	; 0x01
    468a:	fc 01       	movw	r30, r24
    468c:	e2 0f       	add	r30, r18
    468e:	f3 1f       	adc	r31, r19
	}
}

void digitalWrite(uint8_t val)
{
	uint8_t timer = digitalPinToTimer(this->pin);
    4690:	01 90       	ld	r0, Z+
    4692:	f0 81       	ld	r31, Z
    4694:	e0 2d       	mov	r30, r0
    4696:	80 81       	ld	r24, Z
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	fc 01       	movw	r30, r24
    469c:	e0 55       	subi	r30, 0x50	; 80
    469e:	fa 4f       	sbci	r31, 0xFA	; 250
    46a0:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(this->pin);
    46a2:	fc 01       	movw	r30, r24
    46a4:	ea 50       	subi	r30, 0x0A	; 10
    46a6:	fa 4f       	sbci	r31, 0xFA	; 250
    46a8:	d4 90       	lpm	r13, Z
	uint8_t port = digitalPinToPort(this->pin);
    46aa:	fc 01       	movw	r30, r24
    46ac:	e4 5c       	subi	r30, 0xC4	; 196
    46ae:	f9 4f       	sbci	r31, 0xF9	; 249
    46b0:	c4 90       	lpm	r12, Z
	volatile uint16_t *out;

	if (port == NOT_A_PIN) return;
    46b2:	cc 20       	and	r12, r12
    46b4:	09 f4       	brne	.+2      	; 0x46b8 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x450>
    46b6:	1a c1       	rjmp	.+564    	; 0x48ec <_ZN13HBridgeDriver17commandMotorPowerEhi+0x684>

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    46b8:	22 23       	and	r18, r18
    46ba:	09 f4       	brne	.+2      	; 0x46be <_ZN13HBridgeDriver17commandMotorPowerEhi+0x456>
    46bc:	67 c0       	rjmp	.+206    	; 0x478c <_ZN13HBridgeDriver17commandMotorPowerEhi+0x524>

// If we detect the pin is on a timer, we may need to defuse PWM output, 
// we need to turn pin off before doing a digital write.
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    46be:	82 2f       	mov	r24, r18
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	fc 01       	movw	r30, r24
    46c4:	31 97       	sbiw	r30, 0x01	; 1
    46c6:	e0 31       	cpi	r30, 0x10	; 16
    46c8:	f1 05       	cpc	r31, r1
    46ca:	08 f0       	brcs	.+2      	; 0x46ce <_ZN13HBridgeDriver17commandMotorPowerEhi+0x466>
    46cc:	5f c0       	rjmp	.+190    	; 0x478c <_ZN13HBridgeDriver17commandMotorPowerEhi+0x524>
    46ce:	88 27       	eor	r24, r24
    46d0:	ed 52       	subi	r30, 0x2D	; 45
    46d2:	ff 4f       	sbci	r31, 0xFF	; 255
    46d4:	8f 4f       	sbci	r24, 0xFF	; 255
    46d6:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
	{
		case TIMER0A: Timer0.stopChannel(CHANNEL_A); break;
    46da:	60 e0       	ldi	r22, 0x00	; 0
    46dc:	84 e7       	ldi	r24, 0x74	; 116
    46de:	97 e1       	ldi	r25, 0x17	; 23
    46e0:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    46e4:	53 c0       	rjmp	.+166    	; 0x478c <_ZN13HBridgeDriver17commandMotorPowerEhi+0x524>
		case TIMER0B: Timer0.stopChannel(CHANNEL_B); break;
    46e6:	61 e0       	ldi	r22, 0x01	; 1
    46e8:	84 e7       	ldi	r24, 0x74	; 116
    46ea:	97 e1       	ldi	r25, 0x17	; 23
    46ec:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    46f0:	4d c0       	rjmp	.+154    	; 0x478c <_ZN13HBridgeDriver17commandMotorPowerEhi+0x524>
	
		case TIMER1A: Timer1.stopChannel(CHANNEL_A); break;
    46f2:	60 e0       	ldi	r22, 0x00	; 0
    46f4:	85 e4       	ldi	r24, 0x45	; 69
    46f6:	97 e1       	ldi	r25, 0x17	; 23
    46f8:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    46fc:	47 c0       	rjmp	.+142    	; 0x478c <_ZN13HBridgeDriver17commandMotorPowerEhi+0x524>
		case TIMER1B: Timer1.stopChannel(CHANNEL_B); break;
    46fe:	61 e0       	ldi	r22, 0x01	; 1
    4700:	85 e4       	ldi	r24, 0x45	; 69
    4702:	97 e1       	ldi	r25, 0x17	; 23
    4704:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4708:	41 c0       	rjmp	.+130    	; 0x478c <_ZN13HBridgeDriver17commandMotorPowerEhi+0x524>
		
		case TIMER2A: Timer2.stopChannel(CHANNEL_A); break;
    470a:	60 e0       	ldi	r22, 0x00	; 0
    470c:	86 e1       	ldi	r24, 0x16	; 22
    470e:	97 e1       	ldi	r25, 0x17	; 23
    4710:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4714:	3b c0       	rjmp	.+118    	; 0x478c <_ZN13HBridgeDriver17commandMotorPowerEhi+0x524>
		case TIMER2B: Timer2.stopChannel(CHANNEL_B); break;
    4716:	61 e0       	ldi	r22, 0x01	; 1
    4718:	86 e1       	ldi	r24, 0x16	; 22
    471a:	97 e1       	ldi	r25, 0x17	; 23
    471c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4720:	35 c0       	rjmp	.+106    	; 0x478c <_ZN13HBridgeDriver17commandMotorPowerEhi+0x524>
	
		case TIMER3A: Timer3.stopChannel(CHANNEL_A); break;
    4722:	60 e0       	ldi	r22, 0x00	; 0
    4724:	87 ee       	ldi	r24, 0xE7	; 231
    4726:	96 e1       	ldi	r25, 0x16	; 22
    4728:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    472c:	2f c0       	rjmp	.+94     	; 0x478c <_ZN13HBridgeDriver17commandMotorPowerEhi+0x524>
		case TIMER3B: Timer3.stopChannel(CHANNEL_B); break; 
    472e:	61 e0       	ldi	r22, 0x01	; 1
    4730:	87 ee       	ldi	r24, 0xE7	; 231
    4732:	96 e1       	ldi	r25, 0x16	; 22
    4734:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4738:	29 c0       	rjmp	.+82     	; 0x478c <_ZN13HBridgeDriver17commandMotorPowerEhi+0x524>
		case TIMER3C: Timer3.stopChannel(CHANNEL_C); break;
    473a:	62 e0       	ldi	r22, 0x02	; 2
    473c:	87 ee       	ldi	r24, 0xE7	; 231
    473e:	96 e1       	ldi	r25, 0x16	; 22
    4740:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4744:	23 c0       	rjmp	.+70     	; 0x478c <_ZN13HBridgeDriver17commandMotorPowerEhi+0x524>
		
		case TIMER4A: Timer4.stopChannel(CHANNEL_A); break;
    4746:	60 e0       	ldi	r22, 0x00	; 0
    4748:	88 eb       	ldi	r24, 0xB8	; 184
    474a:	96 e1       	ldi	r25, 0x16	; 22
    474c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4750:	1d c0       	rjmp	.+58     	; 0x478c <_ZN13HBridgeDriver17commandMotorPowerEhi+0x524>
		case TIMER4B: Timer4.stopChannel(CHANNEL_B); break; 
    4752:	61 e0       	ldi	r22, 0x01	; 1
    4754:	88 eb       	ldi	r24, 0xB8	; 184
    4756:	96 e1       	ldi	r25, 0x16	; 22
    4758:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    475c:	17 c0       	rjmp	.+46     	; 0x478c <_ZN13HBridgeDriver17commandMotorPowerEhi+0x524>
		case TIMER4C: Timer4.stopChannel(CHANNEL_C); break;
    475e:	62 e0       	ldi	r22, 0x02	; 2
    4760:	88 eb       	ldi	r24, 0xB8	; 184
    4762:	96 e1       	ldi	r25, 0x16	; 22
    4764:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4768:	11 c0       	rjmp	.+34     	; 0x478c <_ZN13HBridgeDriver17commandMotorPowerEhi+0x524>
		
		case TIMER5A: Timer5.stopChannel(CHANNEL_A); break;
    476a:	60 e0       	ldi	r22, 0x00	; 0
    476c:	89 e8       	ldi	r24, 0x89	; 137
    476e:	96 e1       	ldi	r25, 0x16	; 22
    4770:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4774:	0b c0       	rjmp	.+22     	; 0x478c <_ZN13HBridgeDriver17commandMotorPowerEhi+0x524>
		case TIMER5B: Timer5.stopChannel(CHANNEL_B); break; 
    4776:	61 e0       	ldi	r22, 0x01	; 1
    4778:	89 e8       	ldi	r24, 0x89	; 137
    477a:	96 e1       	ldi	r25, 0x16	; 22
    477c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4780:	05 c0       	rjmp	.+10     	; 0x478c <_ZN13HBridgeDriver17commandMotorPowerEhi+0x524>
		case TIMER5C: Timer5.stopChannel(CHANNEL_C); break;
    4782:	62 e0       	ldi	r22, 0x02	; 2
    4784:	89 e8       	ldi	r24, 0x89	; 137
    4786:	96 e1       	ldi	r25, 0x16	; 22
    4788:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
	if (port == NOT_A_PIN) return;

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    478c:	ec 2d       	mov	r30, r12
    478e:	f0 e0       	ldi	r31, 0x00	; 0
    4790:	ee 0f       	add	r30, r30
    4792:	ff 1f       	adc	r31, r31
    4794:	ee 57       	subi	r30, 0x7E	; 126
    4796:	f9 4f       	sbci	r31, 0xF9	; 249
    4798:	a5 91       	lpm	r26, Z+
    479a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    479c:	4f b7       	in	r20, 0x3f	; 63
	cli();
    479e:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    47a0:	2d 91       	ld	r18, X+
    47a2:	3c 91       	ld	r19, X
    47a4:	11 97       	sbiw	r26, 0x01	; 1
    47a6:	8d 2d       	mov	r24, r13
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	80 95       	com	r24
    47ac:	90 95       	com	r25
    47ae:	82 23       	and	r24, r18
    47b0:	93 23       	and	r25, r19
    47b2:	11 96       	adiw	r26, 0x01	; 1
    47b4:	9c 93       	st	X, r25
    47b6:	8e 93       	st	-X, r24
	} else {
		*out |= bit;
	}

	SREG = oldSREG;
    47b8:	4f bf       	out	0x3f, r20	; 63
    47ba:	98 c0       	rjmp	.+304    	; 0x48ec <_ZN13HBridgeDriver17commandMotorPowerEhi+0x684>
    47bc:	fe 01       	movw	r30, r28
    47be:	e6 51       	subi	r30, 0x16	; 22
    47c0:	ff 4f       	sbci	r31, 0xFF	; 255
    47c2:	80 81       	ld	r24, Z
    47c4:	91 81       	ldd	r25, Z+1	; 0x01
    47c6:	fc 01       	movw	r30, r24
    47c8:	e2 0f       	add	r30, r18
    47ca:	f3 1f       	adc	r31, r19
	}
}

void digitalWrite(uint8_t val)
{
	uint8_t timer = digitalPinToTimer(this->pin);
    47cc:	01 90       	ld	r0, Z+
    47ce:	f0 81       	ld	r31, Z
    47d0:	e0 2d       	mov	r30, r0
    47d2:	80 81       	ld	r24, Z
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	fc 01       	movw	r30, r24
    47d8:	e0 55       	subi	r30, 0x50	; 80
    47da:	fa 4f       	sbci	r31, 0xFA	; 250
    47dc:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(this->pin);
    47de:	fc 01       	movw	r30, r24
    47e0:	ea 50       	subi	r30, 0x0A	; 10
    47e2:	fa 4f       	sbci	r31, 0xFA	; 250
    47e4:	d4 90       	lpm	r13, Z
	uint8_t port = digitalPinToPort(this->pin);
    47e6:	fc 01       	movw	r30, r24
    47e8:	e4 5c       	subi	r30, 0xC4	; 196
    47ea:	f9 4f       	sbci	r31, 0xF9	; 249
    47ec:	c4 90       	lpm	r12, Z
	volatile uint16_t *out;

	if (port == NOT_A_PIN) return;
    47ee:	cc 20       	and	r12, r12
    47f0:	09 f4       	brne	.+2      	; 0x47f4 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x58c>
    47f2:	7c c0       	rjmp	.+248    	; 0x48ec <_ZN13HBridgeDriver17commandMotorPowerEhi+0x684>

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    47f4:	22 23       	and	r18, r18
    47f6:	09 f4       	brne	.+2      	; 0x47fa <_ZN13HBridgeDriver17commandMotorPowerEhi+0x592>
    47f8:	67 c0       	rjmp	.+206    	; 0x48c8 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x660>

// If we detect the pin is on a timer, we may need to defuse PWM output, 
// we need to turn pin off before doing a digital write.
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    47fa:	82 2f       	mov	r24, r18
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	fc 01       	movw	r30, r24
    4800:	31 97       	sbiw	r30, 0x01	; 1
    4802:	e0 31       	cpi	r30, 0x10	; 16
    4804:	f1 05       	cpc	r31, r1
    4806:	08 f0       	brcs	.+2      	; 0x480a <_ZN13HBridgeDriver17commandMotorPowerEhi+0x5a2>
    4808:	5f c0       	rjmp	.+190    	; 0x48c8 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x660>
    480a:	88 27       	eor	r24, r24
    480c:	ed 51       	subi	r30, 0x1D	; 29
    480e:	ff 4f       	sbci	r31, 0xFF	; 255
    4810:	8f 4f       	sbci	r24, 0xFF	; 255
    4812:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
	{
		case TIMER0A: Timer0.stopChannel(CHANNEL_A); break;
    4816:	60 e0       	ldi	r22, 0x00	; 0
    4818:	84 e7       	ldi	r24, 0x74	; 116
    481a:	97 e1       	ldi	r25, 0x17	; 23
    481c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4820:	53 c0       	rjmp	.+166    	; 0x48c8 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x660>
		case TIMER0B: Timer0.stopChannel(CHANNEL_B); break;
    4822:	61 e0       	ldi	r22, 0x01	; 1
    4824:	84 e7       	ldi	r24, 0x74	; 116
    4826:	97 e1       	ldi	r25, 0x17	; 23
    4828:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    482c:	4d c0       	rjmp	.+154    	; 0x48c8 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x660>
	
		case TIMER1A: Timer1.stopChannel(CHANNEL_A); break;
    482e:	60 e0       	ldi	r22, 0x00	; 0
    4830:	85 e4       	ldi	r24, 0x45	; 69
    4832:	97 e1       	ldi	r25, 0x17	; 23
    4834:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4838:	47 c0       	rjmp	.+142    	; 0x48c8 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x660>
		case TIMER1B: Timer1.stopChannel(CHANNEL_B); break;
    483a:	61 e0       	ldi	r22, 0x01	; 1
    483c:	85 e4       	ldi	r24, 0x45	; 69
    483e:	97 e1       	ldi	r25, 0x17	; 23
    4840:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4844:	41 c0       	rjmp	.+130    	; 0x48c8 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x660>
		
		case TIMER2A: Timer2.stopChannel(CHANNEL_A); break;
    4846:	60 e0       	ldi	r22, 0x00	; 0
    4848:	86 e1       	ldi	r24, 0x16	; 22
    484a:	97 e1       	ldi	r25, 0x17	; 23
    484c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4850:	3b c0       	rjmp	.+118    	; 0x48c8 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x660>
		case TIMER2B: Timer2.stopChannel(CHANNEL_B); break;
    4852:	61 e0       	ldi	r22, 0x01	; 1
    4854:	86 e1       	ldi	r24, 0x16	; 22
    4856:	97 e1       	ldi	r25, 0x17	; 23
    4858:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    485c:	35 c0       	rjmp	.+106    	; 0x48c8 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x660>
	
		case TIMER3A: Timer3.stopChannel(CHANNEL_A); break;
    485e:	60 e0       	ldi	r22, 0x00	; 0
    4860:	87 ee       	ldi	r24, 0xE7	; 231
    4862:	96 e1       	ldi	r25, 0x16	; 22
    4864:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4868:	2f c0       	rjmp	.+94     	; 0x48c8 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x660>
		case TIMER3B: Timer3.stopChannel(CHANNEL_B); break; 
    486a:	61 e0       	ldi	r22, 0x01	; 1
    486c:	87 ee       	ldi	r24, 0xE7	; 231
    486e:	96 e1       	ldi	r25, 0x16	; 22
    4870:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4874:	29 c0       	rjmp	.+82     	; 0x48c8 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x660>
		case TIMER3C: Timer3.stopChannel(CHANNEL_C); break;
    4876:	62 e0       	ldi	r22, 0x02	; 2
    4878:	87 ee       	ldi	r24, 0xE7	; 231
    487a:	96 e1       	ldi	r25, 0x16	; 22
    487c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4880:	23 c0       	rjmp	.+70     	; 0x48c8 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x660>
		
		case TIMER4A: Timer4.stopChannel(CHANNEL_A); break;
    4882:	60 e0       	ldi	r22, 0x00	; 0
    4884:	88 eb       	ldi	r24, 0xB8	; 184
    4886:	96 e1       	ldi	r25, 0x16	; 22
    4888:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    488c:	1d c0       	rjmp	.+58     	; 0x48c8 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x660>
		case TIMER4B: Timer4.stopChannel(CHANNEL_B); break; 
    488e:	61 e0       	ldi	r22, 0x01	; 1
    4890:	88 eb       	ldi	r24, 0xB8	; 184
    4892:	96 e1       	ldi	r25, 0x16	; 22
    4894:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    4898:	17 c0       	rjmp	.+46     	; 0x48c8 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x660>
		case TIMER4C: Timer4.stopChannel(CHANNEL_C); break;
    489a:	62 e0       	ldi	r22, 0x02	; 2
    489c:	88 eb       	ldi	r24, 0xB8	; 184
    489e:	96 e1       	ldi	r25, 0x16	; 22
    48a0:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    48a4:	11 c0       	rjmp	.+34     	; 0x48c8 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x660>
		
		case TIMER5A: Timer5.stopChannel(CHANNEL_A); break;
    48a6:	60 e0       	ldi	r22, 0x00	; 0
    48a8:	89 e8       	ldi	r24, 0x89	; 137
    48aa:	96 e1       	ldi	r25, 0x16	; 22
    48ac:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    48b0:	0b c0       	rjmp	.+22     	; 0x48c8 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x660>
		case TIMER5B: Timer5.stopChannel(CHANNEL_B); break; 
    48b2:	61 e0       	ldi	r22, 0x01	; 1
    48b4:	89 e8       	ldi	r24, 0x89	; 137
    48b6:	96 e1       	ldi	r25, 0x16	; 22
    48b8:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    48bc:	05 c0       	rjmp	.+10     	; 0x48c8 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x660>
		case TIMER5C: Timer5.stopChannel(CHANNEL_C); break;
    48be:	62 e0       	ldi	r22, 0x02	; 2
    48c0:	89 e8       	ldi	r24, 0x89	; 137
    48c2:	96 e1       	ldi	r25, 0x16	; 22
    48c4:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
	if (port == NOT_A_PIN) return;

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    48c8:	ec 2d       	mov	r30, r12
    48ca:	f0 e0       	ldi	r31, 0x00	; 0
    48cc:	ee 0f       	add	r30, r30
    48ce:	ff 1f       	adc	r31, r31
    48d0:	ee 57       	subi	r30, 0x7E	; 126
    48d2:	f9 4f       	sbci	r31, 0xF9	; 249
    48d4:	a5 91       	lpm	r26, Z+
    48d6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    48d8:	2f b7       	in	r18, 0x3f	; 63
	cli();
    48da:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
    48dc:	8d 91       	ld	r24, X+
    48de:	9c 91       	ld	r25, X
    48e0:	11 97       	sbiw	r26, 0x01	; 1
    48e2:	8d 29       	or	r24, r13
    48e4:	11 96       	adiw	r26, 0x01	; 1
    48e6:	9c 93       	st	X, r25
    48e8:	8e 93       	st	-X, r24
	}

	SREG = oldSREG;
    48ea:	2f bf       	out	0x3f, r18	; 63
						currentDirection[motorChannel-1] = 1;
    48ec:	fe 01       	movw	r30, r28
    48ee:	ee 0d       	add	r30, r14
    48f0:	ff 1d       	adc	r31, r15
    48f2:	e3 58       	subi	r30, 0x83	; 131
    48f4:	ff 4f       	sbci	r31, 0xFF	; 255
    48f6:	81 e0       	ldi	r24, 0x01	; 1
    48f8:	80 83       	st	Z, r24
						foundPin = 1;
						break;
    48fa:	9b c0       	rjmp	.+310    	; 0x4a32 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x7ca>
    48fc:	02 96       	adiw	r24, 0x02	; 2
				foundPin = 1;
			}
		} else { // dir is 0
			if( motorPower > 0 ) { // we are going 'backward' as defined by our initial default direction and we want 'forward'
				// reverse, send dir change to pin
				for(int i = 0; i < 10; i++) {
    48fe:	84 31       	cpi	r24, 0x14	; 20
    4900:	91 05       	cpc	r25, r1
    4902:	09 f0       	breq	.+2      	; 0x4906 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x69e>
    4904:	82 ce       	rjmp	.-764    	; 0x460a <_ZN13HBridgeDriver17commandMotorPowerEhi+0x3a2>
    4906:	8b c0       	rjmp	.+278    	; 0x4a1e <_ZN13HBridgeDriver17commandMotorPowerEhi+0x7b6>
						break;
					}
				}
			} else { // backward with more backwardness
				// If less than 0 take absolute value, if zero dont play with sign
				if( motorPower ) motorPower = -motorPower;
    4908:	45 2b       	or	r20, r21
    490a:	e1 f0       	breq	.+56     	; 0x4944 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x6dc>
    490c:	11 95       	neg	r17
    490e:	01 95       	neg	r16
    4910:	11 09       	sbc	r17, r1
    4912:	8f c0       	rjmp	.+286    	; 0x4a32 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x7ca>
		if(!foundPin) {
			return commandEmergencyStop(2);
		}	
		// scale motor power from 0-1000 to our 0-255 8 bit timer val
		motorPower /= 4;
		if( motorPower != 0 && motorPower < minMotorPower[motorChannel-1])
    4914:	f7 01       	movw	r30, r14
    4916:	ee 0f       	add	r30, r30
    4918:	ff 1f       	adc	r31, r31
    491a:	ee 0f       	add	r30, r30
    491c:	ff 1f       	adc	r31, r31
    491e:	ec 0f       	add	r30, r28
    4920:	fd 1f       	adc	r31, r29
    4922:	ef 56       	subi	r30, 0x6F	; 111
    4924:	ff 4f       	sbci	r31, 0xFF	; 255
    4926:	80 81       	ld	r24, Z
    4928:	91 81       	ldd	r25, Z+1	; 0x01
    492a:	a2 81       	ldd	r26, Z+2	; 0x02
    492c:	b3 81       	ldd	r27, Z+3	; 0x03
    492e:	a8 01       	movw	r20, r16
    4930:	01 2e       	mov	r0, r17
    4932:	00 0c       	add	r0, r0
    4934:	66 0b       	sbc	r22, r22
    4936:	77 0b       	sbc	r23, r23
    4938:	48 17       	cp	r20, r24
    493a:	59 07       	cpc	r21, r25
    493c:	6a 07       	cpc	r22, r26
    493e:	7b 07       	cpc	r23, r27
    4940:	08 f4       	brcc	.+2      	; 0x4944 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x6dc>
				motorPower = minMotorPower[motorChannel-1];
    4942:	8c 01       	movw	r16, r24
		if( motorPower > MAXMOTORPOWER ) // cap it at max
    4944:	fe 01       	movw	r30, r28
    4946:	ec 51       	subi	r30, 0x1C	; 28
    4948:	ff 4f       	sbci	r31, 0xFF	; 255
    494a:	80 81       	ld	r24, Z
    494c:	91 81       	ldd	r25, Z+1	; 0x01
    494e:	80 17       	cp	r24, r16
    4950:	91 07       	cpc	r25, r17
    4952:	0c f4       	brge	.+2      	; 0x4956 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x6ee>
    4954:	8c 01       	movw	r16, r24
				motorPower = MAXMOTORPOWER;
		// Scale motor power if necessary and save it in channel speed array with proper sign for later use
		if( MOTORPOWERSCALE != 0 )
    4956:	fe 01       	movw	r30, r28
    4958:	ef 51       	subi	r30, 0x1F	; 31
    495a:	ff 4f       	sbci	r31, 0xFF	; 255
    495c:	60 81       	ld	r22, Z
    495e:	71 81       	ldd	r23, Z+1	; 0x01
    4960:	61 15       	cp	r22, r1
    4962:	71 05       	cpc	r23, r1
    4964:	21 f0       	breq	.+8      	; 0x496e <_ZN13HBridgeDriver17commandMotorPowerEhi+0x706>
				motorPower /= MOTORPOWERSCALE;
    4966:	c8 01       	movw	r24, r16
    4968:	0e 94 f2 a6 	call	0x14de4	; 0x14de4 <__divmodhi4>
    496c:	8b 01       	movw	r16, r22
		//
		// Reset encoders on new speed setting
		resetEncoders();
    496e:	ce 01       	movw	r24, r28
    4970:	6f d9       	rcall	.-3362   	; 0x3c50 <_ZN20AbstractMotorControl13resetEncodersEv>
		// If we have a linked distance sensor. check range and possibly skip
		// If we are setting power 0, we are stopping anyway
		if( !checkUltrasonicShutdown()) {
    4972:	ce 01       	movw	r24, r28
    4974:	2f d8       	rcall	.-4002   	; 0x39d4 <_ZN20AbstractMotorControl23checkUltrasonicShutdownEv>
    4976:	81 11       	cpse	r24, r1
    4978:	48 c0       	rjmp	.+144    	; 0x4a0a <_ZN13HBridgeDriver17commandMotorPowerEhi+0x7a2>
			// find the PWM pin and get the object we set up in M3 to write to power level
			int timer_mode = 2;
			int timer_pre = motorDrive[motorChannel-1][2]; // prescale from M3
    497a:	c7 01       	movw	r24, r14
    497c:	88 0f       	add	r24, r24
    497e:	99 1f       	adc	r25, r25
    4980:	88 0f       	add	r24, r24
    4982:	99 1f       	adc	r25, r25
    4984:	8c 0f       	add	r24, r28
    4986:	9d 1f       	adc	r25, r29
    4988:	fc 01       	movw	r30, r24
    498a:	e2 51       	subi	r30, 0x12	; 18
    498c:	ff 4f       	sbci	r31, 0xFF	; 255
    498e:	d0 80       	ld	r13, Z
			int timer_res = motorDrive[motorChannel-1][3]; // timer resolution in bits from M3
    4990:	31 96       	adiw	r30, 0x01	; 1
    4992:	c0 80       	ld	r12, Z
			// element 0 of motorDrive has index to PWM array
			int pindex = motorDrive[motorChannel-1][0];
    4994:	f7 01       	movw	r30, r14
    4996:	fb 96       	adiw	r30, 0x3b	; 59
    4998:	ee 0f       	add	r30, r30
    499a:	ff 1f       	adc	r31, r31
    499c:	ee 0f       	add	r30, r30
    499e:	ff 1f       	adc	r31, r31
    49a0:	ec 0f       	add	r30, r28
    49a2:	fd 1f       	adc	r31, r29
			// writing power 0 sets mode 0 and timer turnoff
			ppwms[pindex]->init(ppwms[pindex]->pin);
    49a4:	e0 80       	ld	r14, Z
    49a6:	f1 2c       	mov	r15, r1
    49a8:	ee 0c       	add	r14, r14
    49aa:	ff 1c       	adc	r15, r15
    49ac:	5e 01       	movw	r10, r28
    49ae:	b8 ee       	ldi	r27, 0xE8	; 232
    49b0:	ab 0e       	add	r10, r27
    49b2:	b1 1c       	adc	r11, r1
    49b4:	d5 01       	movw	r26, r10
    49b6:	ed 91       	ld	r30, X+
    49b8:	fc 91       	ld	r31, X
    49ba:	ee 0d       	add	r30, r14
    49bc:	ff 1d       	adc	r31, r15
    49be:	80 81       	ld	r24, Z
    49c0:	91 81       	ldd	r25, Z+1	; 0x01
    49c2:	fc 01       	movw	r30, r24
    49c4:	60 81       	ld	r22, Z
    49c6:	0e 94 6d a3 	call	0x146da	; 0x146da <_ZN3PWM4initEh>
			ppwms[pindex]->setPWMPrescale(timer_pre);
    49ca:	d5 01       	movw	r26, r10
    49cc:	ed 91       	ld	r30, X+
    49ce:	fc 91       	ld	r31, X
    49d0:	ee 0d       	add	r30, r14
    49d2:	ff 1d       	adc	r31, r15
    49d4:	6d 2d       	mov	r22, r13
    49d6:	80 81       	ld	r24, Z
    49d8:	91 81       	ldd	r25, Z+1	; 0x01
    49da:	0e 94 76 a2 	call	0x144ec	; 0x144ec <_ZN3PWM14setPWMPrescaleEh>
			ppwms[pindex]->setPWMResolution(timer_res);
    49de:	d5 01       	movw	r26, r10
    49e0:	ed 91       	ld	r30, X+
    49e2:	fc 91       	ld	r31, X
    49e4:	ee 0d       	add	r30, r14
    49e6:	ff 1d       	adc	r31, r15
    49e8:	6c 2d       	mov	r22, r12
    49ea:	80 81       	ld	r24, Z
    49ec:	91 81       	ldd	r25, Z+1	; 0x01
    49ee:	0e 94 54 a2 	call	0x144a8	; 0x144a8 <_ZN3PWM16setPWMResolutionEh>
			//ppwms[pindex]->attachInterrupt(motorDurationService[motorChannel-1]);// last param TRUE indicates an overflow interrupt
			ppwms[pindex]->pwmWrite(motorPower, timer_mode);
    49f2:	f5 01       	movw	r30, r10
    49f4:	80 81       	ld	r24, Z
    49f6:	91 81       	ldd	r25, Z+1	; 0x01
    49f8:	fc 01       	movw	r30, r24
    49fa:	ee 0d       	add	r30, r14
    49fc:	ff 1d       	adc	r31, r15
    49fe:	42 e0       	ldi	r20, 0x02	; 2
    4a00:	b8 01       	movw	r22, r16
    4a02:	80 81       	ld	r24, Z
    4a04:	91 81       	ldd	r25, Z+1	; 0x01
    4a06:	0e 94 12 a3 	call	0x14624	; 0x14624 <_ZN3PWM8pwmWriteEjh>
		}
		fault_flag = 0;
    4a0a:	ca 51       	subi	r28, 0x1A	; 26
    4a0c:	df 4f       	sbci	r29, 0xFF	; 255
    4a0e:	19 82       	std	Y+1, r1	; 0x01
    4a10:	18 82       	st	Y, r1
		return 0;
    4a12:	80 e0       	ldi	r24, 0x00	; 0
    4a14:	90 e0       	ldi	r25, 0x00	; 0
    4a16:	1b c0       	rjmp	.+54     	; 0x4a4e <_ZN13HBridgeDriver17commandMotorPowerEhi+0x7e6>
* Each channel is an axle/motor
*/
int HBridgeDriver::commandMotorPower(uint8_t motorChannel, int16_t motorPower) {
		// check shutdown override
		if( MOTORSHUTDOWN )
			return 0;
    4a18:	80 e0       	ldi	r24, 0x00	; 0
    4a1a:	90 e0       	ldi	r25, 0x00	; 0
    4a1c:	18 c0       	rjmp	.+48     	; 0x4a4e <_ZN13HBridgeDriver17commandMotorPowerEhi+0x7e6>
				if( motorPower ) motorPower = -motorPower;
				foundPin = 1;
			}
		}
		if(!foundPin) {
			return commandEmergencyStop(2);
    4a1e:	e8 81       	ld	r30, Y
    4a20:	f9 81       	ldd	r31, Y+1	; 0x01
    4a22:	06 80       	ldd	r0, Z+6	; 0x06
    4a24:	f7 81       	ldd	r31, Z+7	; 0x07
    4a26:	e0 2d       	mov	r30, r0
    4a28:	62 e0       	ldi	r22, 0x02	; 2
    4a2a:	70 e0       	ldi	r23, 0x00	; 0
    4a2c:	ce 01       	movw	r24, r28
    4a2e:	19 95       	eicall
    4a30:	0e c0       	rjmp	.+28     	; 0x4a4e <_ZN13HBridgeDriver17commandMotorPowerEhi+0x7e6>
		}	
		// scale motor power from 0-1000 to our 0-255 8 bit timer val
		motorPower /= 4;
    4a32:	c8 01       	movw	r24, r16
    4a34:	99 23       	and	r25, r25
    4a36:	0c f4       	brge	.+2      	; 0x4a3a <_ZN13HBridgeDriver17commandMotorPowerEhi+0x7d2>
    4a38:	03 96       	adiw	r24, 0x03	; 3
    4a3a:	8c 01       	movw	r16, r24
    4a3c:	15 95       	asr	r17
    4a3e:	07 95       	ror	r16
    4a40:	15 95       	asr	r17
    4a42:	07 95       	ror	r16
		if( motorPower != 0 && motorPower < minMotorPower[motorChannel-1])
    4a44:	01 15       	cp	r16, r1
    4a46:	11 05       	cpc	r17, r1
    4a48:	09 f0       	breq	.+2      	; 0x4a4c <_ZN13HBridgeDriver17commandMotorPowerEhi+0x7e4>
    4a4a:	64 cf       	rjmp	.-312    	; 0x4914 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x6ac>
    4a4c:	7b cf       	rjmp	.-266    	; 0x4944 <_ZN13HBridgeDriver17commandMotorPowerEhi+0x6dc>
			//ppwms[pindex]->attachInterrupt(motorDurationService[motorChannel-1]);// last param TRUE indicates an overflow interrupt
			ppwms[pindex]->pwmWrite(motorPower, timer_mode);
		}
		fault_flag = 0;
		return 0;
}
    4a4e:	df 91       	pop	r29
    4a50:	cf 91       	pop	r28
    4a52:	1f 91       	pop	r17
    4a54:	0f 91       	pop	r16
    4a56:	ff 90       	pop	r15
    4a58:	ef 90       	pop	r14
    4a5a:	df 90       	pop	r13
    4a5c:	cf 90       	pop	r12
    4a5e:	bf 90       	pop	r11
    4a60:	af 90       	pop	r10
    4a62:	08 95       	ret

00004a64 <_ZN13HBridgeDriver9createPWMEhhhhii>:
* dir_pin - the direction pin for this channel
* dir_default - the default direction the motor starts in
* timer_pre - timer prescale default 1 = no prescale
* timer_res - timer resolution in bits - default 8
*/ 
void HBridgeDriver::createPWM(uint8_t channel, uint8_t pin_number, uint8_t dir_pin, uint8_t dir_default, int timer_pre, int timer_res) {
    4a64:	af 92       	push	r10
    4a66:	bf 92       	push	r11
    4a68:	cf 92       	push	r12
    4a6a:	df 92       	push	r13
    4a6c:	ef 92       	push	r14
    4a6e:	ff 92       	push	r15
    4a70:	0f 93       	push	r16
    4a72:	1f 93       	push	r17
    4a74:	cf 93       	push	r28
    4a76:	df 93       	push	r29
    4a78:	ec 01       	movw	r28, r24
    4a7a:	16 2f       	mov	r17, r22
    4a7c:	f4 2e       	mov	r15, r20
    4a7e:	d2 2e       	mov	r13, r18
	// Attempt to assign PWM pin, lock to 8 bits no prescale, mode 2 CTC
	if( getChannels() < channel ) setChannels(channel);
    4a80:	8a 81       	ldd	r24, Y+2	; 0x02
    4a82:	86 17       	cp	r24, r22
    4a84:	08 f4       	brcc	.+2      	; 0x4a88 <_ZN13HBridgeDriver9createPWMEhhhhii+0x24>
	int getMotorSpeed(uint8_t ch) { return motorSpeed[ch-1]; }
	uint8_t getCurrentDirection(uint8_t ch) { return currentDirection[ch-1]; }
	uint8_t getDefaultDirection(uint8_t ch) { return defaultDirection[ch-1]; }
	PCInterrupts* getWheelEncoder(uint8_t ch) { return wheelEncoder[ch-1]; }
	CounterInterruptService* getWheelEncoderService(uint8_t ch) { return wheelEncoderService[ch-1]; }
	void setChannels(uint8_t ch) { channels = ch; }
    4a86:	6a 83       	std	Y+2, r22	; 0x02
	if( assignPin(pin_number) ) {
    4a88:	8f 2d       	mov	r24, r15
    4a8a:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_Z9assignPinh>
    4a8e:	88 23       	and	r24, r24
    4a90:	09 f4       	brne	.+2      	; 0x4a94 <_ZN13HBridgeDriver9createPWMEhhhhii+0x30>
    4a92:	bc c0       	rjmp	.+376    	; 0x4c0c <_ZN13HBridgeDriver9createPWMEhhhhii+0x1a8>
		// Set up the digital direction pin
		if( assignPin(dir_pin) ) {
    4a94:	8d 2d       	mov	r24, r13
    4a96:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_Z9assignPinh>
    4a9a:	88 23       	and	r24, r24
    4a9c:	09 f4       	brne	.+2      	; 0x4aa0 <_ZN13HBridgeDriver9createPWMEhhhhii+0x3c>
    4a9e:	b6 c0       	rjmp	.+364    	; 0x4c0c <_ZN13HBridgeDriver9createPWMEhhhhii+0x1a8>
			Digital* dpin = new Digital(dir_pin);
    4aa0:	82 e0       	ldi	r24, 0x02	; 2
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
class Digital {
	public:
	uint8_t pin;
	uint8_t mode = INPUT; // default
	Digital(uint8_t spin) {
		this->pin = spin;
    4aa8:	fc 01       	movw	r30, r24
    4aaa:	d0 82       	st	Z, r13
	}
	
void setPin(uint8_t spin) { this->pin = spin; }
	
void pinMode(uint8_t pmode) {
	this->mode = pmode;
    4aac:	21 e0       	ldi	r18, 0x01	; 1
    4aae:	21 83       	std	Z+1, r18	; 0x01
	uint8_t bit = digitalPinToBitMask(this->pin);
    4ab0:	2d 2d       	mov	r18, r13
    4ab2:	30 e0       	ldi	r19, 0x00	; 0
    4ab4:	f9 01       	movw	r30, r18
    4ab6:	ea 50       	subi	r30, 0x0A	; 10
    4ab8:	fa 4f       	sbci	r31, 0xFA	; 250
    4aba:	44 91       	lpm	r20, Z
	uint8_t port = digitalPinToPort(this->pin);
    4abc:	f9 01       	movw	r30, r18
    4abe:	e4 5c       	subi	r30, 0xC4	; 196
    4ac0:	f9 4f       	sbci	r31, 0xF9	; 249
    4ac2:	24 91       	lpm	r18, Z
	volatile uint16_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4ac4:	22 23       	and	r18, r18
    4ac6:	09 f4       	brne	.+2      	; 0x4aca <_ZN13HBridgeDriver9createPWMEhhhhii+0x66>
    4ac8:	89 c0       	rjmp	.+274    	; 0x4bdc <_ZN13HBridgeDriver9createPWMEhhhhii+0x178>

	reg = portModeRegister(port);
    4aca:	30 e0       	ldi	r19, 0x00	; 0
    4acc:	22 0f       	add	r18, r18
    4ace:	33 1f       	adc	r19, r19
    4ad0:	f9 01       	movw	r30, r18
    4ad2:	e4 56       	subi	r30, 0x64	; 100
    4ad4:	f9 4f       	sbci	r31, 0xF9	; 249
    4ad6:	a5 91       	lpm	r26, Z+
    4ad8:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    4ada:	2e 57       	subi	r18, 0x7E	; 126
    4adc:	39 4f       	sbci	r19, 0xF9	; 249
    4ade:	f9 01       	movw	r30, r18
    4ae0:	25 91       	lpm	r18, Z+
    4ae2:	34 91       	lpm	r19, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    4ae4:	5f b7       	in	r21, 0x3f	; 63
                cli();
    4ae6:	f8 94       	cli
		*reg |= bit;
    4ae8:	2d 91       	ld	r18, X+
    4aea:	3c 91       	ld	r19, X
    4aec:	11 97       	sbiw	r26, 0x01	; 1
    4aee:	24 2b       	or	r18, r20
    4af0:	11 96       	adiw	r26, 0x01	; 1
    4af2:	3c 93       	st	X, r19
    4af4:	2e 93       	st	-X, r18
		SREG = oldSREG;
    4af6:	5f bf       	out	0x3f, r21	; 63
    4af8:	71 c0       	rjmp	.+226    	; 0x4bdc <_ZN13HBridgeDriver9createPWMEhhhhii+0x178>
			dpin->pinMode(OUTPUT);
			for(int i = 0; i < 10; i++) {
				if(!pdigitals[i]) {
    4afa:	f9 01       	movw	r30, r18
    4afc:	2e 5f       	subi	r18, 0xFE	; 254
    4afe:	3f 4f       	sbci	r19, 0xFF	; 255
    4b00:	40 81       	ld	r20, Z
    4b02:	51 81       	ldd	r21, Z+1	; 0x01
    4b04:	45 2b       	or	r20, r21
    4b06:	19 f4       	brne	.+6      	; 0x4b0e <_ZN13HBridgeDriver9createPWMEhhhhii+0xaa>
					pdigitals[i] = dpin;
    4b08:	91 83       	std	Z+1, r25	; 0x01
    4b0a:	80 83       	st	Z, r24
					break;
    4b0c:	03 c0       	rjmp	.+6      	; 0x4b14 <_ZN13HBridgeDriver9createPWMEhhhhii+0xb0>
	if( assignPin(pin_number) ) {
		// Set up the digital direction pin
		if( assignPin(dir_pin) ) {
			Digital* dpin = new Digital(dir_pin);
			dpin->pinMode(OUTPUT);
			for(int i = 0; i < 10; i++) {
    4b0e:	26 17       	cp	r18, r22
    4b10:	37 07       	cpc	r19, r23
    4b12:	99 f7       	brne	.-26     	; 0x4afa <_ZN13HBridgeDriver9createPWMEhhhhii+0x96>
					break;
				}
			}
			int pindex;
			for(pindex = 0; pindex < 10; pindex++) {
				if( !ppwms[pindex] )
    4b14:	fe 01       	movw	r30, r28
    4b16:	e8 51       	subi	r30, 0x18	; 24
    4b18:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1a:	a0 81       	ld	r26, Z
    4b1c:	b1 81       	ldd	r27, Z+1	; 0x01
    4b1e:	8d 91       	ld	r24, X+
    4b20:	9c 91       	ld	r25, X
    4b22:	11 97       	sbiw	r26, 0x01	; 1
    4b24:	89 2b       	or	r24, r25
    4b26:	09 f4       	brne	.+2      	; 0x4b2a <_ZN13HBridgeDriver9createPWMEhhhhii+0xc6>
    4b28:	6b c0       	rjmp	.+214    	; 0x4c00 <_ZN13HBridgeDriver9createPWMEhhhhii+0x19c>
    4b2a:	fd 01       	movw	r30, r26
    4b2c:	32 96       	adiw	r30, 0x02	; 2
					pdigitals[i] = dpin;
					break;
				}
			}
			int pindex;
			for(pindex = 0; pindex < 10; pindex++) {
    4b2e:	81 e0       	ldi	r24, 0x01	; 1
    4b30:	90 e0       	ldi	r25, 0x00	; 0
				if( !ppwms[pindex] )
    4b32:	21 91       	ld	r18, Z+
    4b34:	31 91       	ld	r19, Z+
    4b36:	23 2b       	or	r18, r19
    4b38:	09 f4       	brne	.+2      	; 0x4b3c <_ZN13HBridgeDriver9createPWMEhhhhii+0xd8>
    4b3a:	64 c0       	rjmp	.+200    	; 0x4c04 <_ZN13HBridgeDriver9createPWMEhhhhii+0x1a0>
					pdigitals[i] = dpin;
					break;
				}
			}
			int pindex;
			for(pindex = 0; pindex < 10; pindex++) {
    4b3c:	01 96       	adiw	r24, 0x01	; 1
    4b3e:	8a 30       	cpi	r24, 0x0A	; 10
    4b40:	91 05       	cpc	r25, r1
    4b42:	b9 f7       	brne	.-18     	; 0x4b32 <_ZN13HBridgeDriver9createPWMEhhhhii+0xce>
				if( !ppwms[pindex] )
					break;
			}
			if( ppwms[pindex] )
    4b44:	54 96       	adiw	r26, 0x14	; 20
    4b46:	2d 91       	ld	r18, X+
    4b48:	3c 91       	ld	r19, X
    4b4a:	55 97       	sbiw	r26, 0x15	; 21
    4b4c:	23 2b       	or	r18, r19
    4b4e:	09 f0       	breq	.+2      	; 0x4b52 <_ZN13HBridgeDriver9createPWMEhhhhii+0xee>
    4b50:	5d c0       	rjmp	.+186    	; 0x4c0c <_ZN13HBridgeDriver9createPWMEhhhhii+0x1a8>
    4b52:	0f 2e       	mov	r0, r31
    4b54:	f4 e1       	ldi	r31, 0x14	; 20
    4b56:	af 2e       	mov	r10, r31
    4b58:	b1 2c       	mov	r11, r1
    4b5a:	f0 2d       	mov	r31, r0
				return;
			currentDirection[channel-1] = dir_default;
    4b5c:	41 2f       	mov	r20, r17
    4b5e:	50 e0       	ldi	r21, 0x00	; 0
    4b60:	9a 01       	movw	r18, r20
    4b62:	21 50       	subi	r18, 0x01	; 1
    4b64:	31 09       	sbc	r19, r1
    4b66:	be 01       	movw	r22, r28
    4b68:	62 0f       	add	r22, r18
    4b6a:	73 1f       	adc	r23, r19
    4b6c:	fb 01       	movw	r30, r22
    4b6e:	e3 58       	subi	r30, 0x83	; 131
    4b70:	ff 4f       	sbci	r31, 0xFF	; 255
    4b72:	00 83       	st	Z, r16
			defaultDirection[channel-1] = dir_default;
    4b74:	3a 96       	adiw	r30, 0x0a	; 10
    4b76:	00 83       	st	Z, r16
			
			motorDrive[channel-1][0] = pindex;
    4b78:	fa 01       	movw	r30, r20
    4b7a:	fa 96       	adiw	r30, 0x3a	; 58
    4b7c:	ee 0f       	add	r30, r30
    4b7e:	ff 1f       	adc	r31, r31
    4b80:	ee 0f       	add	r30, r30
    4b82:	ff 1f       	adc	r31, r31
    4b84:	ec 0f       	add	r30, r28
    4b86:	fd 1f       	adc	r31, r29
    4b88:	80 83       	st	Z, r24
			motorDrive[channel-1][1] = dir_pin;
    4b8a:	c9 01       	movw	r24, r18
    4b8c:	88 0f       	add	r24, r24
    4b8e:	99 1f       	adc	r25, r25
    4b90:	88 0f       	add	r24, r24
    4b92:	99 1f       	adc	r25, r25
    4b94:	8c 0f       	add	r24, r28
    4b96:	9d 1f       	adc	r25, r29
    4b98:	fc 01       	movw	r30, r24
    4b9a:	e3 51       	subi	r30, 0x13	; 19
    4b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9e:	d0 82       	st	Z, r13
			motorDrive[channel-1][2] = timer_pre;
    4ba0:	31 96       	adiw	r30, 0x01	; 1
    4ba2:	e0 82       	st	Z, r14
			motorDrive[channel-1][3] = timer_res;
    4ba4:	31 96       	adiw	r30, 0x01	; 1
    4ba6:	c0 82       	st	Z, r12
			PWM* ppin = new PWM(pin_number);
    4ba8:	87 e0       	ldi	r24, 0x07	; 7
    4baa:	90 e0       	ldi	r25, 0x00	; 0
    4bac:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    4bb0:	8c 01       	movw	r16, r24
    4bb2:	6f 2d       	mov	r22, r15
    4bb4:	0e 94 64 a3 	call	0x146c8	; 0x146c8 <_ZN3PWMC1Eh>
			ppwms[pindex] = ppin;
    4bb8:	c8 51       	subi	r28, 0x18	; 24
    4bba:	df 4f       	sbci	r29, 0xFF	; 255
    4bbc:	e8 81       	ld	r30, Y
    4bbe:	f9 81       	ldd	r31, Y+1	; 0x01
    4bc0:	ea 0d       	add	r30, r10
    4bc2:	fb 1d       	adc	r31, r11
    4bc4:	11 83       	std	Z+1, r17	; 0x01
    4bc6:	00 83       	st	Z, r16
			ppwms[pindex]->init(pin_number);
    4bc8:	e8 81       	ld	r30, Y
    4bca:	f9 81       	ldd	r31, Y+1	; 0x01
    4bcc:	ea 0d       	add	r30, r10
    4bce:	fb 1d       	adc	r31, r11
    4bd0:	6f 2d       	mov	r22, r15
    4bd2:	80 81       	ld	r24, Z
    4bd4:	91 81       	ldd	r25, Z+1	; 0x01
    4bd6:	0e 94 6d a3 	call	0x146da	; 0x146da <_ZN3PWM4initEh>
    4bda:	18 c0       	rjmp	.+48     	; 0x4c0c <_ZN13HBridgeDriver9createPWMEhhhhii+0x1a8>
		// Set up the digital direction pin
		if( assignPin(dir_pin) ) {
			Digital* dpin = new Digital(dir_pin);
			dpin->pinMode(OUTPUT);
			for(int i = 0; i < 10; i++) {
				if(!pdigitals[i]) {
    4bdc:	fe 01       	movw	r30, r28
    4bde:	e6 51       	subi	r30, 0x16	; 22
    4be0:	ff 4f       	sbci	r31, 0xFF	; 255
    4be2:	01 90       	ld	r0, Z+
    4be4:	f0 81       	ld	r31, Z
    4be6:	e0 2d       	mov	r30, r0
    4be8:	20 81       	ld	r18, Z
    4bea:	31 81       	ldd	r19, Z+1	; 0x01
    4bec:	23 2b       	or	r18, r19
    4bee:	09 f4       	brne	.+2      	; 0x4bf2 <_ZN13HBridgeDriver9createPWMEhhhhii+0x18e>
    4bf0:	8b cf       	rjmp	.-234    	; 0x4b08 <_ZN13HBridgeDriver9createPWMEhhhhii+0xa4>
    4bf2:	9f 01       	movw	r18, r30
    4bf4:	2e 5f       	subi	r18, 0xFE	; 254
    4bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    4bf8:	bf 01       	movw	r22, r30
    4bfa:	6c 5e       	subi	r22, 0xEC	; 236
    4bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    4bfe:	7d cf       	rjmp	.-262    	; 0x4afa <_ZN13HBridgeDriver9createPWMEhhhhii+0x96>
					pdigitals[i] = dpin;
					break;
				}
			}
			int pindex;
			for(pindex = 0; pindex < 10; pindex++) {
    4c00:	80 e0       	ldi	r24, 0x00	; 0
    4c02:	90 e0       	ldi	r25, 0x00	; 0
				if( !ppwms[pindex] )
					break;
			}
			if( ppwms[pindex] )
    4c04:	5c 01       	movw	r10, r24
    4c06:	aa 0c       	add	r10, r10
    4c08:	bb 1c       	adc	r11, r11
    4c0a:	a8 cf       	rjmp	.-176    	; 0x4b5c <_ZN13HBridgeDriver9createPWMEhhhhii+0xf8>
			PWM* ppin = new PWM(pin_number);
			ppwms[pindex] = ppin;
			ppwms[pindex]->init(pin_number);
		}
	}
}
    4c0c:	df 91       	pop	r29
    4c0e:	cf 91       	pop	r28
    4c10:	1f 91       	pop	r17
    4c12:	0f 91       	pop	r16
    4c14:	ff 90       	pop	r15
    4c16:	ef 90       	pop	r14
    4c18:	df 90       	pop	r13
    4c1a:	cf 90       	pop	r12
    4c1c:	bf 90       	pop	r11
    4c1e:	af 90       	pop	r10
    4c20:	08 95       	ret

00004c22 <_ZN13RoboteqDevice18resetMaxMotorPowerEv>:
	if (sscanf((char*)buffer, "BA=%i", &amps) < 1) {
		return ROBOTEQ_BAD_RESPONSE;
	}

	return amps;
}
    4c22:	8c 51       	subi	r24, 0x1C	; 28
    4c24:	9f 4f       	sbci	r25, 0xFF	; 255
    4c26:	28 ee       	ldi	r18, 0xE8	; 232
    4c28:	33 e0       	ldi	r19, 0x03	; 3
    4c2a:	fc 01       	movw	r30, r24
    4c2c:	31 83       	std	Z+1, r19	; 0x01
    4c2e:	20 83       	st	Z, r18
    4c30:	08 95       	ret

00004c32 <_ZN13RoboteqDevice11isConnectedEv>:
    4c32:	0f 93       	push	r16
    4c34:	1f 93       	push	r17
    4c36:	cf 93       	push	r28
    4c38:	df 93       	push	r29
    4c3a:	fc 01       	movw	r30, r24
    4c3c:	e2 5c       	subi	r30, 0xC2	; 194
    4c3e:	fe 4f       	sbci	r31, 0xFE	; 254
    4c40:	a0 81       	ld	r26, Z
    4c42:	b1 81       	ldd	r27, Z+1	; 0x01
    4c44:	10 97       	sbiw	r26, 0x00	; 0
    4c46:	09 f4       	brne	.+2      	; 0x4c4a <_ZN13RoboteqDevice11isConnectedEv+0x18>
    4c48:	4a c0       	rjmp	.+148    	; 0x4cde <_ZN13RoboteqDevice11isConnectedEv+0xac>
    4c4a:	ec 01       	movw	r28, r24
    4c4c:	ed 91       	ld	r30, X+
    4c4e:	fc 91       	ld	r31, X
    4c50:	11 97       	sbiw	r26, 0x01	; 1
    4c52:	01 90       	ld	r0, Z+
    4c54:	f0 81       	ld	r31, Z
    4c56:	e0 2d       	mov	r30, r0
    4c58:	65 e0       	ldi	r22, 0x05	; 5
    4c5a:	cd 01       	movw	r24, r26
    4c5c:	19 95       	eicall
    4c5e:	fe 01       	movw	r30, r28
    4c60:	e2 5c       	subi	r30, 0xC2	; 194
    4c62:	fe 4f       	sbci	r31, 0xFE	; 254
    4c64:	80 81       	ld	r24, Z
    4c66:	91 81       	ldd	r25, Z+1	; 0x01
    4c68:	dc 01       	movw	r26, r24
    4c6a:	ed 91       	ld	r30, X+
    4c6c:	fc 91       	ld	r31, X
    4c6e:	02 84       	ldd	r0, Z+10	; 0x0a
    4c70:	f3 85       	ldd	r31, Z+11	; 0x0b
    4c72:	e0 2d       	mov	r30, r0
    4c74:	19 95       	eicall
    4c76:	0a e0       	ldi	r16, 0x0A	; 10
    4c78:	10 e0       	ldi	r17, 0x00	; 0
    4c7a:	c2 5c       	subi	r28, 0xC2	; 194
    4c7c:	de 4f       	sbci	r29, 0xFE	; 254
    4c7e:	88 81       	ld	r24, Y
    4c80:	99 81       	ldd	r25, Y+1	; 0x01
    4c82:	dc 01       	movw	r26, r24
    4c84:	ed 91       	ld	r30, X+
    4c86:	fc 91       	ld	r31, X
    4c88:	04 80       	ldd	r0, Z+4	; 0x04
    4c8a:	f5 81       	ldd	r31, Z+5	; 0x05
    4c8c:	e0 2d       	mov	r30, r0
    4c8e:	19 95       	eicall
    4c90:	18 16       	cp	r1, r24
    4c92:	19 06       	cpc	r1, r25
    4c94:	c4 f4       	brge	.+48     	; 0x4cc6 <_ZN13RoboteqDevice11isConnectedEv+0x94>
    4c96:	88 81       	ld	r24, Y
    4c98:	99 81       	ldd	r25, Y+1	; 0x01
    4c9a:	dc 01       	movw	r26, r24
    4c9c:	ed 91       	ld	r30, X+
    4c9e:	fc 91       	ld	r31, X
    4ca0:	04 80       	ldd	r0, Z+4	; 0x04
    4ca2:	f5 81       	ldd	r31, Z+5	; 0x05
    4ca4:	e0 2d       	mov	r30, r0
    4ca6:	19 95       	eicall
    4ca8:	18 16       	cp	r1, r24
    4caa:	19 06       	cpc	r1, r25
    4cac:	64 f4       	brge	.+24     	; 0x4cc6 <_ZN13RoboteqDevice11isConnectedEv+0x94>
    4cae:	88 81       	ld	r24, Y
    4cb0:	99 81       	ldd	r25, Y+1	; 0x01
    4cb2:	dc 01       	movw	r26, r24
    4cb4:	ed 91       	ld	r30, X+
    4cb6:	fc 91       	ld	r31, X
    4cb8:	06 80       	ldd	r0, Z+6	; 0x06
    4cba:	f7 81       	ldd	r31, Z+7	; 0x07
    4cbc:	e0 2d       	mov	r30, r0
    4cbe:	19 95       	eicall
    4cc0:	86 30       	cpi	r24, 0x06	; 6
    4cc2:	49 f7       	brne	.-46     	; 0x4c96 <_ZN13RoboteqDevice11isConnectedEv+0x64>
    4cc4:	0f c0       	rjmp	.+30     	; 0x4ce4 <_ZN13RoboteqDevice11isConnectedEv+0xb2>
    4cc6:	8f e3       	ldi	r24, 0x3F	; 63
    4cc8:	9c e9       	ldi	r25, 0x9C	; 156
    4cca:	01 97       	sbiw	r24, 0x01	; 1
    4ccc:	f1 f7       	brne	.-4      	; 0x4cca <_ZN13RoboteqDevice11isConnectedEv+0x98>
    4cce:	00 c0       	rjmp	.+0      	; 0x4cd0 <_ZN13RoboteqDevice11isConnectedEv+0x9e>
    4cd0:	00 00       	nop
    4cd2:	01 50       	subi	r16, 0x01	; 1
    4cd4:	11 09       	sbc	r17, r1
    4cd6:	99 f6       	brne	.-90     	; 0x4c7e <_ZN13RoboteqDevice11isConnectedEv+0x4c>
    4cd8:	80 e0       	ldi	r24, 0x00	; 0
    4cda:	90 e0       	ldi	r25, 0x00	; 0
    4cdc:	05 c0       	rjmp	.+10     	; 0x4ce8 <_ZN13RoboteqDevice11isConnectedEv+0xb6>
    4cde:	80 e0       	ldi	r24, 0x00	; 0
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
    4ce2:	02 c0       	rjmp	.+4      	; 0x4ce8 <_ZN13RoboteqDevice11isConnectedEv+0xb6>
    4ce4:	81 e0       	ldi	r24, 0x01	; 1
    4ce6:	90 e0       	ldi	r25, 0x00	; 0
    4ce8:	df 91       	pop	r29
    4cea:	cf 91       	pop	r28
    4cec:	1f 91       	pop	r17
    4cee:	0f 91       	pop	r16
    4cf0:	08 95       	ret

00004cf2 <_ZN13RoboteqDeviceD1Ev>:
    4cf2:	2c e6       	ldi	r18, 0x6C	; 108
    4cf4:	39 e0       	ldi	r19, 0x09	; 9
    4cf6:	fc 01       	movw	r30, r24
    4cf8:	31 83       	std	Z+1, r19	; 0x01
    4cfa:	20 83       	st	Z, r18
    4cfc:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <_ZN20AbstractMotorControlD1Ev>
    4d00:	08 95       	ret

00004d02 <_ZN13RoboteqDeviceD0Ev>:
    4d02:	cf 93       	push	r28
    4d04:	df 93       	push	r29
    4d06:	ec 01       	movw	r28, r24
    4d08:	f4 df       	rcall	.-24     	; 0x4cf2 <_ZN13RoboteqDeviceD1Ev>
    4d0a:	ce 01       	movw	r24, r28
    4d0c:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
    4d10:	df 91       	pop	r29
    4d12:	cf 91       	pop	r28
    4d14:	08 95       	ret

00004d16 <_ZN13RoboteqDevice12readResponseEPhj>:
    4d16:	8f 92       	push	r8
    4d18:	9f 92       	push	r9
    4d1a:	af 92       	push	r10
    4d1c:	bf 92       	push	r11
    4d1e:	cf 92       	push	r12
    4d20:	df 92       	push	r13
    4d22:	ef 92       	push	r14
    4d24:	ff 92       	push	r15
    4d26:	0f 93       	push	r16
    4d28:	1f 93       	push	r17
    4d2a:	cf 93       	push	r28
    4d2c:	df 93       	push	r29
    4d2e:	4b 01       	movw	r8, r22
    4d30:	6a 01       	movw	r12, r20
    4d32:	0f 2e       	mov	r0, r31
    4d34:	fa e0       	ldi	r31, 0x0A	; 10
    4d36:	af 2e       	mov	r10, r31
    4d38:	b1 2c       	mov	r11, r1
    4d3a:	f0 2d       	mov	r31, r0
    4d3c:	c0 e0       	ldi	r28, 0x00	; 0
    4d3e:	d0 e0       	ldi	r29, 0x00	; 0
    4d40:	8c 01       	movw	r16, r24
    4d42:	02 5c       	subi	r16, 0xC2	; 194
    4d44:	1e 4f       	sbci	r17, 0xFE	; 254
    4d46:	d8 01       	movw	r26, r16
    4d48:	8d 91       	ld	r24, X+
    4d4a:	9c 91       	ld	r25, X
    4d4c:	dc 01       	movw	r26, r24
    4d4e:	ed 91       	ld	r30, X+
    4d50:	fc 91       	ld	r31, X
    4d52:	04 80       	ldd	r0, Z+4	; 0x04
    4d54:	f5 81       	ldd	r31, Z+5	; 0x05
    4d56:	e0 2d       	mov	r30, r0
    4d58:	19 95       	eicall
    4d5a:	18 16       	cp	r1, r24
    4d5c:	19 06       	cpc	r1, r25
    4d5e:	34 f5       	brge	.+76     	; 0x4dac <_ZN13RoboteqDevice12readResponseEPhj+0x96>
    4d60:	74 01       	movw	r14, r8
    4d62:	ec 0e       	add	r14, r28
    4d64:	fd 1e       	adc	r15, r29
    4d66:	f8 01       	movw	r30, r16
    4d68:	80 81       	ld	r24, Z
    4d6a:	91 81       	ldd	r25, Z+1	; 0x01
    4d6c:	dc 01       	movw	r26, r24
    4d6e:	ed 91       	ld	r30, X+
    4d70:	fc 91       	ld	r31, X
    4d72:	04 80       	ldd	r0, Z+4	; 0x04
    4d74:	f5 81       	ldd	r31, Z+5	; 0x05
    4d76:	e0 2d       	mov	r30, r0
    4d78:	19 95       	eicall
    4d7a:	18 16       	cp	r1, r24
    4d7c:	19 06       	cpc	r1, r25
    4d7e:	b4 f4       	brge	.+44     	; 0x4dac <_ZN13RoboteqDevice12readResponseEPhj+0x96>
    4d80:	f8 01       	movw	r30, r16
    4d82:	80 81       	ld	r24, Z
    4d84:	91 81       	ldd	r25, Z+1	; 0x01
    4d86:	dc 01       	movw	r26, r24
    4d88:	ed 91       	ld	r30, X+
    4d8a:	fc 91       	ld	r31, X
    4d8c:	06 80       	ldd	r0, Z+6	; 0x06
    4d8e:	f7 81       	ldd	r31, Z+7	; 0x07
    4d90:	e0 2d       	mov	r30, r0
    4d92:	19 95       	eicall
    4d94:	21 96       	adiw	r28, 0x01	; 1
    4d96:	f7 01       	movw	r30, r14
    4d98:	81 93       	st	Z+, r24
    4d9a:	7f 01       	movw	r14, r30
    4d9c:	cc 16       	cp	r12, r28
    4d9e:	dd 06       	cpc	r13, r29
    4da0:	90 f0       	brcs	.+36     	; 0x4dc6 <_ZN13RoboteqDevice12readResponseEPhj+0xb0>
    4da2:	8d 30       	cpi	r24, 0x0D	; 13
    4da4:	01 f7       	brne	.-64     	; 0x4d66 <_ZN13RoboteqDevice12readResponseEPhj+0x50>
    4da6:	8c 2f       	mov	r24, r28
    4da8:	9d 2f       	mov	r25, r29
    4daa:	0f c0       	rjmp	.+30     	; 0x4dca <_ZN13RoboteqDevice12readResponseEPhj+0xb4>
    4dac:	8f e3       	ldi	r24, 0x3F	; 63
    4dae:	9c e9       	ldi	r25, 0x9C	; 156
    4db0:	01 97       	sbiw	r24, 0x01	; 1
    4db2:	f1 f7       	brne	.-4      	; 0x4db0 <_ZN13RoboteqDevice12readResponseEPhj+0x9a>
    4db4:	00 c0       	rjmp	.+0      	; 0x4db6 <_ZN13RoboteqDevice12readResponseEPhj+0xa0>
    4db6:	00 00       	nop
    4db8:	91 e0       	ldi	r25, 0x01	; 1
    4dba:	a9 1a       	sub	r10, r25
    4dbc:	b1 08       	sbc	r11, r1
    4dbe:	19 f6       	brne	.-122    	; 0x4d46 <_ZN13RoboteqDevice12readResponseEPhj+0x30>
    4dc0:	8f ef       	ldi	r24, 0xFF	; 255
    4dc2:	9f ef       	ldi	r25, 0xFF	; 255
    4dc4:	02 c0       	rjmp	.+4      	; 0x4dca <_ZN13RoboteqDevice12readResponseEPhj+0xb4>
    4dc6:	8b ef       	ldi	r24, 0xFB	; 251
    4dc8:	9f ef       	ldi	r25, 0xFF	; 255
    4dca:	df 91       	pop	r29
    4dcc:	cf 91       	pop	r28
    4dce:	1f 91       	pop	r17
    4dd0:	0f 91       	pop	r16
    4dd2:	ff 90       	pop	r15
    4dd4:	ef 90       	pop	r14
    4dd6:	df 90       	pop	r13
    4dd8:	cf 90       	pop	r12
    4dda:	bf 90       	pop	r11
    4ddc:	af 90       	pop	r10
    4dde:	9f 90       	pop	r9
    4de0:	8f 90       	pop	r8
    4de2:	08 95       	ret

00004de4 <_ZN13RoboteqDevice11sendCommandEPKcj>:
    4de4:	cf 92       	push	r12
    4de6:	df 92       	push	r13
    4de8:	ef 92       	push	r14
    4dea:	ff 92       	push	r15
    4dec:	0f 93       	push	r16
    4dee:	1f 93       	push	r17
    4df0:	cf 93       	push	r28
    4df2:	df 93       	push	r29
    4df4:	fc 01       	movw	r30, r24
    4df6:	e2 5c       	subi	r30, 0xC2	; 194
    4df8:	fe 4f       	sbci	r31, 0xFE	; 254
    4dfa:	20 81       	ld	r18, Z
    4dfc:	31 81       	ldd	r19, Z+1	; 0x01
    4dfe:	23 2b       	or	r18, r19
    4e00:	09 f4       	brne	.+2      	; 0x4e04 <_ZN13RoboteqDevice11sendCommandEPKcj+0x20>
    4e02:	4a c0       	rjmp	.+148    	; 0x4e98 <_ZN13RoboteqDevice11sendCommandEPKcj+0xb4>
    4e04:	9a 01       	movw	r18, r20
    4e06:	21 50       	subi	r18, 0x01	; 1
    4e08:	31 09       	sbc	r19, r1
    4e0a:	23 31       	cpi	r18, 0x13	; 19
    4e0c:	31 05       	cpc	r19, r1
    4e0e:	08 f0       	brcs	.+2      	; 0x4e12 <_ZN13RoboteqDevice11sendCommandEPKcj+0x2e>
    4e10:	46 c0       	rjmp	.+140    	; 0x4e9e <_ZN13RoboteqDevice11sendCommandEPKcj+0xba>
    4e12:	7b 01       	movw	r14, r22
    4e14:	6c 01       	movw	r12, r24
    4e16:	41 15       	cp	r20, r1
    4e18:	51 05       	cpc	r21, r1
    4e1a:	59 f1       	breq	.+86     	; 0x4e72 <_ZN13RoboteqDevice11sendCommandEPKcj+0x8e>
    4e1c:	8b 01       	movw	r16, r22
    4e1e:	e4 0e       	add	r14, r20
    4e20:	f5 1e       	adc	r15, r21
    4e22:	ef 01       	movw	r28, r30
    4e24:	d8 01       	movw	r26, r16
    4e26:	6d 91       	ld	r22, X+
    4e28:	8d 01       	movw	r16, r26
    4e2a:	88 81       	ld	r24, Y
    4e2c:	99 81       	ldd	r25, Y+1	; 0x01
    4e2e:	dc 01       	movw	r26, r24
    4e30:	ed 91       	ld	r30, X+
    4e32:	fc 91       	ld	r31, X
    4e34:	01 90       	ld	r0, Z+
    4e36:	f0 81       	ld	r31, Z
    4e38:	e0 2d       	mov	r30, r0
    4e3a:	19 95       	eicall
    4e3c:	88 81       	ld	r24, Y
    4e3e:	99 81       	ldd	r25, Y+1	; 0x01
    4e40:	dc 01       	movw	r26, r24
    4e42:	ed 91       	ld	r30, X+
    4e44:	fc 91       	ld	r31, X
    4e46:	02 84       	ldd	r0, Z+10	; 0x0a
    4e48:	f3 85       	ldd	r31, Z+11	; 0x0b
    4e4a:	e0 2d       	mov	r30, r0
    4e4c:	19 95       	eicall
    4e4e:	ef e9       	ldi	r30, 0x9F	; 159
    4e50:	ff e0       	ldi	r31, 0x0F	; 15
    4e52:	31 97       	sbiw	r30, 0x01	; 1
    4e54:	f1 f7       	brne	.-4      	; 0x4e52 <_ZN13RoboteqDevice11sendCommandEPKcj+0x6e>
    4e56:	00 c0       	rjmp	.+0      	; 0x4e58 <_ZN13RoboteqDevice11sendCommandEPKcj+0x74>
    4e58:	00 00       	nop
    4e5a:	88 81       	ld	r24, Y
    4e5c:	99 81       	ldd	r25, Y+1	; 0x01
    4e5e:	dc 01       	movw	r26, r24
    4e60:	ed 91       	ld	r30, X+
    4e62:	fc 91       	ld	r31, X
    4e64:	06 80       	ldd	r0, Z+6	; 0x06
    4e66:	f7 81       	ldd	r31, Z+7	; 0x07
    4e68:	e0 2d       	mov	r30, r0
    4e6a:	19 95       	eicall
    4e6c:	e0 16       	cp	r14, r16
    4e6e:	f1 06       	cpc	r15, r17
    4e70:	c9 f6       	brne	.-78     	; 0x4e24 <_ZN13RoboteqDevice11sendCommandEPKcj+0x40>
    4e72:	40 e4       	ldi	r20, 0x40	; 64
    4e74:	50 e0       	ldi	r21, 0x00	; 0
    4e76:	b6 01       	movw	r22, r12
    4e78:	64 50       	subi	r22, 0x04	; 4
    4e7a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e7c:	c6 01       	movw	r24, r12
    4e7e:	4b df       	rcall	.-362    	; 0x4d16 <_ZN13RoboteqDevice12readResponseEPhj>
    4e80:	18 16       	cp	r1, r24
    4e82:	19 06       	cpc	r1, r25
    4e84:	7c f4       	brge	.+30     	; 0x4ea4 <_ZN13RoboteqDevice11sendCommandEPKcj+0xc0>
    4e86:	f6 01       	movw	r30, r12
    4e88:	e4 50       	subi	r30, 0x04	; 4
    4e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8c:	80 81       	ld	r24, Z
    4e8e:	8b 32       	cpi	r24, 0x2B	; 43
    4e90:	61 f0       	breq	.+24     	; 0x4eaa <_ZN13RoboteqDevice11sendCommandEPKcj+0xc6>
    4e92:	8d ef       	ldi	r24, 0xFD	; 253
    4e94:	9f ef       	ldi	r25, 0xFF	; 255
    4e96:	0b c0       	rjmp	.+22     	; 0x4eae <_ZN13RoboteqDevice11sendCommandEPKcj+0xca>
    4e98:	8e ef       	ldi	r24, 0xFE	; 254
    4e9a:	9f ef       	ldi	r25, 0xFF	; 255
    4e9c:	08 c0       	rjmp	.+16     	; 0x4eae <_ZN13RoboteqDevice11sendCommandEPKcj+0xca>
    4e9e:	8d ef       	ldi	r24, 0xFD	; 253
    4ea0:	9f ef       	ldi	r25, 0xFF	; 255
    4ea2:	05 c0       	rjmp	.+10     	; 0x4eae <_ZN13RoboteqDevice11sendCommandEPKcj+0xca>
    4ea4:	8c ef       	ldi	r24, 0xFC	; 252
    4ea6:	9f ef       	ldi	r25, 0xFF	; 255
    4ea8:	02 c0       	rjmp	.+4      	; 0x4eae <_ZN13RoboteqDevice11sendCommandEPKcj+0xca>
    4eaa:	80 e0       	ldi	r24, 0x00	; 0
    4eac:	90 e0       	ldi	r25, 0x00	; 0
    4eae:	df 91       	pop	r29
    4eb0:	cf 91       	pop	r28
    4eb2:	1f 91       	pop	r17
    4eb4:	0f 91       	pop	r16
    4eb6:	ff 90       	pop	r15
    4eb8:	ef 90       	pop	r14
    4eba:	df 90       	pop	r13
    4ebc:	cf 90       	pop	r12
    4ebe:	08 95       	ret

00004ec0 <_ZN13RoboteqDevice11sendCommandEPKc>:
    4ec0:	fb 01       	movw	r30, r22
    4ec2:	01 90       	ld	r0, Z+
    4ec4:	00 20       	and	r0, r0
    4ec6:	e9 f7       	brne	.-6      	; 0x4ec2 <_ZN13RoboteqDevice11sendCommandEPKc+0x2>
    4ec8:	31 97       	sbiw	r30, 0x01	; 1
    4eca:	af 01       	movw	r20, r30
    4ecc:	46 1b       	sub	r20, r22
    4ece:	57 0b       	sbc	r21, r23
    4ed0:	89 cf       	rjmp	.-238    	; 0x4de4 <_ZN13RoboteqDevice11sendCommandEPKcj>
    4ed2:	08 95       	ret

00004ed4 <_ZN13RoboteqDevice17commandMotorPowerEhi>:
    4ed4:	df 92       	push	r13
    4ed6:	ef 92       	push	r14
    4ed8:	ff 92       	push	r15
    4eda:	0f 93       	push	r16
    4edc:	1f 93       	push	r17
    4ede:	cf 93       	push	r28
    4ee0:	df 93       	push	r29
    4ee2:	ec 01       	movw	r28, r24
    4ee4:	d6 2e       	mov	r13, r22
    4ee6:	8a 01       	movw	r16, r20
    4ee8:	fc 01       	movw	r30, r24
    4eea:	ed 51       	subi	r30, 0x1D	; 29
    4eec:	ff 4f       	sbci	r31, 0xFF	; 255
    4eee:	80 81       	ld	r24, Z
    4ef0:	81 11       	cpse	r24, r1
    4ef2:	b5 c0       	rjmp	.+362    	; 0x505e <_ZN13RoboteqDevice17commandMotorPowerEhi+0x18a>
    4ef4:	66 23       	and	r22, r22
    4ef6:	09 f4       	brne	.+2      	; 0x4efa <_ZN13RoboteqDevice17commandMotorPowerEhi+0x26>
    4ef8:	b5 c0       	rjmp	.+362    	; 0x5064 <_ZN13RoboteqDevice17commandMotorPowerEhi+0x190>
    4efa:	8a 81       	ldd	r24, Y+2	; 0x02
    4efc:	86 17       	cp	r24, r22
    4efe:	08 f4       	brcc	.+2      	; 0x4f02 <_ZN13RoboteqDevice17commandMotorPowerEhi+0x2e>
    4f00:	b4 c0       	rjmp	.+360    	; 0x506a <_ZN13RoboteqDevice17commandMotorPowerEhi+0x196>
    4f02:	e6 2e       	mov	r14, r22
    4f04:	f1 2c       	mov	r15, r1
    4f06:	21 e0       	ldi	r18, 0x01	; 1
    4f08:	e2 1a       	sub	r14, r18
    4f0a:	f1 08       	sbc	r15, r1
    4f0c:	f7 01       	movw	r30, r14
    4f0e:	ee 0f       	add	r30, r30
    4f10:	ff 1f       	adc	r31, r31
    4f12:	ec 0f       	add	r30, r28
    4f14:	fd 1f       	adc	r31, r29
    4f16:	e7 59       	subi	r30, 0x97	; 151
    4f18:	ff 4f       	sbci	r31, 0xFF	; 255
    4f1a:	51 83       	std	Z+1, r21	; 0x01
    4f1c:	40 83       	st	Z, r20
    4f1e:	55 23       	and	r21, r21
    4f20:	3c f4       	brge	.+14     	; 0x4f30 <_ZN13RoboteqDevice17commandMotorPowerEhi+0x5c>
    4f22:	fe 01       	movw	r30, r28
    4f24:	ee 0d       	add	r30, r14
    4f26:	ff 1d       	adc	r31, r15
    4f28:	e3 58       	subi	r30, 0x83	; 131
    4f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2c:	10 82       	st	Z, r1
    4f2e:	07 c0       	rjmp	.+14     	; 0x4f3e <_ZN13RoboteqDevice17commandMotorPowerEhi+0x6a>
    4f30:	fe 01       	movw	r30, r28
    4f32:	ee 0d       	add	r30, r14
    4f34:	ff 1d       	adc	r31, r15
    4f36:	e3 58       	subi	r30, 0x83	; 131
    4f38:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3a:	81 e0       	ldi	r24, 0x01	; 1
    4f3c:	80 83       	st	Z, r24
    4f3e:	ce 01       	movw	r24, r28
    4f40:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <_ZN20AbstractMotorControl13resetEncodersEv>
    4f44:	ce 01       	movw	r24, r28
    4f46:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <_ZN20AbstractMotorControl23checkUltrasonicShutdownEv>
    4f4a:	81 11       	cpse	r24, r1
    4f4c:	91 c0       	rjmp	.+290    	; 0x5070 <_ZN13RoboteqDevice17commandMotorPowerEhi+0x19c>
    4f4e:	fe 01       	movw	r30, r28
    4f50:	ee 0d       	add	r30, r14
    4f52:	ff 1d       	adc	r31, r15
    4f54:	e9 57       	subi	r30, 0x79	; 121
    4f56:	ff 4f       	sbci	r31, 0xFF	; 255
    4f58:	80 81       	ld	r24, Z
    4f5a:	88 23       	and	r24, r24
    4f5c:	19 f0       	breq	.+6      	; 0x4f64 <_ZN13RoboteqDevice17commandMotorPowerEhi+0x90>
    4f5e:	11 95       	neg	r17
    4f60:	01 95       	neg	r16
    4f62:	11 09       	sbc	r17, r1
    4f64:	01 15       	cp	r16, r1
    4f66:	11 05       	cpc	r17, r1
    4f68:	09 f4       	brne	.+2      	; 0x4f6c <_ZN13RoboteqDevice17commandMotorPowerEhi+0x98>
    4f6a:	85 c0       	rjmp	.+266    	; 0x5076 <_ZN13RoboteqDevice17commandMotorPowerEhi+0x1a2>
    4f6c:	c8 01       	movw	r24, r16
    4f6e:	11 23       	and	r17, r17
    4f70:	24 f4       	brge	.+8      	; 0x4f7a <_ZN13RoboteqDevice17commandMotorPowerEhi+0xa6>
    4f72:	88 27       	eor	r24, r24
    4f74:	99 27       	eor	r25, r25
    4f76:	80 1b       	sub	r24, r16
    4f78:	91 0b       	sbc	r25, r17
    4f7a:	f7 01       	movw	r30, r14
    4f7c:	ee 0f       	add	r30, r30
    4f7e:	ff 1f       	adc	r31, r31
    4f80:	ec 0f       	add	r30, r28
    4f82:	fd 1f       	adc	r31, r29
    4f84:	e7 59       	subi	r30, 0x97	; 151
    4f86:	ff 4f       	sbci	r31, 0xFF	; 255
    4f88:	20 81       	ld	r18, Z
    4f8a:	31 81       	ldd	r19, Z+1	; 0x01
    4f8c:	82 17       	cp	r24, r18
    4f8e:	93 07       	cpc	r25, r19
    4f90:	f4 f4       	brge	.+60     	; 0x4fce <_ZN13RoboteqDevice17commandMotorPowerEhi+0xfa>
    4f92:	10 16       	cp	r1, r16
    4f94:	11 06       	cpc	r1, r17
    4f96:	64 f4       	brge	.+24     	; 0x4fb0 <_ZN13RoboteqDevice17commandMotorPowerEhi+0xdc>
    4f98:	f7 01       	movw	r30, r14
    4f9a:	ee 0f       	add	r30, r30
    4f9c:	ff 1f       	adc	r31, r31
    4f9e:	ee 0f       	add	r30, r30
    4fa0:	ff 1f       	adc	r31, r31
    4fa2:	ec 0f       	add	r30, r28
    4fa4:	fd 1f       	adc	r31, r29
    4fa6:	ef 56       	subi	r30, 0x6F	; 111
    4fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    4faa:	80 81       	ld	r24, Z
    4fac:	91 81       	ldd	r25, Z+1	; 0x01
    4fae:	10 c0       	rjmp	.+32     	; 0x4fd0 <_ZN13RoboteqDevice17commandMotorPowerEhi+0xfc>
    4fb0:	f7 01       	movw	r30, r14
    4fb2:	ee 0f       	add	r30, r30
    4fb4:	ff 1f       	adc	r31, r31
    4fb6:	ee 0f       	add	r30, r30
    4fb8:	ff 1f       	adc	r31, r31
    4fba:	ec 0f       	add	r30, r28
    4fbc:	fd 1f       	adc	r31, r29
    4fbe:	ef 56       	subi	r30, 0x6F	; 111
    4fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc2:	80 81       	ld	r24, Z
    4fc4:	91 81       	ldd	r25, Z+1	; 0x01
    4fc6:	91 95       	neg	r25
    4fc8:	81 95       	neg	r24
    4fca:	91 09       	sbc	r25, r1
    4fcc:	01 c0       	rjmp	.+2      	; 0x4fd0 <_ZN13RoboteqDevice17commandMotorPowerEhi+0xfc>
    4fce:	c8 01       	movw	r24, r16
    4fd0:	fe 01       	movw	r30, r28
    4fd2:	ec 51       	subi	r30, 0x1C	; 28
    4fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd6:	00 81       	ld	r16, Z
    4fd8:	11 81       	ldd	r17, Z+1	; 0x01
    4fda:	9c 01       	movw	r18, r24
    4fdc:	99 23       	and	r25, r25
    4fde:	24 f4       	brge	.+8      	; 0x4fe8 <_ZN13RoboteqDevice17commandMotorPowerEhi+0x114>
    4fe0:	22 27       	eor	r18, r18
    4fe2:	33 27       	eor	r19, r19
    4fe4:	28 1b       	sub	r18, r24
    4fe6:	39 0b       	sbc	r19, r25
    4fe8:	02 17       	cp	r16, r18
    4fea:	13 07       	cpc	r17, r19
    4fec:	4c f4       	brge	.+18     	; 0x5000 <_ZN13RoboteqDevice17commandMotorPowerEhi+0x12c>
    4fee:	18 16       	cp	r1, r24
    4ff0:	19 06       	cpc	r1, r25
    4ff2:	3c f0       	brlt	.+14     	; 0x5002 <_ZN13RoboteqDevice17commandMotorPowerEhi+0x12e>
    4ff4:	c8 01       	movw	r24, r16
    4ff6:	00 27       	eor	r16, r16
    4ff8:	11 27       	eor	r17, r17
    4ffa:	08 1b       	sub	r16, r24
    4ffc:	19 0b       	sbc	r17, r25
    4ffe:	01 c0       	rjmp	.+2      	; 0x5002 <_ZN13RoboteqDevice17commandMotorPowerEhi+0x12e>
    5000:	8c 01       	movw	r16, r24
    5002:	fe 01       	movw	r30, r28
    5004:	ef 51       	subi	r30, 0x1F	; 31
    5006:	ff 4f       	sbci	r31, 0xFF	; 255
    5008:	60 81       	ld	r22, Z
    500a:	71 81       	ldd	r23, Z+1	; 0x01
    500c:	61 15       	cp	r22, r1
    500e:	71 05       	cpc	r23, r1
    5010:	21 f0       	breq	.+8      	; 0x501a <_ZN13RoboteqDevice17commandMotorPowerEhi+0x146>
    5012:	c8 01       	movw	r24, r16
    5014:	0e 94 f2 a6 	call	0x14de4	; 0x14de4 <__divmodhi4>
    5018:	8b 01       	movw	r16, r22
    501a:	7e 01       	movw	r14, r28
    501c:	38 ee       	ldi	r19, 0xE8	; 232
    501e:	e3 0e       	add	r14, r19
    5020:	f1 1c       	adc	r15, r1
    5022:	1f 93       	push	r17
    5024:	0f 93       	push	r16
    5026:	1f 92       	push	r1
    5028:	df 92       	push	r13
    502a:	83 e7       	ldi	r24, 0x73	; 115
    502c:	98 e0       	ldi	r25, 0x08	; 8
    502e:	9f 93       	push	r25
    5030:	8f 93       	push	r24
    5032:	ff 92       	push	r15
    5034:	ef 92       	push	r14
    5036:	0e 94 6f ac 	call	0x158de	; 0x158de <sprintf>
    503a:	fe 01       	movw	r30, r28
    503c:	ea 51       	subi	r30, 0x1A	; 26
    503e:	ff 4f       	sbci	r31, 0xFF	; 255
    5040:	11 82       	std	Z+1, r1	; 0x01
    5042:	10 82       	st	Z, r1
    5044:	b7 01       	movw	r22, r14
    5046:	ce 01       	movw	r24, r28
    5048:	3b df       	rcall	.-394    	; 0x4ec0 <_ZN13RoboteqDevice11sendCommandEPKc>
    504a:	2d b7       	in	r18, 0x3d	; 61
    504c:	3e b7       	in	r19, 0x3e	; 62
    504e:	28 5f       	subi	r18, 0xF8	; 248
    5050:	3f 4f       	sbci	r19, 0xFF	; 255
    5052:	0f b6       	in	r0, 0x3f	; 63
    5054:	f8 94       	cli
    5056:	3e bf       	out	0x3e, r19	; 62
    5058:	0f be       	out	0x3f, r0	; 63
    505a:	2d bf       	out	0x3d, r18	; 61
    505c:	15 c0       	rjmp	.+42     	; 0x5088 <_ZN13RoboteqDevice17commandMotorPowerEhi+0x1b4>
    505e:	80 e0       	ldi	r24, 0x00	; 0
    5060:	90 e0       	ldi	r25, 0x00	; 0
    5062:	12 c0       	rjmp	.+36     	; 0x5088 <_ZN13RoboteqDevice17commandMotorPowerEhi+0x1b4>
    5064:	8d ef       	ldi	r24, 0xFD	; 253
    5066:	9f ef       	ldi	r25, 0xFF	; 255
    5068:	0f c0       	rjmp	.+30     	; 0x5088 <_ZN13RoboteqDevice17commandMotorPowerEhi+0x1b4>
    506a:	8d ef       	ldi	r24, 0xFD	; 253
    506c:	9f ef       	ldi	r25, 0xFF	; 255
    506e:	0c c0       	rjmp	.+24     	; 0x5088 <_ZN13RoboteqDevice17commandMotorPowerEhi+0x1b4>
    5070:	80 e0       	ldi	r24, 0x00	; 0
    5072:	90 e0       	ldi	r25, 0x00	; 0
    5074:	09 c0       	rjmp	.+18     	; 0x5088 <_ZN13RoboteqDevice17commandMotorPowerEhi+0x1b4>
    5076:	fe 01       	movw	r30, r28
    5078:	ec 51       	subi	r30, 0x1C	; 28
    507a:	ff 4f       	sbci	r31, 0xFF	; 255
    507c:	80 81       	ld	r24, Z
    507e:	91 81       	ldd	r25, Z+1	; 0x01
    5080:	99 23       	and	r25, r25
    5082:	0c f0       	brlt	.+2      	; 0x5086 <_ZN13RoboteqDevice17commandMotorPowerEhi+0x1b2>
    5084:	be cf       	rjmp	.-132    	; 0x5002 <_ZN13RoboteqDevice17commandMotorPowerEhi+0x12e>
    5086:	b7 cf       	rjmp	.-146    	; 0x4ff6 <_ZN13RoboteqDevice17commandMotorPowerEhi+0x122>
    5088:	df 91       	pop	r29
    508a:	cf 91       	pop	r28
    508c:	1f 91       	pop	r17
    508e:	0f 91       	pop	r16
    5090:	ff 90       	pop	r15
    5092:	ef 90       	pop	r14
    5094:	df 90       	pop	r13
    5096:	08 95       	ret

00005098 <_ZN13RoboteqDevice20commandEmergencyStopEi>:
    5098:	af 92       	push	r10
    509a:	bf 92       	push	r11
    509c:	cf 92       	push	r12
    509e:	df 92       	push	r13
    50a0:	ef 92       	push	r14
    50a2:	ff 92       	push	r15
    50a4:	0f 93       	push	r16
    50a6:	1f 93       	push	r17
    50a8:	cf 93       	push	r28
    50aa:	df 93       	push	r29
    50ac:	7c 01       	movw	r14, r24
    50ae:	5b 01       	movw	r10, r22
    50b0:	fc 01       	movw	r30, r24
    50b2:	82 81       	ldd	r24, Z+2	; 0x02
    50b4:	88 23       	and	r24, r24
    50b6:	41 f1       	breq	.+80     	; 0x5108 <_ZN13RoboteqDevice20commandEmergencyStopEi+0x70>
    50b8:	c0 e0       	ldi	r28, 0x00	; 0
    50ba:	d0 e0       	ldi	r29, 0x00	; 0
    50bc:	87 01       	movw	r16, r14
    50be:	08 51       	subi	r16, 0x18	; 24
    50c0:	1f 4f       	sbci	r17, 0xFF	; 255
    50c2:	0f 2e       	mov	r0, r31
    50c4:	f3 e7       	ldi	r31, 0x73	; 115
    50c6:	cf 2e       	mov	r12, r31
    50c8:	f8 e0       	ldi	r31, 0x08	; 8
    50ca:	df 2e       	mov	r13, r31
    50cc:	f0 2d       	mov	r31, r0
    50ce:	21 96       	adiw	r28, 0x01	; 1
    50d0:	1f 92       	push	r1
    50d2:	1f 92       	push	r1
    50d4:	df 93       	push	r29
    50d6:	cf 93       	push	r28
    50d8:	df 92       	push	r13
    50da:	cf 92       	push	r12
    50dc:	1f 93       	push	r17
    50de:	0f 93       	push	r16
    50e0:	0e 94 6f ac 	call	0x158de	; 0x158de <sprintf>
    50e4:	b8 01       	movw	r22, r16
    50e6:	c7 01       	movw	r24, r14
    50e8:	eb de       	rcall	.-554    	; 0x4ec0 <_ZN13RoboteqDevice11sendCommandEPKc>
    50ea:	f7 01       	movw	r30, r14
    50ec:	82 81       	ldd	r24, Z+2	; 0x02
    50ee:	90 e0       	ldi	r25, 0x00	; 0
    50f0:	2d b7       	in	r18, 0x3d	; 61
    50f2:	3e b7       	in	r19, 0x3e	; 62
    50f4:	28 5f       	subi	r18, 0xF8	; 248
    50f6:	3f 4f       	sbci	r19, 0xFF	; 255
    50f8:	0f b6       	in	r0, 0x3f	; 63
    50fa:	f8 94       	cli
    50fc:	3e bf       	out	0x3e, r19	; 62
    50fe:	0f be       	out	0x3f, r0	; 63
    5100:	2d bf       	out	0x3d, r18	; 61
    5102:	c8 17       	cp	r28, r24
    5104:	d9 07       	cpc	r29, r25
    5106:	1c f3       	brlt	.-58     	; 0x50ce <_ZN13RoboteqDevice20commandEmergencyStopEi+0x36>
    5108:	f7 01       	movw	r30, r14
    510a:	ea 51       	subi	r30, 0x1A	; 26
    510c:	ff 4f       	sbci	r31, 0xFF	; 255
    510e:	80 e1       	ldi	r24, 0x10	; 16
    5110:	90 e0       	ldi	r25, 0x00	; 0
    5112:	91 83       	std	Z+1, r25	; 0x01
    5114:	80 83       	st	Z, r24
    5116:	c7 01       	movw	r24, r14
    5118:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <_ZN20AbstractMotorControl11resetSpeedsEv>
    511c:	c7 01       	movw	r24, r14
    511e:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <_ZN20AbstractMotorControl13resetEncodersEv>
    5122:	c5 01       	movw	r24, r10
    5124:	df 91       	pop	r29
    5126:	cf 91       	pop	r28
    5128:	1f 91       	pop	r17
    512a:	0f 91       	pop	r16
    512c:	ff 90       	pop	r15
    512e:	ef 90       	pop	r14
    5130:	df 90       	pop	r13
    5132:	cf 90       	pop	r12
    5134:	bf 90       	pop	r11
    5136:	af 90       	pop	r10
    5138:	08 95       	ret

0000513a <_ZN13RoboteqDevice9sendQueryEPKcjPhj>:
    513a:	8f 92       	push	r8
    513c:	9f 92       	push	r9
    513e:	af 92       	push	r10
    5140:	bf 92       	push	r11
    5142:	cf 92       	push	r12
    5144:	df 92       	push	r13
    5146:	ef 92       	push	r14
    5148:	ff 92       	push	r15
    514a:	0f 93       	push	r16
    514c:	1f 93       	push	r17
    514e:	cf 93       	push	r28
    5150:	df 93       	push	r29
    5152:	fc 01       	movw	r30, r24
    5154:	e2 5c       	subi	r30, 0xC2	; 194
    5156:	fe 4f       	sbci	r31, 0xFE	; 254
    5158:	01 90       	ld	r0, Z+
    515a:	f0 81       	ld	r31, Z
    515c:	e0 2d       	mov	r30, r0
    515e:	ef 2b       	or	r30, r31
    5160:	c1 f1       	breq	.+112    	; 0x51d2 <_ZN13RoboteqDevice9sendQueryEPKcjPhj+0x98>
    5162:	49 01       	movw	r8, r18
    5164:	6b 01       	movw	r12, r22
    5166:	5c 01       	movw	r10, r24
    5168:	41 15       	cp	r20, r1
    516a:	51 05       	cpc	r21, r1
    516c:	69 f1       	breq	.+90     	; 0x51c8 <_ZN13RoboteqDevice9sendQueryEPKcjPhj+0x8e>
    516e:	7b 01       	movw	r14, r22
    5170:	c4 0e       	add	r12, r20
    5172:	d5 1e       	adc	r13, r21
    5174:	ec 01       	movw	r28, r24
    5176:	c2 5c       	subi	r28, 0xC2	; 194
    5178:	de 4f       	sbci	r29, 0xFE	; 254
    517a:	d7 01       	movw	r26, r14
    517c:	6d 91       	ld	r22, X+
    517e:	7d 01       	movw	r14, r26
    5180:	88 81       	ld	r24, Y
    5182:	99 81       	ldd	r25, Y+1	; 0x01
    5184:	dc 01       	movw	r26, r24
    5186:	ed 91       	ld	r30, X+
    5188:	fc 91       	ld	r31, X
    518a:	01 90       	ld	r0, Z+
    518c:	f0 81       	ld	r31, Z
    518e:	e0 2d       	mov	r30, r0
    5190:	19 95       	eicall
    5192:	88 81       	ld	r24, Y
    5194:	99 81       	ldd	r25, Y+1	; 0x01
    5196:	dc 01       	movw	r26, r24
    5198:	ed 91       	ld	r30, X+
    519a:	fc 91       	ld	r31, X
    519c:	02 84       	ldd	r0, Z+10	; 0x0a
    519e:	f3 85       	ldd	r31, Z+11	; 0x0b
    51a0:	e0 2d       	mov	r30, r0
    51a2:	19 95       	eicall
    51a4:	ef e9       	ldi	r30, 0x9F	; 159
    51a6:	ff e0       	ldi	r31, 0x0F	; 15
    51a8:	31 97       	sbiw	r30, 0x01	; 1
    51aa:	f1 f7       	brne	.-4      	; 0x51a8 <_ZN13RoboteqDevice9sendQueryEPKcjPhj+0x6e>
    51ac:	00 c0       	rjmp	.+0      	; 0x51ae <_ZN13RoboteqDevice9sendQueryEPKcjPhj+0x74>
    51ae:	00 00       	nop
    51b0:	88 81       	ld	r24, Y
    51b2:	99 81       	ldd	r25, Y+1	; 0x01
    51b4:	dc 01       	movw	r26, r24
    51b6:	ed 91       	ld	r30, X+
    51b8:	fc 91       	ld	r31, X
    51ba:	06 80       	ldd	r0, Z+6	; 0x06
    51bc:	f7 81       	ldd	r31, Z+7	; 0x07
    51be:	e0 2d       	mov	r30, r0
    51c0:	19 95       	eicall
    51c2:	ce 14       	cp	r12, r14
    51c4:	df 04       	cpc	r13, r15
    51c6:	c9 f6       	brne	.-78     	; 0x517a <_ZN13RoboteqDevice9sendQueryEPKcjPhj+0x40>
    51c8:	a8 01       	movw	r20, r16
    51ca:	b4 01       	movw	r22, r8
    51cc:	c5 01       	movw	r24, r10
    51ce:	a3 dd       	rcall	.-1210   	; 0x4d16 <_ZN13RoboteqDevice12readResponseEPhj>
    51d0:	02 c0       	rjmp	.+4      	; 0x51d6 <_ZN13RoboteqDevice9sendQueryEPKcjPhj+0x9c>
    51d2:	8e ef       	ldi	r24, 0xFE	; 254
    51d4:	9f ef       	ldi	r25, 0xFF	; 255
    51d6:	df 91       	pop	r29
    51d8:	cf 91       	pop	r28
    51da:	1f 91       	pop	r17
    51dc:	0f 91       	pop	r16
    51de:	ff 90       	pop	r15
    51e0:	ef 90       	pop	r14
    51e2:	df 90       	pop	r13
    51e4:	cf 90       	pop	r12
    51e6:	bf 90       	pop	r11
    51e8:	af 90       	pop	r10
    51ea:	9f 90       	pop	r9
    51ec:	8f 90       	pop	r8
    51ee:	08 95       	ret

000051f0 <_ZN13RoboteqDevice9sendQueryEPKcPhj>:
    51f0:	0f 93       	push	r16
    51f2:	1f 93       	push	r17
    51f4:	fb 01       	movw	r30, r22
    51f6:	01 90       	ld	r0, Z+
    51f8:	00 20       	and	r0, r0
    51fa:	e9 f7       	brne	.-6      	; 0x51f6 <_ZN13RoboteqDevice9sendQueryEPKcPhj+0x6>
    51fc:	31 97       	sbiw	r30, 0x01	; 1
    51fe:	e6 1b       	sub	r30, r22
    5200:	f7 0b       	sbc	r31, r23
    5202:	89 01       	movw	r16, r18
    5204:	9a 01       	movw	r18, r20
    5206:	af 01       	movw	r20, r30
    5208:	98 df       	rcall	.-208    	; 0x513a <_ZN13RoboteqDevice9sendQueryEPKcjPhj>
    520a:	1f 91       	pop	r17
    520c:	0f 91       	pop	r16
    520e:	08 95       	ret

00005210 <_ZN13RoboteqDevice14queryFaultFlagEv>:
    5210:	ef 92       	push	r14
    5212:	ff 92       	push	r15
    5214:	0f 93       	push	r16
    5216:	1f 93       	push	r17
    5218:	cf 93       	push	r28
    521a:	df 93       	push	r29
    521c:	1f 92       	push	r1
    521e:	1f 92       	push	r1
    5220:	cd b7       	in	r28, 0x3d	; 61
    5222:	de b7       	in	r29, 0x3e	; 62
    5224:	8c 01       	movw	r16, r24
    5226:	8f ef       	ldi	r24, 0xFF	; 255
    5228:	9f ef       	ldi	r25, 0xFF	; 255
    522a:	9a 83       	std	Y+2, r25	; 0x02
    522c:	89 83       	std	Y+1, r24	; 0x01
    522e:	78 01       	movw	r14, r16
    5230:	8c ef       	ldi	r24, 0xFC	; 252
    5232:	e8 0e       	add	r14, r24
    5234:	f1 1c       	adc	r15, r1
    5236:	80 e4       	ldi	r24, 0x40	; 64
    5238:	f7 01       	movw	r30, r14
    523a:	11 92       	st	Z+, r1
    523c:	8a 95       	dec	r24
    523e:	e9 f7       	brne	.-6      	; 0x523a <_ZN13RoboteqDevice14queryFaultFlagEv+0x2a>
    5240:	20 e4       	ldi	r18, 0x40	; 64
    5242:	30 e0       	ldi	r19, 0x00	; 0
    5244:	a7 01       	movw	r20, r14
    5246:	66 ec       	ldi	r22, 0xC6	; 198
    5248:	78 e0       	ldi	r23, 0x08	; 8
    524a:	c8 01       	movw	r24, r16
    524c:	d1 df       	rcall	.-94     	; 0x51f0 <_ZN13RoboteqDevice9sendQueryEPKcPhj>
    524e:	99 23       	and	r25, r25
    5250:	34 f1       	brlt	.+76     	; 0x529e <_ZN13RoboteqDevice14queryFaultFlagEv+0x8e>
    5252:	04 97       	sbiw	r24, 0x04	; 4
    5254:	fc f0       	brlt	.+62     	; 0x5294 <_ZN13RoboteqDevice14queryFaultFlagEv+0x84>
    5256:	ce 01       	movw	r24, r28
    5258:	01 96       	adiw	r24, 0x01	; 1
    525a:	9f 93       	push	r25
    525c:	8f 93       	push	r24
    525e:	8b ec       	ldi	r24, 0xCB	; 203
    5260:	98 e0       	ldi	r25, 0x08	; 8
    5262:	9f 93       	push	r25
    5264:	8f 93       	push	r24
    5266:	ff 92       	push	r15
    5268:	ef 92       	push	r14
    526a:	0e 94 9d ac 	call	0x1593a	; 0x1593a <sscanf>
    526e:	0f 90       	pop	r0
    5270:	0f 90       	pop	r0
    5272:	0f 90       	pop	r0
    5274:	0f 90       	pop	r0
    5276:	0f 90       	pop	r0
    5278:	0f 90       	pop	r0
    527a:	18 16       	cp	r1, r24
    527c:	19 06       	cpc	r1, r25
    527e:	6c f4       	brge	.+26     	; 0x529a <_ZN13RoboteqDevice14queryFaultFlagEv+0x8a>
    5280:	f8 01       	movw	r30, r16
    5282:	ea 51       	subi	r30, 0x1A	; 26
    5284:	ff 4f       	sbci	r31, 0xFF	; 255
    5286:	20 81       	ld	r18, Z
    5288:	31 81       	ldd	r19, Z+1	; 0x01
    528a:	89 81       	ldd	r24, Y+1	; 0x01
    528c:	9a 81       	ldd	r25, Y+2	; 0x02
    528e:	82 2b       	or	r24, r18
    5290:	93 2b       	or	r25, r19
    5292:	05 c0       	rjmp	.+10     	; 0x529e <_ZN13RoboteqDevice14queryFaultFlagEv+0x8e>
    5294:	8c ef       	ldi	r24, 0xFC	; 252
    5296:	9f ef       	ldi	r25, 0xFF	; 255
    5298:	02 c0       	rjmp	.+4      	; 0x529e <_ZN13RoboteqDevice14queryFaultFlagEv+0x8e>
    529a:	8c ef       	ldi	r24, 0xFC	; 252
    529c:	9f ef       	ldi	r25, 0xFF	; 255
    529e:	0f 90       	pop	r0
    52a0:	0f 90       	pop	r0
    52a2:	df 91       	pop	r29
    52a4:	cf 91       	pop	r28
    52a6:	1f 91       	pop	r17
    52a8:	0f 91       	pop	r16
    52aa:	ff 90       	pop	r15
    52ac:	ef 90       	pop	r14
    52ae:	08 95       	ret

000052b0 <_ZN13RoboteqDevice15queryStatusFlagEv>:
    52b0:	0f 93       	push	r16
    52b2:	1f 93       	push	r17
    52b4:	cf 93       	push	r28
    52b6:	df 93       	push	r29
    52b8:	1f 92       	push	r1
    52ba:	1f 92       	push	r1
    52bc:	cd b7       	in	r28, 0x3d	; 61
    52be:	de b7       	in	r29, 0x3e	; 62
    52c0:	2f ef       	ldi	r18, 0xFF	; 255
    52c2:	3f ef       	ldi	r19, 0xFF	; 255
    52c4:	3a 83       	std	Y+2, r19	; 0x02
    52c6:	29 83       	std	Y+1, r18	; 0x01
    52c8:	8c 01       	movw	r16, r24
    52ca:	04 50       	subi	r16, 0x04	; 4
    52cc:	1f 4f       	sbci	r17, 0xFF	; 255
    52ce:	20 e4       	ldi	r18, 0x40	; 64
    52d0:	f8 01       	movw	r30, r16
    52d2:	11 92       	st	Z+, r1
    52d4:	2a 95       	dec	r18
    52d6:	e9 f7       	brne	.-6      	; 0x52d2 <_ZN13RoboteqDevice15queryStatusFlagEv+0x22>
    52d8:	20 e4       	ldi	r18, 0x40	; 64
    52da:	30 e0       	ldi	r19, 0x00	; 0
    52dc:	a8 01       	movw	r20, r16
    52de:	61 ed       	ldi	r22, 0xD1	; 209
    52e0:	78 e0       	ldi	r23, 0x08	; 8
    52e2:	86 df       	rcall	.-244    	; 0x51f0 <_ZN13RoboteqDevice9sendQueryEPKcPhj>
    52e4:	99 23       	and	r25, r25
    52e6:	fc f0       	brlt	.+62     	; 0x5326 <_ZN13RoboteqDevice15queryStatusFlagEv+0x76>
    52e8:	04 97       	sbiw	r24, 0x04	; 4
    52ea:	c4 f0       	brlt	.+48     	; 0x531c <_ZN13RoboteqDevice15queryStatusFlagEv+0x6c>
    52ec:	ce 01       	movw	r24, r28
    52ee:	01 96       	adiw	r24, 0x01	; 1
    52f0:	9f 93       	push	r25
    52f2:	8f 93       	push	r24
    52f4:	86 ed       	ldi	r24, 0xD6	; 214
    52f6:	98 e0       	ldi	r25, 0x08	; 8
    52f8:	9f 93       	push	r25
    52fa:	8f 93       	push	r24
    52fc:	1f 93       	push	r17
    52fe:	0f 93       	push	r16
    5300:	0e 94 9d ac 	call	0x1593a	; 0x1593a <sscanf>
    5304:	0f 90       	pop	r0
    5306:	0f 90       	pop	r0
    5308:	0f 90       	pop	r0
    530a:	0f 90       	pop	r0
    530c:	0f 90       	pop	r0
    530e:	0f 90       	pop	r0
    5310:	18 16       	cp	r1, r24
    5312:	19 06       	cpc	r1, r25
    5314:	34 f4       	brge	.+12     	; 0x5322 <_ZN13RoboteqDevice15queryStatusFlagEv+0x72>
    5316:	89 81       	ldd	r24, Y+1	; 0x01
    5318:	9a 81       	ldd	r25, Y+2	; 0x02
    531a:	05 c0       	rjmp	.+10     	; 0x5326 <_ZN13RoboteqDevice15queryStatusFlagEv+0x76>
    531c:	8c ef       	ldi	r24, 0xFC	; 252
    531e:	9f ef       	ldi	r25, 0xFF	; 255
    5320:	02 c0       	rjmp	.+4      	; 0x5326 <_ZN13RoboteqDevice15queryStatusFlagEv+0x76>
    5322:	8c ef       	ldi	r24, 0xFC	; 252
    5324:	9f ef       	ldi	r25, 0xFF	; 255
    5326:	0f 90       	pop	r0
    5328:	0f 90       	pop	r0
    532a:	df 91       	pop	r29
    532c:	cf 91       	pop	r28
    532e:	1f 91       	pop	r17
    5330:	0f 91       	pop	r16
    5332:	08 95       	ret

00005334 <_ZN13RoboteqDevice16queryBatteryAmpsEv>:
    5334:	0f 93       	push	r16
    5336:	1f 93       	push	r17
    5338:	cf 93       	push	r28
    533a:	df 93       	push	r29
    533c:	00 d0       	rcall	.+0      	; 0x533e <_ZN13RoboteqDevice16queryBatteryAmpsEv+0xa>
    533e:	1f 92       	push	r1
    5340:	cd b7       	in	r28, 0x3d	; 61
    5342:	de b7       	in	r29, 0x3e	; 62
    5344:	8c 01       	movw	r16, r24
    5346:	04 50       	subi	r16, 0x04	; 4
    5348:	1f 4f       	sbci	r17, 0xFF	; 255
    534a:	20 e4       	ldi	r18, 0x40	; 64
    534c:	30 e0       	ldi	r19, 0x00	; 0
    534e:	a8 01       	movw	r20, r16
    5350:	69 ee       	ldi	r22, 0xE9	; 233
    5352:	78 e0       	ldi	r23, 0x08	; 8
    5354:	4d df       	rcall	.-358    	; 0x51f0 <_ZN13RoboteqDevice9sendQueryEPKcPhj>
    5356:	99 23       	and	r25, r25
    5358:	24 f1       	brlt	.+72     	; 0x53a2 <_ZN13RoboteqDevice16queryBatteryAmpsEv+0x6e>
    535a:	04 97       	sbiw	r24, 0x04	; 4
    535c:	ec f0       	brlt	.+58     	; 0x5398 <_ZN13RoboteqDevice16queryBatteryAmpsEv+0x64>
    535e:	ce 01       	movw	r24, r28
    5360:	03 96       	adiw	r24, 0x03	; 3
    5362:	9f 93       	push	r25
    5364:	8f 93       	push	r24
    5366:	02 97       	sbiw	r24, 0x02	; 2
    5368:	9f 93       	push	r25
    536a:	8f 93       	push	r24
    536c:	8e ee       	ldi	r24, 0xEE	; 238
    536e:	98 e0       	ldi	r25, 0x08	; 8
    5370:	9f 93       	push	r25
    5372:	8f 93       	push	r24
    5374:	1f 93       	push	r17
    5376:	0f 93       	push	r16
    5378:	0e 94 9d ac 	call	0x1593a	; 0x1593a <sscanf>
    537c:	0f b6       	in	r0, 0x3f	; 63
    537e:	f8 94       	cli
    5380:	de bf       	out	0x3e, r29	; 62
    5382:	0f be       	out	0x3f, r0	; 63
    5384:	cd bf       	out	0x3d, r28	; 61
    5386:	02 97       	sbiw	r24, 0x02	; 2
    5388:	54 f0       	brlt	.+20     	; 0x539e <_ZN13RoboteqDevice16queryBatteryAmpsEv+0x6a>
    538a:	29 81       	ldd	r18, Y+1	; 0x01
    538c:	3a 81       	ldd	r19, Y+2	; 0x02
    538e:	8b 81       	ldd	r24, Y+3	; 0x03
    5390:	9c 81       	ldd	r25, Y+4	; 0x04
    5392:	82 0f       	add	r24, r18
    5394:	93 1f       	adc	r25, r19
    5396:	05 c0       	rjmp	.+10     	; 0x53a2 <_ZN13RoboteqDevice16queryBatteryAmpsEv+0x6e>
    5398:	8c ef       	ldi	r24, 0xFC	; 252
    539a:	9f ef       	ldi	r25, 0xFF	; 255
    539c:	02 c0       	rjmp	.+4      	; 0x53a2 <_ZN13RoboteqDevice16queryBatteryAmpsEv+0x6e>
    539e:	8c ef       	ldi	r24, 0xFC	; 252
    53a0:	9f ef       	ldi	r25, 0xFF	; 255
    53a2:	0f 90       	pop	r0
    53a4:	0f 90       	pop	r0
    53a6:	0f 90       	pop	r0
    53a8:	0f 90       	pop	r0
    53aa:	df 91       	pop	r29
    53ac:	cf 91       	pop	r28
    53ae:	1f 91       	pop	r17
    53b0:	0f 91       	pop	r16
    53b2:	08 95       	ret

000053b4 <_ZN13RoboteqDevice19queryBatteryVoltageEv>:

int RoboteqDevice::queryBatteryVoltage(void) {
    53b4:	0f 93       	push	r16
    53b6:	1f 93       	push	r17
    53b8:	cf 93       	push	r28
    53ba:	df 93       	push	r29
    53bc:	1f 92       	push	r1
    53be:	1f 92       	push	r1
    53c0:	cd b7       	in	r28, 0x3d	; 61
    53c2:	de b7       	in	r29, 0x3e	; 62
	// Query: ?V 2 (2 = main battery voltage)
	// Response: V=<voltage>*10
	int voltage = -1;
    53c4:	2f ef       	ldi	r18, 0xFF	; 255
    53c6:	3f ef       	ldi	r19, 0xFF	; 255
    53c8:	3a 83       	std	Y+2, r19	; 0x02
    53ca:	29 83       	std	Y+1, r18	; 0x01
	memset(buffer, NULL, ROBOTEQ_BUFFER_SIZE);
    53cc:	8c 01       	movw	r16, r24
    53ce:	04 50       	subi	r16, 0x04	; 4
    53d0:	1f 4f       	sbci	r17, 0xFF	; 255
    53d2:	20 e4       	ldi	r18, 0x40	; 64
    53d4:	f8 01       	movw	r30, r16
    53d6:	11 92       	st	Z+, r1
    53d8:	2a 95       	dec	r18
    53da:	e9 f7       	brne	.-6      	; 0x53d6 <_ZN13RoboteqDevice19queryBatteryVoltageEv+0x22>
	int res;
	if ((res = this->sendQuery("?V 2\r", (uint8_t*)buffer, ROBOTEQ_BUFFER_SIZE)) < 0)
    53dc:	20 e4       	ldi	r18, 0x40	; 64
    53de:	30 e0       	ldi	r19, 0x00	; 0
    53e0:	a8 01       	movw	r20, r16
    53e2:	65 e0       	ldi	r22, 0x05	; 5
    53e4:	79 e0       	ldi	r23, 0x09	; 9
    53e6:	04 df       	rcall	.-504    	; 0x51f0 <_ZN13RoboteqDevice9sendQueryEPKcPhj>
    53e8:	99 23       	and	r25, r25
    53ea:	f4 f0       	brlt	.+60     	; 0x5428 <_ZN13RoboteqDevice19queryBatteryVoltageEv+0x74>
	return res;
	if (res < 4)
    53ec:	04 97       	sbiw	r24, 0x04	; 4
    53ee:	bc f0       	brlt	.+46     	; 0x541e <_ZN13RoboteqDevice19queryBatteryVoltageEv+0x6a>
	return ROBOTEQ_BAD_RESPONSE;
	// Parse Response
	if (sscanf((char*)buffer, "V=%i", &voltage) != 1)
    53f0:	ce 01       	movw	r24, r28
    53f2:	01 96       	adiw	r24, 0x01	; 1
    53f4:	9f 93       	push	r25
    53f6:	8f 93       	push	r24
    53f8:	8b e0       	ldi	r24, 0x0B	; 11
    53fa:	99 e0       	ldi	r25, 0x09	; 9
    53fc:	9f 93       	push	r25
    53fe:	8f 93       	push	r24
    5400:	1f 93       	push	r17
    5402:	0f 93       	push	r16
    5404:	0e 94 9d ac 	call	0x1593a	; 0x1593a <sscanf>
    5408:	0f 90       	pop	r0
    540a:	0f 90       	pop	r0
    540c:	0f 90       	pop	r0
    540e:	0f 90       	pop	r0
    5410:	0f 90       	pop	r0
    5412:	0f 90       	pop	r0
    5414:	01 97       	sbiw	r24, 0x01	; 1
    5416:	31 f4       	brne	.+12     	; 0x5424 <_ZN13RoboteqDevice19queryBatteryVoltageEv+0x70>
	return ROBOTEQ_BAD_RESPONSE;
	return voltage;
    5418:	89 81       	ldd	r24, Y+1	; 0x01
    541a:	9a 81       	ldd	r25, Y+2	; 0x02
    541c:	05 c0       	rjmp	.+10     	; 0x5428 <_ZN13RoboteqDevice19queryBatteryVoltageEv+0x74>
	memset(buffer, NULL, ROBOTEQ_BUFFER_SIZE);
	int res;
	if ((res = this->sendQuery("?V 2\r", (uint8_t*)buffer, ROBOTEQ_BUFFER_SIZE)) < 0)
	return res;
	if (res < 4)
	return ROBOTEQ_BAD_RESPONSE;
    541e:	8c ef       	ldi	r24, 0xFC	; 252
    5420:	9f ef       	ldi	r25, 0xFF	; 255
    5422:	02 c0       	rjmp	.+4      	; 0x5428 <_ZN13RoboteqDevice19queryBatteryVoltageEv+0x74>
	// Parse Response
	if (sscanf((char*)buffer, "V=%i", &voltage) != 1)
	return ROBOTEQ_BAD_RESPONSE;
    5424:	8c ef       	ldi	r24, 0xFC	; 252
    5426:	9f ef       	ldi	r25, 0xFF	; 255
	return voltage;
}
    5428:	0f 90       	pop	r0
    542a:	0f 90       	pop	r0
    542c:	df 91       	pop	r29
    542e:	cf 91       	pop	r28
    5430:	1f 91       	pop	r17
    5432:	0f 91       	pop	r16
    5434:	08 95       	ret

00005436 <_ZN13RoboteqDevice13getDriverInfoEhPc>:
	}
	// timeout
	return ROBOTEQ_TIMEOUT;
}

void RoboteqDevice::getDriverInfo(uint8_t ch, char* outStr) {
    5436:	8f 92       	push	r8
    5438:	9f 92       	push	r9
    543a:	af 92       	push	r10
    543c:	bf 92       	push	r11
    543e:	cf 92       	push	r12
    5440:	df 92       	push	r13
    5442:	ef 92       	push	r14
    5444:	ff 92       	push	r15
    5446:	0f 93       	push	r16
    5448:	1f 93       	push	r17
    544a:	cf 93       	push	r28
    544c:	df 93       	push	r29
    544e:	cd b7       	in	r28, 0x3d	; 61
    5450:	de b7       	in	r29, 0x3e	; 62
    5452:	c8 57       	subi	r28, 0x78	; 120
    5454:	d1 09       	sbc	r29, r1
    5456:	0f b6       	in	r0, 0x3f	; 63
    5458:	f8 94       	cli
    545a:	de bf       	out	0x3e, r29	; 62
    545c:	0f be       	out	0x3f, r0	; 63
    545e:	cd bf       	out	0x3d, r28	; 61
    5460:	7c 01       	movw	r14, r24
    5462:	d6 2e       	mov	r13, r22
    5464:	8a 01       	movw	r16, r20
	char cout[80];
	char dout1[10];
	char dout2[10];
	char dout3[10];
	char dout4[10];
	if( !isConnected() ) {
    5466:	dc 01       	movw	r26, r24
    5468:	ed 91       	ld	r30, X+
    546a:	fc 91       	ld	r31, X
    546c:	00 84       	ldd	r0, Z+8	; 0x08
    546e:	f1 85       	ldd	r31, Z+9	; 0x09
    5470:	e0 2d       	mov	r30, r0
    5472:	19 95       	eicall
    5474:	89 2b       	or	r24, r25
    5476:	e9 f4       	brne	.+58     	; 0x54b2 <_ZN13RoboteqDevice13getDriverInfoEhPc+0x7c>
    5478:	7e 01       	movw	r14, r28
    547a:	b1 e5       	ldi	r27, 0x51	; 81
    547c:	eb 0e       	add	r14, r27
    547e:	f1 1c       	adc	r15, r1
    5480:	4a e0       	ldi	r20, 0x0A	; 10
    5482:	b7 01       	movw	r22, r14
    5484:	8d 2d       	mov	r24, r13
    5486:	90 e0       	ldi	r25, 0x00	; 0
    5488:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(ch, dout1, 10);
		sprintf(cout, "Controller channel %s is not connected.\0", dout1);
    548c:	ff 92       	push	r15
    548e:	ef 92       	push	r14
    5490:	89 e5       	ldi	r24, 0x59	; 89
    5492:	93 e0       	ldi	r25, 0x03	; 3
    5494:	9f 93       	push	r25
    5496:	8f 93       	push	r24
    5498:	ce 01       	movw	r24, r28
    549a:	01 96       	adiw	r24, 0x01	; 1
    549c:	9f 93       	push	r25
    549e:	8f 93       	push	r24
    54a0:	0e 94 6f ac 	call	0x158de	; 0x158de <sprintf>
    54a4:	0f 90       	pop	r0
    54a6:	0f 90       	pop	r0
    54a8:	0f 90       	pop	r0
    54aa:	0f 90       	pop	r0
    54ac:	0f 90       	pop	r0
    54ae:	0f 90       	pop	r0
    54b0:	54 c0       	rjmp	.+168    	; 0x555a <_ZN13RoboteqDevice13getDriverInfoEhPc+0x124>
	} else {
		itoa(queryBatteryVoltage(), dout1, 10);
    54b2:	c7 01       	movw	r24, r14
    54b4:	7f df       	rcall	.-258    	; 0x53b4 <_ZN13RoboteqDevice19queryBatteryVoltageEv>
    54b6:	6e 01       	movw	r12, r28
    54b8:	e1 e5       	ldi	r30, 0x51	; 81
    54ba:	ce 0e       	add	r12, r30
    54bc:	d1 1c       	adc	r13, r1
    54be:	4a e0       	ldi	r20, 0x0A	; 10
    54c0:	b6 01       	movw	r22, r12
    54c2:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(queryBatteryAmps(), dout2, 10);
    54c6:	c7 01       	movw	r24, r14
    54c8:	35 df       	rcall	.-406    	; 0x5334 <_ZN13RoboteqDevice16queryBatteryAmpsEv>
    54ca:	5e 01       	movw	r10, r28
    54cc:	fb e5       	ldi	r31, 0x5B	; 91
    54ce:	af 0e       	add	r10, r31
    54d0:	b1 1c       	adc	r11, r1
    54d2:	4a e0       	ldi	r20, 0x0A	; 10
    54d4:	b5 01       	movw	r22, r10
    54d6:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(queryFaultFlag(), dout3, 10);
    54da:	d7 01       	movw	r26, r14
    54dc:	ed 91       	ld	r30, X+
    54de:	fc 91       	ld	r31, X
    54e0:	04 84       	ldd	r0, Z+12	; 0x0c
    54e2:	f5 85       	ldd	r31, Z+13	; 0x0d
    54e4:	e0 2d       	mov	r30, r0
    54e6:	c7 01       	movw	r24, r14
    54e8:	19 95       	eicall
    54ea:	4e 01       	movw	r8, r28
    54ec:	b5 e6       	ldi	r27, 0x65	; 101
    54ee:	8b 0e       	add	r8, r27
    54f0:	91 1c       	adc	r9, r1
    54f2:	4a e0       	ldi	r20, 0x0A	; 10
    54f4:	b4 01       	movw	r22, r8
    54f6:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(queryStatusFlag(), dout4, 10);
    54fa:	d7 01       	movw	r26, r14
    54fc:	ed 91       	ld	r30, X+
    54fe:	fc 91       	ld	r31, X
    5500:	06 84       	ldd	r0, Z+14	; 0x0e
    5502:	f7 85       	ldd	r31, Z+15	; 0x0f
    5504:	e0 2d       	mov	r30, r0
    5506:	c7 01       	movw	r24, r14
    5508:	19 95       	eicall
    550a:	7e 01       	movw	r14, r28
    550c:	bf e6       	ldi	r27, 0x6F	; 111
    550e:	eb 0e       	add	r14, r27
    5510:	f1 1c       	adc	r15, r1
    5512:	4a e0       	ldi	r20, 0x0A	; 10
    5514:	b7 01       	movw	r22, r14
    5516:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		sprintf(cout,"Voltage:%s Amps:%s Fault:%s Status:%s\0",dout1 , dout2, dout3, dout4);
    551a:	ff 92       	push	r15
    551c:	ef 92       	push	r14
    551e:	9f 92       	push	r9
    5520:	8f 92       	push	r8
    5522:	bf 92       	push	r11
    5524:	af 92       	push	r10
    5526:	df 92       	push	r13
    5528:	cf 92       	push	r12
    552a:	82 e8       	ldi	r24, 0x82	; 130
    552c:	93 e0       	ldi	r25, 0x03	; 3
    552e:	9f 93       	push	r25
    5530:	8f 93       	push	r24
    5532:	ce 01       	movw	r24, r28
    5534:	01 96       	adiw	r24, 0x01	; 1
    5536:	9f 93       	push	r25
    5538:	8f 93       	push	r24
    553a:	0e 94 6f ac 	call	0x158de	; 0x158de <sprintf>
    553e:	0f b6       	in	r0, 0x3f	; 63
    5540:	f8 94       	cli
    5542:	de bf       	out	0x3e, r29	; 62
    5544:	0f be       	out	0x3f, r0	; 63
    5546:	cd bf       	out	0x3d, r28	; 61
    5548:	08 c0       	rjmp	.+16     	; 0x555a <_ZN13RoboteqDevice13getDriverInfoEhPc+0x124>
	}
	 for(int i=0; i < 80; ++i){
		 outStr[i] = cout[i];
    554a:	81 91       	ld	r24, Z+
    554c:	8d 93       	st	X+, r24
		 if(!outStr[i])
    554e:	88 23       	and	r24, r24
    5550:	81 f0       	breq	.+32     	; 0x5572 <_ZN13RoboteqDevice13getDriverInfoEhPc+0x13c>
		itoa(queryBatteryAmps(), dout2, 10);
		itoa(queryFaultFlag(), dout3, 10);
		itoa(queryStatusFlag(), dout4, 10);
		sprintf(cout,"Voltage:%s Amps:%s Fault:%s Status:%s\0",dout1 , dout2, dout3, dout4);
	}
	 for(int i=0; i < 80; ++i){
    5552:	2e 17       	cp	r18, r30
    5554:	3f 07       	cpc	r19, r31
    5556:	c9 f7       	brne	.-14     	; 0x554a <_ZN13RoboteqDevice13getDriverInfoEhPc+0x114>
    5558:	0c c0       	rjmp	.+24     	; 0x5572 <_ZN13RoboteqDevice13getDriverInfoEhPc+0x13c>
		 outStr[i] = cout[i];
    555a:	89 81       	ldd	r24, Y+1	; 0x01
    555c:	d8 01       	movw	r26, r16
    555e:	8c 93       	st	X, r24
		 if(!outStr[i])
    5560:	88 23       	and	r24, r24
    5562:	39 f0       	breq	.+14     	; 0x5572 <_ZN13RoboteqDevice13getDriverInfoEhPc+0x13c>
    5564:	fe 01       	movw	r30, r28
    5566:	32 96       	adiw	r30, 0x02	; 2
    5568:	11 96       	adiw	r26, 0x01	; 1
    556a:	9e 01       	movw	r18, r28
    556c:	2f 5a       	subi	r18, 0xAF	; 175
    556e:	3f 4f       	sbci	r19, 0xFF	; 255
    5570:	ec cf       	rjmp	.-40     	; 0x554a <_ZN13RoboteqDevice13getDriverInfoEhPc+0x114>
			break;
	 }
}
    5572:	c8 58       	subi	r28, 0x88	; 136
    5574:	df 4f       	sbci	r29, 0xFF	; 255
    5576:	0f b6       	in	r0, 0x3f	; 63
    5578:	f8 94       	cli
    557a:	de bf       	out	0x3e, r29	; 62
    557c:	0f be       	out	0x3f, r0	; 63
    557e:	cd bf       	out	0x3d, r28	; 61
    5580:	df 91       	pop	r29
    5582:	cf 91       	pop	r28
    5584:	1f 91       	pop	r17
    5586:	0f 91       	pop	r16
    5588:	ff 90       	pop	r15
    558a:	ef 90       	pop	r14
    558c:	df 90       	pop	r13
    558e:	cf 90       	pop	r12
    5590:	bf 90       	pop	r11
    5592:	af 90       	pop	r10
    5594:	9f 90       	pop	r9
    5596:	8f 90       	pop	r8
    5598:	08 95       	ret

0000559a <_ZN17SplitBridgeDriverD1Ev>:
#include "HBridgeDriver.h"
#include "..\Configuration_adv.h"


// default destructor
SplitBridgeDriver::~SplitBridgeDriver()
    559a:	28 e9       	ldi	r18, 0x98	; 152
    559c:	39 e0       	ldi	r19, 0x09	; 9
    559e:	fc 01       	movw	r30, r24
    55a0:	31 83       	std	Z+1, r19	; 0x01
    55a2:	20 83       	st	Z, r18
    55a4:	0c 94 cf 1e 	jmp	0x3d9e	; 0x3d9e <_ZN13HBridgeDriverD1Ev>
    55a8:	08 95       	ret

000055aa <_ZN17SplitBridgeDriverD0Ev>:
    55aa:	cf 93       	push	r28
    55ac:	df 93       	push	r29
    55ae:	ec 01       	movw	r28, r24
{
} //~SplitBridgeDriver
    55b0:	f4 df       	rcall	.-24     	; 0x559a <_ZN17SplitBridgeDriverD1Ev>
    55b2:	ce 01       	movw	r24, r28
    55b4:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
    55b8:	df 91       	pop	r29
    55ba:	cf 91       	pop	r28
    55bc:	08 95       	ret

000055be <_ZN17SplitBridgeDriver17commandMotorPowerEhi>:

/*
* Command the bridge driver power level. Manage enable pin. If necessary limit min and max power and
* scale to the MOTORPOWERSCALE if > 0. After calculation and saved values in the 0-1000 range scale it to 0-255 for 8 bit PWM.
*/
int SplitBridgeDriver::commandMotorPower(uint8_t motorChannel, int16_t motorPower) {
    55be:	8f 92       	push	r8
    55c0:	9f 92       	push	r9
    55c2:	af 92       	push	r10
    55c4:	bf 92       	push	r11
    55c6:	cf 92       	push	r12
    55c8:	df 92       	push	r13
    55ca:	ef 92       	push	r14
    55cc:	ff 92       	push	r15
    55ce:	0f 93       	push	r16
    55d0:	1f 93       	push	r17
    55d2:	cf 93       	push	r28
    55d4:	df 93       	push	r29
    55d6:	4c 01       	movw	r8, r24
    55d8:	f6 2e       	mov	r15, r22
    55da:	8a 01       	movw	r16, r20
	// check shutdown override
	if( MOTORSHUTDOWN )
    55dc:	fc 01       	movw	r30, r24
    55de:	ed 51       	subi	r30, 0x1D	; 29
    55e0:	ff 4f       	sbci	r31, 0xFF	; 255
    55e2:	80 81       	ld	r24, Z
    55e4:	81 11       	cpse	r24, r1
    55e6:	ef c1       	rjmp	.+990    	; 0x59c6 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x408>
		return 0;
	int foundPin = 0;

	// set enable pin
	for(int i = 0; i < 10; i++) {
			if(pdigitals[i] && pdigitals[i]->pin == motorDrive[motorChannel-1][1]) {
    55e8:	37 96       	adiw	r30, 0x07	; 7
    55ea:	a0 81       	ld	r26, Z
    55ec:	b1 81       	ldd	r27, Z+1	; 0x01
    55ee:	20 e0       	ldi	r18, 0x00	; 0
    55f0:	30 e0       	ldi	r19, 0x00	; 0
    55f2:	70 e0       	ldi	r23, 0x00	; 0
    55f4:	61 50       	subi	r22, 0x01	; 1
    55f6:	71 09       	sbc	r23, r1
    55f8:	66 0f       	add	r22, r22
    55fa:	77 1f       	adc	r23, r23
    55fc:	66 0f       	add	r22, r22
    55fe:	77 1f       	adc	r23, r23
    5600:	68 0d       	add	r22, r8
    5602:	79 1d       	adc	r23, r9
    5604:	63 51       	subi	r22, 0x13	; 19
    5606:	7f 4f       	sbci	r23, 0xFF	; 255
    5608:	c9 01       	movw	r24, r18
    560a:	ed 91       	ld	r30, X+
    560c:	fd 91       	ld	r31, X+
    560e:	30 97       	sbiw	r30, 0x00	; 0
    5610:	09 f4       	brne	.+2      	; 0x5614 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x56>
    5612:	c5 c0       	rjmp	.+394    	; 0x579e <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1e0>
    5614:	eb 01       	movw	r28, r22
    5616:	48 81       	ld	r20, Y
    5618:	50 81       	ld	r21, Z
    561a:	54 13       	cpse	r21, r20
    561c:	c0 c0       	rjmp	.+384    	; 0x579e <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1e0>
	}
	
void setPin(uint8_t spin) { this->pin = spin; }
	
void pinMode(uint8_t pmode) {
	this->mode = pmode;
    561e:	21 e0       	ldi	r18, 0x01	; 1
    5620:	21 83       	std	Z+1, r18	; 0x01
	uint8_t bit = digitalPinToBitMask(this->pin);
    5622:	24 2f       	mov	r18, r20
    5624:	30 e0       	ldi	r19, 0x00	; 0
    5626:	f9 01       	movw	r30, r18
    5628:	e4 50       	subi	r30, 0x04	; 4
    562a:	f9 4f       	sbci	r31, 0xF9	; 249
    562c:	44 91       	lpm	r20, Z
	uint8_t port = digitalPinToPort(this->pin);
    562e:	f9 01       	movw	r30, r18
    5630:	ee 5b       	subi	r30, 0xBE	; 190
    5632:	f8 4f       	sbci	r31, 0xF8	; 248
    5634:	24 91       	lpm	r18, Z
	volatile uint16_t *reg, *out;

	if (port == NOT_A_PIN) return;
    5636:	22 23       	and	r18, r18
    5638:	b9 f0       	breq	.+46     	; 0x5668 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0xaa>

	reg = portModeRegister(port);
    563a:	30 e0       	ldi	r19, 0x00	; 0
    563c:	22 0f       	add	r18, r18
    563e:	33 1f       	adc	r19, r19
    5640:	f9 01       	movw	r30, r18
    5642:	ee 55       	subi	r30, 0x5E	; 94
    5644:	f8 4f       	sbci	r31, 0xF8	; 248
    5646:	a5 91       	lpm	r26, Z+
    5648:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    564a:	f9 01       	movw	r30, r18
    564c:	e8 57       	subi	r30, 0x78	; 120
    564e:	f8 4f       	sbci	r31, 0xF8	; 248
    5650:	25 91       	lpm	r18, Z+
    5652:	34 91       	lpm	r19, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    5654:	5f b7       	in	r21, 0x3f	; 63
                cli();
    5656:	f8 94       	cli
		*reg |= bit;
    5658:	2d 91       	ld	r18, X+
    565a:	3c 91       	ld	r19, X
    565c:	11 97       	sbiw	r26, 0x01	; 1
    565e:	24 2b       	or	r18, r20
    5660:	11 96       	adiw	r26, 0x01	; 1
    5662:	3c 93       	st	X, r19
    5664:	2e 93       	st	-X, r18
		SREG = oldSREG;
    5666:	5f bf       	out	0x3f, r21	; 63
				//pdigitals[i]->setPin(motorDrive[motorChannel-1][1]);
				pdigitals[i]->pinMode(OUTPUT);
				pdigitals[i]->digitalWrite(HIGH);
    5668:	f4 01       	movw	r30, r8
    566a:	e6 51       	subi	r30, 0x16	; 22
    566c:	ff 4f       	sbci	r31, 0xFF	; 255
    566e:	20 81       	ld	r18, Z
    5670:	31 81       	ldd	r19, Z+1	; 0x01
    5672:	f9 01       	movw	r30, r18
    5674:	e8 0f       	add	r30, r24
    5676:	f9 1f       	adc	r31, r25
	}
}

void digitalWrite(uint8_t val)
{
	uint8_t timer = digitalPinToTimer(this->pin);
    5678:	01 90       	ld	r0, Z+
    567a:	f0 81       	ld	r31, Z
    567c:	e0 2d       	mov	r30, r0
    567e:	80 81       	ld	r24, Z
    5680:	90 e0       	ldi	r25, 0x00	; 0
    5682:	fc 01       	movw	r30, r24
    5684:	ea 54       	subi	r30, 0x4A	; 74
    5686:	f9 4f       	sbci	r31, 0xF9	; 249
    5688:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(this->pin);
    568a:	fc 01       	movw	r30, r24
    568c:	e4 50       	subi	r30, 0x04	; 4
    568e:	f9 4f       	sbci	r31, 0xF9	; 249
    5690:	e4 90       	lpm	r14, Z
	uint8_t port = digitalPinToPort(this->pin);
    5692:	fc 01       	movw	r30, r24
    5694:	ee 5b       	subi	r30, 0xBE	; 190
    5696:	f8 4f       	sbci	r31, 0xF8	; 248
    5698:	d4 90       	lpm	r13, Z
	volatile uint16_t *out;

	if (port == NOT_A_PIN) return;
    569a:	dd 20       	and	r13, r13
    569c:	09 f4       	brne	.+2      	; 0x56a0 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0xe2>
    569e:	88 c0       	rjmp	.+272    	; 0x57b0 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1f2>

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    56a0:	22 23       	and	r18, r18
    56a2:	09 f4       	brne	.+2      	; 0x56a6 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0xe8>
    56a4:	67 c0       	rjmp	.+206    	; 0x5774 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1b6>

// If we detect the pin is on a timer, we may need to defuse PWM output, 
// we need to turn pin off before doing a digital write.
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    56a6:	82 2f       	mov	r24, r18
    56a8:	90 e0       	ldi	r25, 0x00	; 0
    56aa:	fc 01       	movw	r30, r24
    56ac:	31 97       	sbiw	r30, 0x01	; 1
    56ae:	e0 31       	cpi	r30, 0x10	; 16
    56b0:	f1 05       	cpc	r31, r1
    56b2:	08 f0       	brcs	.+2      	; 0x56b6 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0xf8>
    56b4:	5f c0       	rjmp	.+190    	; 0x5774 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1b6>
    56b6:	88 27       	eor	r24, r24
    56b8:	ed 50       	subi	r30, 0x0D	; 13
    56ba:	ff 4f       	sbci	r31, 0xFF	; 255
    56bc:	8f 4f       	sbci	r24, 0xFF	; 255
    56be:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
	{
		case TIMER0A: Timer0.stopChannel(CHANNEL_A); break;
    56c2:	60 e0       	ldi	r22, 0x00	; 0
    56c4:	84 e7       	ldi	r24, 0x74	; 116
    56c6:	97 e1       	ldi	r25, 0x17	; 23
    56c8:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    56cc:	53 c0       	rjmp	.+166    	; 0x5774 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1b6>
		case TIMER0B: Timer0.stopChannel(CHANNEL_B); break;
    56ce:	61 e0       	ldi	r22, 0x01	; 1
    56d0:	84 e7       	ldi	r24, 0x74	; 116
    56d2:	97 e1       	ldi	r25, 0x17	; 23
    56d4:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    56d8:	4d c0       	rjmp	.+154    	; 0x5774 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1b6>
	
		case TIMER1A: Timer1.stopChannel(CHANNEL_A); break;
    56da:	60 e0       	ldi	r22, 0x00	; 0
    56dc:	85 e4       	ldi	r24, 0x45	; 69
    56de:	97 e1       	ldi	r25, 0x17	; 23
    56e0:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    56e4:	47 c0       	rjmp	.+142    	; 0x5774 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1b6>
		case TIMER1B: Timer1.stopChannel(CHANNEL_B); break;
    56e6:	61 e0       	ldi	r22, 0x01	; 1
    56e8:	85 e4       	ldi	r24, 0x45	; 69
    56ea:	97 e1       	ldi	r25, 0x17	; 23
    56ec:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    56f0:	41 c0       	rjmp	.+130    	; 0x5774 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1b6>
		
		case TIMER2A: Timer2.stopChannel(CHANNEL_A); break;
    56f2:	60 e0       	ldi	r22, 0x00	; 0
    56f4:	86 e1       	ldi	r24, 0x16	; 22
    56f6:	97 e1       	ldi	r25, 0x17	; 23
    56f8:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    56fc:	3b c0       	rjmp	.+118    	; 0x5774 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1b6>
		case TIMER2B: Timer2.stopChannel(CHANNEL_B); break;
    56fe:	61 e0       	ldi	r22, 0x01	; 1
    5700:	86 e1       	ldi	r24, 0x16	; 22
    5702:	97 e1       	ldi	r25, 0x17	; 23
    5704:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    5708:	35 c0       	rjmp	.+106    	; 0x5774 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1b6>
	
		case TIMER3A: Timer3.stopChannel(CHANNEL_A); break;
    570a:	60 e0       	ldi	r22, 0x00	; 0
    570c:	87 ee       	ldi	r24, 0xE7	; 231
    570e:	96 e1       	ldi	r25, 0x16	; 22
    5710:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    5714:	2f c0       	rjmp	.+94     	; 0x5774 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1b6>
		case TIMER3B: Timer3.stopChannel(CHANNEL_B); break; 
    5716:	61 e0       	ldi	r22, 0x01	; 1
    5718:	87 ee       	ldi	r24, 0xE7	; 231
    571a:	96 e1       	ldi	r25, 0x16	; 22
    571c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    5720:	29 c0       	rjmp	.+82     	; 0x5774 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1b6>
		case TIMER3C: Timer3.stopChannel(CHANNEL_C); break;
    5722:	62 e0       	ldi	r22, 0x02	; 2
    5724:	87 ee       	ldi	r24, 0xE7	; 231
    5726:	96 e1       	ldi	r25, 0x16	; 22
    5728:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    572c:	23 c0       	rjmp	.+70     	; 0x5774 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1b6>
		
		case TIMER4A: Timer4.stopChannel(CHANNEL_A); break;
    572e:	60 e0       	ldi	r22, 0x00	; 0
    5730:	88 eb       	ldi	r24, 0xB8	; 184
    5732:	96 e1       	ldi	r25, 0x16	; 22
    5734:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    5738:	1d c0       	rjmp	.+58     	; 0x5774 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1b6>
		case TIMER4B: Timer4.stopChannel(CHANNEL_B); break; 
    573a:	61 e0       	ldi	r22, 0x01	; 1
    573c:	88 eb       	ldi	r24, 0xB8	; 184
    573e:	96 e1       	ldi	r25, 0x16	; 22
    5740:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    5744:	17 c0       	rjmp	.+46     	; 0x5774 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1b6>
		case TIMER4C: Timer4.stopChannel(CHANNEL_C); break;
    5746:	62 e0       	ldi	r22, 0x02	; 2
    5748:	88 eb       	ldi	r24, 0xB8	; 184
    574a:	96 e1       	ldi	r25, 0x16	; 22
    574c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    5750:	11 c0       	rjmp	.+34     	; 0x5774 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1b6>
		
		case TIMER5A: Timer5.stopChannel(CHANNEL_A); break;
    5752:	60 e0       	ldi	r22, 0x00	; 0
    5754:	89 e8       	ldi	r24, 0x89	; 137
    5756:	96 e1       	ldi	r25, 0x16	; 22
    5758:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    575c:	0b c0       	rjmp	.+22     	; 0x5774 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1b6>
		case TIMER5B: Timer5.stopChannel(CHANNEL_B); break; 
    575e:	61 e0       	ldi	r22, 0x01	; 1
    5760:	89 e8       	ldi	r24, 0x89	; 137
    5762:	96 e1       	ldi	r25, 0x16	; 22
    5764:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    5768:	05 c0       	rjmp	.+10     	; 0x5774 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1b6>
		case TIMER5C: Timer5.stopChannel(CHANNEL_C); break;
    576a:	62 e0       	ldi	r22, 0x02	; 2
    576c:	89 e8       	ldi	r24, 0x89	; 137
    576e:	96 e1       	ldi	r25, 0x16	; 22
    5770:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
	if (port == NOT_A_PIN) return;

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    5774:	ed 2d       	mov	r30, r13
    5776:	f0 e0       	ldi	r31, 0x00	; 0
    5778:	ee 0f       	add	r30, r30
    577a:	ff 1f       	adc	r31, r31
    577c:	e8 57       	subi	r30, 0x78	; 120
    577e:	f8 4f       	sbci	r31, 0xF8	; 248
    5780:	a5 91       	lpm	r26, Z+
    5782:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    5784:	2f b7       	in	r18, 0x3f	; 63
	cli();
    5786:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
    5788:	8d 91       	ld	r24, X+
    578a:	9c 91       	ld	r25, X
    578c:	11 97       	sbiw	r26, 0x01	; 1
    578e:	8e 29       	or	r24, r14
    5790:	11 96       	adiw	r26, 0x01	; 1
    5792:	9c 93       	st	X, r25
    5794:	8e 93       	st	-X, r24
	}

	SREG = oldSREG;
    5796:	2f bf       	out	0x3f, r18	; 63
				foundPin = 1;
    5798:	21 e0       	ldi	r18, 0x01	; 1
    579a:	30 e0       	ldi	r19, 0x00	; 0
    579c:	0b c0       	rjmp	.+22     	; 0x57b4 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1f6>
    579e:	2e 5f       	subi	r18, 0xFE	; 254
    57a0:	3f 4f       	sbci	r19, 0xFF	; 255
	if( MOTORSHUTDOWN )
		return 0;
	int foundPin = 0;

	// set enable pin
	for(int i = 0; i < 10; i++) {
    57a2:	24 31       	cpi	r18, 0x14	; 20
    57a4:	31 05       	cpc	r19, r1
    57a6:	09 f0       	breq	.+2      	; 0x57aa <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1ec>
    57a8:	2f cf       	rjmp	.-418    	; 0x5608 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x4a>
*/
int SplitBridgeDriver::commandMotorPower(uint8_t motorChannel, int16_t motorPower) {
	// check shutdown override
	if( MOTORSHUTDOWN )
		return 0;
	int foundPin = 0;
    57aa:	20 e0       	ldi	r18, 0x00	; 0
    57ac:	30 e0       	ldi	r19, 0x00	; 0
    57ae:	02 c0       	rjmp	.+4      	; 0x57b4 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x1f6>
	for(int i = 0; i < 10; i++) {
			if(pdigitals[i] && pdigitals[i]->pin == motorDrive[motorChannel-1][1]) {
				//pdigitals[i]->setPin(motorDrive[motorChannel-1][1]);
				pdigitals[i]->pinMode(OUTPUT);
				pdigitals[i]->digitalWrite(HIGH);
				foundPin = 1;
    57b0:	21 e0       	ldi	r18, 0x01	; 1
    57b2:	30 e0       	ldi	r19, 0x00	; 0
				break;
			}
	}
	// get mapping of channel to pin
	// see if we need to make a direction change, check array of [PWM pin][dir pin][dir]
	if( currentDirection[motorChannel-1]) { // if dir 1, we are going what we define as 'forward'
    57b4:	ef 2c       	mov	r14, r15
    57b6:	f1 2c       	mov	r15, r1
    57b8:	d1 e0       	ldi	r29, 0x01	; 1
    57ba:	ed 1a       	sub	r14, r29
    57bc:	f1 08       	sbc	r15, r1
    57be:	f4 01       	movw	r30, r8
    57c0:	ee 0d       	add	r30, r14
    57c2:	ff 1d       	adc	r31, r15
    57c4:	e3 58       	subi	r30, 0x83	; 131
    57c6:	ff 4f       	sbci	r31, 0xFF	; 255
    57c8:	80 81       	ld	r24, Z
    57ca:	88 23       	and	r24, r24
    57cc:	59 f1       	breq	.+86     	; 0x5824 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x266>
		if( motorPower < 0 ) { // and we want to go backward
    57ce:	11 23       	and	r17, r17
    57d0:	0c f0       	brlt	.+2      	; 0x57d4 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x216>
    57d2:	58 c0       	rjmp	.+176    	; 0x5884 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x2c6>
			// reverse dir, depending on default direction, we either send to PWM pin or PWM pin+1
			// default is 0 (LOW), if we changed the direction to reverse wheel rotation call the opposite dir change signal
			//defaultDirection[motorChannel-1] ? pdigitals[i]->digitalWrite(HIGH) : pdigitals[i]->digitalWrite(LOW);
			defaultDirection[motorChannel-1] ? motorDriveB[motorChannel-1][1] = 1 : motorDriveB[motorChannel-1][1] = 0;
    57d4:	f4 01       	movw	r30, r8
    57d6:	ee 0d       	add	r30, r14
    57d8:	ff 1d       	adc	r31, r15
    57da:	e9 57       	subi	r30, 0x79	; 121
    57dc:	ff 4f       	sbci	r31, 0xFF	; 255
    57de:	80 81       	ld	r24, Z
    57e0:	88 23       	and	r24, r24
    57e2:	61 f0       	breq	.+24     	; 0x57fc <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x23e>
    57e4:	f7 01       	movw	r30, r14
    57e6:	ee 0f       	add	r30, r30
    57e8:	ff 1f       	adc	r31, r31
    57ea:	ee 0f       	add	r30, r30
    57ec:	ff 1f       	adc	r31, r31
    57ee:	e8 0d       	add	r30, r8
    57f0:	f9 1d       	adc	r31, r9
    57f2:	e9 5e       	subi	r30, 0xE9	; 233
    57f4:	fe 4f       	sbci	r31, 0xFE	; 254
    57f6:	81 e0       	ldi	r24, 0x01	; 1
    57f8:	80 83       	st	Z, r24
    57fa:	0a c0       	rjmp	.+20     	; 0x5810 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x252>
    57fc:	f7 01       	movw	r30, r14
    57fe:	ee 0f       	add	r30, r30
    5800:	ff 1f       	adc	r31, r31
    5802:	ee 0f       	add	r30, r30
    5804:	ff 1f       	adc	r31, r31
    5806:	e8 0d       	add	r30, r8
    5808:	f9 1d       	adc	r31, r9
    580a:	e9 5e       	subi	r30, 0xE9	; 233
    580c:	fe 4f       	sbci	r31, 0xFE	; 254
    580e:	10 82       	st	Z, r1
			currentDirection[motorChannel-1] = 0; // set new direction value
    5810:	f4 01       	movw	r30, r8
    5812:	ee 0d       	add	r30, r14
    5814:	ff 1d       	adc	r31, r15
    5816:	e3 58       	subi	r30, 0x83	; 131
    5818:	ff 4f       	sbci	r31, 0xFF	; 255
    581a:	10 82       	st	Z, r1
			motorPower = -motorPower; // absolute val
    581c:	11 95       	neg	r17
    581e:	01 95       	neg	r16
    5820:	11 09       	sbc	r17, r1
    5822:	30 c0       	rjmp	.+96     	; 0x5884 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x2c6>
		}
	} else { // dir is 0
		if( motorPower > 0 ) { // we are going 'backward' as defined by our initial default direction and we want 'forward'
    5824:	10 16       	cp	r1, r16
    5826:	11 06       	cpc	r1, r17
    5828:	34 f5       	brge	.+76     	; 0x5876 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x2b8>
			// reverse, indicate an alteration of the input pin
			// default is 0 (HIGH), if we changed the direction to reverse wheel rotation call the opposite dir change signal
			//defaultDirection[motorChannel-1] ? pdigitals[i]->digitalWrite(LOW) : pdigitals[i]->digitalWrite(HIGH);
			defaultDirection[motorChannel-1] ? motorDriveB[motorChannel-1][1] = 0 : motorDriveB[motorChannel-1][1] = 1;
    582a:	f4 01       	movw	r30, r8
    582c:	ee 0d       	add	r30, r14
    582e:	ff 1d       	adc	r31, r15
    5830:	e9 57       	subi	r30, 0x79	; 121
    5832:	ff 4f       	sbci	r31, 0xFF	; 255
    5834:	80 81       	ld	r24, Z
    5836:	88 23       	and	r24, r24
    5838:	59 f0       	breq	.+22     	; 0x5850 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x292>
    583a:	f7 01       	movw	r30, r14
    583c:	ee 0f       	add	r30, r30
    583e:	ff 1f       	adc	r31, r31
    5840:	ee 0f       	add	r30, r30
    5842:	ff 1f       	adc	r31, r31
    5844:	e8 0d       	add	r30, r8
    5846:	f9 1d       	adc	r31, r9
    5848:	e9 5e       	subi	r30, 0xE9	; 233
    584a:	fe 4f       	sbci	r31, 0xFE	; 254
    584c:	10 82       	st	Z, r1
    584e:	0b c0       	rjmp	.+22     	; 0x5866 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x2a8>
    5850:	f7 01       	movw	r30, r14
    5852:	ee 0f       	add	r30, r30
    5854:	ff 1f       	adc	r31, r31
    5856:	ee 0f       	add	r30, r30
    5858:	ff 1f       	adc	r31, r31
    585a:	e8 0d       	add	r30, r8
    585c:	f9 1d       	adc	r31, r9
    585e:	e9 5e       	subi	r30, 0xE9	; 233
    5860:	fe 4f       	sbci	r31, 0xFE	; 254
    5862:	81 e0       	ldi	r24, 0x01	; 1
    5864:	80 83       	st	Z, r24
			currentDirection[motorChannel-1] = 1;
    5866:	f4 01       	movw	r30, r8
    5868:	ee 0d       	add	r30, r14
    586a:	ff 1d       	adc	r31, r15
    586c:	e3 58       	subi	r30, 0x83	; 131
    586e:	ff 4f       	sbci	r31, 0xFF	; 255
    5870:	81 e0       	ldi	r24, 0x01	; 1
    5872:	80 83       	st	Z, r24
    5874:	07 c0       	rjmp	.+14     	; 0x5884 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x2c6>
		} else { // backward with more backwardness
			// If less than 0 take absolute value, if zero dont play with sign
			if( motorPower ) motorPower = -motorPower;
    5876:	01 15       	cp	r16, r1
    5878:	11 05       	cpc	r17, r1
    587a:	09 f4       	brne	.+2      	; 0x587e <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x2c0>
    587c:	a7 c0       	rjmp	.+334    	; 0x59cc <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x40e>
    587e:	11 95       	neg	r17
    5880:	01 95       	neg	r16
    5882:	11 09       	sbc	r17, r1
		}
	}
	if(!foundPin) {
    5884:	23 2b       	or	r18, r19
    5886:	59 f4       	brne	.+22     	; 0x589e <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x2e0>
		return commandEmergencyStop(4);
    5888:	d4 01       	movw	r26, r8
    588a:	ed 91       	ld	r30, X+
    588c:	fc 91       	ld	r31, X
    588e:	06 80       	ldd	r0, Z+6	; 0x06
    5890:	f7 81       	ldd	r31, Z+7	; 0x07
    5892:	e0 2d       	mov	r30, r0
    5894:	64 e0       	ldi	r22, 0x04	; 4
    5896:	70 e0       	ldi	r23, 0x00	; 0
    5898:	c4 01       	movw	r24, r8
    589a:	19 95       	eicall
    589c:	9b c0       	rjmp	.+310    	; 0x59d4 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x416>
	}
	// scale motor power from 0-1000 to our 0-255 8 bit timer val
	motorPower /= 4;
    589e:	c8 01       	movw	r24, r16
    58a0:	99 23       	and	r25, r25
    58a2:	0c f4       	brge	.+2      	; 0x58a6 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x2e8>
    58a4:	03 96       	adiw	r24, 0x03	; 3
    58a6:	8c 01       	movw	r16, r24
    58a8:	15 95       	asr	r17
    58aa:	07 95       	ror	r16
    58ac:	15 95       	asr	r17
    58ae:	07 95       	ror	r16
	// scale motor power from 0-1000 to our 0-255 8 bit timer val
	if( motorPower != 0 && motorPower < minMotorPower[motorChannel-1])
    58b0:	01 15       	cp	r16, r1
    58b2:	11 05       	cpc	r17, r1
    58b4:	c1 f0       	breq	.+48     	; 0x58e6 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x328>
    58b6:	f7 01       	movw	r30, r14
    58b8:	ee 0f       	add	r30, r30
    58ba:	ff 1f       	adc	r31, r31
    58bc:	ee 0f       	add	r30, r30
    58be:	ff 1f       	adc	r31, r31
    58c0:	e8 0d       	add	r30, r8
    58c2:	f9 1d       	adc	r31, r9
    58c4:	ef 56       	subi	r30, 0x6F	; 111
    58c6:	ff 4f       	sbci	r31, 0xFF	; 255
    58c8:	80 81       	ld	r24, Z
    58ca:	91 81       	ldd	r25, Z+1	; 0x01
    58cc:	a2 81       	ldd	r26, Z+2	; 0x02
    58ce:	b3 81       	ldd	r27, Z+3	; 0x03
    58d0:	a8 01       	movw	r20, r16
    58d2:	01 2e       	mov	r0, r17
    58d4:	00 0c       	add	r0, r0
    58d6:	66 0b       	sbc	r22, r22
    58d8:	77 0b       	sbc	r23, r23
    58da:	48 17       	cp	r20, r24
    58dc:	59 07       	cpc	r21, r25
    58de:	6a 07       	cpc	r22, r26
    58e0:	7b 07       	cpc	r23, r27
    58e2:	08 f4       	brcc	.+2      	; 0x58e6 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x328>
		motorPower = minMotorPower[motorChannel-1];
    58e4:	8c 01       	movw	r16, r24
	if( motorPower > MAXMOTORPOWER ) // cap it at max
    58e6:	f4 01       	movw	r30, r8
    58e8:	ec 51       	subi	r30, 0x1C	; 28
    58ea:	ff 4f       	sbci	r31, 0xFF	; 255
    58ec:	80 81       	ld	r24, Z
    58ee:	91 81       	ldd	r25, Z+1	; 0x01
    58f0:	80 17       	cp	r24, r16
    58f2:	91 07       	cpc	r25, r17
    58f4:	0c f4       	brge	.+2      	; 0x58f8 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x33a>
    58f6:	8c 01       	movw	r16, r24
		motorPower = MAXMOTORPOWER;
	// Scale motor power if necessary and save it in channel speed array with proper sign for later use
	if( MOTORPOWERSCALE != 0 )
    58f8:	f4 01       	movw	r30, r8
    58fa:	ef 51       	subi	r30, 0x1F	; 31
    58fc:	ff 4f       	sbci	r31, 0xFF	; 255
    58fe:	60 81       	ld	r22, Z
    5900:	71 81       	ldd	r23, Z+1	; 0x01
    5902:	61 15       	cp	r22, r1
    5904:	71 05       	cpc	r23, r1
    5906:	21 f0       	breq	.+8      	; 0x5910 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x352>
		motorPower /= MOTORPOWERSCALE;
    5908:	c8 01       	movw	r24, r16
    590a:	0e 94 f2 a6 	call	0x14de4	; 0x14de4 <__divmodhi4>
    590e:	8b 01       	movw	r16, r22
	//
	// Reset encoders on new speed setting
	resetEncoders();
    5910:	c4 01       	movw	r24, r8
    5912:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <_ZN20AbstractMotorControl13resetEncodersEv>
	// If we have a linked distance sensor. check range and possibly skip
	// If we are setting power 0, we are stopping anyway
	if( !checkUltrasonicShutdown()) {
    5916:	c4 01       	movw	r24, r8
    5918:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <_ZN20AbstractMotorControl23checkUltrasonicShutdownEv>
    591c:	81 11       	cpse	r24, r1
    591e:	4b c0       	rjmp	.+150    	; 0x59b6 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x3f8>
		// find the PWM pin and get the object we set up in M3 to write to power level
		int timer_mode = 2;
		int timer_pre = motorDrive[motorChannel-1][2]; // prescale from M3
    5920:	c7 01       	movw	r24, r14
    5922:	88 0f       	add	r24, r24
    5924:	99 1f       	adc	r25, r25
    5926:	88 0f       	add	r24, r24
    5928:	99 1f       	adc	r25, r25
    592a:	88 0d       	add	r24, r8
    592c:	99 1d       	adc	r25, r9
    592e:	fc 01       	movw	r30, r24
    5930:	e2 51       	subi	r30, 0x12	; 18
    5932:	ff 4f       	sbci	r31, 0xFF	; 255
    5934:	c0 80       	ld	r12, Z
		int timer_res = motorDrive[motorChannel-1][3]; // timer resolution in bits from M3
    5936:	31 96       	adiw	r30, 0x01	; 1
    5938:	d0 80       	ld	r13, Z
		// element 0 of motorDrive has index to PWM array
		int pindex = motorDrive[motorChannel-1][0];
    593a:	f7 01       	movw	r30, r14
    593c:	fb 96       	adiw	r30, 0x3b	; 59
    593e:	ee 0f       	add	r30, r30
    5940:	ff 1f       	adc	r31, r31
    5942:	ee 0f       	add	r30, r30
    5944:	ff 1f       	adc	r31, r31
    5946:	e8 0d       	add	r30, r8
    5948:	f9 1d       	adc	r31, r9
    594a:	20 81       	ld	r18, Z
		// add the offset to the input pin, which will be 0 or 1 depending on above logic
		pindex += motorDriveB[motorChannel-1][1];
    594c:	fc 01       	movw	r30, r24
    594e:	e9 5e       	subi	r30, 0xE9	; 233
    5950:	fe 4f       	sbci	r31, 0xFE	; 254
		// writing power 0 sets mode 0 and timer turnoff
		ppwms[pindex]->init(ppwms[pindex]->pin);
    5952:	e0 80       	ld	r14, Z
    5954:	f1 2c       	mov	r15, r1
    5956:	e2 0e       	add	r14, r18
    5958:	f1 1c       	adc	r15, r1
    595a:	ee 0c       	add	r14, r14
    595c:	ff 1c       	adc	r15, r15
    595e:	54 01       	movw	r10, r8
    5960:	b8 ee       	ldi	r27, 0xE8	; 232
    5962:	ab 0e       	add	r10, r27
    5964:	b1 1c       	adc	r11, r1
    5966:	e5 01       	movw	r28, r10
    5968:	e8 81       	ld	r30, Y
    596a:	f9 81       	ldd	r31, Y+1	; 0x01
    596c:	ee 0d       	add	r30, r14
    596e:	ff 1d       	adc	r31, r15
    5970:	80 81       	ld	r24, Z
    5972:	91 81       	ldd	r25, Z+1	; 0x01
    5974:	fc 01       	movw	r30, r24
    5976:	60 81       	ld	r22, Z
    5978:	0e 94 6d a3 	call	0x146da	; 0x146da <_ZN3PWM4initEh>
		ppwms[pindex]->setPWMPrescale(timer_pre);
    597c:	e8 81       	ld	r30, Y
    597e:	f9 81       	ldd	r31, Y+1	; 0x01
    5980:	ee 0d       	add	r30, r14
    5982:	ff 1d       	adc	r31, r15
    5984:	6c 2d       	mov	r22, r12
    5986:	80 81       	ld	r24, Z
    5988:	91 81       	ldd	r25, Z+1	; 0x01
    598a:	0e 94 76 a2 	call	0x144ec	; 0x144ec <_ZN3PWM14setPWMPrescaleEh>
		ppwms[pindex]->setPWMResolution(timer_res);
    598e:	e8 81       	ld	r30, Y
    5990:	f9 81       	ldd	r31, Y+1	; 0x01
    5992:	ee 0d       	add	r30, r14
    5994:	ff 1d       	adc	r31, r15
    5996:	6d 2d       	mov	r22, r13
    5998:	80 81       	ld	r24, Z
    599a:	91 81       	ldd	r25, Z+1	; 0x01
    599c:	0e 94 54 a2 	call	0x144a8	; 0x144a8 <_ZN3PWM16setPWMResolutionEh>
		//ppwms[pindex]->attachInterrupt(motorDurationService[motorChannel-1]);// last param TRUE indicates an overflow interrupt
		ppwms[pindex]->pwmWrite(motorPower, timer_mode);
    59a0:	88 81       	ld	r24, Y
    59a2:	99 81       	ldd	r25, Y+1	; 0x01
    59a4:	fc 01       	movw	r30, r24
    59a6:	ee 0d       	add	r30, r14
    59a8:	ff 1d       	adc	r31, r15
    59aa:	42 e0       	ldi	r20, 0x02	; 2
    59ac:	b8 01       	movw	r22, r16
    59ae:	80 81       	ld	r24, Z
    59b0:	91 81       	ldd	r25, Z+1	; 0x01
    59b2:	0e 94 12 a3 	call	0x14624	; 0x14624 <_ZN3PWM8pwmWriteEjh>
	}
	fault_flag = 0;
    59b6:	e4 01       	movw	r28, r8
    59b8:	ca 51       	subi	r28, 0x1A	; 26
    59ba:	df 4f       	sbci	r29, 0xFF	; 255
    59bc:	19 82       	std	Y+1, r1	; 0x01
    59be:	18 82       	st	Y, r1
	return 0;
    59c0:	80 e0       	ldi	r24, 0x00	; 0
    59c2:	90 e0       	ldi	r25, 0x00	; 0
    59c4:	07 c0       	rjmp	.+14     	; 0x59d4 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x416>
* scale to the MOTORPOWERSCALE if > 0. After calculation and saved values in the 0-1000 range scale it to 0-255 for 8 bit PWM.
*/
int SplitBridgeDriver::commandMotorPower(uint8_t motorChannel, int16_t motorPower) {
	// check shutdown override
	if( MOTORSHUTDOWN )
		return 0;
    59c6:	80 e0       	ldi	r24, 0x00	; 0
    59c8:	90 e0       	ldi	r25, 0x00	; 0
    59ca:	04 c0       	rjmp	.+8      	; 0x59d4 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x416>
		} else { // backward with more backwardness
			// If less than 0 take absolute value, if zero dont play with sign
			if( motorPower ) motorPower = -motorPower;
		}
	}
	if(!foundPin) {
    59cc:	23 2b       	or	r18, r19
    59ce:	09 f0       	breq	.+2      	; 0x59d2 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x414>
    59d0:	8a cf       	rjmp	.-236    	; 0x58e6 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x328>
    59d2:	5a cf       	rjmp	.-332    	; 0x5888 <_ZN17SplitBridgeDriver17commandMotorPowerEhi+0x2ca>
		//ppwms[pindex]->attachInterrupt(motorDurationService[motorChannel-1]);// last param TRUE indicates an overflow interrupt
		ppwms[pindex]->pwmWrite(motorPower, timer_mode);
	}
	fault_flag = 0;
	return 0;
}
    59d4:	df 91       	pop	r29
    59d6:	cf 91       	pop	r28
    59d8:	1f 91       	pop	r17
    59da:	0f 91       	pop	r16
    59dc:	ff 90       	pop	r15
    59de:	ef 90       	pop	r14
    59e0:	df 90       	pop	r13
    59e2:	cf 90       	pop	r12
    59e4:	bf 90       	pop	r11
    59e6:	af 90       	pop	r10
    59e8:	9f 90       	pop	r9
    59ea:	8f 90       	pop	r8
    59ec:	08 95       	ret

000059ee <_ZN17SplitBridgeDriver13getDriverInfoEhPc>:

void SplitBridgeDriver::getDriverInfo(uint8_t ch, char * outStr) {
    59ee:	8f 92       	push	r8
    59f0:	9f 92       	push	r9
    59f2:	af 92       	push	r10
    59f4:	bf 92       	push	r11
    59f6:	cf 92       	push	r12
    59f8:	df 92       	push	r13
    59fa:	ef 92       	push	r14
    59fc:	ff 92       	push	r15
    59fe:	0f 93       	push	r16
    5a00:	1f 93       	push	r17
    5a02:	cf 93       	push	r28
    5a04:	df 93       	push	r29
    5a06:	cd b7       	in	r28, 0x3d	; 61
    5a08:	de b7       	in	r29, 0x3e	; 62
    5a0a:	c0 55       	subi	r28, 0x50	; 80
    5a0c:	d1 40       	sbci	r29, 0x01	; 1
    5a0e:	0f b6       	in	r0, 0x3f	; 63
    5a10:	f8 94       	cli
    5a12:	de bf       	out	0x3e, r29	; 62
    5a14:	0f be       	out	0x3f, r0	; 63
    5a16:	cd bf       	out	0x3d, r28	; 61
    5a18:	7c 01       	movw	r14, r24
    5a1a:	8a 01       	movw	r16, r20
	char dpin6[5];
	char dpin7[5];
	char dpin8[5];
	char dpin9[5];
	
	if( motorDrive[ch-1][0] == 255 ) {
    5a1c:	c6 2e       	mov	r12, r22
    5a1e:	d1 2c       	mov	r13, r1
    5a20:	56 01       	movw	r10, r12
    5a22:	81 e0       	ldi	r24, 0x01	; 1
    5a24:	a8 1a       	sub	r10, r24
    5a26:	b1 08       	sbc	r11, r1
    5a28:	cc 0c       	add	r12, r12
    5a2a:	dd 1c       	adc	r13, r13
    5a2c:	cc 0c       	add	r12, r12
    5a2e:	dd 1c       	adc	r13, r13
    5a30:	ce 0c       	add	r12, r14
    5a32:	df 1c       	adc	r13, r15
    5a34:	f6 01       	movw	r30, r12
    5a36:	e8 51       	subi	r30, 0x18	; 24
    5a38:	ff 4f       	sbci	r31, 0xFF	; 255
    5a3a:	e0 81       	ld	r30, Z
    5a3c:	ef 3f       	cpi	r30, 0xFF	; 255
    5a3e:	89 f4       	brne	.+34     	; 0x5a62 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x74>
    5a40:	4a e0       	ldi	r20, 0x0A	; 10
    5a42:	be 01       	movw	r22, r28
    5a44:	6f 5f       	subi	r22, 0xFF	; 255
    5a46:	7e 4f       	sbci	r23, 0xFE	; 254
    5a48:	8f ef       	ldi	r24, 0xFF	; 255
    5a4a:	9f ef       	ldi	r25, 0xFF	; 255
    5a4c:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    5a50:	4a e0       	ldi	r20, 0x0A	; 10
    5a52:	be 01       	movw	r22, r28
    5a54:	65 5f       	subi	r22, 0xF5	; 245
    5a56:	7e 4f       	sbci	r23, 0xFE	; 254
    5a58:	8f ef       	ldi	r24, 0xFF	; 255
    5a5a:	9f ef       	ldi	r25, 0xFF	; 255
    5a5c:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    5a60:	2e c0       	rjmp	.+92     	; 0x5abe <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0xd0>
		itoa(-1, dout1, 10);
		itoa(-1, dout3, 10);
	} else {
		itoa(ppwms[motorDrive[ch-1][0]]->pin, dout1, 10);
    5a62:	f0 e0       	ldi	r31, 0x00	; 0
    5a64:	ee 0f       	add	r30, r30
    5a66:	ff 1f       	adc	r31, r31
    5a68:	47 01       	movw	r8, r14
    5a6a:	98 ee       	ldi	r25, 0xE8	; 232
    5a6c:	89 0e       	add	r8, r25
    5a6e:	91 1c       	adc	r9, r1
    5a70:	d4 01       	movw	r26, r8
    5a72:	8d 91       	ld	r24, X+
    5a74:	9c 91       	ld	r25, X
    5a76:	e8 0f       	add	r30, r24
    5a78:	f9 1f       	adc	r31, r25
    5a7a:	01 90       	ld	r0, Z+
    5a7c:	f0 81       	ld	r31, Z
    5a7e:	e0 2d       	mov	r30, r0
    5a80:	80 81       	ld	r24, Z
    5a82:	4a e0       	ldi	r20, 0x0A	; 10
    5a84:	be 01       	movw	r22, r28
    5a86:	6f 5f       	subi	r22, 0xFF	; 255
    5a88:	7e 4f       	sbci	r23, 0xFE	; 254
    5a8a:	90 e0       	ldi	r25, 0x00	; 0
    5a8c:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(ppwms[motorDrive[ch-1][0]]->mode, dout3, 10);
    5a90:	f6 01       	movw	r30, r12
    5a92:	e8 51       	subi	r30, 0x18	; 24
    5a94:	ff 4f       	sbci	r31, 0xFF	; 255
    5a96:	e0 81       	ld	r30, Z
    5a98:	f0 e0       	ldi	r31, 0x00	; 0
    5a9a:	ee 0f       	add	r30, r30
    5a9c:	ff 1f       	adc	r31, r31
    5a9e:	d4 01       	movw	r26, r8
    5aa0:	8d 91       	ld	r24, X+
    5aa2:	9c 91       	ld	r25, X
    5aa4:	e8 0f       	add	r30, r24
    5aa6:	f9 1f       	adc	r31, r25
    5aa8:	01 90       	ld	r0, Z+
    5aaa:	f0 81       	ld	r31, Z
    5aac:	e0 2d       	mov	r30, r0
    5aae:	81 81       	ldd	r24, Z+1	; 0x01
    5ab0:	4a e0       	ldi	r20, 0x0A	; 10
    5ab2:	be 01       	movw	r22, r28
    5ab4:	65 5f       	subi	r22, 0xF5	; 245
    5ab6:	7e 4f       	sbci	r23, 0xFE	; 254
    5ab8:	90 e0       	ldi	r25, 0x00	; 0
    5aba:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
	}
	if( motorDriveB[ch-1][0] == 255 ) {
    5abe:	f5 01       	movw	r30, r10
    5ac0:	ee 0f       	add	r30, r30
    5ac2:	ff 1f       	adc	r31, r31
    5ac4:	ee 0f       	add	r30, r30
    5ac6:	ff 1f       	adc	r31, r31
    5ac8:	ee 0d       	add	r30, r14
    5aca:	ff 1d       	adc	r31, r15
    5acc:	ea 5e       	subi	r30, 0xEA	; 234
    5ace:	fe 4f       	sbci	r31, 0xFE	; 254
    5ad0:	e0 81       	ld	r30, Z
    5ad2:	ef 3f       	cpi	r30, 0xFF	; 255
    5ad4:	49 f4       	brne	.+18     	; 0x5ae8 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0xfa>
    5ad6:	4a e0       	ldi	r20, 0x0A	; 10
    5ad8:	be 01       	movw	r22, r28
    5ada:	6a 5f       	subi	r22, 0xFA	; 250
    5adc:	7e 4f       	sbci	r23, 0xFE	; 254
    5ade:	8f ef       	ldi	r24, 0xFF	; 255
    5ae0:	9f ef       	ldi	r25, 0xFF	; 255
    5ae2:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    5ae6:	15 c0       	rjmp	.+42     	; 0x5b12 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x124>
		itoa(-1, dout2, 10);
	} else {
		itoa(ppwms[motorDriveB[ch-1][0]]->pin, dout2, 10);
    5ae8:	f0 e0       	ldi	r31, 0x00	; 0
    5aea:	ee 0f       	add	r30, r30
    5aec:	ff 1f       	adc	r31, r31
    5aee:	d7 01       	movw	r26, r14
    5af0:	a8 51       	subi	r26, 0x18	; 24
    5af2:	bf 4f       	sbci	r27, 0xFF	; 255
    5af4:	8d 91       	ld	r24, X+
    5af6:	9c 91       	ld	r25, X
    5af8:	e8 0f       	add	r30, r24
    5afa:	f9 1f       	adc	r31, r25
    5afc:	01 90       	ld	r0, Z+
    5afe:	f0 81       	ld	r31, Z
    5b00:	e0 2d       	mov	r30, r0
    5b02:	80 81       	ld	r24, Z
    5b04:	4a e0       	ldi	r20, 0x0A	; 10
    5b06:	be 01       	movw	r22, r28
    5b08:	6a 5f       	subi	r22, 0xFA	; 250
    5b0a:	7e 4f       	sbci	r23, 0xFE	; 254
    5b0c:	90 e0       	ldi	r25, 0x00	; 0
    5b0e:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
	}
	itoa(motorDrive[ch-1][1], dout4, 10);
    5b12:	aa 0c       	add	r10, r10
    5b14:	bb 1c       	adc	r11, r11
    5b16:	aa 0c       	add	r10, r10
    5b18:	bb 1c       	adc	r11, r11
    5b1a:	ae 0c       	add	r10, r14
    5b1c:	bf 1c       	adc	r11, r15
    5b1e:	f5 01       	movw	r30, r10
    5b20:	e3 51       	subi	r30, 0x13	; 19
    5b22:	ff 4f       	sbci	r31, 0xFF	; 255
    5b24:	80 81       	ld	r24, Z
    5b26:	4a e0       	ldi	r20, 0x0A	; 10
    5b28:	be 01       	movw	r22, r28
    5b2a:	60 5f       	subi	r22, 0xF0	; 240
    5b2c:	7e 4f       	sbci	r23, 0xFE	; 254
    5b2e:	90 e0       	ldi	r25, 0x00	; 0
    5b30:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
	itoa(motorDrive[ch-1][2], dout5, 10);
    5b34:	f5 01       	movw	r30, r10
    5b36:	e2 51       	subi	r30, 0x12	; 18
    5b38:	ff 4f       	sbci	r31, 0xFF	; 255
    5b3a:	80 81       	ld	r24, Z
    5b3c:	4a e0       	ldi	r20, 0x0A	; 10
    5b3e:	be 01       	movw	r22, r28
    5b40:	6b 5e       	subi	r22, 0xEB	; 235
    5b42:	7e 4f       	sbci	r23, 0xFE	; 254
    5b44:	90 e0       	ldi	r25, 0x00	; 0
    5b46:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
	itoa(motorDrive[ch-1][3], dout6, 10);
    5b4a:	f5 01       	movw	r30, r10
    5b4c:	e1 51       	subi	r30, 0x11	; 17
    5b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b50:	80 81       	ld	r24, Z
    5b52:	4a e0       	ldi	r20, 0x0A	; 10
    5b54:	be 01       	movw	r22, r28
    5b56:	66 5e       	subi	r22, 0xE6	; 230
    5b58:	7e 4f       	sbci	r23, 0xFE	; 254
    5b5a:	90 e0       	ldi	r25, 0x00	; 0
    5b5c:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
	if(pdigitals[0])
    5b60:	f7 01       	movw	r30, r14
    5b62:	e6 51       	subi	r30, 0x16	; 22
    5b64:	ff 4f       	sbci	r31, 0xFF	; 255
    5b66:	01 90       	ld	r0, Z+
    5b68:	f0 81       	ld	r31, Z
    5b6a:	e0 2d       	mov	r30, r0
    5b6c:	01 90       	ld	r0, Z+
    5b6e:	f0 81       	ld	r31, Z
    5b70:	e0 2d       	mov	r30, r0
    5b72:	30 97       	sbiw	r30, 0x00	; 0
    5b74:	49 f0       	breq	.+18     	; 0x5b88 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x19a>
    5b76:	80 81       	ld	r24, Z
    5b78:	4a e0       	ldi	r20, 0x0A	; 10
    5b7a:	be 01       	movw	r22, r28
    5b7c:	61 5e       	subi	r22, 0xE1	; 225
    5b7e:	7e 4f       	sbci	r23, 0xFE	; 254
    5b80:	90 e0       	ldi	r25, 0x00	; 0
    5b82:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    5b86:	08 c0       	rjmp	.+16     	; 0x5b98 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x1aa>
    5b88:	4a e0       	ldi	r20, 0x0A	; 10
    5b8a:	be 01       	movw	r22, r28
    5b8c:	61 5e       	subi	r22, 0xE1	; 225
    5b8e:	7e 4f       	sbci	r23, 0xFE	; 254
    5b90:	80 e0       	ldi	r24, 0x00	; 0
    5b92:	90 e0       	ldi	r25, 0x00	; 0
    5b94:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[0]->pin, dpin0, 10);
	else
		itoa(0, dpin0, 10);
	if(pdigitals[1])
    5b98:	f7 01       	movw	r30, r14
    5b9a:	e6 51       	subi	r30, 0x16	; 22
    5b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b9e:	01 90       	ld	r0, Z+
    5ba0:	f0 81       	ld	r31, Z
    5ba2:	e0 2d       	mov	r30, r0
    5ba4:	02 80       	ldd	r0, Z+2	; 0x02
    5ba6:	f3 81       	ldd	r31, Z+3	; 0x03
    5ba8:	e0 2d       	mov	r30, r0
    5baa:	30 97       	sbiw	r30, 0x00	; 0
    5bac:	49 f0       	breq	.+18     	; 0x5bc0 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x1d2>
    5bae:	80 81       	ld	r24, Z
    5bb0:	4a e0       	ldi	r20, 0x0A	; 10
    5bb2:	be 01       	movw	r22, r28
    5bb4:	6c 5d       	subi	r22, 0xDC	; 220
    5bb6:	7e 4f       	sbci	r23, 0xFE	; 254
    5bb8:	90 e0       	ldi	r25, 0x00	; 0
    5bba:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    5bbe:	08 c0       	rjmp	.+16     	; 0x5bd0 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x1e2>
    5bc0:	4a e0       	ldi	r20, 0x0A	; 10
    5bc2:	be 01       	movw	r22, r28
    5bc4:	6c 5d       	subi	r22, 0xDC	; 220
    5bc6:	7e 4f       	sbci	r23, 0xFE	; 254
    5bc8:	80 e0       	ldi	r24, 0x00	; 0
    5bca:	90 e0       	ldi	r25, 0x00	; 0
    5bcc:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[1]->pin, dpin1, 10);
	else
		itoa(0, dpin1, 10);
	if(pdigitals[2])
    5bd0:	f7 01       	movw	r30, r14
    5bd2:	e6 51       	subi	r30, 0x16	; 22
    5bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    5bd6:	01 90       	ld	r0, Z+
    5bd8:	f0 81       	ld	r31, Z
    5bda:	e0 2d       	mov	r30, r0
    5bdc:	04 80       	ldd	r0, Z+4	; 0x04
    5bde:	f5 81       	ldd	r31, Z+5	; 0x05
    5be0:	e0 2d       	mov	r30, r0
    5be2:	30 97       	sbiw	r30, 0x00	; 0
    5be4:	49 f0       	breq	.+18     	; 0x5bf8 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x20a>
    5be6:	80 81       	ld	r24, Z
    5be8:	4a e0       	ldi	r20, 0x0A	; 10
    5bea:	be 01       	movw	r22, r28
    5bec:	67 5d       	subi	r22, 0xD7	; 215
    5bee:	7e 4f       	sbci	r23, 0xFE	; 254
    5bf0:	90 e0       	ldi	r25, 0x00	; 0
    5bf2:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    5bf6:	08 c0       	rjmp	.+16     	; 0x5c08 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x21a>
    5bf8:	4a e0       	ldi	r20, 0x0A	; 10
    5bfa:	be 01       	movw	r22, r28
    5bfc:	67 5d       	subi	r22, 0xD7	; 215
    5bfe:	7e 4f       	sbci	r23, 0xFE	; 254
    5c00:	80 e0       	ldi	r24, 0x00	; 0
    5c02:	90 e0       	ldi	r25, 0x00	; 0
    5c04:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[2]->pin, dpin2, 10);
	else
		itoa(0, dpin2, 10);
	if(pdigitals[3])
    5c08:	f7 01       	movw	r30, r14
    5c0a:	e6 51       	subi	r30, 0x16	; 22
    5c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c0e:	01 90       	ld	r0, Z+
    5c10:	f0 81       	ld	r31, Z
    5c12:	e0 2d       	mov	r30, r0
    5c14:	06 80       	ldd	r0, Z+6	; 0x06
    5c16:	f7 81       	ldd	r31, Z+7	; 0x07
    5c18:	e0 2d       	mov	r30, r0
    5c1a:	30 97       	sbiw	r30, 0x00	; 0
    5c1c:	49 f0       	breq	.+18     	; 0x5c30 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x242>
    5c1e:	80 81       	ld	r24, Z
    5c20:	4a e0       	ldi	r20, 0x0A	; 10
    5c22:	be 01       	movw	r22, r28
    5c24:	62 5d       	subi	r22, 0xD2	; 210
    5c26:	7e 4f       	sbci	r23, 0xFE	; 254
    5c28:	90 e0       	ldi	r25, 0x00	; 0
    5c2a:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    5c2e:	08 c0       	rjmp	.+16     	; 0x5c40 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x252>
    5c30:	4a e0       	ldi	r20, 0x0A	; 10
    5c32:	be 01       	movw	r22, r28
    5c34:	62 5d       	subi	r22, 0xD2	; 210
    5c36:	7e 4f       	sbci	r23, 0xFE	; 254
    5c38:	80 e0       	ldi	r24, 0x00	; 0
    5c3a:	90 e0       	ldi	r25, 0x00	; 0
    5c3c:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[3]->pin, dpin3, 10);
	else
		itoa(0, dpin3, 10);
	if(pdigitals[4])
    5c40:	f7 01       	movw	r30, r14
    5c42:	e6 51       	subi	r30, 0x16	; 22
    5c44:	ff 4f       	sbci	r31, 0xFF	; 255
    5c46:	01 90       	ld	r0, Z+
    5c48:	f0 81       	ld	r31, Z
    5c4a:	e0 2d       	mov	r30, r0
    5c4c:	00 84       	ldd	r0, Z+8	; 0x08
    5c4e:	f1 85       	ldd	r31, Z+9	; 0x09
    5c50:	e0 2d       	mov	r30, r0
    5c52:	30 97       	sbiw	r30, 0x00	; 0
    5c54:	49 f0       	breq	.+18     	; 0x5c68 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x27a>
    5c56:	80 81       	ld	r24, Z
    5c58:	4a e0       	ldi	r20, 0x0A	; 10
    5c5a:	be 01       	movw	r22, r28
    5c5c:	6d 5c       	subi	r22, 0xCD	; 205
    5c5e:	7e 4f       	sbci	r23, 0xFE	; 254
    5c60:	90 e0       	ldi	r25, 0x00	; 0
    5c62:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    5c66:	08 c0       	rjmp	.+16     	; 0x5c78 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x28a>
    5c68:	4a e0       	ldi	r20, 0x0A	; 10
    5c6a:	be 01       	movw	r22, r28
    5c6c:	6d 5c       	subi	r22, 0xCD	; 205
    5c6e:	7e 4f       	sbci	r23, 0xFE	; 254
    5c70:	80 e0       	ldi	r24, 0x00	; 0
    5c72:	90 e0       	ldi	r25, 0x00	; 0
    5c74:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[4]->pin, dpin4, 10);
	else
		itoa(0, dpin4, 10);
	if(pdigitals[5])
    5c78:	f7 01       	movw	r30, r14
    5c7a:	e6 51       	subi	r30, 0x16	; 22
    5c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c7e:	01 90       	ld	r0, Z+
    5c80:	f0 81       	ld	r31, Z
    5c82:	e0 2d       	mov	r30, r0
    5c84:	02 84       	ldd	r0, Z+10	; 0x0a
    5c86:	f3 85       	ldd	r31, Z+11	; 0x0b
    5c88:	e0 2d       	mov	r30, r0
    5c8a:	30 97       	sbiw	r30, 0x00	; 0
    5c8c:	49 f0       	breq	.+18     	; 0x5ca0 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x2b2>
    5c8e:	80 81       	ld	r24, Z
    5c90:	4a e0       	ldi	r20, 0x0A	; 10
    5c92:	be 01       	movw	r22, r28
    5c94:	68 5c       	subi	r22, 0xC8	; 200
    5c96:	7e 4f       	sbci	r23, 0xFE	; 254
    5c98:	90 e0       	ldi	r25, 0x00	; 0
    5c9a:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    5c9e:	08 c0       	rjmp	.+16     	; 0x5cb0 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x2c2>
    5ca0:	4a e0       	ldi	r20, 0x0A	; 10
    5ca2:	be 01       	movw	r22, r28
    5ca4:	68 5c       	subi	r22, 0xC8	; 200
    5ca6:	7e 4f       	sbci	r23, 0xFE	; 254
    5ca8:	80 e0       	ldi	r24, 0x00	; 0
    5caa:	90 e0       	ldi	r25, 0x00	; 0
    5cac:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[5]->pin, dpin5, 10);
	else
		itoa(0, dpin5, 10);
	if(pdigitals[6])
    5cb0:	f7 01       	movw	r30, r14
    5cb2:	e6 51       	subi	r30, 0x16	; 22
    5cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    5cb6:	01 90       	ld	r0, Z+
    5cb8:	f0 81       	ld	r31, Z
    5cba:	e0 2d       	mov	r30, r0
    5cbc:	04 84       	ldd	r0, Z+12	; 0x0c
    5cbe:	f5 85       	ldd	r31, Z+13	; 0x0d
    5cc0:	e0 2d       	mov	r30, r0
    5cc2:	30 97       	sbiw	r30, 0x00	; 0
    5cc4:	49 f0       	breq	.+18     	; 0x5cd8 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x2ea>
    5cc6:	80 81       	ld	r24, Z
    5cc8:	4a e0       	ldi	r20, 0x0A	; 10
    5cca:	be 01       	movw	r22, r28
    5ccc:	63 5c       	subi	r22, 0xC3	; 195
    5cce:	7e 4f       	sbci	r23, 0xFE	; 254
    5cd0:	90 e0       	ldi	r25, 0x00	; 0
    5cd2:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    5cd6:	08 c0       	rjmp	.+16     	; 0x5ce8 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x2fa>
    5cd8:	4a e0       	ldi	r20, 0x0A	; 10
    5cda:	be 01       	movw	r22, r28
    5cdc:	63 5c       	subi	r22, 0xC3	; 195
    5cde:	7e 4f       	sbci	r23, 0xFE	; 254
    5ce0:	80 e0       	ldi	r24, 0x00	; 0
    5ce2:	90 e0       	ldi	r25, 0x00	; 0
    5ce4:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[6]->pin, dpin6, 10);
	else
		itoa(0, dpin6, 10);
	if(pdigitals[7])
    5ce8:	f7 01       	movw	r30, r14
    5cea:	e6 51       	subi	r30, 0x16	; 22
    5cec:	ff 4f       	sbci	r31, 0xFF	; 255
    5cee:	01 90       	ld	r0, Z+
    5cf0:	f0 81       	ld	r31, Z
    5cf2:	e0 2d       	mov	r30, r0
    5cf4:	06 84       	ldd	r0, Z+14	; 0x0e
    5cf6:	f7 85       	ldd	r31, Z+15	; 0x0f
    5cf8:	e0 2d       	mov	r30, r0
    5cfa:	30 97       	sbiw	r30, 0x00	; 0
    5cfc:	49 f0       	breq	.+18     	; 0x5d10 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x322>
    5cfe:	80 81       	ld	r24, Z
    5d00:	4a e0       	ldi	r20, 0x0A	; 10
    5d02:	be 01       	movw	r22, r28
    5d04:	6e 5b       	subi	r22, 0xBE	; 190
    5d06:	7e 4f       	sbci	r23, 0xFE	; 254
    5d08:	90 e0       	ldi	r25, 0x00	; 0
    5d0a:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    5d0e:	08 c0       	rjmp	.+16     	; 0x5d20 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x332>
    5d10:	4a e0       	ldi	r20, 0x0A	; 10
    5d12:	be 01       	movw	r22, r28
    5d14:	6e 5b       	subi	r22, 0xBE	; 190
    5d16:	7e 4f       	sbci	r23, 0xFE	; 254
    5d18:	80 e0       	ldi	r24, 0x00	; 0
    5d1a:	90 e0       	ldi	r25, 0x00	; 0
    5d1c:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[7]->pin, dpin7, 10);
	else
		itoa(0, dpin7, 10);
	if(pdigitals[8])
    5d20:	f7 01       	movw	r30, r14
    5d22:	e6 51       	subi	r30, 0x16	; 22
    5d24:	ff 4f       	sbci	r31, 0xFF	; 255
    5d26:	01 90       	ld	r0, Z+
    5d28:	f0 81       	ld	r31, Z
    5d2a:	e0 2d       	mov	r30, r0
    5d2c:	00 88       	ldd	r0, Z+16	; 0x10
    5d2e:	f1 89       	ldd	r31, Z+17	; 0x11
    5d30:	e0 2d       	mov	r30, r0
    5d32:	30 97       	sbiw	r30, 0x00	; 0
    5d34:	49 f0       	breq	.+18     	; 0x5d48 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x35a>
    5d36:	80 81       	ld	r24, Z
    5d38:	4a e0       	ldi	r20, 0x0A	; 10
    5d3a:	be 01       	movw	r22, r28
    5d3c:	69 5b       	subi	r22, 0xB9	; 185
    5d3e:	7e 4f       	sbci	r23, 0xFE	; 254
    5d40:	90 e0       	ldi	r25, 0x00	; 0
    5d42:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    5d46:	08 c0       	rjmp	.+16     	; 0x5d58 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x36a>
    5d48:	4a e0       	ldi	r20, 0x0A	; 10
    5d4a:	be 01       	movw	r22, r28
    5d4c:	69 5b       	subi	r22, 0xB9	; 185
    5d4e:	7e 4f       	sbci	r23, 0xFE	; 254
    5d50:	80 e0       	ldi	r24, 0x00	; 0
    5d52:	90 e0       	ldi	r25, 0x00	; 0
    5d54:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[8]->pin, dpin8, 10);
	else
		itoa(0, dpin8, 10);
	if(pdigitals[9])
    5d58:	f7 01       	movw	r30, r14
    5d5a:	e6 51       	subi	r30, 0x16	; 22
    5d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d5e:	01 90       	ld	r0, Z+
    5d60:	f0 81       	ld	r31, Z
    5d62:	e0 2d       	mov	r30, r0
    5d64:	02 88       	ldd	r0, Z+18	; 0x12
    5d66:	f3 89       	ldd	r31, Z+19	; 0x13
    5d68:	e0 2d       	mov	r30, r0
    5d6a:	30 97       	sbiw	r30, 0x00	; 0
    5d6c:	49 f0       	breq	.+18     	; 0x5d80 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x392>
    5d6e:	80 81       	ld	r24, Z
    5d70:	4a e0       	ldi	r20, 0x0A	; 10
    5d72:	be 01       	movw	r22, r28
    5d74:	64 5b       	subi	r22, 0xB4	; 180
    5d76:	7e 4f       	sbci	r23, 0xFE	; 254
    5d78:	90 e0       	ldi	r25, 0x00	; 0
    5d7a:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    5d7e:	08 c0       	rjmp	.+16     	; 0x5d90 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x3a2>
    5d80:	4a e0       	ldi	r20, 0x0A	; 10
    5d82:	be 01       	movw	r22, r28
    5d84:	64 5b       	subi	r22, 0xB4	; 180
    5d86:	7e 4f       	sbci	r23, 0xFE	; 254
    5d88:	80 e0       	ldi	r24, 0x00	; 0
    5d8a:	90 e0       	ldi	r25, 0x00	; 0
    5d8c:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[9]->pin, dpin9, 10);
	else
		itoa(0, dpin9, 10);
	if( motorDrive[ch-1][0] == 255 ) {
    5d90:	f6 01       	movw	r30, r12
    5d92:	e8 51       	subi	r30, 0x18	; 24
    5d94:	ff 4f       	sbci	r31, 0xFF	; 255
    5d96:	80 81       	ld	r24, Z
    5d98:	8f 3f       	cpi	r24, 0xFF	; 255
    5d9a:	09 f0       	breq	.+2      	; 0x5d9e <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x3b0>
    5d9c:	42 c0       	rjmp	.+132    	; 0x5e22 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x434>
		sprintf(cout,"SB-PWM CHANNEL UNITIALIZED PinA:%s, PWM PinB:%s, Mode:%s, Enable Pin:%s, Timer Prescale:%s, Timer Res.:%s\r\nDir Pins:0=%s,1=%s,2=%s,3=%s,4=%s,5=%s,6=%s,7=%s,8=%s,9=%s\0",
			dout1, dout2, dout3, dout4, dout5, dout6, dpin0, dpin1, dpin2, dpin3, dpin4, dpin5, dpin6, dpin7, dpin8, dpin9);
    5d9e:	ce 01       	movw	r24, r28
    5da0:	84 5b       	subi	r24, 0xB4	; 180
    5da2:	9e 4f       	sbci	r25, 0xFE	; 254
    5da4:	9f 93       	push	r25
    5da6:	8f 93       	push	r24
    5da8:	05 97       	sbiw	r24, 0x05	; 5
    5daa:	9f 93       	push	r25
    5dac:	8f 93       	push	r24
    5dae:	05 97       	sbiw	r24, 0x05	; 5
    5db0:	9f 93       	push	r25
    5db2:	8f 93       	push	r24
    5db4:	05 97       	sbiw	r24, 0x05	; 5
    5db6:	9f 93       	push	r25
    5db8:	8f 93       	push	r24
    5dba:	05 97       	sbiw	r24, 0x05	; 5
    5dbc:	9f 93       	push	r25
    5dbe:	8f 93       	push	r24
    5dc0:	05 97       	sbiw	r24, 0x05	; 5
    5dc2:	9f 93       	push	r25
    5dc4:	8f 93       	push	r24
    5dc6:	05 97       	sbiw	r24, 0x05	; 5
    5dc8:	9f 93       	push	r25
    5dca:	8f 93       	push	r24
    5dcc:	05 97       	sbiw	r24, 0x05	; 5
    5dce:	9f 93       	push	r25
    5dd0:	8f 93       	push	r24
    5dd2:	05 97       	sbiw	r24, 0x05	; 5
    5dd4:	9f 93       	push	r25
    5dd6:	8f 93       	push	r24
    5dd8:	05 97       	sbiw	r24, 0x05	; 5
    5dda:	9f 93       	push	r25
    5ddc:	8f 93       	push	r24
    5dde:	05 97       	sbiw	r24, 0x05	; 5
    5de0:	9f 93       	push	r25
    5de2:	8f 93       	push	r24
    5de4:	05 97       	sbiw	r24, 0x05	; 5
    5de6:	9f 93       	push	r25
    5de8:	8f 93       	push	r24
    5dea:	05 97       	sbiw	r24, 0x05	; 5
    5dec:	9f 93       	push	r25
    5dee:	8f 93       	push	r24
    5df0:	05 97       	sbiw	r24, 0x05	; 5
    5df2:	9f 93       	push	r25
    5df4:	8f 93       	push	r24
    5df6:	05 97       	sbiw	r24, 0x05	; 5
    5df8:	9f 93       	push	r25
    5dfa:	8f 93       	push	r24
    5dfc:	05 97       	sbiw	r24, 0x05	; 5
    5dfe:	9f 93       	push	r25
    5e00:	8f 93       	push	r24
    5e02:	89 ea       	ldi	r24, 0xA9	; 169
    5e04:	93 e0       	ldi	r25, 0x03	; 3
    5e06:	9f 93       	push	r25
    5e08:	8f 93       	push	r24
    5e0a:	ce 01       	movw	r24, r28
    5e0c:	01 96       	adiw	r24, 0x01	; 1
    5e0e:	9f 93       	push	r25
    5e10:	8f 93       	push	r24
    5e12:	0e 94 6f ac 	call	0x158de	; 0x158de <sprintf>
    5e16:	0f b6       	in	r0, 0x3f	; 63
    5e18:	f8 94       	cli
    5e1a:	de bf       	out	0x3e, r29	; 62
    5e1c:	0f be       	out	0x3f, r0	; 63
    5e1e:	cd bf       	out	0x3d, r28	; 61
    5e20:	4a c0       	rjmp	.+148    	; 0x5eb6 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x4c8>
	} else {
		sprintf(cout,"SB-PWM PinA:%s, PWM PinB:%s, Mode:%s, Enable Pin:%s, Timer Prescale:%s, Timer Res.:%s\r\nDir Pins:0=%s,1=%s,2=%s,3=%s,4=%s,5=%s,6=%s,7=%s,8=%s,9=%s\0",
			dout1, dout2, dout3, dout4, dout5, dout6, dpin0, dpin1, dpin2, dpin3, dpin4, dpin5, dpin6, dpin7, dpin8, dpin9);
    5e22:	ce 01       	movw	r24, r28
    5e24:	84 5b       	subi	r24, 0xB4	; 180
    5e26:	9e 4f       	sbci	r25, 0xFE	; 254
    5e28:	9f 93       	push	r25
    5e2a:	8f 93       	push	r24
    5e2c:	05 97       	sbiw	r24, 0x05	; 5
    5e2e:	9f 93       	push	r25
    5e30:	8f 93       	push	r24
    5e32:	05 97       	sbiw	r24, 0x05	; 5
    5e34:	9f 93       	push	r25
    5e36:	8f 93       	push	r24
    5e38:	05 97       	sbiw	r24, 0x05	; 5
    5e3a:	9f 93       	push	r25
    5e3c:	8f 93       	push	r24
    5e3e:	05 97       	sbiw	r24, 0x05	; 5
    5e40:	9f 93       	push	r25
    5e42:	8f 93       	push	r24
    5e44:	05 97       	sbiw	r24, 0x05	; 5
    5e46:	9f 93       	push	r25
    5e48:	8f 93       	push	r24
    5e4a:	05 97       	sbiw	r24, 0x05	; 5
    5e4c:	9f 93       	push	r25
    5e4e:	8f 93       	push	r24
    5e50:	05 97       	sbiw	r24, 0x05	; 5
    5e52:	9f 93       	push	r25
    5e54:	8f 93       	push	r24
    5e56:	05 97       	sbiw	r24, 0x05	; 5
    5e58:	9f 93       	push	r25
    5e5a:	8f 93       	push	r24
    5e5c:	05 97       	sbiw	r24, 0x05	; 5
    5e5e:	9f 93       	push	r25
    5e60:	8f 93       	push	r24
    5e62:	05 97       	sbiw	r24, 0x05	; 5
    5e64:	9f 93       	push	r25
    5e66:	8f 93       	push	r24
    5e68:	05 97       	sbiw	r24, 0x05	; 5
    5e6a:	9f 93       	push	r25
    5e6c:	8f 93       	push	r24
    5e6e:	05 97       	sbiw	r24, 0x05	; 5
    5e70:	9f 93       	push	r25
    5e72:	8f 93       	push	r24
    5e74:	05 97       	sbiw	r24, 0x05	; 5
    5e76:	9f 93       	push	r25
    5e78:	8f 93       	push	r24
    5e7a:	05 97       	sbiw	r24, 0x05	; 5
    5e7c:	9f 93       	push	r25
    5e7e:	8f 93       	push	r24
    5e80:	05 97       	sbiw	r24, 0x05	; 5
    5e82:	9f 93       	push	r25
    5e84:	8f 93       	push	r24
    5e86:	80 e5       	ldi	r24, 0x50	; 80
    5e88:	94 e0       	ldi	r25, 0x04	; 4
    5e8a:	9f 93       	push	r25
    5e8c:	8f 93       	push	r24
    5e8e:	ce 01       	movw	r24, r28
    5e90:	01 96       	adiw	r24, 0x01	; 1
    5e92:	9f 93       	push	r25
    5e94:	8f 93       	push	r24
    5e96:	0e 94 6f ac 	call	0x158de	; 0x158de <sprintf>
    5e9a:	0f b6       	in	r0, 0x3f	; 63
    5e9c:	f8 94       	cli
    5e9e:	de bf       	out	0x3e, r29	; 62
    5ea0:	0f be       	out	0x3f, r0	; 63
    5ea2:	cd bf       	out	0x3d, r28	; 61
    5ea4:	08 c0       	rjmp	.+16     	; 0x5eb6 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x4c8>
	}
	for(int i=0; i < OUT_BUFFER_SIZE; ++i){
		 outStr[i] = cout[i];
    5ea6:	81 91       	ld	r24, Z+
    5ea8:	8d 93       	st	X+, r24
		 if(!outStr[i])
    5eaa:	88 23       	and	r24, r24
    5eac:	81 f0       	breq	.+32     	; 0x5ece <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x4e0>
			dout1, dout2, dout3, dout4, dout5, dout6, dpin0, dpin1, dpin2, dpin3, dpin4, dpin5, dpin6, dpin7, dpin8, dpin9);
	} else {
		sprintf(cout,"SB-PWM PinA:%s, PWM PinB:%s, Mode:%s, Enable Pin:%s, Timer Prescale:%s, Timer Res.:%s\r\nDir Pins:0=%s,1=%s,2=%s,3=%s,4=%s,5=%s,6=%s,7=%s,8=%s,9=%s\0",
			dout1, dout2, dout3, dout4, dout5, dout6, dpin0, dpin1, dpin2, dpin3, dpin4, dpin5, dpin6, dpin7, dpin8, dpin9);
	}
	for(int i=0; i < OUT_BUFFER_SIZE; ++i){
    5eae:	e2 17       	cp	r30, r18
    5eb0:	f3 07       	cpc	r31, r19
    5eb2:	c9 f7       	brne	.-14     	; 0x5ea6 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x4b8>
    5eb4:	0c c0       	rjmp	.+24     	; 0x5ece <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x4e0>
		 outStr[i] = cout[i];
    5eb6:	89 81       	ldd	r24, Y+1	; 0x01
    5eb8:	d8 01       	movw	r26, r16
    5eba:	8c 93       	st	X, r24
		 if(!outStr[i])
    5ebc:	88 23       	and	r24, r24
    5ebe:	39 f0       	breq	.+14     	; 0x5ece <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x4e0>
    5ec0:	fe 01       	movw	r30, r28
    5ec2:	32 96       	adiw	r30, 0x02	; 2
    5ec4:	11 96       	adiw	r26, 0x01	; 1
    5ec6:	9e 01       	movw	r18, r28
    5ec8:	2f 5f       	subi	r18, 0xFF	; 255
    5eca:	3e 4f       	sbci	r19, 0xFE	; 254
    5ecc:	ec cf       	rjmp	.-40     	; 0x5ea6 <_ZN17SplitBridgeDriver13getDriverInfoEhPc+0x4b8>
			break;
	 }
}
    5ece:	c0 5b       	subi	r28, 0xB0	; 176
    5ed0:	de 4f       	sbci	r29, 0xFE	; 254
    5ed2:	0f b6       	in	r0, 0x3f	; 63
    5ed4:	f8 94       	cli
    5ed6:	de bf       	out	0x3e, r29	; 62
    5ed8:	0f be       	out	0x3f, r0	; 63
    5eda:	cd bf       	out	0x3d, r28	; 61
    5edc:	df 91       	pop	r29
    5ede:	cf 91       	pop	r28
    5ee0:	1f 91       	pop	r17
    5ee2:	0f 91       	pop	r16
    5ee4:	ff 90       	pop	r15
    5ee6:	ef 90       	pop	r14
    5ee8:	df 90       	pop	r13
    5eea:	cf 90       	pop	r12
    5eec:	bf 90       	pop	r11
    5eee:	af 90       	pop	r10
    5ef0:	9f 90       	pop	r9
    5ef2:	8f 90       	pop	r8
    5ef4:	08 95       	ret

00005ef6 <_ZN17SplitBridgeDriver9createPWMEhhhhhii>:
* enb_pin - the enable pin for this channel
* dir_default - the default direction the motor starts in
* timer_pre - timer prescale default 1 = no prescale
* timer_res - timer resolution in bits - default 8
*/
void SplitBridgeDriver::createPWM(uint8_t channel, uint8_t pin_numberA, uint8_t pin_numberB, uint8_t enable_pin, uint8_t dir_default, int timer_pre, int timer_res) {
    5ef6:	6f 92       	push	r6
    5ef8:	7f 92       	push	r7
    5efa:	8f 92       	push	r8
    5efc:	9f 92       	push	r9
    5efe:	af 92       	push	r10
    5f00:	cf 92       	push	r12
    5f02:	df 92       	push	r13
    5f04:	ef 92       	push	r14
    5f06:	ff 92       	push	r15
    5f08:	0f 93       	push	r16
    5f0a:	1f 93       	push	r17
    5f0c:	cf 93       	push	r28
    5f0e:	df 93       	push	r29
    5f10:	ec 01       	movw	r28, r24
    5f12:	16 2f       	mov	r17, r22
    5f14:	f4 2e       	mov	r15, r20
    5f16:	d2 2e       	mov	r13, r18
	// Attempt to assign PWM pin, lock to 8 bits no prescale, mode 2 CTC
	if( getChannels() < channel ) setChannels(channel);
    5f18:	8a 81       	ldd	r24, Y+2	; 0x02
    5f1a:	86 17       	cp	r24, r22
    5f1c:	08 f4       	brcc	.+2      	; 0x5f20 <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x2a>
    5f1e:	6a 83       	std	Y+2, r22	; 0x02
	if( assignPin(pin_numberA) && assignPin(pin_numberB)) {
    5f20:	8f 2d       	mov	r24, r15
    5f22:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_Z9assignPinh>
    5f26:	88 23       	and	r24, r24
    5f28:	09 f4       	brne	.+2      	; 0x5f2c <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x36>
    5f2a:	0e c1       	rjmp	.+540    	; 0x6148 <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x252>
    5f2c:	8d 2d       	mov	r24, r13
    5f2e:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_Z9assignPinh>
    5f32:	88 23       	and	r24, r24
    5f34:	09 f4       	brne	.+2      	; 0x5f38 <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x42>
    5f36:	08 c1       	rjmp	.+528    	; 0x6148 <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x252>
		// Set up the digital direction pin
		int foundPin = 0;
			// Set up the digital enable pin, we want to be able to re-use these pins for multiple channels on 1 controller
			if( assignPin(enable_pin) ) {
    5f38:	80 2f       	mov	r24, r16
    5f3a:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_Z9assignPinh>
    5f3e:	81 11       	cpse	r24, r1
    5f40:	0c c0       	rjmp	.+24     	; 0x5f5a <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x64>
					delete dpin;
					return; // no slots?
				}
			} else { // cant assign, it may be already assigned
				for(int i = 0; i < 10; i++) {
					if(pdigitals[i]->pin == enable_pin) {
    5f42:	fe 01       	movw	r30, r28
    5f44:	e6 51       	subi	r30, 0x16	; 22
    5f46:	ff 4f       	sbci	r31, 0xFF	; 255
    5f48:	a0 81       	ld	r26, Z
    5f4a:	b1 81       	ldd	r27, Z+1	; 0x01
    5f4c:	ed 91       	ld	r30, X+
    5f4e:	fc 91       	ld	r31, X
    5f50:	11 97       	sbiw	r26, 0x01	; 1
    5f52:	80 81       	ld	r24, Z
    5f54:	08 13       	cpse	r16, r24
    5f56:	3c c0       	rjmp	.+120    	; 0x5fd0 <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0xda>
    5f58:	49 c0       	rjmp	.+146    	; 0x5fec <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0xf6>
	if( assignPin(pin_numberA) && assignPin(pin_numberB)) {
		// Set up the digital direction pin
		int foundPin = 0;
			// Set up the digital enable pin, we want to be able to re-use these pins for multiple channels on 1 controller
			if( assignPin(enable_pin) ) {
				Digital* dpin = new Digital(enable_pin);
    5f5a:	82 e0       	ldi	r24, 0x02	; 2
    5f5c:	90 e0       	ldi	r25, 0x00	; 0
    5f5e:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
class Digital {
	public:
	uint8_t pin;
	uint8_t mode = INPUT; // default
	Digital(uint8_t spin) {
		this->pin = spin;
    5f62:	fc 01       	movw	r30, r24
    5f64:	00 83       	st	Z, r16
	}
	
void setPin(uint8_t spin) { this->pin = spin; }
	
void pinMode(uint8_t pmode) {
	this->mode = pmode;
    5f66:	21 e0       	ldi	r18, 0x01	; 1
    5f68:	21 83       	std	Z+1, r18	; 0x01
	uint8_t bit = digitalPinToBitMask(this->pin);
    5f6a:	20 2f       	mov	r18, r16
    5f6c:	30 e0       	ldi	r19, 0x00	; 0
    5f6e:	f9 01       	movw	r30, r18
    5f70:	e4 50       	subi	r30, 0x04	; 4
    5f72:	f9 4f       	sbci	r31, 0xF9	; 249
    5f74:	44 91       	lpm	r20, Z
	uint8_t port = digitalPinToPort(this->pin);
    5f76:	f9 01       	movw	r30, r18
    5f78:	ee 5b       	subi	r30, 0xBE	; 190
    5f7a:	f8 4f       	sbci	r31, 0xF8	; 248
    5f7c:	24 91       	lpm	r18, Z
	volatile uint16_t *reg, *out;

	if (port == NOT_A_PIN) return;
    5f7e:	22 23       	and	r18, r18
    5f80:	09 f4       	brne	.+2      	; 0x5f84 <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x8e>
    5f82:	c8 c0       	rjmp	.+400    	; 0x6114 <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x21e>

	reg = portModeRegister(port);
    5f84:	30 e0       	ldi	r19, 0x00	; 0
    5f86:	22 0f       	add	r18, r18
    5f88:	33 1f       	adc	r19, r19
    5f8a:	f9 01       	movw	r30, r18
    5f8c:	ee 55       	subi	r30, 0x5E	; 94
    5f8e:	f8 4f       	sbci	r31, 0xF8	; 248
    5f90:	a5 91       	lpm	r26, Z+
    5f92:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    5f94:	28 57       	subi	r18, 0x78	; 120
    5f96:	38 4f       	sbci	r19, 0xF8	; 248
    5f98:	f9 01       	movw	r30, r18
    5f9a:	25 91       	lpm	r18, Z+
    5f9c:	34 91       	lpm	r19, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    5f9e:	5f b7       	in	r21, 0x3f	; 63
                cli();
    5fa0:	f8 94       	cli
		*reg |= bit;
    5fa2:	2d 91       	ld	r18, X+
    5fa4:	3c 91       	ld	r19, X
    5fa6:	11 97       	sbiw	r26, 0x01	; 1
    5fa8:	24 2b       	or	r18, r20
    5faa:	11 96       	adiw	r26, 0x01	; 1
    5fac:	3c 93       	st	X, r19
    5fae:	2e 93       	st	-X, r18
		SREG = oldSREG;
    5fb0:	5f bf       	out	0x3f, r21	; 63
    5fb2:	b0 c0       	rjmp	.+352    	; 0x6114 <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x21e>
				dpin->pinMode(OUTPUT);
				for(int i = 0; i < 10; i++) {
					if(!pdigitals[i]) {
    5fb4:	f9 01       	movw	r30, r18
    5fb6:	2e 5f       	subi	r18, 0xFE	; 254
    5fb8:	3f 4f       	sbci	r19, 0xFF	; 255
    5fba:	40 81       	ld	r20, Z
    5fbc:	51 81       	ldd	r21, Z+1	; 0x01
    5fbe:	45 2b       	or	r20, r21
    5fc0:	19 f4       	brne	.+6      	; 0x5fc8 <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0xd2>
						pdigitals[i] = dpin;
    5fc2:	91 83       	std	Z+1, r25	; 0x01
    5fc4:	80 83       	st	Z, r24
    5fc6:	12 c0       	rjmp	.+36     	; 0x5fec <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0xf6>
		int foundPin = 0;
			// Set up the digital enable pin, we want to be able to re-use these pins for multiple channels on 1 controller
			if( assignPin(enable_pin) ) {
				Digital* dpin = new Digital(enable_pin);
				dpin->pinMode(OUTPUT);
				for(int i = 0; i < 10; i++) {
    5fc8:	62 17       	cp	r22, r18
    5fca:	73 07       	cpc	r23, r19
    5fcc:	99 f7       	brne	.-26     	; 0x5fb4 <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0xbe>
    5fce:	b4 c0       	rjmp	.+360    	; 0x6138 <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x242>
    5fd0:	fd 01       	movw	r30, r26
    5fd2:	32 96       	adiw	r30, 0x02	; 2
    5fd4:	9d 01       	movw	r18, r26
    5fd6:	2c 5e       	subi	r18, 0xEC	; 236
    5fd8:	3f 4f       	sbci	r19, 0xFF	; 255
					delete dpin;
					return; // no slots?
				}
			} else { // cant assign, it may be already assigned
				for(int i = 0; i < 10; i++) {
					if(pdigitals[i]->pin == enable_pin) {
    5fda:	a1 91       	ld	r26, Z+
    5fdc:	b1 91       	ld	r27, Z+
    5fde:	8c 91       	ld	r24, X
    5fe0:	08 17       	cp	r16, r24
    5fe2:	21 f0       	breq	.+8      	; 0x5fec <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0xf6>
				if(!foundPin) {
					delete dpin;
					return; // no slots?
				}
			} else { // cant assign, it may be already assigned
				for(int i = 0; i < 10; i++) {
    5fe4:	2e 17       	cp	r18, r30
    5fe6:	3f 07       	cpc	r19, r31
    5fe8:	c1 f7       	brne	.-16     	; 0x5fda <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0xe4>
    5fea:	ae c0       	rjmp	.+348    	; 0x6148 <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x252>
				}
			}
		
			int pindex;
			for(pindex = 0; pindex < 9; pindex++) {
				if( !ppwms[pindex] && !ppwms[pindex+1])
    5fec:	fe 01       	movw	r30, r28
    5fee:	e8 51       	subi	r30, 0x18	; 24
    5ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ff2:	a0 81       	ld	r26, Z
    5ff4:	b1 81       	ldd	r27, Z+1	; 0x01
    5ff6:	fd 01       	movw	r30, r26
					return; // slots full...
				}
			}
		
			int pindex;
			for(pindex = 0; pindex < 9; pindex++) {
    5ff8:	60 e0       	ldi	r22, 0x00	; 0
    5ffa:	70 e0       	ldi	r23, 0x00	; 0
				if( !ppwms[pindex] && !ppwms[pindex+1])
    5ffc:	81 91       	ld	r24, Z+
    5ffe:	91 91       	ld	r25, Z+
    6000:	89 2b       	or	r24, r25
    6002:	29 f4       	brne	.+10     	; 0x600e <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x118>
    6004:	80 81       	ld	r24, Z
    6006:	91 81       	ldd	r25, Z+1	; 0x01
    6008:	89 2b       	or	r24, r25
    600a:	09 f4       	brne	.+2      	; 0x600e <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x118>
    600c:	98 c0       	rjmp	.+304    	; 0x613e <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x248>
					return; // slots full...
				}
			}
		
			int pindex;
			for(pindex = 0; pindex < 9; pindex++) {
    600e:	6f 5f       	subi	r22, 0xFF	; 255
    6010:	7f 4f       	sbci	r23, 0xFF	; 255
    6012:	69 30       	cpi	r22, 0x09	; 9
    6014:	71 05       	cpc	r23, r1
    6016:	91 f7       	brne	.-28     	; 0x5ffc <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x106>
				if( !ppwms[pindex] && !ppwms[pindex+1])
				break;
			}
			if( ppwms[pindex] || ppwms[pindex+1])
    6018:	52 96       	adiw	r26, 0x12	; 18
    601a:	8d 91       	ld	r24, X+
    601c:	9c 91       	ld	r25, X
    601e:	53 97       	sbiw	r26, 0x13	; 19
    6020:	89 2b       	or	r24, r25
    6022:	09 f0       	breq	.+2      	; 0x6026 <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x130>
    6024:	91 c0       	rjmp	.+290    	; 0x6148 <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x252>
    6026:	0f 2e       	mov	r0, r31
    6028:	f2 e1       	ldi	r31, 0x12	; 18
    602a:	6f 2e       	mov	r6, r31
    602c:	71 2c       	mov	r7, r1
    602e:	f0 2d       	mov	r31, r0
    6030:	89 e0       	ldi	r24, 0x09	; 9
    6032:	90 e0       	ldi	r25, 0x00	; 0
    6034:	4c 01       	movw	r8, r24
    6036:	ff ef       	ldi	r31, 0xFF	; 255
    6038:	8f 1a       	sub	r8, r31
    603a:	9f 0a       	sbc	r9, r31
    603c:	88 0c       	add	r8, r8
    603e:	99 1c       	adc	r9, r9
    6040:	a8 0d       	add	r26, r8
    6042:	b9 1d       	adc	r27, r9
    6044:	8d 91       	ld	r24, X+
    6046:	9c 91       	ld	r25, X
    6048:	89 2b       	or	r24, r25
    604a:	09 f0       	breq	.+2      	; 0x604e <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x158>
    604c:	7d c0       	rjmp	.+250    	; 0x6148 <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x252>
				return;
			currentDirection[channel-1] = dir_default;
    604e:	21 2f       	mov	r18, r17
    6050:	30 e0       	ldi	r19, 0x00	; 0
    6052:	c9 01       	movw	r24, r18
    6054:	01 97       	sbiw	r24, 0x01	; 1
    6056:	ae 01       	movw	r20, r28
    6058:	48 0f       	add	r20, r24
    605a:	59 1f       	adc	r21, r25
    605c:	fa 01       	movw	r30, r20
    605e:	e3 58       	subi	r30, 0x83	; 131
    6060:	ff 4f       	sbci	r31, 0xFF	; 255
    6062:	e0 82       	st	Z, r14
			defaultDirection[channel-1] = dir_default;
    6064:	3a 96       	adiw	r30, 0x0a	; 10
    6066:	e0 82       	st	Z, r14
    6068:	22 0f       	add	r18, r18
    606a:	33 1f       	adc	r19, r19
    606c:	22 0f       	add	r18, r18
    606e:	33 1f       	adc	r19, r19
    6070:	2c 0f       	add	r18, r28
    6072:	3d 1f       	adc	r19, r29
			
			motorDrive[channel-1][0] = pindex;
    6074:	f9 01       	movw	r30, r18
    6076:	e8 51       	subi	r30, 0x18	; 24
    6078:	ff 4f       	sbci	r31, 0xFF	; 255
    607a:	60 83       	st	Z, r22
			motorDrive[channel-1][1] = enable_pin;
    607c:	88 0f       	add	r24, r24
    607e:	99 1f       	adc	r25, r25
    6080:	88 0f       	add	r24, r24
    6082:	99 1f       	adc	r25, r25
    6084:	8c 0f       	add	r24, r28
    6086:	9d 1f       	adc	r25, r29
    6088:	fc 01       	movw	r30, r24
    608a:	e3 51       	subi	r30, 0x13	; 19
    608c:	ff 4f       	sbci	r31, 0xFF	; 255
    608e:	00 83       	st	Z, r16
			motorDrive[channel-1][2] = timer_pre;
    6090:	31 96       	adiw	r30, 0x01	; 1
    6092:	c0 82       	st	Z, r12
			motorDrive[channel-1][3] = timer_res;
    6094:	31 96       	adiw	r30, 0x01	; 1
    6096:	a0 82       	st	Z, r10
			//
			motorDriveB[channel-1][0] = pindex+1;
    6098:	b7 96       	adiw	r30, 0x27	; 39
    609a:	6f 5f       	subi	r22, 0xFF	; 255
    609c:	60 83       	st	Z, r22
			// determines which input pin PWM signal goes to, motorDrive[0] or motorDriveB[0], which is at pindex, or pindex+1 in ppwms
			motorDriveB[channel-1][1] = dir_default;
    609e:	31 96       	adiw	r30, 0x01	; 1
    60a0:	e0 82       	st	Z, r14
			motorDriveB[channel-1][2] = timer_pre;
    60a2:	f9 01       	movw	r30, r18
    60a4:	ec 5e       	subi	r30, 0xEC	; 236
    60a6:	fe 4f       	sbci	r31, 0xFE	; 254
    60a8:	c0 82       	st	Z, r12
			motorDriveB[channel-1][3] = timer_res;
    60aa:	fc 01       	movw	r30, r24
    60ac:	e7 5e       	subi	r30, 0xE7	; 231
    60ae:	fe 4f       	sbci	r31, 0xFE	; 254
    60b0:	a0 82       	st	Z, r10
			PWM* ppinA = new PWM(pin_numberA);
    60b2:	87 e0       	ldi	r24, 0x07	; 7
    60b4:	90 e0       	ldi	r25, 0x00	; 0
    60b6:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    60ba:	8c 01       	movw	r16, r24
    60bc:	6f 2d       	mov	r22, r15
    60be:	0e 94 64 a3 	call	0x146c8	; 0x146c8 <_ZN3PWMC1Eh>
			ppwms[pindex] = ppinA;
    60c2:	c8 51       	subi	r28, 0x18	; 24
    60c4:	df 4f       	sbci	r29, 0xFF	; 255
    60c6:	e8 81       	ld	r30, Y
    60c8:	f9 81       	ldd	r31, Y+1	; 0x01
    60ca:	e6 0d       	add	r30, r6
    60cc:	f7 1d       	adc	r31, r7
    60ce:	11 83       	std	Z+1, r17	; 0x01
    60d0:	00 83       	st	Z, r16
			ppwms[pindex]->init(pin_numberA);
    60d2:	e8 81       	ld	r30, Y
    60d4:	f9 81       	ldd	r31, Y+1	; 0x01
    60d6:	e6 0d       	add	r30, r6
    60d8:	f7 1d       	adc	r31, r7
    60da:	6f 2d       	mov	r22, r15
    60dc:	80 81       	ld	r24, Z
    60de:	91 81       	ldd	r25, Z+1	; 0x01
    60e0:	0e 94 6d a3 	call	0x146da	; 0x146da <_ZN3PWM4initEh>
			PWM* ppinB = new PWM(pin_numberB);
    60e4:	87 e0       	ldi	r24, 0x07	; 7
    60e6:	90 e0       	ldi	r25, 0x00	; 0
    60e8:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    60ec:	8c 01       	movw	r16, r24
    60ee:	6d 2d       	mov	r22, r13
    60f0:	0e 94 64 a3 	call	0x146c8	; 0x146c8 <_ZN3PWMC1Eh>
			ppwms[pindex+1] = ppinB;
    60f4:	e8 81       	ld	r30, Y
    60f6:	f9 81       	ldd	r31, Y+1	; 0x01
    60f8:	e8 0d       	add	r30, r8
    60fa:	f9 1d       	adc	r31, r9
    60fc:	11 83       	std	Z+1, r17	; 0x01
    60fe:	00 83       	st	Z, r16
			ppwms[pindex+1]->init(pin_numberB);
    6100:	e8 81       	ld	r30, Y
    6102:	f9 81       	ldd	r31, Y+1	; 0x01
    6104:	e8 0d       	add	r30, r8
    6106:	f9 1d       	adc	r31, r9
    6108:	6d 2d       	mov	r22, r13
    610a:	80 81       	ld	r24, Z
    610c:	91 81       	ldd	r25, Z+1	; 0x01
    610e:	0e 94 6d a3 	call	0x146da	; 0x146da <_ZN3PWM4initEh>
    6112:	1a c0       	rjmp	.+52     	; 0x6148 <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x252>
			// Set up the digital enable pin, we want to be able to re-use these pins for multiple channels on 1 controller
			if( assignPin(enable_pin) ) {
				Digital* dpin = new Digital(enable_pin);
				dpin->pinMode(OUTPUT);
				for(int i = 0; i < 10; i++) {
					if(!pdigitals[i]) {
    6114:	fe 01       	movw	r30, r28
    6116:	e6 51       	subi	r30, 0x16	; 22
    6118:	ff 4f       	sbci	r31, 0xFF	; 255
    611a:	01 90       	ld	r0, Z+
    611c:	f0 81       	ld	r31, Z
    611e:	e0 2d       	mov	r30, r0
    6120:	20 81       	ld	r18, Z
    6122:	31 81       	ldd	r19, Z+1	; 0x01
    6124:	23 2b       	or	r18, r19
    6126:	09 f4       	brne	.+2      	; 0x612a <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x234>
    6128:	4c cf       	rjmp	.-360    	; 0x5fc2 <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0xcc>
    612a:	9f 01       	movw	r18, r30
    612c:	2e 5f       	subi	r18, 0xFE	; 254
    612e:	3f 4f       	sbci	r19, 0xFF	; 255
    6130:	bf 01       	movw	r22, r30
    6132:	6c 5e       	subi	r22, 0xEC	; 236
    6134:	7f 4f       	sbci	r23, 0xFF	; 255
    6136:	3e cf       	rjmp	.-388    	; 0x5fb4 <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0xbe>
						foundPin = 1;
						break;
					}
				}
				if(!foundPin) {
					delete dpin;
    6138:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
					return; // no slots?
    613c:	05 c0       	rjmp	.+10     	; 0x6148 <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x252>
			int pindex;
			for(pindex = 0; pindex < 9; pindex++) {
				if( !ppwms[pindex] && !ppwms[pindex+1])
				break;
			}
			if( ppwms[pindex] || ppwms[pindex+1])
    613e:	cb 01       	movw	r24, r22
    6140:	3b 01       	movw	r6, r22
    6142:	66 0c       	add	r6, r6
    6144:	77 1c       	adc	r7, r7
    6146:	76 cf       	rjmp	.-276    	; 0x6034 <_ZN17SplitBridgeDriver9createPWMEhhhhhii+0x13e>
			ppwms[pindex]->init(pin_numberA);
			PWM* ppinB = new PWM(pin_numberB);
			ppwms[pindex+1] = ppinB;
			ppwms[pindex+1]->init(pin_numberB);
	}
}
    6148:	df 91       	pop	r29
    614a:	cf 91       	pop	r28
    614c:	1f 91       	pop	r17
    614e:	0f 91       	pop	r16
    6150:	ff 90       	pop	r15
    6152:	ef 90       	pop	r14
    6154:	df 90       	pop	r13
    6156:	cf 90       	pop	r12
    6158:	af 90       	pop	r10
    615a:	9f 90       	pop	r9
    615c:	8f 90       	pop	r8
    615e:	7f 90       	pop	r7
    6160:	6f 90       	pop	r6
    6162:	08 95       	ret

00006164 <_ZN17SplitBridgeDriver20commandEmergencyStopEi>:
SplitBridgeDriver::~SplitBridgeDriver()
{
} //~SplitBridgeDriver

int SplitBridgeDriver::commandEmergencyStop(int status)
{
    6164:	4f 92       	push	r4
    6166:	5f 92       	push	r5
    6168:	6f 92       	push	r6
    616a:	7f 92       	push	r7
    616c:	8f 92       	push	r8
    616e:	9f 92       	push	r9
    6170:	af 92       	push	r10
    6172:	bf 92       	push	r11
    6174:	cf 92       	push	r12
    6176:	df 92       	push	r13
    6178:	ef 92       	push	r14
    617a:	ff 92       	push	r15
    617c:	0f 93       	push	r16
    617e:	1f 93       	push	r17
    6180:	cf 93       	push	r28
    6182:	df 93       	push	r29
    6184:	4c 01       	movw	r8, r24
    6186:	2b 01       	movw	r4, r22
	HBridgeDriver::commandEmergencyStop(status);
    6188:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <_ZN13HBridgeDriver20commandEmergencyStopEi>
    618c:	84 01       	movw	r16, r8
    618e:	03 51       	subi	r16, 0x13	; 19
    6190:	1f 4f       	sbci	r17, 0xFF	; 255
    6192:	54 01       	movw	r10, r8
    6194:	8b ee       	ldi	r24, 0xEB	; 235
    6196:	a8 1a       	sub	r10, r24
    6198:	8e ef       	ldi	r24, 0xFE	; 254
    619a:	b8 0a       	sbc	r11, r24
	for(int j=0; j < 10; j++) {
		int pindex = motorDrive[j][1];
		if(pindex != 255) {
			pdigitals[pindex]->digitalWrite(LOW);
    619c:	34 01       	movw	r6, r8
    619e:	aa ee       	ldi	r26, 0xEA	; 234
    61a0:	6a 0e       	add	r6, r26
    61a2:	71 1c       	adc	r7, r1
		}
		pindex = motorDriveB[j][0];
		if(pindex != 255) {
			ppwms[pindex]->init(ppwms[pindex]->pin);
    61a4:	64 01       	movw	r12, r8
    61a6:	b8 ee       	ldi	r27, 0xE8	; 232
    61a8:	cb 0e       	add	r12, r27
    61aa:	d1 1c       	adc	r13, r1
    61ac:	78 01       	movw	r14, r16

int SplitBridgeDriver::commandEmergencyStop(int status)
{
	HBridgeDriver::commandEmergencyStop(status);
	for(int j=0; j < 10; j++) {
		int pindex = motorDrive[j][1];
    61ae:	d8 01       	movw	r26, r16
    61b0:	ec 91       	ld	r30, X
		if(pindex != 255) {
    61b2:	ef 3f       	cpi	r30, 0xFF	; 255
    61b4:	09 f4       	brne	.+2      	; 0x61b8 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x54>
    61b6:	9c c0       	rjmp	.+312    	; 0x62f0 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x18c>
			pdigitals[pindex]->digitalWrite(LOW);
    61b8:	f0 e0       	ldi	r31, 0x00	; 0
    61ba:	ee 0f       	add	r30, r30
    61bc:	ff 1f       	adc	r31, r31
    61be:	d3 01       	movw	r26, r6
    61c0:	8d 91       	ld	r24, X+
    61c2:	9c 91       	ld	r25, X
    61c4:	e8 0f       	add	r30, r24
    61c6:	f9 1f       	adc	r31, r25
	}
}

void digitalWrite(uint8_t val)
{
	uint8_t timer = digitalPinToTimer(this->pin);
    61c8:	01 90       	ld	r0, Z+
    61ca:	f0 81       	ld	r31, Z
    61cc:	e0 2d       	mov	r30, r0
    61ce:	80 81       	ld	r24, Z
    61d0:	90 e0       	ldi	r25, 0x00	; 0
    61d2:	fc 01       	movw	r30, r24
    61d4:	ea 54       	subi	r30, 0x4A	; 74
    61d6:	f9 4f       	sbci	r31, 0xF9	; 249
    61d8:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(this->pin);
    61da:	fc 01       	movw	r30, r24
    61dc:	e4 50       	subi	r30, 0x04	; 4
    61de:	f9 4f       	sbci	r31, 0xF9	; 249
    61e0:	c4 91       	lpm	r28, Z
	uint8_t port = digitalPinToPort(this->pin);
    61e2:	fc 01       	movw	r30, r24
    61e4:	ee 5b       	subi	r30, 0xBE	; 190
    61e6:	f8 4f       	sbci	r31, 0xF8	; 248
    61e8:	d4 91       	lpm	r29, Z
	volatile uint16_t *out;

	if (port == NOT_A_PIN) return;
    61ea:	dd 23       	and	r29, r29
    61ec:	09 f4       	brne	.+2      	; 0x61f0 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x8c>
    61ee:	80 c0       	rjmp	.+256    	; 0x62f0 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x18c>

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    61f0:	22 23       	and	r18, r18
    61f2:	09 f4       	brne	.+2      	; 0x61f6 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x92>
    61f4:	67 c0       	rjmp	.+206    	; 0x62c4 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x160>

// If we detect the pin is on a timer, we may need to defuse PWM output, 
// we need to turn pin off before doing a digital write.
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    61f6:	82 2f       	mov	r24, r18
    61f8:	90 e0       	ldi	r25, 0x00	; 0
    61fa:	fc 01       	movw	r30, r24
    61fc:	31 97       	sbiw	r30, 0x01	; 1
    61fe:	e0 31       	cpi	r30, 0x10	; 16
    6200:	f1 05       	cpc	r31, r1
    6202:	08 f0       	brcs	.+2      	; 0x6206 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0xa2>
    6204:	5f c0       	rjmp	.+190    	; 0x62c4 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x160>
    6206:	88 27       	eor	r24, r24
    6208:	ed 5f       	subi	r30, 0xFD	; 253
    620a:	fe 4f       	sbci	r31, 0xFE	; 254
    620c:	8f 4f       	sbci	r24, 0xFF	; 255
    620e:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
	{
		case TIMER0A: Timer0.stopChannel(CHANNEL_A); break;
    6212:	60 e0       	ldi	r22, 0x00	; 0
    6214:	84 e7       	ldi	r24, 0x74	; 116
    6216:	97 e1       	ldi	r25, 0x17	; 23
    6218:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    621c:	53 c0       	rjmp	.+166    	; 0x62c4 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x160>
		case TIMER0B: Timer0.stopChannel(CHANNEL_B); break;
    621e:	61 e0       	ldi	r22, 0x01	; 1
    6220:	84 e7       	ldi	r24, 0x74	; 116
    6222:	97 e1       	ldi	r25, 0x17	; 23
    6224:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6228:	4d c0       	rjmp	.+154    	; 0x62c4 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x160>
	
		case TIMER1A: Timer1.stopChannel(CHANNEL_A); break;
    622a:	60 e0       	ldi	r22, 0x00	; 0
    622c:	85 e4       	ldi	r24, 0x45	; 69
    622e:	97 e1       	ldi	r25, 0x17	; 23
    6230:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6234:	47 c0       	rjmp	.+142    	; 0x62c4 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x160>
		case TIMER1B: Timer1.stopChannel(CHANNEL_B); break;
    6236:	61 e0       	ldi	r22, 0x01	; 1
    6238:	85 e4       	ldi	r24, 0x45	; 69
    623a:	97 e1       	ldi	r25, 0x17	; 23
    623c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6240:	41 c0       	rjmp	.+130    	; 0x62c4 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x160>
		
		case TIMER2A: Timer2.stopChannel(CHANNEL_A); break;
    6242:	60 e0       	ldi	r22, 0x00	; 0
    6244:	86 e1       	ldi	r24, 0x16	; 22
    6246:	97 e1       	ldi	r25, 0x17	; 23
    6248:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    624c:	3b c0       	rjmp	.+118    	; 0x62c4 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x160>
		case TIMER2B: Timer2.stopChannel(CHANNEL_B); break;
    624e:	61 e0       	ldi	r22, 0x01	; 1
    6250:	86 e1       	ldi	r24, 0x16	; 22
    6252:	97 e1       	ldi	r25, 0x17	; 23
    6254:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6258:	35 c0       	rjmp	.+106    	; 0x62c4 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x160>
	
		case TIMER3A: Timer3.stopChannel(CHANNEL_A); break;
    625a:	60 e0       	ldi	r22, 0x00	; 0
    625c:	87 ee       	ldi	r24, 0xE7	; 231
    625e:	96 e1       	ldi	r25, 0x16	; 22
    6260:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6264:	2f c0       	rjmp	.+94     	; 0x62c4 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x160>
		case TIMER3B: Timer3.stopChannel(CHANNEL_B); break; 
    6266:	61 e0       	ldi	r22, 0x01	; 1
    6268:	87 ee       	ldi	r24, 0xE7	; 231
    626a:	96 e1       	ldi	r25, 0x16	; 22
    626c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6270:	29 c0       	rjmp	.+82     	; 0x62c4 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x160>
		case TIMER3C: Timer3.stopChannel(CHANNEL_C); break;
    6272:	62 e0       	ldi	r22, 0x02	; 2
    6274:	87 ee       	ldi	r24, 0xE7	; 231
    6276:	96 e1       	ldi	r25, 0x16	; 22
    6278:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    627c:	23 c0       	rjmp	.+70     	; 0x62c4 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x160>
		
		case TIMER4A: Timer4.stopChannel(CHANNEL_A); break;
    627e:	60 e0       	ldi	r22, 0x00	; 0
    6280:	88 eb       	ldi	r24, 0xB8	; 184
    6282:	96 e1       	ldi	r25, 0x16	; 22
    6284:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6288:	1d c0       	rjmp	.+58     	; 0x62c4 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x160>
		case TIMER4B: Timer4.stopChannel(CHANNEL_B); break; 
    628a:	61 e0       	ldi	r22, 0x01	; 1
    628c:	88 eb       	ldi	r24, 0xB8	; 184
    628e:	96 e1       	ldi	r25, 0x16	; 22
    6290:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6294:	17 c0       	rjmp	.+46     	; 0x62c4 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x160>
		case TIMER4C: Timer4.stopChannel(CHANNEL_C); break;
    6296:	62 e0       	ldi	r22, 0x02	; 2
    6298:	88 eb       	ldi	r24, 0xB8	; 184
    629a:	96 e1       	ldi	r25, 0x16	; 22
    629c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    62a0:	11 c0       	rjmp	.+34     	; 0x62c4 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x160>
		
		case TIMER5A: Timer5.stopChannel(CHANNEL_A); break;
    62a2:	60 e0       	ldi	r22, 0x00	; 0
    62a4:	89 e8       	ldi	r24, 0x89	; 137
    62a6:	96 e1       	ldi	r25, 0x16	; 22
    62a8:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    62ac:	0b c0       	rjmp	.+22     	; 0x62c4 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x160>
		case TIMER5B: Timer5.stopChannel(CHANNEL_B); break; 
    62ae:	61 e0       	ldi	r22, 0x01	; 1
    62b0:	89 e8       	ldi	r24, 0x89	; 137
    62b2:	96 e1       	ldi	r25, 0x16	; 22
    62b4:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    62b8:	05 c0       	rjmp	.+10     	; 0x62c4 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x160>
		case TIMER5C: Timer5.stopChannel(CHANNEL_C); break;
    62ba:	62 e0       	ldi	r22, 0x02	; 2
    62bc:	89 e8       	ldi	r24, 0x89	; 137
    62be:	96 e1       	ldi	r25, 0x16	; 22
    62c0:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
	if (port == NOT_A_PIN) return;

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    62c4:	ed 2f       	mov	r30, r29
    62c6:	f0 e0       	ldi	r31, 0x00	; 0
    62c8:	ee 0f       	add	r30, r30
    62ca:	ff 1f       	adc	r31, r31
    62cc:	e8 57       	subi	r30, 0x78	; 120
    62ce:	f8 4f       	sbci	r31, 0xF8	; 248
    62d0:	a5 91       	lpm	r26, Z+
    62d2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    62d4:	8f b7       	in	r24, 0x3f	; 63
	cli();
    62d6:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    62d8:	ed 91       	ld	r30, X+
    62da:	fc 91       	ld	r31, X
    62dc:	11 97       	sbiw	r26, 0x01	; 1
    62de:	d0 e0       	ldi	r29, 0x00	; 0
    62e0:	c0 95       	com	r28
    62e2:	d0 95       	com	r29
    62e4:	ce 23       	and	r28, r30
    62e6:	df 23       	and	r29, r31
    62e8:	11 96       	adiw	r26, 0x01	; 1
    62ea:	dc 93       	st	X, r29
    62ec:	ce 93       	st	-X, r28
	} else {
		*out |= bit;
	}

	SREG = oldSREG;
    62ee:	8f bf       	out	0x3f, r24	; 63
		}
		pindex = motorDriveB[j][0];
    62f0:	f7 01       	movw	r30, r14
    62f2:	c1 a5       	ldd	r28, Z+41	; 0x29
		if(pindex != 255) {
    62f4:	cf 3f       	cpi	r28, 0xFF	; 255
    62f6:	91 f1       	breq	.+100    	; 0x635c <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x1f8>
			ppwms[pindex]->init(ppwms[pindex]->pin);
    62f8:	d0 e0       	ldi	r29, 0x00	; 0
    62fa:	cc 0f       	add	r28, r28
    62fc:	dd 1f       	adc	r29, r29
    62fe:	d6 01       	movw	r26, r12
    6300:	ed 91       	ld	r30, X+
    6302:	fc 91       	ld	r31, X
    6304:	ec 0f       	add	r30, r28
    6306:	fd 1f       	adc	r31, r29
    6308:	80 81       	ld	r24, Z
    630a:	91 81       	ldd	r25, Z+1	; 0x01
    630c:	fc 01       	movw	r30, r24
    630e:	60 81       	ld	r22, Z
    6310:	0e 94 6d a3 	call	0x146da	; 0x146da <_ZN3PWM4initEh>
			ppwms[pindex]->setPWMPrescale(motorDrive[j][2]);
    6314:	d6 01       	movw	r26, r12
    6316:	ed 91       	ld	r30, X+
    6318:	fc 91       	ld	r31, X
    631a:	ec 0f       	add	r30, r28
    631c:	fd 1f       	adc	r31, r29
    631e:	d7 01       	movw	r26, r14
    6320:	11 96       	adiw	r26, 0x01	; 1
    6322:	6c 91       	ld	r22, X
    6324:	80 81       	ld	r24, Z
    6326:	91 81       	ldd	r25, Z+1	; 0x01
    6328:	0e 94 76 a2 	call	0x144ec	; 0x144ec <_ZN3PWM14setPWMPrescaleEh>
			ppwms[pindex]->setPWMResolution(motorDrive[j][3]);
    632c:	d6 01       	movw	r26, r12
    632e:	ed 91       	ld	r30, X+
    6330:	fc 91       	ld	r31, X
    6332:	ec 0f       	add	r30, r28
    6334:	fd 1f       	adc	r31, r29
    6336:	d7 01       	movw	r26, r14
    6338:	12 96       	adiw	r26, 0x02	; 2
    633a:	6c 91       	ld	r22, X
    633c:	80 81       	ld	r24, Z
    633e:	91 81       	ldd	r25, Z+1	; 0x01
    6340:	0e 94 54 a2 	call	0x144a8	; 0x144a8 <_ZN3PWM16setPWMResolutionEh>
			ppwms[pindex]->pwmOff();
    6344:	f6 01       	movw	r30, r12
    6346:	80 81       	ld	r24, Z
    6348:	91 81       	ldd	r25, Z+1	; 0x01
    634a:	c8 0f       	add	r28, r24
    634c:	d9 1f       	adc	r29, r25
    634e:	40 e0       	ldi	r20, 0x00	; 0
    6350:	60 e0       	ldi	r22, 0x00	; 0
    6352:	70 e0       	ldi	r23, 0x00	; 0
    6354:	88 81       	ld	r24, Y
    6356:	99 81       	ldd	r25, Y+1	; 0x01
    6358:	0e 94 12 a3 	call	0x14624	; 0x14624 <_ZN3PWM8pwmWriteEjh>
    635c:	0c 5f       	subi	r16, 0xFC	; 252
    635e:	1f 4f       	sbci	r17, 0xFF	; 255
} //~SplitBridgeDriver

int SplitBridgeDriver::commandEmergencyStop(int status)
{
	HBridgeDriver::commandEmergencyStop(status);
	for(int j=0; j < 10; j++) {
    6360:	0a 15       	cp	r16, r10
    6362:	1b 05       	cpc	r17, r11
    6364:	09 f0       	breq	.+2      	; 0x6368 <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x204>
    6366:	22 cf       	rjmp	.-444    	; 0x61ac <_ZN17SplitBridgeDriver20commandEmergencyStopEi+0x48>
			ppwms[pindex]->setPWMPrescale(motorDrive[j][2]);
			ppwms[pindex]->setPWMResolution(motorDrive[j][3]);
			ppwms[pindex]->pwmOff();
		}
	}
	fault_flag = 16;
    6368:	f4 01       	movw	r30, r8
    636a:	ea 51       	subi	r30, 0x1A	; 26
    636c:	ff 4f       	sbci	r31, 0xFF	; 255
    636e:	80 e1       	ldi	r24, 0x10	; 16
    6370:	90 e0       	ldi	r25, 0x00	; 0
    6372:	91 83       	std	Z+1, r25	; 0x01
    6374:	80 83       	st	Z, r24
	resetSpeeds();
    6376:	c4 01       	movw	r24, r8
    6378:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <_ZN20AbstractMotorControl11resetSpeedsEv>
	resetEncoders();
    637c:	c4 01       	movw	r24, r8
    637e:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <_ZN20AbstractMotorControl13resetEncodersEv>
	return status;
}
    6382:	c2 01       	movw	r24, r4
    6384:	df 91       	pop	r29
    6386:	cf 91       	pop	r28
    6388:	1f 91       	pop	r17
    638a:	0f 91       	pop	r16
    638c:	ff 90       	pop	r15
    638e:	ef 90       	pop	r14
    6390:	df 90       	pop	r13
    6392:	cf 90       	pop	r12
    6394:	bf 90       	pop	r11
    6396:	af 90       	pop	r10
    6398:	9f 90       	pop	r9
    639a:	8f 90       	pop	r8
    639c:	7f 90       	pop	r7
    639e:	6f 90       	pop	r6
    63a0:	5f 90       	pop	r5
    63a2:	4f 90       	pop	r4
    63a4:	08 95       	ret

000063a6 <_ZN18SwitchBridgeDriver11isConnectedEv>:
	~SwitchBridgeDriver();
	uint8_t getMotorDigitalPin(uint8_t channel) { return motorDrive[channel-1][0]; }
	uint8_t getMotorDigitalPinB(uint8_t channel) { return motorDriveB[channel-1][0]; }
	int commandMotorPower(uint8_t ch, int16_t p);
	int commandEmergencyStop(int status);
	int isConnected(void) { return true; }
    63a6:	81 e0       	ldi	r24, 0x01	; 1
    63a8:	90 e0       	ldi	r25, 0x00	; 0
    63aa:	08 95       	ret

000063ac <_ZN18SwitchBridgeDriver14queryFaultFlagEv>:
	void setPins(Digital** pins) { pdigitals = pins; }
	uint8_t getMotorEnablePin(uint8_t channel) {return motorDrive[channel-1][1]; }
	void createDigital(uint8_t channel, uint8_t pin_number, uint8_t pin_numberB, uint8_t dir_pin, uint8_t dir_default);
	void getDriverInfo(uint8_t ch, char* outStr);
	int queryFaultFlag(void) { return fault_flag; }
    63ac:	8a 51       	subi	r24, 0x1A	; 26
    63ae:	9f 4f       	sbci	r25, 0xFF	; 255
    63b0:	fc 01       	movw	r30, r24
    63b2:	80 81       	ld	r24, Z
    63b4:	91 81       	ldd	r25, Z+1	; 0x01
    63b6:	08 95       	ret

000063b8 <_ZN18SwitchBridgeDriver15queryStatusFlagEv>:
	int queryStatusFlag(void) { return status_flag; }
    63b8:	8e 5e       	subi	r24, 0xEE	; 238
    63ba:	9e 4f       	sbci	r25, 0xFE	; 254
    63bc:	fc 01       	movw	r30, r24
    63be:	80 81       	ld	r24, Z
    63c0:	91 81       	ldd	r25, Z+1	; 0x01
    63c2:	08 95       	ret

000063c4 <_ZN18SwitchBridgeDriverD1Ev>:
SwitchBridgeDriver::SwitchBridgeDriver()
{
} //SwitchBridgeDriver

// default destructor
SwitchBridgeDriver::~SwitchBridgeDriver()
    63c4:	2e ea       	ldi	r18, 0xAE	; 174
    63c6:	39 e0       	ldi	r19, 0x09	; 9
    63c8:	fc 01       	movw	r30, r24
    63ca:	31 83       	std	Z+1, r19	; 0x01
    63cc:	20 83       	st	Z, r18
    63ce:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <_ZN20AbstractMotorControlD1Ev>
    63d2:	08 95       	ret

000063d4 <_ZN18SwitchBridgeDriverD0Ev>:
    63d4:	cf 93       	push	r28
    63d6:	df 93       	push	r29
    63d8:	ec 01       	movw	r28, r24
{
} //~SwitchBridgeDriver
    63da:	f4 df       	rcall	.-24     	; 0x63c4 <_ZN18SwitchBridgeDriverD1Ev>
    63dc:	ce 01       	movw	r24, r28
    63de:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
    63e2:	df 91       	pop	r29
    63e4:	cf 91       	pop	r28
    63e6:	08 95       	ret

000063e8 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi>:

int SwitchBridgeDriver::commandEmergencyStop(int status)
{
    63e8:	6f 92       	push	r6
    63ea:	7f 92       	push	r7
    63ec:	8f 92       	push	r8
    63ee:	9f 92       	push	r9
    63f0:	af 92       	push	r10
    63f2:	bf 92       	push	r11
    63f4:	cf 92       	push	r12
    63f6:	df 92       	push	r13
    63f8:	ef 92       	push	r14
    63fa:	ff 92       	push	r15
    63fc:	0f 93       	push	r16
    63fe:	1f 93       	push	r17
    6400:	cf 93       	push	r28
    6402:	df 93       	push	r29
    6404:	6c 01       	movw	r12, r24
    6406:	5b 01       	movw	r10, r22
    6408:	ec 01       	movw	r28, r24
    640a:	c6 51       	subi	r28, 0x16	; 22
    640c:	df 4f       	sbci	r29, 0xFF	; 255
    640e:	7c 01       	movw	r14, r24
    6410:	8e ef       	ldi	r24, 0xFE	; 254
    6412:	e8 0e       	add	r14, r24
    6414:	f1 1c       	adc	r15, r1
	for(int j=0; j < 10; j++) {
		int pindex = motorDrive[j][0];
		if(pindex != 255) {
			pdigitals[pindex]->digitalWrite(LOW);
    6416:	86 01       	movw	r16, r12
    6418:	08 51       	subi	r16, 0x18	; 24
    641a:	1f 4f       	sbci	r17, 0xFF	; 255
    641c:	4e 01       	movw	r8, r28
} //~SwitchBridgeDriver

int SwitchBridgeDriver::commandEmergencyStop(int status)
{
	for(int j=0; j < 10; j++) {
		int pindex = motorDrive[j][0];
    641e:	e8 81       	ld	r30, Y
		if(pindex != 255) {
    6420:	ef 3f       	cpi	r30, 0xFF	; 255
    6422:	09 f4       	brne	.+2      	; 0x6426 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x3e>
    6424:	9d c0       	rjmp	.+314    	; 0x6560 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x178>
			pdigitals[pindex]->digitalWrite(LOW);
    6426:	f0 e0       	ldi	r31, 0x00	; 0
    6428:	ee 0f       	add	r30, r30
    642a:	ff 1f       	adc	r31, r31
    642c:	d8 01       	movw	r26, r16
    642e:	8d 91       	ld	r24, X+
    6430:	9c 91       	ld	r25, X
    6432:	e8 0f       	add	r30, r24
    6434:	f9 1f       	adc	r31, r25
	}
}

void digitalWrite(uint8_t val)
{
	uint8_t timer = digitalPinToTimer(this->pin);
    6436:	01 90       	ld	r0, Z+
    6438:	f0 81       	ld	r31, Z
    643a:	e0 2d       	mov	r30, r0
    643c:	80 81       	ld	r24, Z
    643e:	90 e0       	ldi	r25, 0x00	; 0
    6440:	fc 01       	movw	r30, r24
    6442:	e4 54       	subi	r30, 0x44	; 68
    6444:	f8 4f       	sbci	r31, 0xF8	; 248
    6446:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(this->pin);
    6448:	fc 01       	movw	r30, r24
    644a:	ee 5f       	subi	r30, 0xFE	; 254
    644c:	f7 4f       	sbci	r31, 0xF7	; 247
    644e:	74 90       	lpm	r7, Z
	uint8_t port = digitalPinToPort(this->pin);
    6450:	fc 01       	movw	r30, r24
    6452:	e8 5b       	subi	r30, 0xB8	; 184
    6454:	f7 4f       	sbci	r31, 0xF7	; 247
    6456:	64 90       	lpm	r6, Z
	volatile uint16_t *out;

	if (port == NOT_A_PIN) return;
    6458:	66 20       	and	r6, r6
    645a:	09 f4       	brne	.+2      	; 0x645e <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x76>
    645c:	81 c0       	rjmp	.+258    	; 0x6560 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x178>

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    645e:	22 23       	and	r18, r18
    6460:	09 f4       	brne	.+2      	; 0x6464 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x7c>
    6462:	67 c0       	rjmp	.+206    	; 0x6532 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x14a>

// If we detect the pin is on a timer, we may need to defuse PWM output, 
// we need to turn pin off before doing a digital write.
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6464:	82 2f       	mov	r24, r18
    6466:	90 e0       	ldi	r25, 0x00	; 0
    6468:	fc 01       	movw	r30, r24
    646a:	31 97       	sbiw	r30, 0x01	; 1
    646c:	e0 31       	cpi	r30, 0x10	; 16
    646e:	f1 05       	cpc	r31, r1
    6470:	08 f0       	brcs	.+2      	; 0x6474 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x8c>
    6472:	5f c0       	rjmp	.+190    	; 0x6532 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x14a>
    6474:	88 27       	eor	r24, r24
    6476:	ed 5e       	subi	r30, 0xED	; 237
    6478:	fe 4f       	sbci	r31, 0xFE	; 254
    647a:	8f 4f       	sbci	r24, 0xFF	; 255
    647c:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
	{
		case TIMER0A: Timer0.stopChannel(CHANNEL_A); break;
    6480:	60 e0       	ldi	r22, 0x00	; 0
    6482:	84 e7       	ldi	r24, 0x74	; 116
    6484:	97 e1       	ldi	r25, 0x17	; 23
    6486:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    648a:	53 c0       	rjmp	.+166    	; 0x6532 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x14a>
		case TIMER0B: Timer0.stopChannel(CHANNEL_B); break;
    648c:	61 e0       	ldi	r22, 0x01	; 1
    648e:	84 e7       	ldi	r24, 0x74	; 116
    6490:	97 e1       	ldi	r25, 0x17	; 23
    6492:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6496:	4d c0       	rjmp	.+154    	; 0x6532 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x14a>
	
		case TIMER1A: Timer1.stopChannel(CHANNEL_A); break;
    6498:	60 e0       	ldi	r22, 0x00	; 0
    649a:	85 e4       	ldi	r24, 0x45	; 69
    649c:	97 e1       	ldi	r25, 0x17	; 23
    649e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    64a2:	47 c0       	rjmp	.+142    	; 0x6532 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x14a>
		case TIMER1B: Timer1.stopChannel(CHANNEL_B); break;
    64a4:	61 e0       	ldi	r22, 0x01	; 1
    64a6:	85 e4       	ldi	r24, 0x45	; 69
    64a8:	97 e1       	ldi	r25, 0x17	; 23
    64aa:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    64ae:	41 c0       	rjmp	.+130    	; 0x6532 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x14a>
		
		case TIMER2A: Timer2.stopChannel(CHANNEL_A); break;
    64b0:	60 e0       	ldi	r22, 0x00	; 0
    64b2:	86 e1       	ldi	r24, 0x16	; 22
    64b4:	97 e1       	ldi	r25, 0x17	; 23
    64b6:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    64ba:	3b c0       	rjmp	.+118    	; 0x6532 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x14a>
		case TIMER2B: Timer2.stopChannel(CHANNEL_B); break;
    64bc:	61 e0       	ldi	r22, 0x01	; 1
    64be:	86 e1       	ldi	r24, 0x16	; 22
    64c0:	97 e1       	ldi	r25, 0x17	; 23
    64c2:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    64c6:	35 c0       	rjmp	.+106    	; 0x6532 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x14a>
	
		case TIMER3A: Timer3.stopChannel(CHANNEL_A); break;
    64c8:	60 e0       	ldi	r22, 0x00	; 0
    64ca:	87 ee       	ldi	r24, 0xE7	; 231
    64cc:	96 e1       	ldi	r25, 0x16	; 22
    64ce:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    64d2:	2f c0       	rjmp	.+94     	; 0x6532 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x14a>
		case TIMER3B: Timer3.stopChannel(CHANNEL_B); break; 
    64d4:	61 e0       	ldi	r22, 0x01	; 1
    64d6:	87 ee       	ldi	r24, 0xE7	; 231
    64d8:	96 e1       	ldi	r25, 0x16	; 22
    64da:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    64de:	29 c0       	rjmp	.+82     	; 0x6532 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x14a>
		case TIMER3C: Timer3.stopChannel(CHANNEL_C); break;
    64e0:	62 e0       	ldi	r22, 0x02	; 2
    64e2:	87 ee       	ldi	r24, 0xE7	; 231
    64e4:	96 e1       	ldi	r25, 0x16	; 22
    64e6:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    64ea:	23 c0       	rjmp	.+70     	; 0x6532 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x14a>
		
		case TIMER4A: Timer4.stopChannel(CHANNEL_A); break;
    64ec:	60 e0       	ldi	r22, 0x00	; 0
    64ee:	88 eb       	ldi	r24, 0xB8	; 184
    64f0:	96 e1       	ldi	r25, 0x16	; 22
    64f2:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    64f6:	1d c0       	rjmp	.+58     	; 0x6532 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x14a>
		case TIMER4B: Timer4.stopChannel(CHANNEL_B); break; 
    64f8:	61 e0       	ldi	r22, 0x01	; 1
    64fa:	88 eb       	ldi	r24, 0xB8	; 184
    64fc:	96 e1       	ldi	r25, 0x16	; 22
    64fe:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6502:	17 c0       	rjmp	.+46     	; 0x6532 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x14a>
		case TIMER4C: Timer4.stopChannel(CHANNEL_C); break;
    6504:	62 e0       	ldi	r22, 0x02	; 2
    6506:	88 eb       	ldi	r24, 0xB8	; 184
    6508:	96 e1       	ldi	r25, 0x16	; 22
    650a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    650e:	11 c0       	rjmp	.+34     	; 0x6532 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x14a>
		
		case TIMER5A: Timer5.stopChannel(CHANNEL_A); break;
    6510:	60 e0       	ldi	r22, 0x00	; 0
    6512:	89 e8       	ldi	r24, 0x89	; 137
    6514:	96 e1       	ldi	r25, 0x16	; 22
    6516:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    651a:	0b c0       	rjmp	.+22     	; 0x6532 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x14a>
		case TIMER5B: Timer5.stopChannel(CHANNEL_B); break; 
    651c:	61 e0       	ldi	r22, 0x01	; 1
    651e:	89 e8       	ldi	r24, 0x89	; 137
    6520:	96 e1       	ldi	r25, 0x16	; 22
    6522:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6526:	05 c0       	rjmp	.+10     	; 0x6532 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x14a>
		case TIMER5C: Timer5.stopChannel(CHANNEL_C); break;
    6528:	62 e0       	ldi	r22, 0x02	; 2
    652a:	89 e8       	ldi	r24, 0x89	; 137
    652c:	96 e1       	ldi	r25, 0x16	; 22
    652e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
	if (port == NOT_A_PIN) return;

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    6532:	e6 2d       	mov	r30, r6
    6534:	f0 e0       	ldi	r31, 0x00	; 0
    6536:	ee 0f       	add	r30, r30
    6538:	ff 1f       	adc	r31, r31
    653a:	e2 57       	subi	r30, 0x72	; 114
    653c:	f7 4f       	sbci	r31, 0xF7	; 247
    653e:	a5 91       	lpm	r26, Z+
    6540:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    6542:	2f b7       	in	r18, 0x3f	; 63
	cli();
    6544:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    6546:	8d 91       	ld	r24, X+
    6548:	9c 91       	ld	r25, X
    654a:	11 97       	sbiw	r26, 0x01	; 1
    654c:	e7 2d       	mov	r30, r7
    654e:	f0 e0       	ldi	r31, 0x00	; 0
    6550:	e0 95       	com	r30
    6552:	f0 95       	com	r31
    6554:	e8 23       	and	r30, r24
    6556:	f9 23       	and	r31, r25
    6558:	11 96       	adiw	r26, 0x01	; 1
    655a:	fc 93       	st	X, r31
    655c:	ee 93       	st	-X, r30
	} else {
		*out |= bit;
	}

	SREG = oldSREG;
    655e:	2f bf       	out	0x3f, r18	; 63
		}
		pindex = motorDriveB[j][0];
    6560:	d4 01       	movw	r26, r8
    6562:	54 96       	adiw	r26, 0x14	; 20
    6564:	ec 91       	ld	r30, X
		if(pindex != 255) {
    6566:	ef 3f       	cpi	r30, 0xFF	; 255
    6568:	09 f4       	brne	.+2      	; 0x656c <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x184>
    656a:	9d c0       	rjmp	.+314    	; 0x66a6 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x2be>
				pdigitals[pindex]->digitalWrite(LOW);
    656c:	f0 e0       	ldi	r31, 0x00	; 0
    656e:	ee 0f       	add	r30, r30
    6570:	ff 1f       	adc	r31, r31
    6572:	d8 01       	movw	r26, r16
    6574:	8d 91       	ld	r24, X+
    6576:	9c 91       	ld	r25, X
    6578:	e8 0f       	add	r30, r24
    657a:	f9 1f       	adc	r31, r25
	}
}

void digitalWrite(uint8_t val)
{
	uint8_t timer = digitalPinToTimer(this->pin);
    657c:	01 90       	ld	r0, Z+
    657e:	f0 81       	ld	r31, Z
    6580:	e0 2d       	mov	r30, r0
    6582:	80 81       	ld	r24, Z
    6584:	90 e0       	ldi	r25, 0x00	; 0
    6586:	fc 01       	movw	r30, r24
    6588:	e4 54       	subi	r30, 0x44	; 68
    658a:	f8 4f       	sbci	r31, 0xF8	; 248
    658c:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(this->pin);
    658e:	fc 01       	movw	r30, r24
    6590:	ee 5f       	subi	r30, 0xFE	; 254
    6592:	f7 4f       	sbci	r31, 0xF7	; 247
    6594:	94 90       	lpm	r9, Z
	uint8_t port = digitalPinToPort(this->pin);
    6596:	fc 01       	movw	r30, r24
    6598:	e8 5b       	subi	r30, 0xB8	; 184
    659a:	f7 4f       	sbci	r31, 0xF7	; 247
    659c:	84 90       	lpm	r8, Z
	volatile uint16_t *out;

	if (port == NOT_A_PIN) return;
    659e:	88 20       	and	r8, r8
    65a0:	09 f4       	brne	.+2      	; 0x65a4 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x1bc>
    65a2:	81 c0       	rjmp	.+258    	; 0x66a6 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x2be>

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    65a4:	22 23       	and	r18, r18
    65a6:	09 f4       	brne	.+2      	; 0x65aa <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x1c2>
    65a8:	67 c0       	rjmp	.+206    	; 0x6678 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x290>

// If we detect the pin is on a timer, we may need to defuse PWM output, 
// we need to turn pin off before doing a digital write.
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    65aa:	82 2f       	mov	r24, r18
    65ac:	90 e0       	ldi	r25, 0x00	; 0
    65ae:	fc 01       	movw	r30, r24
    65b0:	31 97       	sbiw	r30, 0x01	; 1
    65b2:	e0 31       	cpi	r30, 0x10	; 16
    65b4:	f1 05       	cpc	r31, r1
    65b6:	08 f0       	brcs	.+2      	; 0x65ba <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x1d2>
    65b8:	5f c0       	rjmp	.+190    	; 0x6678 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x290>
    65ba:	88 27       	eor	r24, r24
    65bc:	ed 5d       	subi	r30, 0xDD	; 221
    65be:	fe 4f       	sbci	r31, 0xFE	; 254
    65c0:	8f 4f       	sbci	r24, 0xFF	; 255
    65c2:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
	{
		case TIMER0A: Timer0.stopChannel(CHANNEL_A); break;
    65c6:	60 e0       	ldi	r22, 0x00	; 0
    65c8:	84 e7       	ldi	r24, 0x74	; 116
    65ca:	97 e1       	ldi	r25, 0x17	; 23
    65cc:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    65d0:	53 c0       	rjmp	.+166    	; 0x6678 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x290>
		case TIMER0B: Timer0.stopChannel(CHANNEL_B); break;
    65d2:	61 e0       	ldi	r22, 0x01	; 1
    65d4:	84 e7       	ldi	r24, 0x74	; 116
    65d6:	97 e1       	ldi	r25, 0x17	; 23
    65d8:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    65dc:	4d c0       	rjmp	.+154    	; 0x6678 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x290>
	
		case TIMER1A: Timer1.stopChannel(CHANNEL_A); break;
    65de:	60 e0       	ldi	r22, 0x00	; 0
    65e0:	85 e4       	ldi	r24, 0x45	; 69
    65e2:	97 e1       	ldi	r25, 0x17	; 23
    65e4:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    65e8:	47 c0       	rjmp	.+142    	; 0x6678 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x290>
		case TIMER1B: Timer1.stopChannel(CHANNEL_B); break;
    65ea:	61 e0       	ldi	r22, 0x01	; 1
    65ec:	85 e4       	ldi	r24, 0x45	; 69
    65ee:	97 e1       	ldi	r25, 0x17	; 23
    65f0:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    65f4:	41 c0       	rjmp	.+130    	; 0x6678 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x290>
		
		case TIMER2A: Timer2.stopChannel(CHANNEL_A); break;
    65f6:	60 e0       	ldi	r22, 0x00	; 0
    65f8:	86 e1       	ldi	r24, 0x16	; 22
    65fa:	97 e1       	ldi	r25, 0x17	; 23
    65fc:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6600:	3b c0       	rjmp	.+118    	; 0x6678 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x290>
		case TIMER2B: Timer2.stopChannel(CHANNEL_B); break;
    6602:	61 e0       	ldi	r22, 0x01	; 1
    6604:	86 e1       	ldi	r24, 0x16	; 22
    6606:	97 e1       	ldi	r25, 0x17	; 23
    6608:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    660c:	35 c0       	rjmp	.+106    	; 0x6678 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x290>
	
		case TIMER3A: Timer3.stopChannel(CHANNEL_A); break;
    660e:	60 e0       	ldi	r22, 0x00	; 0
    6610:	87 ee       	ldi	r24, 0xE7	; 231
    6612:	96 e1       	ldi	r25, 0x16	; 22
    6614:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6618:	2f c0       	rjmp	.+94     	; 0x6678 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x290>
		case TIMER3B: Timer3.stopChannel(CHANNEL_B); break; 
    661a:	61 e0       	ldi	r22, 0x01	; 1
    661c:	87 ee       	ldi	r24, 0xE7	; 231
    661e:	96 e1       	ldi	r25, 0x16	; 22
    6620:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6624:	29 c0       	rjmp	.+82     	; 0x6678 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x290>
		case TIMER3C: Timer3.stopChannel(CHANNEL_C); break;
    6626:	62 e0       	ldi	r22, 0x02	; 2
    6628:	87 ee       	ldi	r24, 0xE7	; 231
    662a:	96 e1       	ldi	r25, 0x16	; 22
    662c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6630:	23 c0       	rjmp	.+70     	; 0x6678 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x290>
		
		case TIMER4A: Timer4.stopChannel(CHANNEL_A); break;
    6632:	60 e0       	ldi	r22, 0x00	; 0
    6634:	88 eb       	ldi	r24, 0xB8	; 184
    6636:	96 e1       	ldi	r25, 0x16	; 22
    6638:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    663c:	1d c0       	rjmp	.+58     	; 0x6678 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x290>
		case TIMER4B: Timer4.stopChannel(CHANNEL_B); break; 
    663e:	61 e0       	ldi	r22, 0x01	; 1
    6640:	88 eb       	ldi	r24, 0xB8	; 184
    6642:	96 e1       	ldi	r25, 0x16	; 22
    6644:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6648:	17 c0       	rjmp	.+46     	; 0x6678 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x290>
		case TIMER4C: Timer4.stopChannel(CHANNEL_C); break;
    664a:	62 e0       	ldi	r22, 0x02	; 2
    664c:	88 eb       	ldi	r24, 0xB8	; 184
    664e:	96 e1       	ldi	r25, 0x16	; 22
    6650:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6654:	11 c0       	rjmp	.+34     	; 0x6678 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x290>
		
		case TIMER5A: Timer5.stopChannel(CHANNEL_A); break;
    6656:	60 e0       	ldi	r22, 0x00	; 0
    6658:	89 e8       	ldi	r24, 0x89	; 137
    665a:	96 e1       	ldi	r25, 0x16	; 22
    665c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6660:	0b c0       	rjmp	.+22     	; 0x6678 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x290>
		case TIMER5B: Timer5.stopChannel(CHANNEL_B); break; 
    6662:	61 e0       	ldi	r22, 0x01	; 1
    6664:	89 e8       	ldi	r24, 0x89	; 137
    6666:	96 e1       	ldi	r25, 0x16	; 22
    6668:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    666c:	05 c0       	rjmp	.+10     	; 0x6678 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x290>
		case TIMER5C: Timer5.stopChannel(CHANNEL_C); break;
    666e:	62 e0       	ldi	r22, 0x02	; 2
    6670:	89 e8       	ldi	r24, 0x89	; 137
    6672:	96 e1       	ldi	r25, 0x16	; 22
    6674:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
	if (port == NOT_A_PIN) return;

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    6678:	e8 2d       	mov	r30, r8
    667a:	f0 e0       	ldi	r31, 0x00	; 0
    667c:	ee 0f       	add	r30, r30
    667e:	ff 1f       	adc	r31, r31
    6680:	e2 57       	subi	r30, 0x72	; 114
    6682:	f7 4f       	sbci	r31, 0xF7	; 247
    6684:	a5 91       	lpm	r26, Z+
    6686:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    6688:	2f b7       	in	r18, 0x3f	; 63
	cli();
    668a:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    668c:	8d 91       	ld	r24, X+
    668e:	9c 91       	ld	r25, X
    6690:	11 97       	sbiw	r26, 0x01	; 1
    6692:	e9 2d       	mov	r30, r9
    6694:	f0 e0       	ldi	r31, 0x00	; 0
    6696:	e0 95       	com	r30
    6698:	f0 95       	com	r31
    669a:	e8 23       	and	r30, r24
    669c:	f9 23       	and	r31, r25
    669e:	11 96       	adiw	r26, 0x01	; 1
    66a0:	fc 93       	st	X, r31
    66a2:	ee 93       	st	-X, r30
	} else {
		*out |= bit;
	}

	SREG = oldSREG;
    66a4:	2f bf       	out	0x3f, r18	; 63
    66a6:	22 96       	adiw	r28, 0x02	; 2
{
} //~SwitchBridgeDriver

int SwitchBridgeDriver::commandEmergencyStop(int status)
{
	for(int j=0; j < 10; j++) {
    66a8:	ce 15       	cp	r28, r14
    66aa:	df 05       	cpc	r29, r15
    66ac:	09 f0       	breq	.+2      	; 0x66b0 <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x2c8>
    66ae:	b6 ce       	rjmp	.-660    	; 0x641c <_ZN18SwitchBridgeDriver20commandEmergencyStopEi+0x34>
		pindex = motorDriveB[j][0];
		if(pindex != 255) {
				pdigitals[pindex]->digitalWrite(LOW);
		}
	}
	fault_flag = 16;
    66b0:	f6 01       	movw	r30, r12
    66b2:	ea 51       	subi	r30, 0x1A	; 26
    66b4:	ff 4f       	sbci	r31, 0xFF	; 255
    66b6:	80 e1       	ldi	r24, 0x10	; 16
    66b8:	90 e0       	ldi	r25, 0x00	; 0
    66ba:	91 83       	std	Z+1, r25	; 0x01
    66bc:	80 83       	st	Z, r24
	resetSpeeds();
    66be:	c6 01       	movw	r24, r12
    66c0:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <_ZN20AbstractMotorControl11resetSpeedsEv>
	resetEncoders();
    66c4:	c6 01       	movw	r24, r12
    66c6:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <_ZN20AbstractMotorControl13resetEncodersEv>
	return status;
}
    66ca:	c5 01       	movw	r24, r10
    66cc:	df 91       	pop	r29
    66ce:	cf 91       	pop	r28
    66d0:	1f 91       	pop	r17
    66d2:	0f 91       	pop	r16
    66d4:	ff 90       	pop	r15
    66d6:	ef 90       	pop	r14
    66d8:	df 90       	pop	r13
    66da:	cf 90       	pop	r12
    66dc:	bf 90       	pop	r11
    66de:	af 90       	pop	r10
    66e0:	9f 90       	pop	r9
    66e2:	8f 90       	pop	r8
    66e4:	7f 90       	pop	r7
    66e6:	6f 90       	pop	r6
    66e8:	08 95       	ret

000066ea <_ZN18SwitchBridgeDriver13getDriverInfoEhPc>:
	}
	fault_flag = 0;
	return 0;
}

void SwitchBridgeDriver::getDriverInfo(uint8_t ch, char* outStr) {
    66ea:	8f 92       	push	r8
    66ec:	9f 92       	push	r9
    66ee:	af 92       	push	r10
    66f0:	bf 92       	push	r11
    66f2:	cf 92       	push	r12
    66f4:	df 92       	push	r13
    66f6:	ef 92       	push	r14
    66f8:	ff 92       	push	r15
    66fa:	0f 93       	push	r16
    66fc:	1f 93       	push	r17
    66fe:	cf 93       	push	r28
    6700:	df 93       	push	r29
    6702:	cd b7       	in	r28, 0x3d	; 61
    6704:	de b7       	in	r29, 0x3e	; 62
    6706:	c6 54       	subi	r28, 0x46	; 70
    6708:	d1 40       	sbci	r29, 0x01	; 1
    670a:	0f b6       	in	r0, 0x3f	; 63
    670c:	f8 94       	cli
    670e:	de bf       	out	0x3e, r29	; 62
    6710:	0f be       	out	0x3f, r0	; 63
    6712:	cd bf       	out	0x3d, r28	; 61
    6714:	7c 01       	movw	r14, r24
    6716:	8a 01       	movw	r16, r20
	char dpin5[5];
	char dpin6[5];
	char dpin7[5];
	char dpin8[5];
	char dpin9[5];
	if( motorDrive[ch-1][0] == 255 ) {
    6718:	c6 2e       	mov	r12, r22
    671a:	d1 2c       	mov	r13, r1
    671c:	56 01       	movw	r10, r12
    671e:	81 e0       	ldi	r24, 0x01	; 1
    6720:	a8 1a       	sub	r10, r24
    6722:	b1 08       	sbc	r11, r1
    6724:	cc 0c       	add	r12, r12
    6726:	dd 1c       	adc	r13, r13
    6728:	ce 0c       	add	r12, r14
    672a:	df 1c       	adc	r13, r15
    672c:	f6 01       	movw	r30, r12
    672e:	e8 51       	subi	r30, 0x18	; 24
    6730:	ff 4f       	sbci	r31, 0xFF	; 255
    6732:	e0 81       	ld	r30, Z
    6734:	ef 3f       	cpi	r30, 0xFF	; 255
    6736:	89 f4       	brne	.+34     	; 0x675a <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x70>
    6738:	4a e0       	ldi	r20, 0x0A	; 10
    673a:	be 01       	movw	r22, r28
    673c:	6f 5f       	subi	r22, 0xFF	; 255
    673e:	7e 4f       	sbci	r23, 0xFE	; 254
    6740:	8f ef       	ldi	r24, 0xFF	; 255
    6742:	9f ef       	ldi	r25, 0xFF	; 255
    6744:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    6748:	4a e0       	ldi	r20, 0x0A	; 10
    674a:	be 01       	movw	r22, r28
    674c:	65 5f       	subi	r22, 0xF5	; 245
    674e:	7e 4f       	sbci	r23, 0xFE	; 254
    6750:	8f ef       	ldi	r24, 0xFF	; 255
    6752:	9f ef       	ldi	r25, 0xFF	; 255
    6754:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    6758:	2e c0       	rjmp	.+92     	; 0x67b6 <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0xcc>
		itoa(-1, dout1, 10);
		itoa(-1, dout3, 10);
	} else {
		itoa(pdigitals[motorDrive[ch-1][0]]->pin, dout1, 10);
    675a:	f0 e0       	ldi	r31, 0x00	; 0
    675c:	ee 0f       	add	r30, r30
    675e:	ff 1f       	adc	r31, r31
    6760:	47 01       	movw	r8, r14
    6762:	98 ee       	ldi	r25, 0xE8	; 232
    6764:	89 0e       	add	r8, r25
    6766:	91 1c       	adc	r9, r1
    6768:	d4 01       	movw	r26, r8
    676a:	8d 91       	ld	r24, X+
    676c:	9c 91       	ld	r25, X
    676e:	e8 0f       	add	r30, r24
    6770:	f9 1f       	adc	r31, r25
    6772:	01 90       	ld	r0, Z+
    6774:	f0 81       	ld	r31, Z
    6776:	e0 2d       	mov	r30, r0
    6778:	80 81       	ld	r24, Z
    677a:	4a e0       	ldi	r20, 0x0A	; 10
    677c:	be 01       	movw	r22, r28
    677e:	6f 5f       	subi	r22, 0xFF	; 255
    6780:	7e 4f       	sbci	r23, 0xFE	; 254
    6782:	90 e0       	ldi	r25, 0x00	; 0
    6784:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[motorDrive[ch-1][0]]->mode, dout3, 10);
    6788:	f6 01       	movw	r30, r12
    678a:	e8 51       	subi	r30, 0x18	; 24
    678c:	ff 4f       	sbci	r31, 0xFF	; 255
    678e:	e0 81       	ld	r30, Z
    6790:	f0 e0       	ldi	r31, 0x00	; 0
    6792:	ee 0f       	add	r30, r30
    6794:	ff 1f       	adc	r31, r31
    6796:	d4 01       	movw	r26, r8
    6798:	8d 91       	ld	r24, X+
    679a:	9c 91       	ld	r25, X
    679c:	e8 0f       	add	r30, r24
    679e:	f9 1f       	adc	r31, r25
    67a0:	01 90       	ld	r0, Z+
    67a2:	f0 81       	ld	r31, Z
    67a4:	e0 2d       	mov	r30, r0
    67a6:	81 81       	ldd	r24, Z+1	; 0x01
    67a8:	4a e0       	ldi	r20, 0x0A	; 10
    67aa:	be 01       	movw	r22, r28
    67ac:	65 5f       	subi	r22, 0xF5	; 245
    67ae:	7e 4f       	sbci	r23, 0xFE	; 254
    67b0:	90 e0       	ldi	r25, 0x00	; 0
    67b2:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
	}
	if( motorDriveB[ch-1][0] == 255 ) {
    67b6:	f6 01       	movw	r30, r12
    67b8:	e4 50       	subi	r30, 0x04	; 4
    67ba:	ff 4f       	sbci	r31, 0xFF	; 255
    67bc:	e0 81       	ld	r30, Z
    67be:	ef 3f       	cpi	r30, 0xFF	; 255
    67c0:	49 f4       	brne	.+18     	; 0x67d4 <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0xea>
    67c2:	4a e0       	ldi	r20, 0x0A	; 10
    67c4:	be 01       	movw	r22, r28
    67c6:	6a 5f       	subi	r22, 0xFA	; 250
    67c8:	7e 4f       	sbci	r23, 0xFE	; 254
    67ca:	8f ef       	ldi	r24, 0xFF	; 255
    67cc:	9f ef       	ldi	r25, 0xFF	; 255
    67ce:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    67d2:	15 c0       	rjmp	.+42     	; 0x67fe <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x114>
		itoa(-1, dout2, 10);
	} else {
		itoa(pdigitals[motorDriveB[ch-1][0]]->pin, dout2, 10);
    67d4:	f0 e0       	ldi	r31, 0x00	; 0
    67d6:	ee 0f       	add	r30, r30
    67d8:	ff 1f       	adc	r31, r31
    67da:	d7 01       	movw	r26, r14
    67dc:	a8 51       	subi	r26, 0x18	; 24
    67de:	bf 4f       	sbci	r27, 0xFF	; 255
    67e0:	8d 91       	ld	r24, X+
    67e2:	9c 91       	ld	r25, X
    67e4:	e8 0f       	add	r30, r24
    67e6:	f9 1f       	adc	r31, r25
    67e8:	01 90       	ld	r0, Z+
    67ea:	f0 81       	ld	r31, Z
    67ec:	e0 2d       	mov	r30, r0
    67ee:	80 81       	ld	r24, Z
    67f0:	4a e0       	ldi	r20, 0x0A	; 10
    67f2:	be 01       	movw	r22, r28
    67f4:	6a 5f       	subi	r22, 0xFA	; 250
    67f6:	7e 4f       	sbci	r23, 0xFE	; 254
    67f8:	90 e0       	ldi	r25, 0x00	; 0
    67fa:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
	}
	
	itoa(motorDrive[ch-1][1], dout4, 10);
    67fe:	f5 01       	movw	r30, r10
    6800:	ee 0f       	add	r30, r30
    6802:	ff 1f       	adc	r31, r31
    6804:	ee 0d       	add	r30, r14
    6806:	ff 1d       	adc	r31, r15
    6808:	e5 51       	subi	r30, 0x15	; 21
    680a:	ff 4f       	sbci	r31, 0xFF	; 255
    680c:	80 81       	ld	r24, Z
    680e:	4a e0       	ldi	r20, 0x0A	; 10
    6810:	be 01       	movw	r22, r28
    6812:	60 5f       	subi	r22, 0xF0	; 240
    6814:	7e 4f       	sbci	r23, 0xFE	; 254
    6816:	90 e0       	ldi	r25, 0x00	; 0
    6818:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
	if(pdigitals[0])
    681c:	f7 01       	movw	r30, r14
    681e:	e8 51       	subi	r30, 0x18	; 24
    6820:	ff 4f       	sbci	r31, 0xFF	; 255
    6822:	01 90       	ld	r0, Z+
    6824:	f0 81       	ld	r31, Z
    6826:	e0 2d       	mov	r30, r0
    6828:	01 90       	ld	r0, Z+
    682a:	f0 81       	ld	r31, Z
    682c:	e0 2d       	mov	r30, r0
    682e:	30 97       	sbiw	r30, 0x00	; 0
    6830:	49 f0       	breq	.+18     	; 0x6844 <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x15a>
    6832:	80 81       	ld	r24, Z
    6834:	4a e0       	ldi	r20, 0x0A	; 10
    6836:	be 01       	movw	r22, r28
    6838:	6b 5e       	subi	r22, 0xEB	; 235
    683a:	7e 4f       	sbci	r23, 0xFE	; 254
    683c:	90 e0       	ldi	r25, 0x00	; 0
    683e:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    6842:	08 c0       	rjmp	.+16     	; 0x6854 <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x16a>
    6844:	4a e0       	ldi	r20, 0x0A	; 10
    6846:	be 01       	movw	r22, r28
    6848:	6b 5e       	subi	r22, 0xEB	; 235
    684a:	7e 4f       	sbci	r23, 0xFE	; 254
    684c:	80 e0       	ldi	r24, 0x00	; 0
    684e:	90 e0       	ldi	r25, 0x00	; 0
    6850:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[0]->pin, dpin0, 10);
	else
		itoa(0, dpin0, 10);
	if(pdigitals[1])
    6854:	f7 01       	movw	r30, r14
    6856:	e8 51       	subi	r30, 0x18	; 24
    6858:	ff 4f       	sbci	r31, 0xFF	; 255
    685a:	01 90       	ld	r0, Z+
    685c:	f0 81       	ld	r31, Z
    685e:	e0 2d       	mov	r30, r0
    6860:	02 80       	ldd	r0, Z+2	; 0x02
    6862:	f3 81       	ldd	r31, Z+3	; 0x03
    6864:	e0 2d       	mov	r30, r0
    6866:	30 97       	sbiw	r30, 0x00	; 0
    6868:	49 f0       	breq	.+18     	; 0x687c <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x192>
    686a:	80 81       	ld	r24, Z
    686c:	4a e0       	ldi	r20, 0x0A	; 10
    686e:	be 01       	movw	r22, r28
    6870:	66 5e       	subi	r22, 0xE6	; 230
    6872:	7e 4f       	sbci	r23, 0xFE	; 254
    6874:	90 e0       	ldi	r25, 0x00	; 0
    6876:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    687a:	08 c0       	rjmp	.+16     	; 0x688c <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x1a2>
    687c:	4a e0       	ldi	r20, 0x0A	; 10
    687e:	be 01       	movw	r22, r28
    6880:	66 5e       	subi	r22, 0xE6	; 230
    6882:	7e 4f       	sbci	r23, 0xFE	; 254
    6884:	80 e0       	ldi	r24, 0x00	; 0
    6886:	90 e0       	ldi	r25, 0x00	; 0
    6888:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[1]->pin, dpin1, 10);
	else
		itoa(0, dpin1, 10);
	if(pdigitals[2])
    688c:	f7 01       	movw	r30, r14
    688e:	e8 51       	subi	r30, 0x18	; 24
    6890:	ff 4f       	sbci	r31, 0xFF	; 255
    6892:	01 90       	ld	r0, Z+
    6894:	f0 81       	ld	r31, Z
    6896:	e0 2d       	mov	r30, r0
    6898:	04 80       	ldd	r0, Z+4	; 0x04
    689a:	f5 81       	ldd	r31, Z+5	; 0x05
    689c:	e0 2d       	mov	r30, r0
    689e:	30 97       	sbiw	r30, 0x00	; 0
    68a0:	49 f0       	breq	.+18     	; 0x68b4 <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x1ca>
    68a2:	80 81       	ld	r24, Z
    68a4:	4a e0       	ldi	r20, 0x0A	; 10
    68a6:	be 01       	movw	r22, r28
    68a8:	61 5e       	subi	r22, 0xE1	; 225
    68aa:	7e 4f       	sbci	r23, 0xFE	; 254
    68ac:	90 e0       	ldi	r25, 0x00	; 0
    68ae:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    68b2:	08 c0       	rjmp	.+16     	; 0x68c4 <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x1da>
    68b4:	4a e0       	ldi	r20, 0x0A	; 10
    68b6:	be 01       	movw	r22, r28
    68b8:	61 5e       	subi	r22, 0xE1	; 225
    68ba:	7e 4f       	sbci	r23, 0xFE	; 254
    68bc:	80 e0       	ldi	r24, 0x00	; 0
    68be:	90 e0       	ldi	r25, 0x00	; 0
    68c0:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[2]->pin, dpin2, 10);
	else
		itoa(0, dpin2, 10);
	if(pdigitals[3])
    68c4:	f7 01       	movw	r30, r14
    68c6:	e8 51       	subi	r30, 0x18	; 24
    68c8:	ff 4f       	sbci	r31, 0xFF	; 255
    68ca:	01 90       	ld	r0, Z+
    68cc:	f0 81       	ld	r31, Z
    68ce:	e0 2d       	mov	r30, r0
    68d0:	06 80       	ldd	r0, Z+6	; 0x06
    68d2:	f7 81       	ldd	r31, Z+7	; 0x07
    68d4:	e0 2d       	mov	r30, r0
    68d6:	30 97       	sbiw	r30, 0x00	; 0
    68d8:	49 f0       	breq	.+18     	; 0x68ec <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x202>
    68da:	80 81       	ld	r24, Z
    68dc:	4a e0       	ldi	r20, 0x0A	; 10
    68de:	be 01       	movw	r22, r28
    68e0:	6c 5d       	subi	r22, 0xDC	; 220
    68e2:	7e 4f       	sbci	r23, 0xFE	; 254
    68e4:	90 e0       	ldi	r25, 0x00	; 0
    68e6:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    68ea:	08 c0       	rjmp	.+16     	; 0x68fc <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x212>
    68ec:	4a e0       	ldi	r20, 0x0A	; 10
    68ee:	be 01       	movw	r22, r28
    68f0:	6c 5d       	subi	r22, 0xDC	; 220
    68f2:	7e 4f       	sbci	r23, 0xFE	; 254
    68f4:	80 e0       	ldi	r24, 0x00	; 0
    68f6:	90 e0       	ldi	r25, 0x00	; 0
    68f8:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[3]->pin, dpin3, 10);
	else
		itoa(0, dpin3, 10);
	if(pdigitals[4])
    68fc:	f7 01       	movw	r30, r14
    68fe:	e8 51       	subi	r30, 0x18	; 24
    6900:	ff 4f       	sbci	r31, 0xFF	; 255
    6902:	01 90       	ld	r0, Z+
    6904:	f0 81       	ld	r31, Z
    6906:	e0 2d       	mov	r30, r0
    6908:	00 84       	ldd	r0, Z+8	; 0x08
    690a:	f1 85       	ldd	r31, Z+9	; 0x09
    690c:	e0 2d       	mov	r30, r0
    690e:	30 97       	sbiw	r30, 0x00	; 0
    6910:	49 f0       	breq	.+18     	; 0x6924 <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x23a>
    6912:	80 81       	ld	r24, Z
    6914:	4a e0       	ldi	r20, 0x0A	; 10
    6916:	be 01       	movw	r22, r28
    6918:	67 5d       	subi	r22, 0xD7	; 215
    691a:	7e 4f       	sbci	r23, 0xFE	; 254
    691c:	90 e0       	ldi	r25, 0x00	; 0
    691e:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    6922:	08 c0       	rjmp	.+16     	; 0x6934 <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x24a>
    6924:	4a e0       	ldi	r20, 0x0A	; 10
    6926:	be 01       	movw	r22, r28
    6928:	67 5d       	subi	r22, 0xD7	; 215
    692a:	7e 4f       	sbci	r23, 0xFE	; 254
    692c:	80 e0       	ldi	r24, 0x00	; 0
    692e:	90 e0       	ldi	r25, 0x00	; 0
    6930:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[4]->pin, dpin4, 10);
	else
		itoa(0, dpin4, 10);
	if(pdigitals[5])
    6934:	f7 01       	movw	r30, r14
    6936:	e8 51       	subi	r30, 0x18	; 24
    6938:	ff 4f       	sbci	r31, 0xFF	; 255
    693a:	01 90       	ld	r0, Z+
    693c:	f0 81       	ld	r31, Z
    693e:	e0 2d       	mov	r30, r0
    6940:	02 84       	ldd	r0, Z+10	; 0x0a
    6942:	f3 85       	ldd	r31, Z+11	; 0x0b
    6944:	e0 2d       	mov	r30, r0
    6946:	30 97       	sbiw	r30, 0x00	; 0
    6948:	49 f0       	breq	.+18     	; 0x695c <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x272>
    694a:	80 81       	ld	r24, Z
    694c:	4a e0       	ldi	r20, 0x0A	; 10
    694e:	be 01       	movw	r22, r28
    6950:	62 5d       	subi	r22, 0xD2	; 210
    6952:	7e 4f       	sbci	r23, 0xFE	; 254
    6954:	90 e0       	ldi	r25, 0x00	; 0
    6956:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    695a:	08 c0       	rjmp	.+16     	; 0x696c <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x282>
    695c:	4a e0       	ldi	r20, 0x0A	; 10
    695e:	be 01       	movw	r22, r28
    6960:	62 5d       	subi	r22, 0xD2	; 210
    6962:	7e 4f       	sbci	r23, 0xFE	; 254
    6964:	80 e0       	ldi	r24, 0x00	; 0
    6966:	90 e0       	ldi	r25, 0x00	; 0
    6968:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[5]->pin, dpin5, 10);
	else
		itoa(0, dpin5, 10);
	if(pdigitals[6])
    696c:	f7 01       	movw	r30, r14
    696e:	e8 51       	subi	r30, 0x18	; 24
    6970:	ff 4f       	sbci	r31, 0xFF	; 255
    6972:	01 90       	ld	r0, Z+
    6974:	f0 81       	ld	r31, Z
    6976:	e0 2d       	mov	r30, r0
    6978:	04 84       	ldd	r0, Z+12	; 0x0c
    697a:	f5 85       	ldd	r31, Z+13	; 0x0d
    697c:	e0 2d       	mov	r30, r0
    697e:	30 97       	sbiw	r30, 0x00	; 0
    6980:	49 f0       	breq	.+18     	; 0x6994 <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x2aa>
    6982:	80 81       	ld	r24, Z
    6984:	4a e0       	ldi	r20, 0x0A	; 10
    6986:	be 01       	movw	r22, r28
    6988:	6d 5c       	subi	r22, 0xCD	; 205
    698a:	7e 4f       	sbci	r23, 0xFE	; 254
    698c:	90 e0       	ldi	r25, 0x00	; 0
    698e:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    6992:	08 c0       	rjmp	.+16     	; 0x69a4 <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x2ba>
    6994:	4a e0       	ldi	r20, 0x0A	; 10
    6996:	be 01       	movw	r22, r28
    6998:	6d 5c       	subi	r22, 0xCD	; 205
    699a:	7e 4f       	sbci	r23, 0xFE	; 254
    699c:	80 e0       	ldi	r24, 0x00	; 0
    699e:	90 e0       	ldi	r25, 0x00	; 0
    69a0:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[6]->pin, dpin6, 10);
	else
		itoa(0, dpin6, 10);
	if(pdigitals[7])
    69a4:	f7 01       	movw	r30, r14
    69a6:	e8 51       	subi	r30, 0x18	; 24
    69a8:	ff 4f       	sbci	r31, 0xFF	; 255
    69aa:	01 90       	ld	r0, Z+
    69ac:	f0 81       	ld	r31, Z
    69ae:	e0 2d       	mov	r30, r0
    69b0:	06 84       	ldd	r0, Z+14	; 0x0e
    69b2:	f7 85       	ldd	r31, Z+15	; 0x0f
    69b4:	e0 2d       	mov	r30, r0
    69b6:	30 97       	sbiw	r30, 0x00	; 0
    69b8:	49 f0       	breq	.+18     	; 0x69cc <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x2e2>
    69ba:	80 81       	ld	r24, Z
    69bc:	4a e0       	ldi	r20, 0x0A	; 10
    69be:	be 01       	movw	r22, r28
    69c0:	68 5c       	subi	r22, 0xC8	; 200
    69c2:	7e 4f       	sbci	r23, 0xFE	; 254
    69c4:	90 e0       	ldi	r25, 0x00	; 0
    69c6:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    69ca:	08 c0       	rjmp	.+16     	; 0x69dc <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x2f2>
    69cc:	4a e0       	ldi	r20, 0x0A	; 10
    69ce:	be 01       	movw	r22, r28
    69d0:	68 5c       	subi	r22, 0xC8	; 200
    69d2:	7e 4f       	sbci	r23, 0xFE	; 254
    69d4:	80 e0       	ldi	r24, 0x00	; 0
    69d6:	90 e0       	ldi	r25, 0x00	; 0
    69d8:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[7]->pin, dpin7, 10);
	else
		itoa(0, dpin7, 10);
	if(pdigitals[8])
    69dc:	f7 01       	movw	r30, r14
    69de:	e8 51       	subi	r30, 0x18	; 24
    69e0:	ff 4f       	sbci	r31, 0xFF	; 255
    69e2:	01 90       	ld	r0, Z+
    69e4:	f0 81       	ld	r31, Z
    69e6:	e0 2d       	mov	r30, r0
    69e8:	00 88       	ldd	r0, Z+16	; 0x10
    69ea:	f1 89       	ldd	r31, Z+17	; 0x11
    69ec:	e0 2d       	mov	r30, r0
    69ee:	30 97       	sbiw	r30, 0x00	; 0
    69f0:	49 f0       	breq	.+18     	; 0x6a04 <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x31a>
    69f2:	80 81       	ld	r24, Z
    69f4:	4a e0       	ldi	r20, 0x0A	; 10
    69f6:	be 01       	movw	r22, r28
    69f8:	63 5c       	subi	r22, 0xC3	; 195
    69fa:	7e 4f       	sbci	r23, 0xFE	; 254
    69fc:	90 e0       	ldi	r25, 0x00	; 0
    69fe:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    6a02:	08 c0       	rjmp	.+16     	; 0x6a14 <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x32a>
    6a04:	4a e0       	ldi	r20, 0x0A	; 10
    6a06:	be 01       	movw	r22, r28
    6a08:	63 5c       	subi	r22, 0xC3	; 195
    6a0a:	7e 4f       	sbci	r23, 0xFE	; 254
    6a0c:	80 e0       	ldi	r24, 0x00	; 0
    6a0e:	90 e0       	ldi	r25, 0x00	; 0
    6a10:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[8]->pin, dpin8, 10);
	else
		itoa(0, dpin8, 10);
	if(pdigitals[9])
    6a14:	f7 01       	movw	r30, r14
    6a16:	e8 51       	subi	r30, 0x18	; 24
    6a18:	ff 4f       	sbci	r31, 0xFF	; 255
    6a1a:	01 90       	ld	r0, Z+
    6a1c:	f0 81       	ld	r31, Z
    6a1e:	e0 2d       	mov	r30, r0
    6a20:	02 88       	ldd	r0, Z+18	; 0x12
    6a22:	f3 89       	ldd	r31, Z+19	; 0x13
    6a24:	e0 2d       	mov	r30, r0
    6a26:	30 97       	sbiw	r30, 0x00	; 0
    6a28:	49 f0       	breq	.+18     	; 0x6a3c <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x352>
    6a2a:	80 81       	ld	r24, Z
    6a2c:	4a e0       	ldi	r20, 0x0A	; 10
    6a2e:	be 01       	movw	r22, r28
    6a30:	6e 5b       	subi	r22, 0xBE	; 190
    6a32:	7e 4f       	sbci	r23, 0xFE	; 254
    6a34:	90 e0       	ldi	r25, 0x00	; 0
    6a36:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
    6a3a:	08 c0       	rjmp	.+16     	; 0x6a4c <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x362>
    6a3c:	4a e0       	ldi	r20, 0x0A	; 10
    6a3e:	be 01       	movw	r22, r28
    6a40:	6e 5b       	subi	r22, 0xBE	; 190
    6a42:	7e 4f       	sbci	r23, 0xFE	; 254
    6a44:	80 e0       	ldi	r24, 0x00	; 0
    6a46:	90 e0       	ldi	r25, 0x00	; 0
    6a48:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[9]->pin, dpin9, 10);
	else
		itoa(0, dpin9, 10);
	if( motorDrive[ch-1][0] == 255 ) {
    6a4c:	f6 01       	movw	r30, r12
    6a4e:	e8 51       	subi	r30, 0x18	; 24
    6a50:	ff 4f       	sbci	r31, 0xFF	; 255
    6a52:	80 81       	ld	r24, Z
    6a54:	8f 3f       	cpi	r24, 0xFF	; 255
    6a56:	e1 f5       	brne	.+120    	; 0x6ad0 <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x3e6>
		sprintf(cout,"SB-Digital UNITIALIZED PinA:%s, Digital PinB:%s, Mode:%s, Enable Pin:%s\r\nDir Pins:0=%s,1=%s,2=%s,3=%s,4=%s,5=%s,6=%s,7=%s,8=%s,9=%s\0",
			dout1, dout2, dout3 ,dout4, dpin0, dpin1, dpin2, dpin3, dpin4, dpin5, dpin6, dpin7, dpin8, dpin9);
    6a58:	ce 01       	movw	r24, r28
    6a5a:	8e 5b       	subi	r24, 0xBE	; 190
    6a5c:	9e 4f       	sbci	r25, 0xFE	; 254
    6a5e:	9f 93       	push	r25
    6a60:	8f 93       	push	r24
    6a62:	05 97       	sbiw	r24, 0x05	; 5
    6a64:	9f 93       	push	r25
    6a66:	8f 93       	push	r24
    6a68:	05 97       	sbiw	r24, 0x05	; 5
    6a6a:	9f 93       	push	r25
    6a6c:	8f 93       	push	r24
    6a6e:	05 97       	sbiw	r24, 0x05	; 5
    6a70:	9f 93       	push	r25
    6a72:	8f 93       	push	r24
    6a74:	05 97       	sbiw	r24, 0x05	; 5
    6a76:	9f 93       	push	r25
    6a78:	8f 93       	push	r24
    6a7a:	05 97       	sbiw	r24, 0x05	; 5
    6a7c:	9f 93       	push	r25
    6a7e:	8f 93       	push	r24
    6a80:	05 97       	sbiw	r24, 0x05	; 5
    6a82:	9f 93       	push	r25
    6a84:	8f 93       	push	r24
    6a86:	05 97       	sbiw	r24, 0x05	; 5
    6a88:	9f 93       	push	r25
    6a8a:	8f 93       	push	r24
    6a8c:	05 97       	sbiw	r24, 0x05	; 5
    6a8e:	9f 93       	push	r25
    6a90:	8f 93       	push	r24
    6a92:	05 97       	sbiw	r24, 0x05	; 5
    6a94:	9f 93       	push	r25
    6a96:	8f 93       	push	r24
    6a98:	05 97       	sbiw	r24, 0x05	; 5
    6a9a:	9f 93       	push	r25
    6a9c:	8f 93       	push	r24
    6a9e:	05 97       	sbiw	r24, 0x05	; 5
    6aa0:	9f 93       	push	r25
    6aa2:	8f 93       	push	r24
    6aa4:	05 97       	sbiw	r24, 0x05	; 5
    6aa6:	9f 93       	push	r25
    6aa8:	8f 93       	push	r24
    6aaa:	05 97       	sbiw	r24, 0x05	; 5
    6aac:	9f 93       	push	r25
    6aae:	8f 93       	push	r24
    6ab0:	83 ee       	ldi	r24, 0xE3	; 227
    6ab2:	94 e0       	ldi	r25, 0x04	; 4
    6ab4:	9f 93       	push	r25
    6ab6:	8f 93       	push	r24
    6ab8:	ce 01       	movw	r24, r28
    6aba:	01 96       	adiw	r24, 0x01	; 1
    6abc:	9f 93       	push	r25
    6abe:	8f 93       	push	r24
    6ac0:	0e 94 6f ac 	call	0x158de	; 0x158de <sprintf>
    6ac4:	0f b6       	in	r0, 0x3f	; 63
    6ac6:	f8 94       	cli
    6ac8:	de bf       	out	0x3e, r29	; 62
    6aca:	0f be       	out	0x3f, r0	; 63
    6acc:	cd bf       	out	0x3d, r28	; 61
    6ace:	44 c0       	rjmp	.+136    	; 0x6b58 <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x46e>
	} else {
		sprintf(cout,"SB-Digital PinA:%s, Digital PinB:%s, Mode:%s, Enable Pin:%s\r\nDir Pins:0=%s,1=%s,2=%s,3=%s,4=%s,5=%s,6=%s,7=%s,8=%s,9=%s\0",
			dout1, dout2, dout3 ,dout4, dpin0, dpin1, dpin2, dpin3, dpin4, dpin5, dpin6, dpin7, dpin8, dpin9);
    6ad0:	ce 01       	movw	r24, r28
    6ad2:	8e 5b       	subi	r24, 0xBE	; 190
    6ad4:	9e 4f       	sbci	r25, 0xFE	; 254
    6ad6:	9f 93       	push	r25
    6ad8:	8f 93       	push	r24
    6ada:	05 97       	sbiw	r24, 0x05	; 5
    6adc:	9f 93       	push	r25
    6ade:	8f 93       	push	r24
    6ae0:	05 97       	sbiw	r24, 0x05	; 5
    6ae2:	9f 93       	push	r25
    6ae4:	8f 93       	push	r24
    6ae6:	05 97       	sbiw	r24, 0x05	; 5
    6ae8:	9f 93       	push	r25
    6aea:	8f 93       	push	r24
    6aec:	05 97       	sbiw	r24, 0x05	; 5
    6aee:	9f 93       	push	r25
    6af0:	8f 93       	push	r24
    6af2:	05 97       	sbiw	r24, 0x05	; 5
    6af4:	9f 93       	push	r25
    6af6:	8f 93       	push	r24
    6af8:	05 97       	sbiw	r24, 0x05	; 5
    6afa:	9f 93       	push	r25
    6afc:	8f 93       	push	r24
    6afe:	05 97       	sbiw	r24, 0x05	; 5
    6b00:	9f 93       	push	r25
    6b02:	8f 93       	push	r24
    6b04:	05 97       	sbiw	r24, 0x05	; 5
    6b06:	9f 93       	push	r25
    6b08:	8f 93       	push	r24
    6b0a:	05 97       	sbiw	r24, 0x05	; 5
    6b0c:	9f 93       	push	r25
    6b0e:	8f 93       	push	r24
    6b10:	05 97       	sbiw	r24, 0x05	; 5
    6b12:	9f 93       	push	r25
    6b14:	8f 93       	push	r24
    6b16:	05 97       	sbiw	r24, 0x05	; 5
    6b18:	9f 93       	push	r25
    6b1a:	8f 93       	push	r24
    6b1c:	05 97       	sbiw	r24, 0x05	; 5
    6b1e:	9f 93       	push	r25
    6b20:	8f 93       	push	r24
    6b22:	05 97       	sbiw	r24, 0x05	; 5
    6b24:	9f 93       	push	r25
    6b26:	8f 93       	push	r24
    6b28:	88 e6       	ldi	r24, 0x68	; 104
    6b2a:	95 e0       	ldi	r25, 0x05	; 5
    6b2c:	9f 93       	push	r25
    6b2e:	8f 93       	push	r24
    6b30:	ce 01       	movw	r24, r28
    6b32:	01 96       	adiw	r24, 0x01	; 1
    6b34:	9f 93       	push	r25
    6b36:	8f 93       	push	r24
    6b38:	0e 94 6f ac 	call	0x158de	; 0x158de <sprintf>
    6b3c:	0f b6       	in	r0, 0x3f	; 63
    6b3e:	f8 94       	cli
    6b40:	de bf       	out	0x3e, r29	; 62
    6b42:	0f be       	out	0x3f, r0	; 63
    6b44:	cd bf       	out	0x3d, r28	; 61
    6b46:	08 c0       	rjmp	.+16     	; 0x6b58 <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x46e>
	}
	for(int i=0; i < OUT_BUFFER_SIZE; ++i){
		 outStr[i] = cout[i];
    6b48:	81 91       	ld	r24, Z+
    6b4a:	8d 93       	st	X+, r24
		 if(!outStr[i])
    6b4c:	88 23       	and	r24, r24
    6b4e:	81 f0       	breq	.+32     	; 0x6b70 <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x486>
			dout1, dout2, dout3 ,dout4, dpin0, dpin1, dpin2, dpin3, dpin4, dpin5, dpin6, dpin7, dpin8, dpin9);
	} else {
		sprintf(cout,"SB-Digital PinA:%s, Digital PinB:%s, Mode:%s, Enable Pin:%s\r\nDir Pins:0=%s,1=%s,2=%s,3=%s,4=%s,5=%s,6=%s,7=%s,8=%s,9=%s\0",
			dout1, dout2, dout3 ,dout4, dpin0, dpin1, dpin2, dpin3, dpin4, dpin5, dpin6, dpin7, dpin8, dpin9);
	}
	for(int i=0; i < OUT_BUFFER_SIZE; ++i){
    6b50:	e2 17       	cp	r30, r18
    6b52:	f3 07       	cpc	r31, r19
    6b54:	c9 f7       	brne	.-14     	; 0x6b48 <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x45e>
    6b56:	0c c0       	rjmp	.+24     	; 0x6b70 <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x486>
		 outStr[i] = cout[i];
    6b58:	89 81       	ldd	r24, Y+1	; 0x01
    6b5a:	d8 01       	movw	r26, r16
    6b5c:	8c 93       	st	X, r24
		 if(!outStr[i])
    6b5e:	88 23       	and	r24, r24
    6b60:	39 f0       	breq	.+14     	; 0x6b70 <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x486>
    6b62:	fe 01       	movw	r30, r28
    6b64:	32 96       	adiw	r30, 0x02	; 2
    6b66:	11 96       	adiw	r26, 0x01	; 1
    6b68:	9e 01       	movw	r18, r28
    6b6a:	2f 5f       	subi	r18, 0xFF	; 255
    6b6c:	3e 4f       	sbci	r19, 0xFE	; 254
    6b6e:	ec cf       	rjmp	.-40     	; 0x6b48 <_ZN18SwitchBridgeDriver13getDriverInfoEhPc+0x45e>
			break;
	}
}
    6b70:	ca 5b       	subi	r28, 0xBA	; 186
    6b72:	de 4f       	sbci	r29, 0xFE	; 254
    6b74:	0f b6       	in	r0, 0x3f	; 63
    6b76:	f8 94       	cli
    6b78:	de bf       	out	0x3e, r29	; 62
    6b7a:	0f be       	out	0x3f, r0	; 63
    6b7c:	cd bf       	out	0x3d, r28	; 61
    6b7e:	df 91       	pop	r29
    6b80:	cf 91       	pop	r28
    6b82:	1f 91       	pop	r17
    6b84:	0f 91       	pop	r16
    6b86:	ff 90       	pop	r15
    6b88:	ef 90       	pop	r14
    6b8a:	df 90       	pop	r13
    6b8c:	cf 90       	pop	r12
    6b8e:	bf 90       	pop	r11
    6b90:	af 90       	pop	r10
    6b92:	9f 90       	pop	r9
    6b94:	8f 90       	pop	r8
    6b96:	08 95       	ret

00006b98 <_ZN18SwitchBridgeDriver17commandMotorPowerEhi>:

/*
* Command the power level. Manage enable pin. This inherits from AbstractMotorControl, but the motorPower is merely a +/- 
* forward/back value since we have a switched on/off control. It always max on forward, max on back
*/
int SwitchBridgeDriver::commandMotorPower(uint8_t motorChannel, int16_t motorPower) {
    6b98:	af 92       	push	r10
    6b9a:	bf 92       	push	r11
    6b9c:	cf 92       	push	r12
    6b9e:	df 92       	push	r13
    6ba0:	ef 92       	push	r14
    6ba2:	ff 92       	push	r15
    6ba4:	0f 93       	push	r16
    6ba6:	1f 93       	push	r17
    6ba8:	cf 93       	push	r28
    6baa:	df 93       	push	r29
	// check shutdown override
	if( MOTORSHUTDOWN )
    6bac:	fc 01       	movw	r30, r24
    6bae:	ed 51       	subi	r30, 0x1D	; 29
    6bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    6bb2:	20 81       	ld	r18, Z
    6bb4:	21 11       	cpse	r18, r1
    6bb6:	10 c2       	rjmp	.+1056   	; 0x6fd8 <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x440>
    6bb8:	7a 01       	movw	r14, r20
    6bba:	5c 01       	movw	r10, r24
		return 0;
	int foundPin = 0;
	motorSpeed[motorChannel-1] = motorPower; //why? +/-
    6bbc:	06 2f       	mov	r16, r22
    6bbe:	10 e0       	ldi	r17, 0x00	; 0
    6bc0:	01 50       	subi	r16, 0x01	; 1
    6bc2:	11 09       	sbc	r17, r1
    6bc4:	f8 01       	movw	r30, r16
    6bc6:	ee 0f       	add	r30, r30
    6bc8:	ff 1f       	adc	r31, r31
    6bca:	e8 0f       	add	r30, r24
    6bcc:	f9 1f       	adc	r31, r25
    6bce:	e7 59       	subi	r30, 0x97	; 151
    6bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    6bd2:	51 83       	std	Z+1, r21	; 0x01
    6bd4:	40 83       	st	Z, r20
	// set enable pin
	for(int i = 0; i < 10; i++) {
		if(pdigitals[i] && pdigitals[i]->pin == motorDrive[motorChannel-1][1]) {
    6bd6:	fc 01       	movw	r30, r24
    6bd8:	e8 51       	subi	r30, 0x18	; 24
    6bda:	ff 4f       	sbci	r31, 0xFF	; 255
    6bdc:	a0 81       	ld	r26, Z
    6bde:	b1 81       	ldd	r27, Z+1	; 0x01
    6be0:	20 e0       	ldi	r18, 0x00	; 0
    6be2:	30 e0       	ldi	r19, 0x00	; 0
    6be4:	b8 01       	movw	r22, r16
    6be6:	66 0f       	add	r22, r22
    6be8:	77 1f       	adc	r23, r23
    6bea:	68 0f       	add	r22, r24
    6bec:	79 1f       	adc	r23, r25
    6bee:	65 51       	subi	r22, 0x15	; 21
    6bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    6bf2:	c9 01       	movw	r24, r18
    6bf4:	ed 91       	ld	r30, X+
    6bf6:	fd 91       	ld	r31, X+
    6bf8:	30 97       	sbiw	r30, 0x00	; 0
    6bfa:	09 f4       	brne	.+2      	; 0x6bfe <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x66>
    6bfc:	c5 c0       	rjmp	.+394    	; 0x6d88 <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x1f0>
    6bfe:	eb 01       	movw	r28, r22
    6c00:	48 81       	ld	r20, Y
    6c02:	50 81       	ld	r21, Z
    6c04:	54 13       	cpse	r21, r20
    6c06:	c0 c0       	rjmp	.+384    	; 0x6d88 <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x1f0>
	}
	
void setPin(uint8_t spin) { this->pin = spin; }
	
void pinMode(uint8_t pmode) {
	this->mode = pmode;
    6c08:	21 e0       	ldi	r18, 0x01	; 1
    6c0a:	21 83       	std	Z+1, r18	; 0x01
	uint8_t bit = digitalPinToBitMask(this->pin);
    6c0c:	24 2f       	mov	r18, r20
    6c0e:	30 e0       	ldi	r19, 0x00	; 0
    6c10:	f9 01       	movw	r30, r18
    6c12:	ee 5f       	subi	r30, 0xFE	; 254
    6c14:	f7 4f       	sbci	r31, 0xF7	; 247
    6c16:	44 91       	lpm	r20, Z
	uint8_t port = digitalPinToPort(this->pin);
    6c18:	f9 01       	movw	r30, r18
    6c1a:	e8 5b       	subi	r30, 0xB8	; 184
    6c1c:	f7 4f       	sbci	r31, 0xF7	; 247
    6c1e:	24 91       	lpm	r18, Z
	volatile uint16_t *reg, *out;

	if (port == NOT_A_PIN) return;
    6c20:	22 23       	and	r18, r18
    6c22:	b9 f0       	breq	.+46     	; 0x6c52 <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0xba>

	reg = portModeRegister(port);
    6c24:	30 e0       	ldi	r19, 0x00	; 0
    6c26:	22 0f       	add	r18, r18
    6c28:	33 1f       	adc	r19, r19
    6c2a:	f9 01       	movw	r30, r18
    6c2c:	e8 55       	subi	r30, 0x58	; 88
    6c2e:	f7 4f       	sbci	r31, 0xF7	; 247
    6c30:	a5 91       	lpm	r26, Z+
    6c32:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    6c34:	f9 01       	movw	r30, r18
    6c36:	e2 57       	subi	r30, 0x72	; 114
    6c38:	f7 4f       	sbci	r31, 0xF7	; 247
    6c3a:	25 91       	lpm	r18, Z+
    6c3c:	34 91       	lpm	r19, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    6c3e:	5f b7       	in	r21, 0x3f	; 63
                cli();
    6c40:	f8 94       	cli
		*reg |= bit;
    6c42:	2d 91       	ld	r18, X+
    6c44:	3c 91       	ld	r19, X
    6c46:	11 97       	sbiw	r26, 0x01	; 1
    6c48:	24 2b       	or	r18, r20
    6c4a:	11 96       	adiw	r26, 0x01	; 1
    6c4c:	3c 93       	st	X, r19
    6c4e:	2e 93       	st	-X, r18
		SREG = oldSREG;
    6c50:	5f bf       	out	0x3f, r21	; 63
			//pdigitals[i]->setPin(motorDrive[motorChannel-1][1]);
			pdigitals[i]->pinMode(OUTPUT);
			pdigitals[i]->digitalWrite(HIGH);
    6c52:	f5 01       	movw	r30, r10
    6c54:	e8 51       	subi	r30, 0x18	; 24
    6c56:	ff 4f       	sbci	r31, 0xFF	; 255
    6c58:	20 81       	ld	r18, Z
    6c5a:	31 81       	ldd	r19, Z+1	; 0x01
    6c5c:	f9 01       	movw	r30, r18
    6c5e:	e8 0f       	add	r30, r24
    6c60:	f9 1f       	adc	r31, r25
	}
}

void digitalWrite(uint8_t val)
{
	uint8_t timer = digitalPinToTimer(this->pin);
    6c62:	01 90       	ld	r0, Z+
    6c64:	f0 81       	ld	r31, Z
    6c66:	e0 2d       	mov	r30, r0
    6c68:	80 81       	ld	r24, Z
    6c6a:	90 e0       	ldi	r25, 0x00	; 0
    6c6c:	fc 01       	movw	r30, r24
    6c6e:	e4 54       	subi	r30, 0x44	; 68
    6c70:	f8 4f       	sbci	r31, 0xF8	; 248
    6c72:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(this->pin);
    6c74:	fc 01       	movw	r30, r24
    6c76:	ee 5f       	subi	r30, 0xFE	; 254
    6c78:	f7 4f       	sbci	r31, 0xF7	; 247
    6c7a:	d4 90       	lpm	r13, Z
	uint8_t port = digitalPinToPort(this->pin);
    6c7c:	fc 01       	movw	r30, r24
    6c7e:	e8 5b       	subi	r30, 0xB8	; 184
    6c80:	f7 4f       	sbci	r31, 0xF7	; 247
    6c82:	c4 90       	lpm	r12, Z
	volatile uint16_t *out;

	if (port == NOT_A_PIN) return;
    6c84:	cc 20       	and	r12, r12
    6c86:	09 f4       	brne	.+2      	; 0x6c8a <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0xf2>
    6c88:	88 c0       	rjmp	.+272    	; 0x6d9a <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x202>

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6c8a:	22 23       	and	r18, r18
    6c8c:	09 f4       	brne	.+2      	; 0x6c90 <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0xf8>
    6c8e:	67 c0       	rjmp	.+206    	; 0x6d5e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x1c6>

// If we detect the pin is on a timer, we may need to defuse PWM output, 
// we need to turn pin off before doing a digital write.
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6c90:	82 2f       	mov	r24, r18
    6c92:	90 e0       	ldi	r25, 0x00	; 0
    6c94:	fc 01       	movw	r30, r24
    6c96:	31 97       	sbiw	r30, 0x01	; 1
    6c98:	e0 31       	cpi	r30, 0x10	; 16
    6c9a:	f1 05       	cpc	r31, r1
    6c9c:	08 f0       	brcs	.+2      	; 0x6ca0 <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x108>
    6c9e:	5f c0       	rjmp	.+190    	; 0x6d5e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x1c6>
    6ca0:	88 27       	eor	r24, r24
    6ca2:	ed 5c       	subi	r30, 0xCD	; 205
    6ca4:	fe 4f       	sbci	r31, 0xFE	; 254
    6ca6:	8f 4f       	sbci	r24, 0xFF	; 255
    6ca8:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
	{
		case TIMER0A: Timer0.stopChannel(CHANNEL_A); break;
    6cac:	60 e0       	ldi	r22, 0x00	; 0
    6cae:	84 e7       	ldi	r24, 0x74	; 116
    6cb0:	97 e1       	ldi	r25, 0x17	; 23
    6cb2:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6cb6:	53 c0       	rjmp	.+166    	; 0x6d5e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x1c6>
		case TIMER0B: Timer0.stopChannel(CHANNEL_B); break;
    6cb8:	61 e0       	ldi	r22, 0x01	; 1
    6cba:	84 e7       	ldi	r24, 0x74	; 116
    6cbc:	97 e1       	ldi	r25, 0x17	; 23
    6cbe:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6cc2:	4d c0       	rjmp	.+154    	; 0x6d5e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x1c6>
	
		case TIMER1A: Timer1.stopChannel(CHANNEL_A); break;
    6cc4:	60 e0       	ldi	r22, 0x00	; 0
    6cc6:	85 e4       	ldi	r24, 0x45	; 69
    6cc8:	97 e1       	ldi	r25, 0x17	; 23
    6cca:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6cce:	47 c0       	rjmp	.+142    	; 0x6d5e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x1c6>
		case TIMER1B: Timer1.stopChannel(CHANNEL_B); break;
    6cd0:	61 e0       	ldi	r22, 0x01	; 1
    6cd2:	85 e4       	ldi	r24, 0x45	; 69
    6cd4:	97 e1       	ldi	r25, 0x17	; 23
    6cd6:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6cda:	41 c0       	rjmp	.+130    	; 0x6d5e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x1c6>
		
		case TIMER2A: Timer2.stopChannel(CHANNEL_A); break;
    6cdc:	60 e0       	ldi	r22, 0x00	; 0
    6cde:	86 e1       	ldi	r24, 0x16	; 22
    6ce0:	97 e1       	ldi	r25, 0x17	; 23
    6ce2:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6ce6:	3b c0       	rjmp	.+118    	; 0x6d5e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x1c6>
		case TIMER2B: Timer2.stopChannel(CHANNEL_B); break;
    6ce8:	61 e0       	ldi	r22, 0x01	; 1
    6cea:	86 e1       	ldi	r24, 0x16	; 22
    6cec:	97 e1       	ldi	r25, 0x17	; 23
    6cee:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6cf2:	35 c0       	rjmp	.+106    	; 0x6d5e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x1c6>
	
		case TIMER3A: Timer3.stopChannel(CHANNEL_A); break;
    6cf4:	60 e0       	ldi	r22, 0x00	; 0
    6cf6:	87 ee       	ldi	r24, 0xE7	; 231
    6cf8:	96 e1       	ldi	r25, 0x16	; 22
    6cfa:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6cfe:	2f c0       	rjmp	.+94     	; 0x6d5e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x1c6>
		case TIMER3B: Timer3.stopChannel(CHANNEL_B); break; 
    6d00:	61 e0       	ldi	r22, 0x01	; 1
    6d02:	87 ee       	ldi	r24, 0xE7	; 231
    6d04:	96 e1       	ldi	r25, 0x16	; 22
    6d06:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6d0a:	29 c0       	rjmp	.+82     	; 0x6d5e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x1c6>
		case TIMER3C: Timer3.stopChannel(CHANNEL_C); break;
    6d0c:	62 e0       	ldi	r22, 0x02	; 2
    6d0e:	87 ee       	ldi	r24, 0xE7	; 231
    6d10:	96 e1       	ldi	r25, 0x16	; 22
    6d12:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6d16:	23 c0       	rjmp	.+70     	; 0x6d5e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x1c6>
		
		case TIMER4A: Timer4.stopChannel(CHANNEL_A); break;
    6d18:	60 e0       	ldi	r22, 0x00	; 0
    6d1a:	88 eb       	ldi	r24, 0xB8	; 184
    6d1c:	96 e1       	ldi	r25, 0x16	; 22
    6d1e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6d22:	1d c0       	rjmp	.+58     	; 0x6d5e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x1c6>
		case TIMER4B: Timer4.stopChannel(CHANNEL_B); break; 
    6d24:	61 e0       	ldi	r22, 0x01	; 1
    6d26:	88 eb       	ldi	r24, 0xB8	; 184
    6d28:	96 e1       	ldi	r25, 0x16	; 22
    6d2a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6d2e:	17 c0       	rjmp	.+46     	; 0x6d5e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x1c6>
		case TIMER4C: Timer4.stopChannel(CHANNEL_C); break;
    6d30:	62 e0       	ldi	r22, 0x02	; 2
    6d32:	88 eb       	ldi	r24, 0xB8	; 184
    6d34:	96 e1       	ldi	r25, 0x16	; 22
    6d36:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6d3a:	11 c0       	rjmp	.+34     	; 0x6d5e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x1c6>
		
		case TIMER5A: Timer5.stopChannel(CHANNEL_A); break;
    6d3c:	60 e0       	ldi	r22, 0x00	; 0
    6d3e:	89 e8       	ldi	r24, 0x89	; 137
    6d40:	96 e1       	ldi	r25, 0x16	; 22
    6d42:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6d46:	0b c0       	rjmp	.+22     	; 0x6d5e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x1c6>
		case TIMER5B: Timer5.stopChannel(CHANNEL_B); break; 
    6d48:	61 e0       	ldi	r22, 0x01	; 1
    6d4a:	89 e8       	ldi	r24, 0x89	; 137
    6d4c:	96 e1       	ldi	r25, 0x16	; 22
    6d4e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6d52:	05 c0       	rjmp	.+10     	; 0x6d5e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x1c6>
		case TIMER5C: Timer5.stopChannel(CHANNEL_C); break;
    6d54:	62 e0       	ldi	r22, 0x02	; 2
    6d56:	89 e8       	ldi	r24, 0x89	; 137
    6d58:	96 e1       	ldi	r25, 0x16	; 22
    6d5a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
	if (port == NOT_A_PIN) return;

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    6d5e:	ec 2d       	mov	r30, r12
    6d60:	f0 e0       	ldi	r31, 0x00	; 0
    6d62:	ee 0f       	add	r30, r30
    6d64:	ff 1f       	adc	r31, r31
    6d66:	e2 57       	subi	r30, 0x72	; 114
    6d68:	f7 4f       	sbci	r31, 0xF7	; 247
    6d6a:	a5 91       	lpm	r26, Z+
    6d6c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    6d6e:	2f b7       	in	r18, 0x3f	; 63
	cli();
    6d70:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
    6d72:	8d 91       	ld	r24, X+
    6d74:	9c 91       	ld	r25, X
    6d76:	11 97       	sbiw	r26, 0x01	; 1
    6d78:	8d 29       	or	r24, r13
    6d7a:	11 96       	adiw	r26, 0x01	; 1
    6d7c:	9c 93       	st	X, r25
    6d7e:	8e 93       	st	-X, r24
	}

	SREG = oldSREG;
    6d80:	2f bf       	out	0x3f, r18	; 63
			foundPin = 1;
    6d82:	21 e0       	ldi	r18, 0x01	; 1
    6d84:	30 e0       	ldi	r19, 0x00	; 0
    6d86:	0b c0       	rjmp	.+22     	; 0x6d9e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x206>
    6d88:	2e 5f       	subi	r18, 0xFE	; 254
    6d8a:	3f 4f       	sbci	r19, 0xFF	; 255
	if( MOTORSHUTDOWN )
		return 0;
	int foundPin = 0;
	motorSpeed[motorChannel-1] = motorPower; //why? +/-
	// set enable pin
	for(int i = 0; i < 10; i++) {
    6d8c:	24 31       	cpi	r18, 0x14	; 20
    6d8e:	31 05       	cpc	r19, r1
    6d90:	09 f0       	breq	.+2      	; 0x6d94 <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x1fc>
    6d92:	2f cf       	rjmp	.-418    	; 0x6bf2 <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x5a>
*/
int SwitchBridgeDriver::commandMotorPower(uint8_t motorChannel, int16_t motorPower) {
	// check shutdown override
	if( MOTORSHUTDOWN )
		return 0;
	int foundPin = 0;
    6d94:	20 e0       	ldi	r18, 0x00	; 0
    6d96:	30 e0       	ldi	r19, 0x00	; 0
    6d98:	02 c0       	rjmp	.+4      	; 0x6d9e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x206>
	for(int i = 0; i < 10; i++) {
		if(pdigitals[i] && pdigitals[i]->pin == motorDrive[motorChannel-1][1]) {
			//pdigitals[i]->setPin(motorDrive[motorChannel-1][1]);
			pdigitals[i]->pinMode(OUTPUT);
			pdigitals[i]->digitalWrite(HIGH);
			foundPin = 1;
    6d9a:	21 e0       	ldi	r18, 0x01	; 1
    6d9c:	30 e0       	ldi	r19, 0x00	; 0
			break;
		}
	}
	// get mapping of channel to pin
	// see if we need to make a direction change, check array of [PWM pin][dir pin][dir]
	if( currentDirection[motorChannel-1]) { // if dir 1, we are going what we define as 'forward'
    6d9e:	f5 01       	movw	r30, r10
    6da0:	e0 0f       	add	r30, r16
    6da2:	f1 1f       	adc	r31, r17
    6da4:	e3 58       	subi	r30, 0x83	; 131
    6da6:	ff 4f       	sbci	r31, 0xFF	; 255
    6da8:	80 81       	ld	r24, Z
    6daa:	88 23       	and	r24, r24
    6dac:	21 f1       	breq	.+72     	; 0x6df6 <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x25e>
		if( motorPower < 0 ) { // and we want to go backward
    6dae:	ff 20       	and	r15, r15
    6db0:	0c f0       	brlt	.+2      	; 0x6db4 <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x21c>
    6db2:	45 c0       	rjmp	.+138    	; 0x6e3e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x2a6>
			// reverse dir, depending on default direction, we either send to PWM pin or PWM pin+1
			// default is 0 (LOW), if we changed the direction to reverse wheel rotation call the opposite dir change signal
			//defaultDirection[motorChannel-1] ? pdigitals[i]->digitalWrite(HIGH) : pdigitals[i]->digitalWrite(LOW);
			defaultDirection[motorChannel-1] ? motorDriveB[motorChannel-1][1] = 1 : motorDriveB[motorChannel-1][1] = 0;
    6db4:	f5 01       	movw	r30, r10
    6db6:	e0 0f       	add	r30, r16
    6db8:	f1 1f       	adc	r31, r17
    6dba:	e9 57       	subi	r30, 0x79	; 121
    6dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    6dbe:	80 81       	ld	r24, Z
    6dc0:	88 23       	and	r24, r24
    6dc2:	51 f0       	breq	.+20     	; 0x6dd8 <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x240>
    6dc4:	f8 01       	movw	r30, r16
    6dc6:	ee 0f       	add	r30, r30
    6dc8:	ff 1f       	adc	r31, r31
    6dca:	ea 0d       	add	r30, r10
    6dcc:	fb 1d       	adc	r31, r11
    6dce:	e1 50       	subi	r30, 0x01	; 1
    6dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    6dd2:	81 e0       	ldi	r24, 0x01	; 1
    6dd4:	80 83       	st	Z, r24
    6dd6:	08 c0       	rjmp	.+16     	; 0x6de8 <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x250>
    6dd8:	f8 01       	movw	r30, r16
    6dda:	ee 0f       	add	r30, r30
    6ddc:	ff 1f       	adc	r31, r31
    6dde:	ea 0d       	add	r30, r10
    6de0:	fb 1d       	adc	r31, r11
    6de2:	e1 50       	subi	r30, 0x01	; 1
    6de4:	ff 4f       	sbci	r31, 0xFF	; 255
    6de6:	10 82       	st	Z, r1
			currentDirection[motorChannel-1] = 0; // set new direction value
    6de8:	f5 01       	movw	r30, r10
    6dea:	e0 0f       	add	r30, r16
    6dec:	f1 1f       	adc	r31, r17
    6dee:	e3 58       	subi	r30, 0x83	; 131
    6df0:	ff 4f       	sbci	r31, 0xFF	; 255
    6df2:	10 82       	st	Z, r1
    6df4:	24 c0       	rjmp	.+72     	; 0x6e3e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x2a6>
			motorPower = -motorPower; // absolute val
		}
	} else { // dir is 0
		if( motorPower > 0 ) { // we are going 'backward' as defined by our initial default direction and we want 'forward'
    6df6:	1e 14       	cp	r1, r14
    6df8:	1f 04       	cpc	r1, r15
    6dfa:	0c f5       	brge	.+66     	; 0x6e3e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x2a6>
			// reverse, indicate an alteration of the input pin
			// default is 0 (HIGH), if we changed the direction to reverse wheel rotation call the opposite dir change signal
			//defaultDirection[motorChannel-1] ? pdigitals[i]->digitalWrite(LOW) : pdigitals[i]->digitalWrite(HIGH);
			defaultDirection[motorChannel-1] ? motorDriveB[motorChannel-1][1] = 0 : motorDriveB[motorChannel-1][1] = 1;
    6dfc:	f5 01       	movw	r30, r10
    6dfe:	e0 0f       	add	r30, r16
    6e00:	f1 1f       	adc	r31, r17
    6e02:	e9 57       	subi	r30, 0x79	; 121
    6e04:	ff 4f       	sbci	r31, 0xFF	; 255
    6e06:	80 81       	ld	r24, Z
    6e08:	88 23       	and	r24, r24
    6e0a:	49 f0       	breq	.+18     	; 0x6e1e <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x286>
    6e0c:	f8 01       	movw	r30, r16
    6e0e:	ee 0f       	add	r30, r30
    6e10:	ff 1f       	adc	r31, r31
    6e12:	ea 0d       	add	r30, r10
    6e14:	fb 1d       	adc	r31, r11
    6e16:	e1 50       	subi	r30, 0x01	; 1
    6e18:	ff 4f       	sbci	r31, 0xFF	; 255
    6e1a:	10 82       	st	Z, r1
    6e1c:	09 c0       	rjmp	.+18     	; 0x6e30 <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x298>
    6e1e:	f8 01       	movw	r30, r16
    6e20:	ee 0f       	add	r30, r30
    6e22:	ff 1f       	adc	r31, r31
    6e24:	ea 0d       	add	r30, r10
    6e26:	fb 1d       	adc	r31, r11
    6e28:	e1 50       	subi	r30, 0x01	; 1
    6e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    6e2c:	81 e0       	ldi	r24, 0x01	; 1
    6e2e:	80 83       	st	Z, r24
			currentDirection[motorChannel-1] = 1;
    6e30:	f5 01       	movw	r30, r10
    6e32:	e0 0f       	add	r30, r16
    6e34:	f1 1f       	adc	r31, r17
    6e36:	e3 58       	subi	r30, 0x83	; 131
    6e38:	ff 4f       	sbci	r31, 0xFF	; 255
    6e3a:	81 e0       	ldi	r24, 0x01	; 1
    6e3c:	80 83       	st	Z, r24
		} else { // backward with more backwardness
			// If less than 0 take absolute value, if zero dont play with sign
			if( motorPower ) motorPower = -motorPower;
		}
	}
	if(!foundPin) {
    6e3e:	23 2b       	or	r18, r19
    6e40:	59 f4       	brne	.+22     	; 0x6e58 <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x2c0>
		return commandEmergencyStop(6);
    6e42:	d5 01       	movw	r26, r10
    6e44:	ed 91       	ld	r30, X+
    6e46:	fc 91       	ld	r31, X
    6e48:	06 80       	ldd	r0, Z+6	; 0x06
    6e4a:	f7 81       	ldd	r31, Z+7	; 0x07
    6e4c:	e0 2d       	mov	r30, r0
    6e4e:	66 e0       	ldi	r22, 0x06	; 6
    6e50:	70 e0       	ldi	r23, 0x00	; 0
    6e52:	c5 01       	movw	r24, r10
    6e54:	19 95       	eicall
    6e56:	c2 c0       	rjmp	.+388    	; 0x6fdc <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x444>
	}
	//
	// Reset encoders on new speed setting
	resetEncoders();
    6e58:	c5 01       	movw	r24, r10
    6e5a:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <_ZN20AbstractMotorControl13resetEncodersEv>
	// If we have a linked distance sensor. check range and possibly skip
	// If we are setting power 0, we are stopping anyway
	if( !checkUltrasonicShutdown()) {
    6e5e:	c5 01       	movw	r24, r10
    6e60:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <_ZN20AbstractMotorControl23checkUltrasonicShutdownEv>
    6e64:	81 11       	cpse	r24, r1
    6e66:	b0 c0       	rjmp	.+352    	; 0x6fc8 <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x430>
		// element 0 of motorDrive has index to PWM array
		int pindex = motorDrive[motorChannel-1][0];
    6e68:	f8 01       	movw	r30, r16
    6e6a:	eb 58       	subi	r30, 0x8B	; 139
    6e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    6e6e:	ee 0f       	add	r30, r30
    6e70:	ff 1f       	adc	r31, r31
    6e72:	ea 0d       	add	r30, r10
    6e74:	fb 1d       	adc	r31, r11
    6e76:	80 81       	ld	r24, Z
		// add the offset to the input pin, which will be 0 or 1 depending on above logic
		pindex += motorDriveB[motorChannel-1][1];
    6e78:	f8 01       	movw	r30, r16
    6e7a:	ee 0f       	add	r30, r30
    6e7c:	ff 1f       	adc	r31, r31
    6e7e:	ea 0d       	add	r30, r10
    6e80:	fb 1d       	adc	r31, r11
    6e82:	e1 50       	subi	r30, 0x01	; 1
    6e84:	ff 4f       	sbci	r31, 0xFF	; 255
		// turn off all pins
		pdigitals[pindex]->digitalWrite(LOW);
    6e86:	e0 81       	ld	r30, Z
    6e88:	f0 e0       	ldi	r31, 0x00	; 0
    6e8a:	e8 0f       	add	r30, r24
    6e8c:	f1 1d       	adc	r31, r1
    6e8e:	ee 0f       	add	r30, r30
    6e90:	ff 1f       	adc	r31, r31
    6e92:	d5 01       	movw	r26, r10
    6e94:	a8 51       	subi	r26, 0x18	; 24
    6e96:	bf 4f       	sbci	r27, 0xFF	; 255
    6e98:	8d 91       	ld	r24, X+
    6e9a:	9c 91       	ld	r25, X
    6e9c:	e8 0f       	add	r30, r24
    6e9e:	f9 1f       	adc	r31, r25
	}
}

void digitalWrite(uint8_t val)
{
	uint8_t timer = digitalPinToTimer(this->pin);
    6ea0:	01 90       	ld	r0, Z+
    6ea2:	f0 81       	ld	r31, Z
    6ea4:	e0 2d       	mov	r30, r0
    6ea6:	80 81       	ld	r24, Z
    6ea8:	90 e0       	ldi	r25, 0x00	; 0
    6eaa:	fc 01       	movw	r30, r24
    6eac:	e4 54       	subi	r30, 0x44	; 68
    6eae:	f8 4f       	sbci	r31, 0xF8	; 248
    6eb0:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(this->pin);
    6eb2:	fc 01       	movw	r30, r24
    6eb4:	ee 5f       	subi	r30, 0xFE	; 254
    6eb6:	f7 4f       	sbci	r31, 0xF7	; 247
    6eb8:	04 91       	lpm	r16, Z
	uint8_t port = digitalPinToPort(this->pin);
    6eba:	fc 01       	movw	r30, r24
    6ebc:	e8 5b       	subi	r30, 0xB8	; 184
    6ebe:	f7 4f       	sbci	r31, 0xF7	; 247
    6ec0:	14 91       	lpm	r17, Z
	volatile uint16_t *out;

	if (port == NOT_A_PIN) return;
    6ec2:	11 23       	and	r17, r17
    6ec4:	09 f4       	brne	.+2      	; 0x6ec8 <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x330>
    6ec6:	80 c0       	rjmp	.+256    	; 0x6fc8 <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x430>

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6ec8:	22 23       	and	r18, r18
    6eca:	09 f4       	brne	.+2      	; 0x6ece <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x336>
    6ecc:	67 c0       	rjmp	.+206    	; 0x6f9c <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x404>

// If we detect the pin is on a timer, we may need to defuse PWM output, 
// we need to turn pin off before doing a digital write.
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6ece:	82 2f       	mov	r24, r18
    6ed0:	90 e0       	ldi	r25, 0x00	; 0
    6ed2:	fc 01       	movw	r30, r24
    6ed4:	31 97       	sbiw	r30, 0x01	; 1
    6ed6:	e0 31       	cpi	r30, 0x10	; 16
    6ed8:	f1 05       	cpc	r31, r1
    6eda:	08 f0       	brcs	.+2      	; 0x6ede <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x346>
    6edc:	5f c0       	rjmp	.+190    	; 0x6f9c <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x404>
    6ede:	88 27       	eor	r24, r24
    6ee0:	ed 5b       	subi	r30, 0xBD	; 189
    6ee2:	fe 4f       	sbci	r31, 0xFE	; 254
    6ee4:	8f 4f       	sbci	r24, 0xFF	; 255
    6ee6:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
	{
		case TIMER0A: Timer0.stopChannel(CHANNEL_A); break;
    6eea:	60 e0       	ldi	r22, 0x00	; 0
    6eec:	84 e7       	ldi	r24, 0x74	; 116
    6eee:	97 e1       	ldi	r25, 0x17	; 23
    6ef0:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6ef4:	53 c0       	rjmp	.+166    	; 0x6f9c <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x404>
		case TIMER0B: Timer0.stopChannel(CHANNEL_B); break;
    6ef6:	61 e0       	ldi	r22, 0x01	; 1
    6ef8:	84 e7       	ldi	r24, 0x74	; 116
    6efa:	97 e1       	ldi	r25, 0x17	; 23
    6efc:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6f00:	4d c0       	rjmp	.+154    	; 0x6f9c <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x404>
	
		case TIMER1A: Timer1.stopChannel(CHANNEL_A); break;
    6f02:	60 e0       	ldi	r22, 0x00	; 0
    6f04:	85 e4       	ldi	r24, 0x45	; 69
    6f06:	97 e1       	ldi	r25, 0x17	; 23
    6f08:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6f0c:	47 c0       	rjmp	.+142    	; 0x6f9c <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x404>
		case TIMER1B: Timer1.stopChannel(CHANNEL_B); break;
    6f0e:	61 e0       	ldi	r22, 0x01	; 1
    6f10:	85 e4       	ldi	r24, 0x45	; 69
    6f12:	97 e1       	ldi	r25, 0x17	; 23
    6f14:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6f18:	41 c0       	rjmp	.+130    	; 0x6f9c <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x404>
		
		case TIMER2A: Timer2.stopChannel(CHANNEL_A); break;
    6f1a:	60 e0       	ldi	r22, 0x00	; 0
    6f1c:	86 e1       	ldi	r24, 0x16	; 22
    6f1e:	97 e1       	ldi	r25, 0x17	; 23
    6f20:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6f24:	3b c0       	rjmp	.+118    	; 0x6f9c <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x404>
		case TIMER2B: Timer2.stopChannel(CHANNEL_B); break;
    6f26:	61 e0       	ldi	r22, 0x01	; 1
    6f28:	86 e1       	ldi	r24, 0x16	; 22
    6f2a:	97 e1       	ldi	r25, 0x17	; 23
    6f2c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6f30:	35 c0       	rjmp	.+106    	; 0x6f9c <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x404>
	
		case TIMER3A: Timer3.stopChannel(CHANNEL_A); break;
    6f32:	60 e0       	ldi	r22, 0x00	; 0
    6f34:	87 ee       	ldi	r24, 0xE7	; 231
    6f36:	96 e1       	ldi	r25, 0x16	; 22
    6f38:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6f3c:	2f c0       	rjmp	.+94     	; 0x6f9c <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x404>
		case TIMER3B: Timer3.stopChannel(CHANNEL_B); break; 
    6f3e:	61 e0       	ldi	r22, 0x01	; 1
    6f40:	87 ee       	ldi	r24, 0xE7	; 231
    6f42:	96 e1       	ldi	r25, 0x16	; 22
    6f44:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6f48:	29 c0       	rjmp	.+82     	; 0x6f9c <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x404>
		case TIMER3C: Timer3.stopChannel(CHANNEL_C); break;
    6f4a:	62 e0       	ldi	r22, 0x02	; 2
    6f4c:	87 ee       	ldi	r24, 0xE7	; 231
    6f4e:	96 e1       	ldi	r25, 0x16	; 22
    6f50:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6f54:	23 c0       	rjmp	.+70     	; 0x6f9c <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x404>
		
		case TIMER4A: Timer4.stopChannel(CHANNEL_A); break;
    6f56:	60 e0       	ldi	r22, 0x00	; 0
    6f58:	88 eb       	ldi	r24, 0xB8	; 184
    6f5a:	96 e1       	ldi	r25, 0x16	; 22
    6f5c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6f60:	1d c0       	rjmp	.+58     	; 0x6f9c <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x404>
		case TIMER4B: Timer4.stopChannel(CHANNEL_B); break; 
    6f62:	61 e0       	ldi	r22, 0x01	; 1
    6f64:	88 eb       	ldi	r24, 0xB8	; 184
    6f66:	96 e1       	ldi	r25, 0x16	; 22
    6f68:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6f6c:	17 c0       	rjmp	.+46     	; 0x6f9c <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x404>
		case TIMER4C: Timer4.stopChannel(CHANNEL_C); break;
    6f6e:	62 e0       	ldi	r22, 0x02	; 2
    6f70:	88 eb       	ldi	r24, 0xB8	; 184
    6f72:	96 e1       	ldi	r25, 0x16	; 22
    6f74:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6f78:	11 c0       	rjmp	.+34     	; 0x6f9c <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x404>
		
		case TIMER5A: Timer5.stopChannel(CHANNEL_A); break;
    6f7a:	60 e0       	ldi	r22, 0x00	; 0
    6f7c:	89 e8       	ldi	r24, 0x89	; 137
    6f7e:	96 e1       	ldi	r25, 0x16	; 22
    6f80:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6f84:	0b c0       	rjmp	.+22     	; 0x6f9c <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x404>
		case TIMER5B: Timer5.stopChannel(CHANNEL_B); break; 
    6f86:	61 e0       	ldi	r22, 0x01	; 1
    6f88:	89 e8       	ldi	r24, 0x89	; 137
    6f8a:	96 e1       	ldi	r25, 0x16	; 22
    6f8c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    6f90:	05 c0       	rjmp	.+10     	; 0x6f9c <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x404>
		case TIMER5C: Timer5.stopChannel(CHANNEL_C); break;
    6f92:	62 e0       	ldi	r22, 0x02	; 2
    6f94:	89 e8       	ldi	r24, 0x89	; 137
    6f96:	96 e1       	ldi	r25, 0x16	; 22
    6f98:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
	if (port == NOT_A_PIN) return;

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    6f9c:	e1 2f       	mov	r30, r17
    6f9e:	f0 e0       	ldi	r31, 0x00	; 0
    6fa0:	ee 0f       	add	r30, r30
    6fa2:	ff 1f       	adc	r31, r31
    6fa4:	e2 57       	subi	r30, 0x72	; 114
    6fa6:	f7 4f       	sbci	r31, 0xF7	; 247
    6fa8:	a5 91       	lpm	r26, Z+
    6faa:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    6fac:	2f b7       	in	r18, 0x3f	; 63
	cli();
    6fae:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    6fb0:	8d 91       	ld	r24, X+
    6fb2:	9c 91       	ld	r25, X
    6fb4:	11 97       	sbiw	r26, 0x01	; 1
    6fb6:	10 e0       	ldi	r17, 0x00	; 0
    6fb8:	00 95       	com	r16
    6fba:	10 95       	com	r17
    6fbc:	08 23       	and	r16, r24
    6fbe:	19 23       	and	r17, r25
    6fc0:	11 96       	adiw	r26, 0x01	; 1
    6fc2:	1c 93       	st	X, r17
    6fc4:	0e 93       	st	-X, r16
	} else {
		*out |= bit;
	}

	SREG = oldSREG;
    6fc6:	2f bf       	out	0x3f, r18	; 63
	}
	fault_flag = 0;
    6fc8:	e5 01       	movw	r28, r10
    6fca:	ca 51       	subi	r28, 0x1A	; 26
    6fcc:	df 4f       	sbci	r29, 0xFF	; 255
    6fce:	19 82       	std	Y+1, r1	; 0x01
    6fd0:	18 82       	st	Y, r1
	return 0;
    6fd2:	80 e0       	ldi	r24, 0x00	; 0
    6fd4:	90 e0       	ldi	r25, 0x00	; 0
    6fd6:	02 c0       	rjmp	.+4      	; 0x6fdc <_ZN18SwitchBridgeDriver17commandMotorPowerEhi+0x444>
* forward/back value since we have a switched on/off control. It always max on forward, max on back
*/
int SwitchBridgeDriver::commandMotorPower(uint8_t motorChannel, int16_t motorPower) {
	// check shutdown override
	if( MOTORSHUTDOWN )
		return 0;
    6fd8:	80 e0       	ldi	r24, 0x00	; 0
    6fda:	90 e0       	ldi	r25, 0x00	; 0
		// turn off all pins
		pdigitals[pindex]->digitalWrite(LOW);
	}
	fault_flag = 0;
	return 0;
}
    6fdc:	df 91       	pop	r29
    6fde:	cf 91       	pop	r28
    6fe0:	1f 91       	pop	r17
    6fe2:	0f 91       	pop	r16
    6fe4:	ff 90       	pop	r15
    6fe6:	ef 90       	pop	r14
    6fe8:	df 90       	pop	r13
    6fea:	cf 90       	pop	r12
    6fec:	bf 90       	pop	r11
    6fee:	af 90       	pop	r10
    6ff0:	08 95       	ret

00006ff2 <_ZN18SwitchBridgeDriverC1Ev>:
#define __ABSTRACTMOTORCONTROL_H__
#include "../Ultrasonic.h"
#include "../CounterInterruptService.h"
#include "../WPCInterrupts.h"

class AbstractMotorControl
    6ff2:	dc 01       	movw	r26, r24
    6ff4:	12 96       	adiw	r26, 0x02	; 2
    6ff6:	1c 92       	st	X, r1
    6ff8:	38 e2       	ldi	r19, 0x28	; 40
    6ffa:	fc 01       	movw	r30, r24
    6ffc:	35 96       	adiw	r30, 0x05	; 5
    6ffe:	df 01       	movw	r26, r30
    7000:	23 2f       	mov	r18, r19
    7002:	1d 92       	st	X+, r1
    7004:	2a 95       	dec	r18
    7006:	e9 f7       	brne	.-6      	; 0x7002 <_ZN18SwitchBridgeDriverC1Ev+0x10>
    7008:	24 e1       	ldi	r18, 0x14	; 20
    700a:	e1 ee       	ldi	r30, 0xE1	; 225
    700c:	f5 e0       	ldi	r31, 0x05	; 5
    700e:	dc 01       	movw	r26, r24
    7010:	9d 96       	adiw	r26, 0x2d	; 45
    7012:	01 90       	ld	r0, Z+
    7014:	0d 92       	st	X+, r0
    7016:	2a 95       	dec	r18
    7018:	e1 f7       	brne	.-8      	; 0x7012 <_ZN18SwitchBridgeDriverC1Ev+0x20>
    701a:	dc 01       	movw	r26, r24
    701c:	af 5b       	subi	r26, 0xBF	; 191
    701e:	bf 4f       	sbci	r27, 0xFF	; 255
    7020:	28 e2       	ldi	r18, 0x28	; 40
    7022:	e5 ef       	ldi	r30, 0xF5	; 245
    7024:	f5 e0       	ldi	r31, 0x05	; 5
    7026:	01 90       	ld	r0, Z+
    7028:	0d 92       	st	X+, r0
    702a:	2a 95       	dec	r18
    702c:	e1 f7       	brne	.-8      	; 0x7026 <_ZN18SwitchBridgeDriverC1Ev+0x34>
    702e:	fc 01       	movw	r30, r24
    7030:	e7 59       	subi	r30, 0x97	; 151
    7032:	ff 4f       	sbci	r31, 0xFF	; 255
    7034:	24 e1       	ldi	r18, 0x14	; 20
    7036:	df 01       	movw	r26, r30
    7038:	42 2f       	mov	r20, r18
    703a:	1d 92       	st	X+, r1
    703c:	4a 95       	dec	r20
    703e:	e9 f7       	brne	.-6      	; 0x703a <_ZN18SwitchBridgeDriverC1Ev+0x48>
    7040:	74 96       	adiw	r30, 0x14	; 20
    7042:	4a e0       	ldi	r20, 0x0A	; 10
    7044:	df 01       	movw	r26, r30
    7046:	54 2f       	mov	r21, r20
    7048:	1d 92       	st	X+, r1
    704a:	5a 95       	dec	r21
    704c:	e9 f7       	brne	.-6      	; 0x7048 <_ZN18SwitchBridgeDriverC1Ev+0x56>
    704e:	3a 96       	adiw	r30, 0x0a	; 10
    7050:	df 01       	movw	r26, r30
    7052:	1d 92       	st	X+, r1
    7054:	4a 95       	dec	r20
    7056:	e9 f7       	brne	.-6      	; 0x7052 <_ZN18SwitchBridgeDriverC1Ev+0x60>
    7058:	3a 96       	adiw	r30, 0x0a	; 10
    705a:	df 01       	movw	r26, r30
    705c:	1d 92       	st	X+, r1
    705e:	3a 95       	dec	r19
    7060:	e9 f7       	brne	.-6      	; 0x705c <_ZN18SwitchBridgeDriverC1Ev+0x6a>
    7062:	b8 96       	adiw	r30, 0x28	; 40
    7064:	df 01       	movw	r26, r30
    7066:	32 2f       	mov	r19, r18
    7068:	1d 92       	st	X+, r1
    706a:	3a 95       	dec	r19
    706c:	e9 f7       	brne	.-6      	; 0x7068 <_ZN18SwitchBridgeDriverC1Ev+0x76>
    706e:	74 96       	adiw	r30, 0x14	; 20
    7070:	df 01       	movw	r26, r30
    7072:	1d 92       	st	X+, r1
    7074:	2a 95       	dec	r18
    7076:	e9 f7       	brne	.-6      	; 0x7072 <_ZN18SwitchBridgeDriverC1Ev+0x80>
    7078:	74 96       	adiw	r30, 0x14	; 20
    707a:	11 82       	std	Z+1, r1	; 0x01
    707c:	10 82       	st	Z, r1
    707e:	32 96       	adiw	r30, 0x02	; 2
    7080:	10 82       	st	Z, r1
    7082:	31 96       	adiw	r30, 0x01	; 1
    7084:	2f ef       	ldi	r18, 0xFF	; 255
    7086:	30 e0       	ldi	r19, 0x00	; 0
    7088:	31 83       	std	Z+1, r19	; 0x01
    708a:	20 83       	st	Z, r18
    708c:	32 96       	adiw	r30, 0x02	; 2
    708e:	11 82       	std	Z+1, r1	; 0x01
    7090:	10 82       	st	Z, r1
* Author: groff
*/
#include "SwitchBridgeDriver.h"
#include "..\Configuration_adv.h"
// default constructor
SwitchBridgeDriver::SwitchBridgeDriver()
    7092:	2e ea       	ldi	r18, 0xAE	; 174
    7094:	39 e0       	ldi	r19, 0x09	; 9
    7096:	fc 01       	movw	r30, r24
    7098:	31 83       	std	Z+1, r19	; 0x01
    709a:	20 83       	st	Z, r18
    709c:	dc 01       	movw	r26, r24
    709e:	a6 51       	subi	r26, 0x16	; 22
    70a0:	bf 4f       	sbci	r27, 0xFF	; 255
    70a2:	24 e1       	ldi	r18, 0x14	; 20
    70a4:	ed e1       	ldi	r30, 0x1D	; 29
    70a6:	f6 e0       	ldi	r31, 0x06	; 6
    70a8:	01 90       	ld	r0, Z+
    70aa:	0d 92       	st	X+, r0
    70ac:	2a 95       	dec	r18
    70ae:	e1 f7       	brne	.-8      	; 0x70a8 <_ZN18SwitchBridgeDriverC1Ev+0xb6>
    70b0:	dc 01       	movw	r26, r24
    70b2:	a2 50       	subi	r26, 0x02	; 2
    70b4:	bf 4f       	sbci	r27, 0xFF	; 255
    70b6:	24 e1       	ldi	r18, 0x14	; 20
    70b8:	ed e1       	ldi	r30, 0x1D	; 29
    70ba:	f6 e0       	ldi	r31, 0x06	; 6
    70bc:	01 90       	ld	r0, Z+
    70be:	0d 92       	st	X+, r0
    70c0:	2a 95       	dec	r18
    70c2:	e1 f7       	brne	.-8      	; 0x70bc <_ZN18SwitchBridgeDriverC1Ev+0xca>
    70c4:	fc 01       	movw	r30, r24
    70c6:	ee 5e       	subi	r30, 0xEE	; 238
    70c8:	fe 4f       	sbci	r31, 0xFE	; 254
    70ca:	11 82       	std	Z+1, r1	; 0x01
    70cc:	10 82       	st	Z, r1
    70ce:	08 95       	ret

000070d0 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh>:
* pin_numberA - the index in the PWM array defined in 'setMotors' for M1, this is the next blank slot available
* pin_numberB - the index in the PWM array defined in 'setMotors' for M2
* enb_pin - the enable pin for this channel
* dir_default - the default direction the motor starts in
*/
void SwitchBridgeDriver::createDigital(uint8_t channel, uint8_t pin_numberA, uint8_t pin_numberB, uint8_t enable_pin, uint8_t dir_default) {
    70d0:	9f 92       	push	r9
    70d2:	af 92       	push	r10
    70d4:	bf 92       	push	r11
    70d6:	cf 92       	push	r12
    70d8:	df 92       	push	r13
    70da:	ef 92       	push	r14
    70dc:	ff 92       	push	r15
    70de:	0f 93       	push	r16
    70e0:	1f 93       	push	r17
    70e2:	cf 93       	push	r28
    70e4:	df 93       	push	r29
    70e6:	ec 01       	movw	r28, r24
    70e8:	16 2f       	mov	r17, r22
    70ea:	f4 2e       	mov	r15, r20
    70ec:	92 2e       	mov	r9, r18
	if( getChannels() < channel ) setChannels(channel);
    70ee:	8a 81       	ldd	r24, Y+2	; 0x02
    70f0:	86 17       	cp	r24, r22
    70f2:	08 f4       	brcc	.+2      	; 0x70f6 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x26>
	int getMotorSpeed(uint8_t ch) { return motorSpeed[ch-1]; }
	uint8_t getCurrentDirection(uint8_t ch) { return currentDirection[ch-1]; }
	uint8_t getDefaultDirection(uint8_t ch) { return defaultDirection[ch-1]; }
	PCInterrupts* getWheelEncoder(uint8_t ch) { return wheelEncoder[ch-1]; }
	CounterInterruptService* getWheelEncoderService(uint8_t ch) { return wheelEncoderService[ch-1]; }
	void setChannels(uint8_t ch) { channels = ch; }
    70f4:	6a 83       	std	Y+2, r22	; 0x02
	if( assignPin(pin_numberA) && assignPin(pin_numberB)) {
    70f6:	8f 2d       	mov	r24, r15
    70f8:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_Z9assignPinh>
    70fc:	88 23       	and	r24, r24
    70fe:	09 f4       	brne	.+2      	; 0x7102 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x32>
    7100:	49 c1       	rjmp	.+658    	; 0x7394 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x2c4>
    7102:	89 2d       	mov	r24, r9
    7104:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_Z9assignPinh>
    7108:	88 23       	and	r24, r24
    710a:	09 f4       	brne	.+2      	; 0x710e <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x3e>
    710c:	43 c1       	rjmp	.+646    	; 0x7394 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x2c4>
		// Set up the digital direction pin
			int foundPin = 0;
			// Set up the digital enable pin, we want to be able to re-use these pins for multiple channels on 1 controller
			if( assignPin(enable_pin) ) {
    710e:	80 2f       	mov	r24, r16
    7110:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_Z9assignPinh>
    7114:	81 11       	cpse	r24, r1
    7116:	0c c0       	rjmp	.+24     	; 0x7130 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x60>
					delete dpin;
					return; // no slots?
				}
			} else { // cant assign, it may be already assigned
				for(int i = 0; i < 10; i++) {
					if(pdigitals[i]->pin == enable_pin) {
    7118:	fe 01       	movw	r30, r28
    711a:	e8 51       	subi	r30, 0x18	; 24
    711c:	ff 4f       	sbci	r31, 0xFF	; 255
    711e:	a0 81       	ld	r26, Z
    7120:	b1 81       	ldd	r27, Z+1	; 0x01
    7122:	ed 91       	ld	r30, X+
    7124:	fc 91       	ld	r31, X
    7126:	11 97       	sbiw	r26, 0x01	; 1
    7128:	80 81       	ld	r24, Z
    712a:	08 13       	cpse	r16, r24
    712c:	3c c0       	rjmp	.+120    	; 0x71a6 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0xd6>
    712e:	49 c0       	rjmp	.+146    	; 0x71c2 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0xf2>
	if( assignPin(pin_numberA) && assignPin(pin_numberB)) {
		// Set up the digital direction pin
			int foundPin = 0;
			// Set up the digital enable pin, we want to be able to re-use these pins for multiple channels on 1 controller
			if( assignPin(enable_pin) ) {
				Digital* dpin = new Digital(enable_pin);
    7130:	82 e0       	ldi	r24, 0x02	; 2
    7132:	90 e0       	ldi	r25, 0x00	; 0
    7134:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
class Digital {
	public:
	uint8_t pin;
	uint8_t mode = INPUT; // default
	Digital(uint8_t spin) {
		this->pin = spin;
    7138:	fc 01       	movw	r30, r24
    713a:	00 83       	st	Z, r16
	}
	
void setPin(uint8_t spin) { this->pin = spin; }
	
void pinMode(uint8_t pmode) {
	this->mode = pmode;
    713c:	21 e0       	ldi	r18, 0x01	; 1
    713e:	21 83       	std	Z+1, r18	; 0x01
	uint8_t bit = digitalPinToBitMask(this->pin);
    7140:	20 2f       	mov	r18, r16
    7142:	30 e0       	ldi	r19, 0x00	; 0
    7144:	f9 01       	movw	r30, r18
    7146:	ee 5f       	subi	r30, 0xFE	; 254
    7148:	f7 4f       	sbci	r31, 0xF7	; 247
    714a:	44 91       	lpm	r20, Z
	uint8_t port = digitalPinToPort(this->pin);
    714c:	f9 01       	movw	r30, r18
    714e:	e8 5b       	subi	r30, 0xB8	; 184
    7150:	f7 4f       	sbci	r31, 0xF7	; 247
    7152:	24 91       	lpm	r18, Z
	volatile uint16_t *reg, *out;

	if (port == NOT_A_PIN) return;
    7154:	22 23       	and	r18, r18
    7156:	09 f4       	brne	.+2      	; 0x715a <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x8a>
    7158:	03 c1       	rjmp	.+518    	; 0x7360 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x290>

	reg = portModeRegister(port);
    715a:	30 e0       	ldi	r19, 0x00	; 0
    715c:	22 0f       	add	r18, r18
    715e:	33 1f       	adc	r19, r19
    7160:	f9 01       	movw	r30, r18
    7162:	e8 55       	subi	r30, 0x58	; 88
    7164:	f7 4f       	sbci	r31, 0xF7	; 247
    7166:	a5 91       	lpm	r26, Z+
    7168:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    716a:	22 57       	subi	r18, 0x72	; 114
    716c:	37 4f       	sbci	r19, 0xF7	; 247
    716e:	f9 01       	movw	r30, r18
    7170:	25 91       	lpm	r18, Z+
    7172:	34 91       	lpm	r19, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    7174:	5f b7       	in	r21, 0x3f	; 63
                cli();
    7176:	f8 94       	cli
		*reg |= bit;
    7178:	2d 91       	ld	r18, X+
    717a:	3c 91       	ld	r19, X
    717c:	11 97       	sbiw	r26, 0x01	; 1
    717e:	24 2b       	or	r18, r20
    7180:	11 96       	adiw	r26, 0x01	; 1
    7182:	3c 93       	st	X, r19
    7184:	2e 93       	st	-X, r18
		SREG = oldSREG;
    7186:	5f bf       	out	0x3f, r21	; 63
    7188:	eb c0       	rjmp	.+470    	; 0x7360 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x290>
				dpin->pinMode(OUTPUT);
				for(int i = 0; i < 10; i++) {
					if(!pdigitals[i]) {
    718a:	f9 01       	movw	r30, r18
    718c:	2e 5f       	subi	r18, 0xFE	; 254
    718e:	3f 4f       	sbci	r19, 0xFF	; 255
    7190:	40 81       	ld	r20, Z
    7192:	51 81       	ldd	r21, Z+1	; 0x01
    7194:	45 2b       	or	r20, r21
    7196:	19 f4       	brne	.+6      	; 0x719e <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0xce>
						pdigitals[i] = dpin;
    7198:	91 83       	std	Z+1, r25	; 0x01
    719a:	80 83       	st	Z, r24
    719c:	12 c0       	rjmp	.+36     	; 0x71c2 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0xf2>
			int foundPin = 0;
			// Set up the digital enable pin, we want to be able to re-use these pins for multiple channels on 1 controller
			if( assignPin(enable_pin) ) {
				Digital* dpin = new Digital(enable_pin);
				dpin->pinMode(OUTPUT);
				for(int i = 0; i < 10; i++) {
    719e:	62 17       	cp	r22, r18
    71a0:	73 07       	cpc	r23, r19
    71a2:	99 f7       	brne	.-26     	; 0x718a <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0xba>
    71a4:	ef c0       	rjmp	.+478    	; 0x7384 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x2b4>
    71a6:	fd 01       	movw	r30, r26
    71a8:	32 96       	adiw	r30, 0x02	; 2
    71aa:	9d 01       	movw	r18, r26
    71ac:	2c 5e       	subi	r18, 0xEC	; 236
    71ae:	3f 4f       	sbci	r19, 0xFF	; 255
					delete dpin;
					return; // no slots?
				}
			} else { // cant assign, it may be already assigned
				for(int i = 0; i < 10; i++) {
					if(pdigitals[i]->pin == enable_pin) {
    71b0:	a1 91       	ld	r26, Z+
    71b2:	b1 91       	ld	r27, Z+
    71b4:	8c 91       	ld	r24, X
    71b6:	08 17       	cp	r16, r24
    71b8:	21 f0       	breq	.+8      	; 0x71c2 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0xf2>
				if(!foundPin) {
					delete dpin;
					return; // no slots?
				}
			} else { // cant assign, it may be already assigned
				for(int i = 0; i < 10; i++) {
    71ba:	2e 17       	cp	r18, r30
    71bc:	3f 07       	cpc	r19, r31
    71be:	c1 f7       	brne	.-16     	; 0x71b0 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0xe0>
    71c0:	e9 c0       	rjmp	.+466    	; 0x7394 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x2c4>
				}
			}
		
			int pindex;
			for(pindex = 0; pindex < 9; pindex++) {
				if( !pdigitals[pindex] && !pdigitals[pindex+1])
    71c2:	fe 01       	movw	r30, r28
    71c4:	e8 51       	subi	r30, 0x18	; 24
    71c6:	ff 4f       	sbci	r31, 0xFF	; 255
    71c8:	a0 81       	ld	r26, Z
    71ca:	b1 81       	ldd	r27, Z+1	; 0x01
    71cc:	fd 01       	movw	r30, r26
					return; // slots full...
				}
			}
		
			int pindex;
			for(pindex = 0; pindex < 9; pindex++) {
    71ce:	80 e0       	ldi	r24, 0x00	; 0
    71d0:	90 e0       	ldi	r25, 0x00	; 0
				if( !pdigitals[pindex] && !pdigitals[pindex+1])
    71d2:	21 91       	ld	r18, Z+
    71d4:	31 91       	ld	r19, Z+
    71d6:	23 2b       	or	r18, r19
    71d8:	29 f4       	brne	.+10     	; 0x71e4 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x114>
    71da:	20 81       	ld	r18, Z
    71dc:	31 81       	ldd	r19, Z+1	; 0x01
    71de:	23 2b       	or	r18, r19
    71e0:	09 f4       	brne	.+2      	; 0x71e4 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x114>
    71e2:	d3 c0       	rjmp	.+422    	; 0x738a <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x2ba>
					return; // slots full...
				}
			}
		
			int pindex;
			for(pindex = 0; pindex < 9; pindex++) {
    71e4:	01 96       	adiw	r24, 0x01	; 1
    71e6:	89 30       	cpi	r24, 0x09	; 9
    71e8:	91 05       	cpc	r25, r1
    71ea:	99 f7       	brne	.-26     	; 0x71d2 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x102>
				if( !pdigitals[pindex] && !pdigitals[pindex+1])
				break;
			}
			if( pdigitals[pindex] || pdigitals[pindex+1])
    71ec:	52 96       	adiw	r26, 0x12	; 18
    71ee:	2d 91       	ld	r18, X+
    71f0:	3c 91       	ld	r19, X
    71f2:	53 97       	sbiw	r26, 0x13	; 19
    71f4:	23 2b       	or	r18, r19
    71f6:	09 f0       	breq	.+2      	; 0x71fa <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x12a>
    71f8:	cd c0       	rjmp	.+410    	; 0x7394 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x2c4>
    71fa:	0f 2e       	mov	r0, r31
    71fc:	f2 e1       	ldi	r31, 0x12	; 18
    71fe:	af 2e       	mov	r10, r31
    7200:	b1 2c       	mov	r11, r1
    7202:	f0 2d       	mov	r31, r0
    7204:	29 e0       	ldi	r18, 0x09	; 9
    7206:	30 e0       	ldi	r19, 0x00	; 0
    7208:	69 01       	movw	r12, r18
    720a:	ff ef       	ldi	r31, 0xFF	; 255
    720c:	cf 1a       	sub	r12, r31
    720e:	df 0a       	sbc	r13, r31
    7210:	cc 0c       	add	r12, r12
    7212:	dd 1c       	adc	r13, r13
    7214:	ac 0d       	add	r26, r12
    7216:	bd 1d       	adc	r27, r13
    7218:	2d 91       	ld	r18, X+
    721a:	3c 91       	ld	r19, X
    721c:	23 2b       	or	r18, r19
    721e:	09 f0       	breq	.+2      	; 0x7222 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x152>
    7220:	b9 c0       	rjmp	.+370    	; 0x7394 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x2c4>
				return;
			currentDirection[channel-1] = dir_default;
    7222:	e1 2f       	mov	r30, r17
    7224:	f0 e0       	ldi	r31, 0x00	; 0
    7226:	9f 01       	movw	r18, r30
    7228:	21 50       	subi	r18, 0x01	; 1
    722a:	31 09       	sbc	r19, r1
    722c:	ae 01       	movw	r20, r28
    722e:	42 0f       	add	r20, r18
    7230:	53 1f       	adc	r21, r19
    7232:	da 01       	movw	r26, r20
    7234:	a3 58       	subi	r26, 0x83	; 131
    7236:	bf 4f       	sbci	r27, 0xFF	; 255
    7238:	ec 92       	st	X, r14
			defaultDirection[channel-1] = dir_default;
    723a:	1a 96       	adiw	r26, 0x0a	; 10
    723c:	ec 92       	st	X, r14
    723e:	ee 0f       	add	r30, r30
    7240:	ff 1f       	adc	r31, r31
    7242:	ec 0f       	add	r30, r28
    7244:	fd 1f       	adc	r31, r29
			
			motorDrive[channel-1][0] = pindex;
    7246:	df 01       	movw	r26, r30
    7248:	a8 51       	subi	r26, 0x18	; 24
    724a:	bf 4f       	sbci	r27, 0xFF	; 255
    724c:	8c 93       	st	X, r24
			motorDrive[channel-1][1] = enable_pin;
    724e:	22 0f       	add	r18, r18
    7250:	33 1f       	adc	r19, r19
    7252:	2c 0f       	add	r18, r28
    7254:	3d 1f       	adc	r19, r29
    7256:	d9 01       	movw	r26, r18
    7258:	a5 51       	subi	r26, 0x15	; 21
    725a:	bf 4f       	sbci	r27, 0xFF	; 255
    725c:	0c 93       	st	X, r16
			//
			motorDriveB[channel-1][0] = pindex+1;
    725e:	e4 50       	subi	r30, 0x04	; 4
    7260:	ff 4f       	sbci	r31, 0xFF	; 255
    7262:	8f 5f       	subi	r24, 0xFF	; 255
    7264:	80 83       	st	Z, r24
			// determines which input pin PWM signal goes to, motorDrive[0] or motorDriveB[0], which is at pindex, or pindex+1 in ppwms
			motorDriveB[channel-1][1] = dir_default;
    7266:	f9 01       	movw	r30, r18
    7268:	e1 50       	subi	r30, 0x01	; 1
    726a:	ff 4f       	sbci	r31, 0xFF	; 255
    726c:	e0 82       	st	Z, r14
			Digital* ppinA = new Digital(pin_numberA);
    726e:	82 e0       	ldi	r24, 0x02	; 2
    7270:	90 e0       	ldi	r25, 0x00	; 0
    7272:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>

class Digital {
	public:
	uint8_t pin;
	uint8_t mode = INPUT; // default
	Digital(uint8_t spin) {
    7276:	fc 01       	movw	r30, r24
    7278:	11 82       	std	Z+1, r1	; 0x01
		this->pin = spin;
    727a:	f0 82       	st	Z, r15
			pdigitals[pindex] = ppinA;
    727c:	de 01       	movw	r26, r28
    727e:	a8 51       	subi	r26, 0x18	; 24
    7280:	bf 4f       	sbci	r27, 0xFF	; 255
    7282:	ed 91       	ld	r30, X+
    7284:	fc 91       	ld	r31, X
    7286:	11 97       	sbiw	r26, 0x01	; 1
    7288:	ea 0d       	add	r30, r10
    728a:	fb 1d       	adc	r31, r11
    728c:	91 83       	std	Z+1, r25	; 0x01
    728e:	80 83       	st	Z, r24
			pdigitals[pindex]->pinMode(OUTPUT);
    7290:	ed 91       	ld	r30, X+
    7292:	fc 91       	ld	r31, X
    7294:	ea 0d       	add	r30, r10
    7296:	fb 1d       	adc	r31, r11
    7298:	01 90       	ld	r0, Z+
    729a:	f0 81       	ld	r31, Z
    729c:	e0 2d       	mov	r30, r0
	}
	
void setPin(uint8_t spin) { this->pin = spin; }
	
void pinMode(uint8_t pmode) {
	this->mode = pmode;
    729e:	81 e0       	ldi	r24, 0x01	; 1
    72a0:	81 83       	std	Z+1, r24	; 0x01
	uint8_t bit = digitalPinToBitMask(this->pin);
    72a2:	80 81       	ld	r24, Z
    72a4:	90 e0       	ldi	r25, 0x00	; 0
    72a6:	fc 01       	movw	r30, r24
    72a8:	ee 5f       	subi	r30, 0xFE	; 254
    72aa:	f7 4f       	sbci	r31, 0xF7	; 247
    72ac:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(this->pin);
    72ae:	fc 01       	movw	r30, r24
    72b0:	e8 5b       	subi	r30, 0xB8	; 184
    72b2:	f7 4f       	sbci	r31, 0xF7	; 247
    72b4:	84 91       	lpm	r24, Z
	volatile uint16_t *reg, *out;

	if (port == NOT_A_PIN) return;
    72b6:	88 23       	and	r24, r24
    72b8:	b9 f0       	breq	.+46     	; 0x72e8 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x218>

	reg = portModeRegister(port);
    72ba:	90 e0       	ldi	r25, 0x00	; 0
    72bc:	88 0f       	add	r24, r24
    72be:	99 1f       	adc	r25, r25
    72c0:	fc 01       	movw	r30, r24
    72c2:	e8 55       	subi	r30, 0x58	; 88
    72c4:	f7 4f       	sbci	r31, 0xF7	; 247
    72c6:	a5 91       	lpm	r26, Z+
    72c8:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    72ca:	82 57       	subi	r24, 0x72	; 114
    72cc:	97 4f       	sbci	r25, 0xF7	; 247
    72ce:	fc 01       	movw	r30, r24
    72d0:	85 91       	lpm	r24, Z+
    72d2:	94 91       	lpm	r25, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    72d4:	3f b7       	in	r19, 0x3f	; 63
                cli();
    72d6:	f8 94       	cli
		*reg |= bit;
    72d8:	8d 91       	ld	r24, X+
    72da:	9c 91       	ld	r25, X
    72dc:	11 97       	sbiw	r26, 0x01	; 1
    72de:	82 2b       	or	r24, r18
    72e0:	11 96       	adiw	r26, 0x01	; 1
    72e2:	9c 93       	st	X, r25
    72e4:	8e 93       	st	-X, r24
		SREG = oldSREG;
    72e6:	3f bf       	out	0x3f, r19	; 63
			Digital* ppinB = new Digital(pin_numberB);
    72e8:	82 e0       	ldi	r24, 0x02	; 2
    72ea:	90 e0       	ldi	r25, 0x00	; 0
    72ec:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>

class Digital {
	public:
	uint8_t pin;
	uint8_t mode = INPUT; // default
	Digital(uint8_t spin) {
    72f0:	fc 01       	movw	r30, r24
    72f2:	11 82       	std	Z+1, r1	; 0x01
		this->pin = spin;
    72f4:	90 82       	st	Z, r9
			pdigitals[pindex+1] = ppinB;
    72f6:	c8 51       	subi	r28, 0x18	; 24
    72f8:	df 4f       	sbci	r29, 0xFF	; 255
    72fa:	e8 81       	ld	r30, Y
    72fc:	f9 81       	ldd	r31, Y+1	; 0x01
    72fe:	ec 0d       	add	r30, r12
    7300:	fd 1d       	adc	r31, r13
    7302:	91 83       	std	Z+1, r25	; 0x01
    7304:	80 83       	st	Z, r24
			pdigitals[pindex+1]->pinMode(OUTPUT);
    7306:	e8 81       	ld	r30, Y
    7308:	f9 81       	ldd	r31, Y+1	; 0x01
    730a:	ec 0d       	add	r30, r12
    730c:	fd 1d       	adc	r31, r13
    730e:	01 90       	ld	r0, Z+
    7310:	f0 81       	ld	r31, Z
    7312:	e0 2d       	mov	r30, r0
	}
	
void setPin(uint8_t spin) { this->pin = spin; }
	
void pinMode(uint8_t pmode) {
	this->mode = pmode;
    7314:	81 e0       	ldi	r24, 0x01	; 1
    7316:	81 83       	std	Z+1, r24	; 0x01
	uint8_t bit = digitalPinToBitMask(this->pin);
    7318:	80 81       	ld	r24, Z
    731a:	90 e0       	ldi	r25, 0x00	; 0
    731c:	fc 01       	movw	r30, r24
    731e:	ee 5f       	subi	r30, 0xFE	; 254
    7320:	f7 4f       	sbci	r31, 0xF7	; 247
    7322:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(this->pin);
    7324:	fc 01       	movw	r30, r24
    7326:	e8 5b       	subi	r30, 0xB8	; 184
    7328:	f7 4f       	sbci	r31, 0xF7	; 247
    732a:	84 91       	lpm	r24, Z
	volatile uint16_t *reg, *out;

	if (port == NOT_A_PIN) return;
    732c:	88 23       	and	r24, r24
    732e:	91 f1       	breq	.+100    	; 0x7394 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x2c4>

	reg = portModeRegister(port);
    7330:	90 e0       	ldi	r25, 0x00	; 0
    7332:	88 0f       	add	r24, r24
    7334:	99 1f       	adc	r25, r25
    7336:	fc 01       	movw	r30, r24
    7338:	e8 55       	subi	r30, 0x58	; 88
    733a:	f7 4f       	sbci	r31, 0xF7	; 247
    733c:	a5 91       	lpm	r26, Z+
    733e:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    7340:	82 57       	subi	r24, 0x72	; 114
    7342:	97 4f       	sbci	r25, 0xF7	; 247
    7344:	fc 01       	movw	r30, r24
    7346:	85 91       	lpm	r24, Z+
    7348:	94 91       	lpm	r25, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    734a:	3f b7       	in	r19, 0x3f	; 63
                cli();
    734c:	f8 94       	cli
		*reg |= bit;
    734e:	8d 91       	ld	r24, X+
    7350:	9c 91       	ld	r25, X
    7352:	11 97       	sbiw	r26, 0x01	; 1
    7354:	82 2b       	or	r24, r18
    7356:	11 96       	adiw	r26, 0x01	; 1
    7358:	9c 93       	st	X, r25
    735a:	8e 93       	st	-X, r24
		SREG = oldSREG;
    735c:	3f bf       	out	0x3f, r19	; 63
    735e:	1a c0       	rjmp	.+52     	; 0x7394 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x2c4>
			// Set up the digital enable pin, we want to be able to re-use these pins for multiple channels on 1 controller
			if( assignPin(enable_pin) ) {
				Digital* dpin = new Digital(enable_pin);
				dpin->pinMode(OUTPUT);
				for(int i = 0; i < 10; i++) {
					if(!pdigitals[i]) {
    7360:	fe 01       	movw	r30, r28
    7362:	e8 51       	subi	r30, 0x18	; 24
    7364:	ff 4f       	sbci	r31, 0xFF	; 255
    7366:	01 90       	ld	r0, Z+
    7368:	f0 81       	ld	r31, Z
    736a:	e0 2d       	mov	r30, r0
    736c:	20 81       	ld	r18, Z
    736e:	31 81       	ldd	r19, Z+1	; 0x01
    7370:	23 2b       	or	r18, r19
    7372:	09 f4       	brne	.+2      	; 0x7376 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x2a6>
    7374:	11 cf       	rjmp	.-478    	; 0x7198 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0xc8>
    7376:	9f 01       	movw	r18, r30
    7378:	2e 5f       	subi	r18, 0xFE	; 254
    737a:	3f 4f       	sbci	r19, 0xFF	; 255
    737c:	bf 01       	movw	r22, r30
    737e:	6c 5e       	subi	r22, 0xEC	; 236
    7380:	7f 4f       	sbci	r23, 0xFF	; 255
    7382:	03 cf       	rjmp	.-506    	; 0x718a <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0xba>
						foundPin = 1;
						break;
					}
				}
				if(!foundPin) {
					delete dpin;
    7384:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
					return; // no slots?
    7388:	05 c0       	rjmp	.+10     	; 0x7394 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x2c4>
			int pindex;
			for(pindex = 0; pindex < 9; pindex++) {
				if( !pdigitals[pindex] && !pdigitals[pindex+1])
				break;
			}
			if( pdigitals[pindex] || pdigitals[pindex+1])
    738a:	9c 01       	movw	r18, r24
    738c:	5c 01       	movw	r10, r24
    738e:	aa 0c       	add	r10, r10
    7390:	bb 1c       	adc	r11, r11
    7392:	3a cf       	rjmp	.-396    	; 0x7208 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh+0x138>
			pdigitals[pindex]->pinMode(OUTPUT);
			Digital* ppinB = new Digital(pin_numberB);
			pdigitals[pindex+1] = ppinB;
			pdigitals[pindex+1]->pinMode(OUTPUT);
		}
}
    7394:	df 91       	pop	r29
    7396:	cf 91       	pop	r28
    7398:	1f 91       	pop	r17
    739a:	0f 91       	pop	r16
    739c:	ff 90       	pop	r15
    739e:	ef 90       	pop	r14
    73a0:	df 90       	pop	r13
    73a2:	cf 90       	pop	r12
    73a4:	bf 90       	pop	r11
    73a6:	af 90       	pop	r10
    73a8:	9f 90       	pop	r9
    73aa:	08 95       	ret

000073ac <_ZN7Digital7pinModeEh>:
	SERIAL_PGM("1 ");
	SERIAL_PGMLN(MSG_MOTORCONTROL_9);
	SERIAL_PGM(MSG_BEGIN);
	SERIAL_PGM(motorFaultCntrlHdr);
	SERIAL_PGMLN(MSG_TERMINATE);
}
    73ac:	cf 93       	push	r28
    73ae:	df 93       	push	r29
    73b0:	fc 01       	movw	r30, r24
    73b2:	61 83       	std	Z+1, r22	; 0x01
    73b4:	80 81       	ld	r24, Z
    73b6:	90 e0       	ldi	r25, 0x00	; 0
    73b8:	fc 01       	movw	r30, r24
    73ba:	ef 52       	subi	r30, 0x2F	; 47
    73bc:	fd 4e       	sbci	r31, 0xED	; 237
    73be:	24 91       	lpm	r18, Z
    73c0:	fc 01       	movw	r30, r24
    73c2:	e9 5e       	subi	r30, 0xE9	; 233
    73c4:	fc 4e       	sbci	r31, 0xEC	; 236
    73c6:	84 91       	lpm	r24, Z
    73c8:	88 23       	and	r24, r24
    73ca:	09 f4       	brne	.+2      	; 0x73ce <_ZN7Digital7pinModeEh+0x22>
    73cc:	48 c0       	rjmp	.+144    	; 0x745e <_ZN7Digital7pinModeEh+0xb2>
    73ce:	90 e0       	ldi	r25, 0x00	; 0
    73d0:	88 0f       	add	r24, r24
    73d2:	99 1f       	adc	r25, r25
    73d4:	fc 01       	movw	r30, r24
    73d6:	ef 56       	subi	r30, 0x6F	; 111
    73d8:	fc 4e       	sbci	r31, 0xEC	; 236
    73da:	a5 91       	lpm	r26, Z+
    73dc:	b4 91       	lpm	r27, Z
    73de:	fc 01       	movw	r30, r24
    73e0:	e9 58       	subi	r30, 0x89	; 137
    73e2:	fc 4e       	sbci	r31, 0xEC	; 236
    73e4:	c5 91       	lpm	r28, Z+
    73e6:	d4 91       	lpm	r29, Z
    73e8:	61 11       	cpse	r22, r1
    73ea:	16 c0       	rjmp	.+44     	; 0x7418 <_ZN7Digital7pinModeEh+0x6c>
    73ec:	3f b7       	in	r19, 0x3f	; 63
    73ee:	f8 94       	cli
    73f0:	8d 91       	ld	r24, X+
    73f2:	9c 91       	ld	r25, X
    73f4:	11 97       	sbiw	r26, 0x01	; 1
    73f6:	e2 2f       	mov	r30, r18
    73f8:	f0 e0       	ldi	r31, 0x00	; 0
    73fa:	e0 95       	com	r30
    73fc:	f0 95       	com	r31
    73fe:	8e 23       	and	r24, r30
    7400:	9f 23       	and	r25, r31
    7402:	11 96       	adiw	r26, 0x01	; 1
    7404:	9c 93       	st	X, r25
    7406:	8e 93       	st	-X, r24
    7408:	88 81       	ld	r24, Y
    740a:	99 81       	ldd	r25, Y+1	; 0x01
    740c:	e8 23       	and	r30, r24
    740e:	f9 23       	and	r31, r25
    7410:	f9 83       	std	Y+1, r31	; 0x01
    7412:	e8 83       	st	Y, r30
    7414:	3f bf       	out	0x3f, r19	; 63
    7416:	23 c0       	rjmp	.+70     	; 0x745e <_ZN7Digital7pinModeEh+0xb2>
    7418:	62 30       	cpi	r22, 0x02	; 2
    741a:	b9 f4       	brne	.+46     	; 0x744a <_ZN7Digital7pinModeEh+0x9e>
    741c:	3f b7       	in	r19, 0x3f	; 63
    741e:	f8 94       	cli
    7420:	8d 91       	ld	r24, X+
    7422:	9c 91       	ld	r25, X
    7424:	11 97       	sbiw	r26, 0x01	; 1
    7426:	e2 2f       	mov	r30, r18
    7428:	f0 e0       	ldi	r31, 0x00	; 0
    742a:	af 01       	movw	r20, r30
    742c:	40 95       	com	r20
    742e:	50 95       	com	r21
    7430:	84 23       	and	r24, r20
    7432:	95 23       	and	r25, r21
    7434:	11 96       	adiw	r26, 0x01	; 1
    7436:	9c 93       	st	X, r25
    7438:	8e 93       	st	-X, r24
    743a:	88 81       	ld	r24, Y
    743c:	99 81       	ldd	r25, Y+1	; 0x01
    743e:	e8 2b       	or	r30, r24
    7440:	f9 2b       	or	r31, r25
    7442:	f9 83       	std	Y+1, r31	; 0x01
    7444:	e8 83       	st	Y, r30
    7446:	3f bf       	out	0x3f, r19	; 63
    7448:	0a c0       	rjmp	.+20     	; 0x745e <_ZN7Digital7pinModeEh+0xb2>
    744a:	3f b7       	in	r19, 0x3f	; 63
    744c:	f8 94       	cli
    744e:	8d 91       	ld	r24, X+
    7450:	9c 91       	ld	r25, X
    7452:	11 97       	sbiw	r26, 0x01	; 1
    7454:	82 2b       	or	r24, r18
    7456:	11 96       	adiw	r26, 0x01	; 1
    7458:	9c 93       	st	X, r25
    745a:	8e 93       	st	-X, r24
    745c:	3f bf       	out	0x3f, r19	; 63
    745e:	df 91       	pop	r29
    7460:	cf 91       	pop	r28
    7462:	08 95       	ret

00007464 <_ZN7Digital12digitalWriteEh>:
    7464:	1f 93       	push	r17
    7466:	cf 93       	push	r28
    7468:	df 93       	push	r29
    746a:	fc 01       	movw	r30, r24
    746c:	80 81       	ld	r24, Z
    746e:	90 e0       	ldi	r25, 0x00	; 0
    7470:	fc 01       	movw	r30, r24
    7472:	e5 57       	subi	r30, 0x75	; 117
    7474:	fd 4e       	sbci	r31, 0xED	; 237
    7476:	24 91       	lpm	r18, Z
    7478:	fc 01       	movw	r30, r24
    747a:	ef 52       	subi	r30, 0x2F	; 47
    747c:	fd 4e       	sbci	r31, 0xED	; 237
    747e:	d4 91       	lpm	r29, Z
    7480:	fc 01       	movw	r30, r24
    7482:	e9 5e       	subi	r30, 0xE9	; 233
    7484:	fc 4e       	sbci	r31, 0xEC	; 236
    7486:	c4 91       	lpm	r28, Z
    7488:	cc 23       	and	r28, r28
    748a:	09 f4       	brne	.+2      	; 0x748e <_ZN7Digital12digitalWriteEh+0x2a>
    748c:	8c c0       	rjmp	.+280    	; 0x75a6 <_ZN7Digital12digitalWriteEh+0x142>
    748e:	16 2f       	mov	r17, r22
    7490:	22 23       	and	r18, r18
    7492:	09 f4       	brne	.+2      	; 0x7496 <_ZN7Digital12digitalWriteEh+0x32>
    7494:	67 c0       	rjmp	.+206    	; 0x7564 <_ZN7Digital12digitalWriteEh+0x100>
    7496:	82 2f       	mov	r24, r18
    7498:	90 e0       	ldi	r25, 0x00	; 0
    749a:	fc 01       	movw	r30, r24
    749c:	31 97       	sbiw	r30, 0x01	; 1
    749e:	e0 31       	cpi	r30, 0x10	; 16
    74a0:	f1 05       	cpc	r31, r1
    74a2:	08 f0       	brcs	.+2      	; 0x74a6 <_ZN7Digital12digitalWriteEh+0x42>
    74a4:	5f c0       	rjmp	.+190    	; 0x7564 <_ZN7Digital12digitalWriteEh+0x100>
    74a6:	88 27       	eor	r24, r24
    74a8:	ed 5a       	subi	r30, 0xAD	; 173
    74aa:	fe 4f       	sbci	r31, 0xFE	; 254
    74ac:	8f 4f       	sbci	r24, 0xFF	; 255
    74ae:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
    74b2:	60 e0       	ldi	r22, 0x00	; 0
    74b4:	84 e7       	ldi	r24, 0x74	; 116
    74b6:	97 e1       	ldi	r25, 0x17	; 23
    74b8:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    74bc:	53 c0       	rjmp	.+166    	; 0x7564 <_ZN7Digital12digitalWriteEh+0x100>
    74be:	61 e0       	ldi	r22, 0x01	; 1
    74c0:	84 e7       	ldi	r24, 0x74	; 116
    74c2:	97 e1       	ldi	r25, 0x17	; 23
    74c4:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    74c8:	4d c0       	rjmp	.+154    	; 0x7564 <_ZN7Digital12digitalWriteEh+0x100>
    74ca:	60 e0       	ldi	r22, 0x00	; 0
    74cc:	85 e4       	ldi	r24, 0x45	; 69
    74ce:	97 e1       	ldi	r25, 0x17	; 23
    74d0:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    74d4:	47 c0       	rjmp	.+142    	; 0x7564 <_ZN7Digital12digitalWriteEh+0x100>
    74d6:	61 e0       	ldi	r22, 0x01	; 1
    74d8:	85 e4       	ldi	r24, 0x45	; 69
    74da:	97 e1       	ldi	r25, 0x17	; 23
    74dc:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    74e0:	41 c0       	rjmp	.+130    	; 0x7564 <_ZN7Digital12digitalWriteEh+0x100>
    74e2:	60 e0       	ldi	r22, 0x00	; 0
    74e4:	86 e1       	ldi	r24, 0x16	; 22
    74e6:	97 e1       	ldi	r25, 0x17	; 23
    74e8:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    74ec:	3b c0       	rjmp	.+118    	; 0x7564 <_ZN7Digital12digitalWriteEh+0x100>
    74ee:	61 e0       	ldi	r22, 0x01	; 1
    74f0:	86 e1       	ldi	r24, 0x16	; 22
    74f2:	97 e1       	ldi	r25, 0x17	; 23
    74f4:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    74f8:	35 c0       	rjmp	.+106    	; 0x7564 <_ZN7Digital12digitalWriteEh+0x100>
    74fa:	60 e0       	ldi	r22, 0x00	; 0
    74fc:	87 ee       	ldi	r24, 0xE7	; 231
    74fe:	96 e1       	ldi	r25, 0x16	; 22
    7500:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    7504:	2f c0       	rjmp	.+94     	; 0x7564 <_ZN7Digital12digitalWriteEh+0x100>
    7506:	61 e0       	ldi	r22, 0x01	; 1
    7508:	87 ee       	ldi	r24, 0xE7	; 231
    750a:	96 e1       	ldi	r25, 0x16	; 22
    750c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    7510:	29 c0       	rjmp	.+82     	; 0x7564 <_ZN7Digital12digitalWriteEh+0x100>
    7512:	62 e0       	ldi	r22, 0x02	; 2
    7514:	87 ee       	ldi	r24, 0xE7	; 231
    7516:	96 e1       	ldi	r25, 0x16	; 22
    7518:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    751c:	23 c0       	rjmp	.+70     	; 0x7564 <_ZN7Digital12digitalWriteEh+0x100>
    751e:	60 e0       	ldi	r22, 0x00	; 0
    7520:	88 eb       	ldi	r24, 0xB8	; 184
    7522:	96 e1       	ldi	r25, 0x16	; 22
    7524:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    7528:	1d c0       	rjmp	.+58     	; 0x7564 <_ZN7Digital12digitalWriteEh+0x100>
    752a:	61 e0       	ldi	r22, 0x01	; 1
    752c:	88 eb       	ldi	r24, 0xB8	; 184
    752e:	96 e1       	ldi	r25, 0x16	; 22
    7530:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    7534:	17 c0       	rjmp	.+46     	; 0x7564 <_ZN7Digital12digitalWriteEh+0x100>
    7536:	62 e0       	ldi	r22, 0x02	; 2
    7538:	88 eb       	ldi	r24, 0xB8	; 184
    753a:	96 e1       	ldi	r25, 0x16	; 22
    753c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    7540:	11 c0       	rjmp	.+34     	; 0x7564 <_ZN7Digital12digitalWriteEh+0x100>
    7542:	60 e0       	ldi	r22, 0x00	; 0
    7544:	89 e8       	ldi	r24, 0x89	; 137
    7546:	96 e1       	ldi	r25, 0x16	; 22
    7548:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    754c:	0b c0       	rjmp	.+22     	; 0x7564 <_ZN7Digital12digitalWriteEh+0x100>
    754e:	61 e0       	ldi	r22, 0x01	; 1
    7550:	89 e8       	ldi	r24, 0x89	; 137
    7552:	96 e1       	ldi	r25, 0x16	; 22
    7554:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    7558:	05 c0       	rjmp	.+10     	; 0x7564 <_ZN7Digital12digitalWriteEh+0x100>
    755a:	62 e0       	ldi	r22, 0x02	; 2
    755c:	89 e8       	ldi	r24, 0x89	; 137
    755e:	96 e1       	ldi	r25, 0x16	; 22
    7560:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    7564:	ec 2f       	mov	r30, r28
    7566:	f0 e0       	ldi	r31, 0x00	; 0
    7568:	ee 0f       	add	r30, r30
    756a:	ff 1f       	adc	r31, r31
    756c:	e9 58       	subi	r30, 0x89	; 137
    756e:	fc 4e       	sbci	r31, 0xEC	; 236
    7570:	a5 91       	lpm	r26, Z+
    7572:	b4 91       	lpm	r27, Z
    7574:	8f b7       	in	r24, 0x3f	; 63
    7576:	f8 94       	cli
    7578:	11 11       	cpse	r17, r1
    757a:	0d c0       	rjmp	.+26     	; 0x7596 <_ZN7Digital12digitalWriteEh+0x132>
    757c:	2d 91       	ld	r18, X+
    757e:	3c 91       	ld	r19, X
    7580:	11 97       	sbiw	r26, 0x01	; 1
    7582:	ed 2f       	mov	r30, r29
    7584:	f0 e0       	ldi	r31, 0x00	; 0
    7586:	e0 95       	com	r30
    7588:	f0 95       	com	r31
    758a:	e2 23       	and	r30, r18
    758c:	f3 23       	and	r31, r19
    758e:	11 96       	adiw	r26, 0x01	; 1
    7590:	fc 93       	st	X, r31
    7592:	ee 93       	st	-X, r30
    7594:	07 c0       	rjmp	.+14     	; 0x75a4 <_ZN7Digital12digitalWriteEh+0x140>
    7596:	2d 91       	ld	r18, X+
    7598:	3c 91       	ld	r19, X
    759a:	11 97       	sbiw	r26, 0x01	; 1
    759c:	2d 2b       	or	r18, r29
    759e:	11 96       	adiw	r26, 0x01	; 1
    75a0:	3c 93       	st	X, r19
    75a2:	2e 93       	st	-X, r18
    75a4:	8f bf       	out	0x3f, r24	; 63
    75a6:	df 91       	pop	r29
    75a8:	cf 91       	pop	r28
    75aa:	1f 91       	pop	r17
    75ac:	08 95       	ret

000075ae <_ZN20AbstractMotorControlC1Ev>:
    75ae:	27 e3       	ldi	r18, 0x37	; 55
    75b0:	38 e0       	ldi	r19, 0x08	; 8
    75b2:	dc 01       	movw	r26, r24
    75b4:	11 96       	adiw	r26, 0x01	; 1
    75b6:	3c 93       	st	X, r19
    75b8:	2e 93       	st	-X, r18
    75ba:	12 96       	adiw	r26, 0x02	; 2
    75bc:	1c 92       	st	X, r1
    75be:	38 e2       	ldi	r19, 0x28	; 40
    75c0:	fc 01       	movw	r30, r24
    75c2:	35 96       	adiw	r30, 0x05	; 5
    75c4:	df 01       	movw	r26, r30
    75c6:	23 2f       	mov	r18, r19
    75c8:	1d 92       	st	X+, r1
    75ca:	2a 95       	dec	r18
    75cc:	e9 f7       	brne	.-6      	; 0x75c8 <_ZN20AbstractMotorControlC1Ev+0x1a>
    75ce:	24 e1       	ldi	r18, 0x14	; 20
    75d0:	e1 e3       	ldi	r30, 0x31	; 49
    75d2:	f6 e0       	ldi	r31, 0x06	; 6
    75d4:	dc 01       	movw	r26, r24
    75d6:	9d 96       	adiw	r26, 0x2d	; 45
    75d8:	01 90       	ld	r0, Z+
    75da:	0d 92       	st	X+, r0
    75dc:	2a 95       	dec	r18
    75de:	e1 f7       	brne	.-8      	; 0x75d8 <_ZN20AbstractMotorControlC1Ev+0x2a>
    75e0:	dc 01       	movw	r26, r24
    75e2:	af 5b       	subi	r26, 0xBF	; 191
    75e4:	bf 4f       	sbci	r27, 0xFF	; 255
    75e6:	28 e2       	ldi	r18, 0x28	; 40
    75e8:	e5 e4       	ldi	r30, 0x45	; 69
    75ea:	f6 e0       	ldi	r31, 0x06	; 6
    75ec:	01 90       	ld	r0, Z+
    75ee:	0d 92       	st	X+, r0
    75f0:	2a 95       	dec	r18
    75f2:	e1 f7       	brne	.-8      	; 0x75ec <_ZN20AbstractMotorControlC1Ev+0x3e>
    75f4:	fc 01       	movw	r30, r24
    75f6:	e7 59       	subi	r30, 0x97	; 151
    75f8:	ff 4f       	sbci	r31, 0xFF	; 255
    75fa:	24 e1       	ldi	r18, 0x14	; 20
    75fc:	df 01       	movw	r26, r30
    75fe:	42 2f       	mov	r20, r18
    7600:	1d 92       	st	X+, r1
    7602:	4a 95       	dec	r20
    7604:	e9 f7       	brne	.-6      	; 0x7600 <_ZN20AbstractMotorControlC1Ev+0x52>
    7606:	74 96       	adiw	r30, 0x14	; 20
    7608:	4a e0       	ldi	r20, 0x0A	; 10
    760a:	df 01       	movw	r26, r30
    760c:	54 2f       	mov	r21, r20
    760e:	1d 92       	st	X+, r1
    7610:	5a 95       	dec	r21
    7612:	e9 f7       	brne	.-6      	; 0x760e <_ZN20AbstractMotorControlC1Ev+0x60>
    7614:	3a 96       	adiw	r30, 0x0a	; 10
    7616:	df 01       	movw	r26, r30
    7618:	1d 92       	st	X+, r1
    761a:	4a 95       	dec	r20
    761c:	e9 f7       	brne	.-6      	; 0x7618 <_ZN20AbstractMotorControlC1Ev+0x6a>
    761e:	3a 96       	adiw	r30, 0x0a	; 10
    7620:	df 01       	movw	r26, r30
    7622:	1d 92       	st	X+, r1
    7624:	3a 95       	dec	r19
    7626:	e9 f7       	brne	.-6      	; 0x7622 <_ZN20AbstractMotorControlC1Ev+0x74>
    7628:	b8 96       	adiw	r30, 0x28	; 40
    762a:	df 01       	movw	r26, r30
    762c:	32 2f       	mov	r19, r18
    762e:	1d 92       	st	X+, r1
    7630:	3a 95       	dec	r19
    7632:	e9 f7       	brne	.-6      	; 0x762e <_ZN20AbstractMotorControlC1Ev+0x80>
    7634:	74 96       	adiw	r30, 0x14	; 20
    7636:	df 01       	movw	r26, r30
    7638:	1d 92       	st	X+, r1
    763a:	2a 95       	dec	r18
    763c:	e9 f7       	brne	.-6      	; 0x7638 <_ZN20AbstractMotorControlC1Ev+0x8a>
    763e:	74 96       	adiw	r30, 0x14	; 20
    7640:	11 82       	std	Z+1, r1	; 0x01
    7642:	10 82       	st	Z, r1
    7644:	32 96       	adiw	r30, 0x02	; 2
    7646:	10 82       	st	Z, r1
    7648:	31 96       	adiw	r30, 0x01	; 1
    764a:	2f ef       	ldi	r18, 0xFF	; 255
    764c:	30 e0       	ldi	r19, 0x00	; 0
    764e:	31 83       	std	Z+1, r19	; 0x01
    7650:	20 83       	st	Z, r18
    7652:	32 96       	adiw	r30, 0x02	; 2
    7654:	11 82       	std	Z+1, r1	; 0x01
    7656:	10 82       	st	Z, r1
    7658:	08 95       	ret

0000765a <_ZN13HBridgeDriverC1Ev>:
    765a:	dc 01       	movw	r26, r24
    765c:	12 96       	adiw	r26, 0x02	; 2
    765e:	1c 92       	st	X, r1
    7660:	38 e2       	ldi	r19, 0x28	; 40
    7662:	fc 01       	movw	r30, r24
    7664:	35 96       	adiw	r30, 0x05	; 5
    7666:	df 01       	movw	r26, r30
    7668:	23 2f       	mov	r18, r19
    766a:	1d 92       	st	X+, r1
    766c:	2a 95       	dec	r18
    766e:	e9 f7       	brne	.-6      	; 0x766a <_ZN13HBridgeDriverC1Ev+0x10>
    7670:	24 e1       	ldi	r18, 0x14	; 20
    7672:	e1 e3       	ldi	r30, 0x31	; 49
    7674:	f6 e0       	ldi	r31, 0x06	; 6
    7676:	dc 01       	movw	r26, r24
    7678:	9d 96       	adiw	r26, 0x2d	; 45
    767a:	01 90       	ld	r0, Z+
    767c:	0d 92       	st	X+, r0
    767e:	2a 95       	dec	r18
    7680:	e1 f7       	brne	.-8      	; 0x767a <_ZN13HBridgeDriverC1Ev+0x20>
    7682:	dc 01       	movw	r26, r24
    7684:	af 5b       	subi	r26, 0xBF	; 191
    7686:	bf 4f       	sbci	r27, 0xFF	; 255
    7688:	28 e2       	ldi	r18, 0x28	; 40
    768a:	e5 e4       	ldi	r30, 0x45	; 69
    768c:	f6 e0       	ldi	r31, 0x06	; 6
    768e:	01 90       	ld	r0, Z+
    7690:	0d 92       	st	X+, r0
    7692:	2a 95       	dec	r18
    7694:	e1 f7       	brne	.-8      	; 0x768e <_ZN13HBridgeDriverC1Ev+0x34>
    7696:	fc 01       	movw	r30, r24
    7698:	e7 59       	subi	r30, 0x97	; 151
    769a:	ff 4f       	sbci	r31, 0xFF	; 255
    769c:	24 e1       	ldi	r18, 0x14	; 20
    769e:	df 01       	movw	r26, r30
    76a0:	42 2f       	mov	r20, r18
    76a2:	1d 92       	st	X+, r1
    76a4:	4a 95       	dec	r20
    76a6:	e9 f7       	brne	.-6      	; 0x76a2 <_ZN13HBridgeDriverC1Ev+0x48>
    76a8:	74 96       	adiw	r30, 0x14	; 20
    76aa:	4a e0       	ldi	r20, 0x0A	; 10
    76ac:	df 01       	movw	r26, r30
    76ae:	54 2f       	mov	r21, r20
    76b0:	1d 92       	st	X+, r1
    76b2:	5a 95       	dec	r21
    76b4:	e9 f7       	brne	.-6      	; 0x76b0 <_ZN13HBridgeDriverC1Ev+0x56>
    76b6:	3a 96       	adiw	r30, 0x0a	; 10
    76b8:	df 01       	movw	r26, r30
    76ba:	1d 92       	st	X+, r1
    76bc:	4a 95       	dec	r20
    76be:	e9 f7       	brne	.-6      	; 0x76ba <_ZN13HBridgeDriverC1Ev+0x60>
    76c0:	3a 96       	adiw	r30, 0x0a	; 10
    76c2:	df 01       	movw	r26, r30
    76c4:	1d 92       	st	X+, r1
    76c6:	3a 95       	dec	r19
    76c8:	e9 f7       	brne	.-6      	; 0x76c4 <_ZN13HBridgeDriverC1Ev+0x6a>
    76ca:	b8 96       	adiw	r30, 0x28	; 40
    76cc:	df 01       	movw	r26, r30
    76ce:	32 2f       	mov	r19, r18
    76d0:	1d 92       	st	X+, r1
    76d2:	3a 95       	dec	r19
    76d4:	e9 f7       	brne	.-6      	; 0x76d0 <_ZN13HBridgeDriverC1Ev+0x76>
    76d6:	74 96       	adiw	r30, 0x14	; 20
    76d8:	df 01       	movw	r26, r30
    76da:	1d 92       	st	X+, r1
    76dc:	2a 95       	dec	r18
    76de:	e9 f7       	brne	.-6      	; 0x76da <_ZN13HBridgeDriverC1Ev+0x80>
    76e0:	74 96       	adiw	r30, 0x14	; 20
    76e2:	11 82       	std	Z+1, r1	; 0x01
    76e4:	10 82       	st	Z, r1
    76e6:	32 96       	adiw	r30, 0x02	; 2
    76e8:	10 82       	st	Z, r1
    76ea:	31 96       	adiw	r30, 0x01	; 1
    76ec:	2f ef       	ldi	r18, 0xFF	; 255
    76ee:	30 e0       	ldi	r19, 0x00	; 0
    76f0:	31 83       	std	Z+1, r19	; 0x01
    76f2:	20 83       	st	Z, r18
    76f4:	32 96       	adiw	r30, 0x02	; 2
    76f6:	11 82       	std	Z+1, r1	; 0x01
    76f8:	10 82       	st	Z, r1
    76fa:	21 e6       	ldi	r18, 0x61	; 97
    76fc:	38 e0       	ldi	r19, 0x08	; 8
    76fe:	fc 01       	movw	r30, r24
    7700:	31 83       	std	Z+1, r19	; 0x01
    7702:	20 83       	st	Z, r18
    7704:	dc 01       	movw	r26, r24
    7706:	a4 51       	subi	r26, 0x14	; 20
    7708:	bf 4f       	sbci	r27, 0xFF	; 255
    770a:	28 e2       	ldi	r18, 0x28	; 40
    770c:	ed e6       	ldi	r30, 0x6D	; 109
    770e:	f6 e0       	ldi	r31, 0x06	; 6
    7710:	01 90       	ld	r0, Z+
    7712:	0d 92       	st	X+, r0
    7714:	2a 95       	dec	r18
    7716:	e1 f7       	brne	.-8      	; 0x7710 <_ZN13HBridgeDriverC1Ev+0xb6>
    7718:	fc 01       	movw	r30, r24
    771a:	ec 5e       	subi	r30, 0xEC	; 236
    771c:	fe 4f       	sbci	r31, 0xFE	; 254
    771e:	11 82       	std	Z+1, r1	; 0x01
    7720:	10 82       	st	Z, r1
    7722:	08 95       	ret

00007724 <_ZN17SplitBridgeDriverC1Ev>:
    7724:	dc 01       	movw	r26, r24
    7726:	12 96       	adiw	r26, 0x02	; 2
    7728:	1c 92       	st	X, r1
    772a:	38 e2       	ldi	r19, 0x28	; 40
    772c:	fc 01       	movw	r30, r24
    772e:	35 96       	adiw	r30, 0x05	; 5
    7730:	df 01       	movw	r26, r30
    7732:	23 2f       	mov	r18, r19
    7734:	1d 92       	st	X+, r1
    7736:	2a 95       	dec	r18
    7738:	e9 f7       	brne	.-6      	; 0x7734 <_ZN17SplitBridgeDriverC1Ev+0x10>
    773a:	24 e1       	ldi	r18, 0x14	; 20
    773c:	e1 e3       	ldi	r30, 0x31	; 49
    773e:	f6 e0       	ldi	r31, 0x06	; 6
    7740:	dc 01       	movw	r26, r24
    7742:	9d 96       	adiw	r26, 0x2d	; 45
    7744:	01 90       	ld	r0, Z+
    7746:	0d 92       	st	X+, r0
    7748:	2a 95       	dec	r18
    774a:	e1 f7       	brne	.-8      	; 0x7744 <_ZN17SplitBridgeDriverC1Ev+0x20>
    774c:	dc 01       	movw	r26, r24
    774e:	af 5b       	subi	r26, 0xBF	; 191
    7750:	bf 4f       	sbci	r27, 0xFF	; 255
    7752:	28 e2       	ldi	r18, 0x28	; 40
    7754:	e5 e4       	ldi	r30, 0x45	; 69
    7756:	f6 e0       	ldi	r31, 0x06	; 6
    7758:	01 90       	ld	r0, Z+
    775a:	0d 92       	st	X+, r0
    775c:	2a 95       	dec	r18
    775e:	e1 f7       	brne	.-8      	; 0x7758 <_ZN17SplitBridgeDriverC1Ev+0x34>
    7760:	fc 01       	movw	r30, r24
    7762:	e7 59       	subi	r30, 0x97	; 151
    7764:	ff 4f       	sbci	r31, 0xFF	; 255
    7766:	24 e1       	ldi	r18, 0x14	; 20
    7768:	df 01       	movw	r26, r30
    776a:	42 2f       	mov	r20, r18
    776c:	1d 92       	st	X+, r1
    776e:	4a 95       	dec	r20
    7770:	e9 f7       	brne	.-6      	; 0x776c <_ZN17SplitBridgeDriverC1Ev+0x48>
    7772:	74 96       	adiw	r30, 0x14	; 20
    7774:	4a e0       	ldi	r20, 0x0A	; 10
    7776:	df 01       	movw	r26, r30
    7778:	54 2f       	mov	r21, r20
    777a:	1d 92       	st	X+, r1
    777c:	5a 95       	dec	r21
    777e:	e9 f7       	brne	.-6      	; 0x777a <_ZN17SplitBridgeDriverC1Ev+0x56>
    7780:	3a 96       	adiw	r30, 0x0a	; 10
    7782:	df 01       	movw	r26, r30
    7784:	1d 92       	st	X+, r1
    7786:	4a 95       	dec	r20
    7788:	e9 f7       	brne	.-6      	; 0x7784 <_ZN17SplitBridgeDriverC1Ev+0x60>
    778a:	3a 96       	adiw	r30, 0x0a	; 10
    778c:	df 01       	movw	r26, r30
    778e:	1d 92       	st	X+, r1
    7790:	3a 95       	dec	r19
    7792:	e9 f7       	brne	.-6      	; 0x778e <_ZN17SplitBridgeDriverC1Ev+0x6a>
    7794:	b8 96       	adiw	r30, 0x28	; 40
    7796:	df 01       	movw	r26, r30
    7798:	32 2f       	mov	r19, r18
    779a:	1d 92       	st	X+, r1
    779c:	3a 95       	dec	r19
    779e:	e9 f7       	brne	.-6      	; 0x779a <_ZN17SplitBridgeDriverC1Ev+0x76>
    77a0:	74 96       	adiw	r30, 0x14	; 20
    77a2:	df 01       	movw	r26, r30
    77a4:	1d 92       	st	X+, r1
    77a6:	2a 95       	dec	r18
    77a8:	e9 f7       	brne	.-6      	; 0x77a4 <_ZN17SplitBridgeDriverC1Ev+0x80>
    77aa:	74 96       	adiw	r30, 0x14	; 20
    77ac:	11 82       	std	Z+1, r1	; 0x01
    77ae:	10 82       	st	Z, r1
    77b0:	32 96       	adiw	r30, 0x02	; 2
    77b2:	10 82       	st	Z, r1
    77b4:	31 96       	adiw	r30, 0x01	; 1
    77b6:	2f ef       	ldi	r18, 0xFF	; 255
    77b8:	30 e0       	ldi	r19, 0x00	; 0
    77ba:	31 83       	std	Z+1, r19	; 0x01
    77bc:	20 83       	st	Z, r18
    77be:	32 96       	adiw	r30, 0x02	; 2
    77c0:	11 82       	std	Z+1, r1	; 0x01
    77c2:	10 82       	st	Z, r1
    77c4:	dc 01       	movw	r26, r24
    77c6:	a4 51       	subi	r26, 0x14	; 20
    77c8:	bf 4f       	sbci	r27, 0xFF	; 255
    77ca:	28 e2       	ldi	r18, 0x28	; 40
    77cc:	ed e6       	ldi	r30, 0x6D	; 109
    77ce:	f6 e0       	ldi	r31, 0x06	; 6
    77d0:	01 90       	ld	r0, Z+
    77d2:	0d 92       	st	X+, r0
    77d4:	2a 95       	dec	r18
    77d6:	e1 f7       	brne	.-8      	; 0x77d0 <_ZN17SplitBridgeDriverC1Ev+0xac>
    77d8:	fc 01       	movw	r30, r24
    77da:	ec 5e       	subi	r30, 0xEC	; 236
    77dc:	fe 4f       	sbci	r31, 0xFE	; 254
    77de:	11 82       	std	Z+1, r1	; 0x01
    77e0:	10 82       	st	Z, r1
    77e2:	28 e9       	ldi	r18, 0x98	; 152
    77e4:	39 e0       	ldi	r19, 0x09	; 9
    77e6:	fc 01       	movw	r30, r24
    77e8:	31 83       	std	Z+1, r19	; 0x01
    77ea:	20 83       	st	Z, r18
    77ec:	dc 01       	movw	r26, r24
    77ee:	aa 5e       	subi	r26, 0xEA	; 234
    77f0:	be 4f       	sbci	r27, 0xFE	; 254
    77f2:	88 e2       	ldi	r24, 0x28	; 40
    77f4:	ed e6       	ldi	r30, 0x6D	; 109
    77f6:	f6 e0       	ldi	r31, 0x06	; 6
    77f8:	01 90       	ld	r0, Z+
    77fa:	0d 92       	st	X+, r0
    77fc:	8a 95       	dec	r24
    77fe:	e1 f7       	brne	.-8      	; 0x77f8 <_ZN17SplitBridgeDriverC1Ev+0xd4>
    7800:	08 95       	ret

00007802 <freeMemory>:
    7802:	cf 93       	push	r28
    7804:	df 93       	push	r29
    7806:	1f 92       	push	r1
    7808:	1f 92       	push	r1
    780a:	cd b7       	in	r28, 0x3d	; 61
    780c:	de b7       	in	r29, 0x3e	; 62
    780e:	80 91 16 18 	lds	r24, 0x1816	; 0x801816 <__brkval>
    7812:	90 91 17 18 	lds	r25, 0x1817	; 0x801817 <__brkval+0x1>
    7816:	00 97       	sbiw	r24, 0x00	; 0
    7818:	31 f4       	brne	.+12     	; 0x7826 <freeMemory+0x24>
    781a:	ce 01       	movw	r24, r28
    781c:	8b 51       	subi	r24, 0x1B	; 27
    781e:	98 41       	sbci	r25, 0x18	; 24
    7820:	9a 83       	std	Y+2, r25	; 0x02
    7822:	89 83       	std	Y+1, r24	; 0x01
    7824:	08 c0       	rjmp	.+16     	; 0x7836 <freeMemory+0x34>
    7826:	9e 01       	movw	r18, r28
    7828:	2f 5f       	subi	r18, 0xFF	; 255
    782a:	3f 4f       	sbci	r19, 0xFF	; 255
    782c:	a9 01       	movw	r20, r18
    782e:	48 1b       	sub	r20, r24
    7830:	59 0b       	sbc	r21, r25
    7832:	5a 83       	std	Y+2, r21	; 0x02
    7834:	49 83       	std	Y+1, r20	; 0x01
    7836:	89 81       	ldd	r24, Y+1	; 0x01
    7838:	9a 81       	ldd	r25, Y+2	; 0x02
    783a:	0f 90       	pop	r0
    783c:	0f 90       	pop	r0
    783e:	df 91       	pop	r29
    7840:	cf 91       	pop	r28
    7842:	08 95       	ret

00007844 <_Z5crc16Pct>:
    7844:	61 15       	cp	r22, r1
    7846:	71 05       	cpc	r23, r1
    7848:	21 f1       	breq	.+72     	; 0x7892 <_Z5crc16Pct+0x4e>
    784a:	dc 01       	movw	r26, r24
    784c:	68 0f       	add	r22, r24
    784e:	79 1f       	adc	r23, r25
    7850:	2f ef       	ldi	r18, 0xFF	; 255
    7852:	3f ef       	ldi	r19, 0xFF	; 255
    7854:	4d 91       	ld	r20, X+
    7856:	50 e0       	ldi	r21, 0x00	; 0
    7858:	98 e0       	ldi	r25, 0x08	; 8
    785a:	fa 01       	movw	r30, r20
    785c:	e2 27       	eor	r30, r18
    785e:	f3 27       	eor	r31, r19
    7860:	e0 ff       	sbrs	r30, 0
    7862:	07 c0       	rjmp	.+14     	; 0x7872 <_Z5crc16Pct+0x2e>
    7864:	36 95       	lsr	r19
    7866:	27 95       	ror	r18
    7868:	88 e0       	ldi	r24, 0x08	; 8
    786a:	28 27       	eor	r18, r24
    786c:	84 e8       	ldi	r24, 0x84	; 132
    786e:	38 27       	eor	r19, r24
    7870:	02 c0       	rjmp	.+4      	; 0x7876 <_Z5crc16Pct+0x32>
    7872:	36 95       	lsr	r19
    7874:	27 95       	ror	r18
    7876:	56 95       	lsr	r21
    7878:	47 95       	ror	r20
    787a:	91 50       	subi	r25, 0x01	; 1
    787c:	71 f7       	brne	.-36     	; 0x785a <_Z5crc16Pct+0x16>
    787e:	6a 17       	cp	r22, r26
    7880:	7b 07       	cpc	r23, r27
    7882:	41 f7       	brne	.-48     	; 0x7854 <_Z5crc16Pct+0x10>
    7884:	c9 01       	movw	r24, r18
    7886:	80 95       	com	r24
    7888:	90 95       	com	r25
    788a:	98 27       	eor	r25, r24
    788c:	89 27       	eor	r24, r25
    788e:	98 27       	eor	r25, r24
    7890:	08 95       	ret
    7892:	80 e0       	ldi	r24, 0x00	; 0
    7894:	90 e0       	ldi	r25, 0x00	; 0
    7896:	08 95       	ret

00007898 <_Z5setupv>:
    7898:	78 94       	sei
    789a:	26 e0       	ldi	r18, 0x06	; 6
    789c:	40 e0       	ldi	r20, 0x00	; 0
    789e:	52 ec       	ldi	r21, 0xC2	; 194
    78a0:	61 e0       	ldi	r22, 0x01	; 1
    78a2:	70 e0       	ldi	r23, 0x00	; 0
    78a4:	88 e0       	ldi	r24, 0x08	; 8
    78a6:	9a e0       	ldi	r25, 0x0A	; 10
    78a8:	0e 94 95 19 	call	0x332a	; 0x332a <_ZN14HardwareSerial5beginEmh>
    78ac:	26 e0       	ldi	r18, 0x06	; 6
    78ae:	40 e0       	ldi	r20, 0x00	; 0
    78b0:	52 ec       	ldi	r21, 0xC2	; 194
    78b2:	61 e0       	ldi	r22, 0x01	; 1
    78b4:	70 e0       	ldi	r23, 0x00	; 0
    78b6:	82 e4       	ldi	r24, 0x42	; 66
    78b8:	9e e0       	ldi	r25, 0x0E	; 14
    78ba:	0e 94 95 19 	call	0x332a	; 0x332a <_ZN14HardwareSerial5beginEmh>
    78be:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <_Z23Config_RetrieveSettingsv>
    78c2:	08 95       	ret

000078c4 <_Z10code_valuev>:
    78c4:	80 91 76 14 	lds	r24, 0x1476	; 0x801476 <_ZL14strchr_pointer>
    78c8:	90 91 77 14 	lds	r25, 0x1477	; 0x801477 <_ZL14strchr_pointer+0x1>
    78cc:	60 e0       	ldi	r22, 0x00	; 0
    78ce:	70 e0       	ldi	r23, 0x00	; 0
    78d0:	01 96       	adiw	r24, 0x01	; 1
    78d2:	0c 94 79 a9 	jmp	0x152f2	; 0x152f2 <strtod>
    78d6:	08 95       	ret

000078d8 <_Z9code_seenc>:
    78d8:	68 2f       	mov	r22, r24
    78da:	70 e0       	ldi	r23, 0x00	; 0
    78dc:	8b e7       	ldi	r24, 0x7B	; 123
    78de:	95 e1       	ldi	r25, 0x15	; 21
    78e0:	0e 94 3a ac 	call	0x15874	; 0x15874 <strchr>
    78e4:	90 93 77 14 	sts	0x1477, r25	; 0x801477 <_ZL14strchr_pointer+0x1>
    78e8:	80 93 76 14 	sts	0x1476, r24	; 0x801476 <_ZL14strchr_pointer>
    78ec:	21 e0       	ldi	r18, 0x01	; 1
    78ee:	89 2b       	or	r24, r25
    78f0:	09 f4       	brne	.+2      	; 0x78f4 <_Z9code_seenc+0x1c>
    78f2:	20 e0       	ldi	r18, 0x00	; 0
    78f4:	82 2f       	mov	r24, r18
    78f6:	08 95       	ret

000078f8 <_Z21publishMotorFaultCodei>:
    78f8:	2f 92       	push	r2
    78fa:	3f 92       	push	r3
    78fc:	4f 92       	push	r4
    78fe:	5f 92       	push	r5
    7900:	6f 92       	push	r6
    7902:	7f 92       	push	r7
    7904:	8f 92       	push	r8
    7906:	9f 92       	push	r9
    7908:	af 92       	push	r10
    790a:	bf 92       	push	r11
    790c:	cf 92       	push	r12
    790e:	df 92       	push	r13
    7910:	ef 92       	push	r14
    7912:	ff 92       	push	r15
    7914:	0f 93       	push	r16
    7916:	1f 93       	push	r17
    7918:	cf 93       	push	r28
    791a:	df 93       	push	r29
    791c:	b8 2e       	mov	r11, r24
    791e:	ed ed       	ldi	r30, 0xDD	; 221
    7920:	f9 e0       	ldi	r31, 0x09	; 9
    7922:	64 91       	lpm	r22, Z
    7924:	66 23       	and	r22, r22
    7926:	81 f0       	breq	.+32     	; 0x7948 <_Z21publishMotorFaultCodei+0x50>
    7928:	ef 01       	movw	r28, r30
    792a:	08 e0       	ldi	r16, 0x08	; 8
    792c:	1a e0       	ldi	r17, 0x0A	; 10
    792e:	d8 01       	movw	r26, r16
    7930:	ed 91       	ld	r30, X+
    7932:	fc 91       	ld	r31, X
    7934:	01 90       	ld	r0, Z+
    7936:	f0 81       	ld	r31, Z
    7938:	e0 2d       	mov	r30, r0
    793a:	c8 01       	movw	r24, r16
    793c:	19 95       	eicall
    793e:	21 96       	adiw	r28, 0x01	; 1
    7940:	fe 01       	movw	r30, r28
    7942:	64 91       	lpm	r22, Z
    7944:	61 11       	cpse	r22, r1
    7946:	f3 cf       	rjmp	.-26     	; 0x792e <_Z21publishMotorFaultCodei+0x36>
    7948:	e2 ed       	ldi	r30, 0xD2	; 210
    794a:	f9 e0       	ldi	r31, 0x09	; 9
    794c:	64 91       	lpm	r22, Z
    794e:	66 23       	and	r22, r22
    7950:	81 f0       	breq	.+32     	; 0x7972 <_Z21publishMotorFaultCodei+0x7a>
    7952:	ef 01       	movw	r28, r30
    7954:	08 e0       	ldi	r16, 0x08	; 8
    7956:	1a e0       	ldi	r17, 0x0A	; 10
    7958:	d8 01       	movw	r26, r16
    795a:	ed 91       	ld	r30, X+
    795c:	fc 91       	ld	r31, X
    795e:	01 90       	ld	r0, Z+
    7960:	f0 81       	ld	r31, Z
    7962:	e0 2d       	mov	r30, r0
    7964:	c8 01       	movw	r24, r16
    7966:	19 95       	eicall
    7968:	21 96       	adiw	r28, 0x01	; 1
    796a:	fe 01       	movw	r30, r28
    796c:	64 91       	lpm	r22, Z
    796e:	61 11       	cpse	r22, r1
    7970:	f3 cf       	rjmp	.-26     	; 0x7958 <_Z21publishMotorFaultCodei+0x60>
    7972:	e0 ed       	ldi	r30, 0xD0	; 208
    7974:	f9 e0       	ldi	r31, 0x09	; 9
    7976:	64 91       	lpm	r22, Z
    7978:	66 23       	and	r22, r22
    797a:	81 f0       	breq	.+32     	; 0x799c <_Z21publishMotorFaultCodei+0xa4>
    797c:	ef 01       	movw	r28, r30
    797e:	08 e0       	ldi	r16, 0x08	; 8
    7980:	1a e0       	ldi	r17, 0x0A	; 10
    7982:	d8 01       	movw	r26, r16
    7984:	ed 91       	ld	r30, X+
    7986:	fc 91       	ld	r31, X
    7988:	01 90       	ld	r0, Z+
    798a:	f0 81       	ld	r31, Z
    798c:	e0 2d       	mov	r30, r0
    798e:	c8 01       	movw	r24, r16
    7990:	19 95       	eicall
    7992:	21 96       	adiw	r28, 0x01	; 1
    7994:	fe 01       	movw	r30, r28
    7996:	64 91       	lpm	r22, Z
    7998:	61 11       	cpse	r22, r1
    799a:	f3 cf       	rjmp	.-26     	; 0x7982 <_Z21publishMotorFaultCodei+0x8a>
    799c:	88 e0       	ldi	r24, 0x08	; 8
    799e:	9a e0       	ldi	r25, 0x0A	; 10
    79a0:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    79a4:	e1 2c       	mov	r14, r1
    79a6:	f1 2c       	mov	r15, r1
    79a8:	61 e0       	ldi	r22, 0x01	; 1
    79aa:	88 24       	eor	r8, r8
    79ac:	83 94       	inc	r8
    79ae:	91 2c       	mov	r9, r1
    79b0:	c8 e0       	ldi	r28, 0x08	; 8
    79b2:	da e0       	ldi	r29, 0x0A	; 10
    79b4:	0f 2e       	mov	r0, r31
    79b6:	f0 ea       	ldi	r31, 0xA0	; 160
    79b8:	6f 2e       	mov	r6, r31
    79ba:	f9 e0       	ldi	r31, 0x09	; 9
    79bc:	7f 2e       	mov	r7, r31
    79be:	f0 2d       	mov	r31, r0
    79c0:	0c 2f       	mov	r16, r28
    79c2:	1d 2f       	mov	r17, r29
    79c4:	0f 2e       	mov	r0, r31
    79c6:	fa e7       	ldi	r31, 0x7A	; 122
    79c8:	4f 2e       	mov	r4, r31
    79ca:	f9 e0       	ldi	r31, 0x09	; 9
    79cc:	5f 2e       	mov	r5, r31
    79ce:	f0 2d       	mov	r31, r0
    79d0:	0f 2e       	mov	r0, r31
    79d2:	fb e6       	ldi	r31, 0x6B	; 107
    79d4:	2f 2e       	mov	r2, r31
    79d6:	f9 e0       	ldi	r31, 0x09	; 9
    79d8:	3f 2e       	mov	r3, r31
    79da:	f0 2d       	mov	r31, r0
    79dc:	c4 01       	movw	r24, r8
    79de:	0e 2c       	mov	r0, r14
    79e0:	02 c0       	rjmp	.+4      	; 0x79e6 <_Z21publishMotorFaultCodei+0xee>
    79e2:	88 0f       	add	r24, r24
    79e4:	99 1f       	adc	r25, r25
    79e6:	0a 94       	dec	r0
    79e8:	e2 f7       	brpl	.-8      	; 0x79e2 <_Z21publishMotorFaultCodei+0xea>
    79ea:	8b 21       	and	r24, r11
    79ec:	88 30       	cpi	r24, 0x08	; 8
    79ee:	09 f4       	brne	.+2      	; 0x79f2 <_Z21publishMotorFaultCodei+0xfa>
    79f0:	8c c0       	rjmp	.+280    	; 0x7b0a <_Z21publishMotorFaultCodei+0x212>
    79f2:	50 f4       	brcc	.+20     	; 0x7a08 <_Z21publishMotorFaultCodei+0x110>
    79f4:	82 30       	cpi	r24, 0x02	; 2
    79f6:	09 f4       	brne	.+2      	; 0x79fa <_Z21publishMotorFaultCodei+0x102>
    79f8:	3c c0       	rjmp	.+120    	; 0x7a72 <_Z21publishMotorFaultCodei+0x17a>
    79fa:	84 30       	cpi	r24, 0x04	; 4
    79fc:	09 f4       	brne	.+2      	; 0x7a00 <_Z21publishMotorFaultCodei+0x108>
    79fe:	5f c0       	rjmp	.+190    	; 0x7abe <_Z21publishMotorFaultCodei+0x1c6>
    7a00:	81 30       	cpi	r24, 0x01	; 1
    7a02:	09 f0       	breq	.+2      	; 0x7a06 <_Z21publishMotorFaultCodei+0x10e>
    7a04:	4b c1       	rjmp	.+662    	; 0x7c9c <_Z21publishMotorFaultCodei+0x3a4>
    7a06:	0f c0       	rjmp	.+30     	; 0x7a26 <_Z21publishMotorFaultCodei+0x12e>
    7a08:	80 32       	cpi	r24, 0x20	; 32
    7a0a:	09 f4       	brne	.+2      	; 0x7a0e <_Z21publishMotorFaultCodei+0x116>
    7a0c:	ce c0       	rjmp	.+412    	; 0x7baa <_Z21publishMotorFaultCodei+0x2b2>
    7a0e:	20 f4       	brcc	.+8      	; 0x7a18 <_Z21publishMotorFaultCodei+0x120>
    7a10:	80 31       	cpi	r24, 0x10	; 16
    7a12:	09 f4       	brne	.+2      	; 0x7a16 <_Z21publishMotorFaultCodei+0x11e>
    7a14:	a4 c0       	rjmp	.+328    	; 0x7b5e <_Z21publishMotorFaultCodei+0x266>
    7a16:	42 c1       	rjmp	.+644    	; 0x7c9c <_Z21publishMotorFaultCodei+0x3a4>
    7a18:	80 34       	cpi	r24, 0x40	; 64
    7a1a:	09 f4       	brne	.+2      	; 0x7a1e <_Z21publishMotorFaultCodei+0x126>
    7a1c:	f0 c0       	rjmp	.+480    	; 0x7bfe <_Z21publishMotorFaultCodei+0x306>
    7a1e:	80 38       	cpi	r24, 0x80	; 128
    7a20:	09 f4       	brne	.+2      	; 0x7a24 <_Z21publishMotorFaultCodei+0x12c>
    7a22:	17 c1       	rjmp	.+558    	; 0x7c52 <_Z21publishMotorFaultCodei+0x35a>
    7a24:	3b c1       	rjmp	.+630    	; 0x7c9c <_Z21publishMotorFaultCodei+0x3a4>
    7a26:	aa 24       	eor	r10, r10
    7a28:	a3 94       	inc	r10
    7a2a:	a6 0e       	add	r10, r22
    7a2c:	4a e0       	ldi	r20, 0x0A	; 10
    7a2e:	50 e0       	ldi	r21, 0x00	; 0
    7a30:	ce 01       	movw	r24, r28
    7a32:	0e 94 d9 8a 	call	0x115b2	; 0x115b2 <_ZN5Print5printEhi>
    7a36:	60 e2       	ldi	r22, 0x20	; 32
    7a38:	ce 01       	movw	r24, r28
    7a3a:	0e 94 ed 89 	call	0x113da	; 0x113da <_ZN5Print5printEc>
    7a3e:	e7 ec       	ldi	r30, 0xC7	; 199
    7a40:	f9 e0       	ldi	r31, 0x09	; 9
    7a42:	64 91       	lpm	r22, Z
    7a44:	66 23       	and	r22, r22
    7a46:	81 f0       	breq	.+32     	; 0x7a68 <_Z21publishMotorFaultCodei+0x170>
    7a48:	6f 01       	movw	r12, r30
    7a4a:	e8 81       	ld	r30, Y
    7a4c:	f9 81       	ldd	r31, Y+1	; 0x01
    7a4e:	01 90       	ld	r0, Z+
    7a50:	f0 81       	ld	r31, Z
    7a52:	e0 2d       	mov	r30, r0
    7a54:	80 2f       	mov	r24, r16
    7a56:	91 2f       	mov	r25, r17
    7a58:	19 95       	eicall
    7a5a:	ff ef       	ldi	r31, 0xFF	; 255
    7a5c:	cf 1a       	sub	r12, r31
    7a5e:	df 0a       	sbc	r13, r31
    7a60:	f6 01       	movw	r30, r12
    7a62:	64 91       	lpm	r22, Z
    7a64:	61 11       	cpse	r22, r1
    7a66:	f1 cf       	rjmp	.-30     	; 0x7a4a <_Z21publishMotorFaultCodei+0x152>
    7a68:	ce 01       	movw	r24, r28
    7a6a:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    7a6e:	6a 2d       	mov	r22, r10
    7a70:	15 c1       	rjmp	.+554    	; 0x7c9c <_Z21publishMotorFaultCodei+0x3a4>
    7a72:	aa 24       	eor	r10, r10
    7a74:	a3 94       	inc	r10
    7a76:	a6 0e       	add	r10, r22
    7a78:	4a e0       	ldi	r20, 0x0A	; 10
    7a7a:	50 e0       	ldi	r21, 0x00	; 0
    7a7c:	ce 01       	movw	r24, r28
    7a7e:	0e 94 d9 8a 	call	0x115b2	; 0x115b2 <_ZN5Print5printEhi>
    7a82:	60 e2       	ldi	r22, 0x20	; 32
    7a84:	ce 01       	movw	r24, r28
    7a86:	0e 94 ed 89 	call	0x113da	; 0x113da <_ZN5Print5printEc>
    7a8a:	eb eb       	ldi	r30, 0xBB	; 187
    7a8c:	f9 e0       	ldi	r31, 0x09	; 9
    7a8e:	64 91       	lpm	r22, Z
    7a90:	66 23       	and	r22, r22
    7a92:	81 f0       	breq	.+32     	; 0x7ab4 <_Z21publishMotorFaultCodei+0x1bc>
    7a94:	6f 01       	movw	r12, r30
    7a96:	e8 81       	ld	r30, Y
    7a98:	f9 81       	ldd	r31, Y+1	; 0x01
    7a9a:	01 90       	ld	r0, Z+
    7a9c:	f0 81       	ld	r31, Z
    7a9e:	e0 2d       	mov	r30, r0
    7aa0:	80 2f       	mov	r24, r16
    7aa2:	91 2f       	mov	r25, r17
    7aa4:	19 95       	eicall
    7aa6:	ff ef       	ldi	r31, 0xFF	; 255
    7aa8:	cf 1a       	sub	r12, r31
    7aaa:	df 0a       	sbc	r13, r31
    7aac:	f6 01       	movw	r30, r12
    7aae:	64 91       	lpm	r22, Z
    7ab0:	61 11       	cpse	r22, r1
    7ab2:	f1 cf       	rjmp	.-30     	; 0x7a96 <_Z21publishMotorFaultCodei+0x19e>
    7ab4:	ce 01       	movw	r24, r28
    7ab6:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    7aba:	6a 2d       	mov	r22, r10
    7abc:	ef c0       	rjmp	.+478    	; 0x7c9c <_Z21publishMotorFaultCodei+0x3a4>
    7abe:	aa 24       	eor	r10, r10
    7ac0:	a3 94       	inc	r10
    7ac2:	a6 0e       	add	r10, r22
    7ac4:	4a e0       	ldi	r20, 0x0A	; 10
    7ac6:	50 e0       	ldi	r21, 0x00	; 0
    7ac8:	ce 01       	movw	r24, r28
    7aca:	0e 94 d9 8a 	call	0x115b2	; 0x115b2 <_ZN5Print5printEhi>
    7ace:	60 e2       	ldi	r22, 0x20	; 32
    7ad0:	ce 01       	movw	r24, r28
    7ad2:	0e 94 ed 89 	call	0x113da	; 0x113da <_ZN5Print5printEc>
    7ad6:	ee ea       	ldi	r30, 0xAE	; 174
    7ad8:	f9 e0       	ldi	r31, 0x09	; 9
    7ada:	64 91       	lpm	r22, Z
    7adc:	66 23       	and	r22, r22
    7ade:	81 f0       	breq	.+32     	; 0x7b00 <_Z21publishMotorFaultCodei+0x208>
    7ae0:	6f 01       	movw	r12, r30
    7ae2:	e8 81       	ld	r30, Y
    7ae4:	f9 81       	ldd	r31, Y+1	; 0x01
    7ae6:	01 90       	ld	r0, Z+
    7ae8:	f0 81       	ld	r31, Z
    7aea:	e0 2d       	mov	r30, r0
    7aec:	80 2f       	mov	r24, r16
    7aee:	91 2f       	mov	r25, r17
    7af0:	19 95       	eicall
    7af2:	ff ef       	ldi	r31, 0xFF	; 255
    7af4:	cf 1a       	sub	r12, r31
    7af6:	df 0a       	sbc	r13, r31
    7af8:	f6 01       	movw	r30, r12
    7afa:	64 91       	lpm	r22, Z
    7afc:	61 11       	cpse	r22, r1
    7afe:	f1 cf       	rjmp	.-30     	; 0x7ae2 <_Z21publishMotorFaultCodei+0x1ea>
    7b00:	ce 01       	movw	r24, r28
    7b02:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    7b06:	6a 2d       	mov	r22, r10
    7b08:	c9 c0       	rjmp	.+402    	; 0x7c9c <_Z21publishMotorFaultCodei+0x3a4>
    7b0a:	aa 24       	eor	r10, r10
    7b0c:	a3 94       	inc	r10
    7b0e:	a6 0e       	add	r10, r22
    7b10:	4a e0       	ldi	r20, 0x0A	; 10
    7b12:	50 e0       	ldi	r21, 0x00	; 0
    7b14:	ce 01       	movw	r24, r28
    7b16:	0e 94 d9 8a 	call	0x115b2	; 0x115b2 <_ZN5Print5printEhi>
    7b1a:	60 e2       	ldi	r22, 0x20	; 32
    7b1c:	ce 01       	movw	r24, r28
    7b1e:	0e 94 ed 89 	call	0x113da	; 0x113da <_ZN5Print5printEc>
    7b22:	f3 01       	movw	r30, r6
    7b24:	64 91       	lpm	r22, Z
    7b26:	66 23       	and	r22, r22
    7b28:	a9 f0       	breq	.+42     	; 0x7b54 <_Z21publishMotorFaultCodei+0x25c>
    7b2a:	0f 2e       	mov	r0, r31
    7b2c:	f0 ea       	ldi	r31, 0xA0	; 160
    7b2e:	cf 2e       	mov	r12, r31
    7b30:	f9 e0       	ldi	r31, 0x09	; 9
    7b32:	df 2e       	mov	r13, r31
    7b34:	f0 2d       	mov	r31, r0
    7b36:	e8 81       	ld	r30, Y
    7b38:	f9 81       	ldd	r31, Y+1	; 0x01
    7b3a:	01 90       	ld	r0, Z+
    7b3c:	f0 81       	ld	r31, Z
    7b3e:	e0 2d       	mov	r30, r0
    7b40:	80 2f       	mov	r24, r16
    7b42:	91 2f       	mov	r25, r17
    7b44:	19 95       	eicall
    7b46:	ff ef       	ldi	r31, 0xFF	; 255
    7b48:	cf 1a       	sub	r12, r31
    7b4a:	df 0a       	sbc	r13, r31
    7b4c:	f6 01       	movw	r30, r12
    7b4e:	64 91       	lpm	r22, Z
    7b50:	61 11       	cpse	r22, r1
    7b52:	f1 cf       	rjmp	.-30     	; 0x7b36 <_Z21publishMotorFaultCodei+0x23e>
    7b54:	ce 01       	movw	r24, r28
    7b56:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    7b5a:	6a 2d       	mov	r22, r10
    7b5c:	9f c0       	rjmp	.+318    	; 0x7c9c <_Z21publishMotorFaultCodei+0x3a4>
    7b5e:	aa 24       	eor	r10, r10
    7b60:	a3 94       	inc	r10
    7b62:	a6 0e       	add	r10, r22
    7b64:	4a e0       	ldi	r20, 0x0A	; 10
    7b66:	50 e0       	ldi	r21, 0x00	; 0
    7b68:	ce 01       	movw	r24, r28
    7b6a:	0e 94 d9 8a 	call	0x115b2	; 0x115b2 <_ZN5Print5printEhi>
    7b6e:	60 e2       	ldi	r22, 0x20	; 32
    7b70:	ce 01       	movw	r24, r28
    7b72:	0e 94 ed 89 	call	0x113da	; 0x113da <_ZN5Print5printEc>
    7b76:	e1 e9       	ldi	r30, 0x91	; 145
    7b78:	f9 e0       	ldi	r31, 0x09	; 9
    7b7a:	64 91       	lpm	r22, Z
    7b7c:	66 23       	and	r22, r22
    7b7e:	81 f0       	breq	.+32     	; 0x7ba0 <_Z21publishMotorFaultCodei+0x2a8>
    7b80:	6f 01       	movw	r12, r30
    7b82:	e8 81       	ld	r30, Y
    7b84:	f9 81       	ldd	r31, Y+1	; 0x01
    7b86:	01 90       	ld	r0, Z+
    7b88:	f0 81       	ld	r31, Z
    7b8a:	e0 2d       	mov	r30, r0
    7b8c:	80 2f       	mov	r24, r16
    7b8e:	91 2f       	mov	r25, r17
    7b90:	19 95       	eicall
    7b92:	ff ef       	ldi	r31, 0xFF	; 255
    7b94:	cf 1a       	sub	r12, r31
    7b96:	df 0a       	sbc	r13, r31
    7b98:	f6 01       	movw	r30, r12
    7b9a:	64 91       	lpm	r22, Z
    7b9c:	61 11       	cpse	r22, r1
    7b9e:	f1 cf       	rjmp	.-30     	; 0x7b82 <_Z21publishMotorFaultCodei+0x28a>
    7ba0:	ce 01       	movw	r24, r28
    7ba2:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    7ba6:	6a 2d       	mov	r22, r10
    7ba8:	79 c0       	rjmp	.+242    	; 0x7c9c <_Z21publishMotorFaultCodei+0x3a4>
    7baa:	aa 24       	eor	r10, r10
    7bac:	a3 94       	inc	r10
    7bae:	a6 0e       	add	r10, r22
    7bb0:	4a e0       	ldi	r20, 0x0A	; 10
    7bb2:	50 e0       	ldi	r21, 0x00	; 0
    7bb4:	ce 01       	movw	r24, r28
    7bb6:	0e 94 d9 8a 	call	0x115b2	; 0x115b2 <_ZN5Print5printEhi>
    7bba:	60 e2       	ldi	r22, 0x20	; 32
    7bbc:	ce 01       	movw	r24, r28
    7bbe:	0e 94 ed 89 	call	0x113da	; 0x113da <_ZN5Print5printEc>
    7bc2:	f2 01       	movw	r30, r4
    7bc4:	64 91       	lpm	r22, Z
    7bc6:	66 23       	and	r22, r22
    7bc8:	a9 f0       	breq	.+42     	; 0x7bf4 <_Z21publishMotorFaultCodei+0x2fc>
    7bca:	0f 2e       	mov	r0, r31
    7bcc:	fa e7       	ldi	r31, 0x7A	; 122
    7bce:	cf 2e       	mov	r12, r31
    7bd0:	f9 e0       	ldi	r31, 0x09	; 9
    7bd2:	df 2e       	mov	r13, r31
    7bd4:	f0 2d       	mov	r31, r0
    7bd6:	e8 81       	ld	r30, Y
    7bd8:	f9 81       	ldd	r31, Y+1	; 0x01
    7bda:	01 90       	ld	r0, Z+
    7bdc:	f0 81       	ld	r31, Z
    7bde:	e0 2d       	mov	r30, r0
    7be0:	80 2f       	mov	r24, r16
    7be2:	91 2f       	mov	r25, r17
    7be4:	19 95       	eicall
    7be6:	ff ef       	ldi	r31, 0xFF	; 255
    7be8:	cf 1a       	sub	r12, r31
    7bea:	df 0a       	sbc	r13, r31
    7bec:	f6 01       	movw	r30, r12
    7bee:	64 91       	lpm	r22, Z
    7bf0:	61 11       	cpse	r22, r1
    7bf2:	f1 cf       	rjmp	.-30     	; 0x7bd6 <_Z21publishMotorFaultCodei+0x2de>
    7bf4:	ce 01       	movw	r24, r28
    7bf6:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    7bfa:	6a 2d       	mov	r22, r10
    7bfc:	4f c0       	rjmp	.+158    	; 0x7c9c <_Z21publishMotorFaultCodei+0x3a4>
    7bfe:	aa 24       	eor	r10, r10
    7c00:	a3 94       	inc	r10
    7c02:	a6 0e       	add	r10, r22
    7c04:	4a e0       	ldi	r20, 0x0A	; 10
    7c06:	50 e0       	ldi	r21, 0x00	; 0
    7c08:	ce 01       	movw	r24, r28
    7c0a:	0e 94 d9 8a 	call	0x115b2	; 0x115b2 <_ZN5Print5printEhi>
    7c0e:	60 e2       	ldi	r22, 0x20	; 32
    7c10:	ce 01       	movw	r24, r28
    7c12:	0e 94 ed 89 	call	0x113da	; 0x113da <_ZN5Print5printEc>
    7c16:	f1 01       	movw	r30, r2
    7c18:	64 91       	lpm	r22, Z
    7c1a:	66 23       	and	r22, r22
    7c1c:	a9 f0       	breq	.+42     	; 0x7c48 <_Z21publishMotorFaultCodei+0x350>
    7c1e:	0f 2e       	mov	r0, r31
    7c20:	fb e6       	ldi	r31, 0x6B	; 107
    7c22:	cf 2e       	mov	r12, r31
    7c24:	f9 e0       	ldi	r31, 0x09	; 9
    7c26:	df 2e       	mov	r13, r31
    7c28:	f0 2d       	mov	r31, r0
    7c2a:	e8 81       	ld	r30, Y
    7c2c:	f9 81       	ldd	r31, Y+1	; 0x01
    7c2e:	01 90       	ld	r0, Z+
    7c30:	f0 81       	ld	r31, Z
    7c32:	e0 2d       	mov	r30, r0
    7c34:	80 2f       	mov	r24, r16
    7c36:	91 2f       	mov	r25, r17
    7c38:	19 95       	eicall
    7c3a:	ff ef       	ldi	r31, 0xFF	; 255
    7c3c:	cf 1a       	sub	r12, r31
    7c3e:	df 0a       	sbc	r13, r31
    7c40:	f6 01       	movw	r30, r12
    7c42:	64 91       	lpm	r22, Z
    7c44:	61 11       	cpse	r22, r1
    7c46:	f1 cf       	rjmp	.-30     	; 0x7c2a <_Z21publishMotorFaultCodei+0x332>
    7c48:	ce 01       	movw	r24, r28
    7c4a:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    7c4e:	6a 2d       	mov	r22, r10
    7c50:	25 c0       	rjmp	.+74     	; 0x7c9c <_Z21publishMotorFaultCodei+0x3a4>
    7c52:	aa 24       	eor	r10, r10
    7c54:	a3 94       	inc	r10
    7c56:	a6 0e       	add	r10, r22
    7c58:	4a e0       	ldi	r20, 0x0A	; 10
    7c5a:	50 e0       	ldi	r21, 0x00	; 0
    7c5c:	ce 01       	movw	r24, r28
    7c5e:	0e 94 d9 8a 	call	0x115b2	; 0x115b2 <_ZN5Print5printEhi>
    7c62:	60 e2       	ldi	r22, 0x20	; 32
    7c64:	ce 01       	movw	r24, r28
    7c66:	0e 94 ed 89 	call	0x113da	; 0x113da <_ZN5Print5printEc>
    7c6a:	ef e4       	ldi	r30, 0x4F	; 79
    7c6c:	f9 e0       	ldi	r31, 0x09	; 9
    7c6e:	64 91       	lpm	r22, Z
    7c70:	66 23       	and	r22, r22
    7c72:	81 f0       	breq	.+32     	; 0x7c94 <_Z21publishMotorFaultCodei+0x39c>
    7c74:	6f 01       	movw	r12, r30
    7c76:	e8 81       	ld	r30, Y
    7c78:	f9 81       	ldd	r31, Y+1	; 0x01
    7c7a:	01 90       	ld	r0, Z+
    7c7c:	f0 81       	ld	r31, Z
    7c7e:	e0 2d       	mov	r30, r0
    7c80:	80 2f       	mov	r24, r16
    7c82:	91 2f       	mov	r25, r17
    7c84:	19 95       	eicall
    7c86:	ff ef       	ldi	r31, 0xFF	; 255
    7c88:	cf 1a       	sub	r12, r31
    7c8a:	df 0a       	sbc	r13, r31
    7c8c:	f6 01       	movw	r30, r12
    7c8e:	64 91       	lpm	r22, Z
    7c90:	61 11       	cpse	r22, r1
    7c92:	f1 cf       	rjmp	.-30     	; 0x7c76 <_Z21publishMotorFaultCodei+0x37e>
    7c94:	ce 01       	movw	r24, r28
    7c96:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    7c9a:	6a 2d       	mov	r22, r10
    7c9c:	ff ef       	ldi	r31, 0xFF	; 255
    7c9e:	ef 1a       	sub	r14, r31
    7ca0:	ff 0a       	sbc	r15, r31
    7ca2:	88 e0       	ldi	r24, 0x08	; 8
    7ca4:	e8 16       	cp	r14, r24
    7ca6:	f1 04       	cpc	r15, r1
    7ca8:	09 f0       	breq	.+2      	; 0x7cac <_Z21publishMotorFaultCodei+0x3b4>
    7caa:	98 ce       	rjmp	.-720    	; 0x79dc <_Z21publishMotorFaultCodei+0xe4>
    7cac:	ed e4       	ldi	r30, 0x4D	; 77
    7cae:	f9 e0       	ldi	r31, 0x09	; 9
    7cb0:	64 91       	lpm	r22, Z
    7cb2:	66 23       	and	r22, r22
    7cb4:	81 f0       	breq	.+32     	; 0x7cd6 <_Z21publishMotorFaultCodei+0x3de>
    7cb6:	ef 01       	movw	r28, r30
    7cb8:	08 e0       	ldi	r16, 0x08	; 8
    7cba:	1a e0       	ldi	r17, 0x0A	; 10
    7cbc:	d8 01       	movw	r26, r16
    7cbe:	ed 91       	ld	r30, X+
    7cc0:	fc 91       	ld	r31, X
    7cc2:	01 90       	ld	r0, Z+
    7cc4:	f0 81       	ld	r31, Z
    7cc6:	e0 2d       	mov	r30, r0
    7cc8:	c8 01       	movw	r24, r16
    7cca:	19 95       	eicall
    7ccc:	21 96       	adiw	r28, 0x01	; 1
    7cce:	fe 01       	movw	r30, r28
    7cd0:	64 91       	lpm	r22, Z
    7cd2:	61 11       	cpse	r22, r1
    7cd4:	f3 cf       	rjmp	.-26     	; 0x7cbc <_Z21publishMotorFaultCodei+0x3c4>
    7cd6:	e2 e4       	ldi	r30, 0x42	; 66
    7cd8:	f9 e0       	ldi	r31, 0x09	; 9
    7cda:	64 91       	lpm	r22, Z
    7cdc:	66 23       	and	r22, r22
    7cde:	81 f0       	breq	.+32     	; 0x7d00 <_Z21publishMotorFaultCodei+0x408>
    7ce0:	ef 01       	movw	r28, r30
    7ce2:	08 e0       	ldi	r16, 0x08	; 8
    7ce4:	1a e0       	ldi	r17, 0x0A	; 10
    7ce6:	d8 01       	movw	r26, r16
    7ce8:	ed 91       	ld	r30, X+
    7cea:	fc 91       	ld	r31, X
    7cec:	01 90       	ld	r0, Z+
    7cee:	f0 81       	ld	r31, Z
    7cf0:	e0 2d       	mov	r30, r0
    7cf2:	c8 01       	movw	r24, r16
    7cf4:	19 95       	eicall
    7cf6:	21 96       	adiw	r28, 0x01	; 1
    7cf8:	fe 01       	movw	r30, r28
    7cfa:	64 91       	lpm	r22, Z
    7cfc:	61 11       	cpse	r22, r1
    7cfe:	f3 cf       	rjmp	.-26     	; 0x7ce6 <_Z21publishMotorFaultCodei+0x3ee>
    7d00:	ef e3       	ldi	r30, 0x3F	; 63
    7d02:	f9 e0       	ldi	r31, 0x09	; 9
    7d04:	64 91       	lpm	r22, Z
    7d06:	66 23       	and	r22, r22
    7d08:	81 f0       	breq	.+32     	; 0x7d2a <_Z21publishMotorFaultCodei+0x432>
    7d0a:	ef 01       	movw	r28, r30
    7d0c:	08 e0       	ldi	r16, 0x08	; 8
    7d0e:	1a e0       	ldi	r17, 0x0A	; 10
    7d10:	d8 01       	movw	r26, r16
    7d12:	ed 91       	ld	r30, X+
    7d14:	fc 91       	ld	r31, X
    7d16:	01 90       	ld	r0, Z+
    7d18:	f0 81       	ld	r31, Z
    7d1a:	e0 2d       	mov	r30, r0
    7d1c:	c8 01       	movw	r24, r16
    7d1e:	19 95       	eicall
    7d20:	21 96       	adiw	r28, 0x01	; 1
    7d22:	fe 01       	movw	r30, r28
    7d24:	64 91       	lpm	r22, Z
    7d26:	61 11       	cpse	r22, r1
    7d28:	f3 cf       	rjmp	.-26     	; 0x7d10 <_Z21publishMotorFaultCodei+0x418>
    7d2a:	88 e0       	ldi	r24, 0x08	; 8
    7d2c:	9a e0       	ldi	r25, 0x0A	; 10
    7d2e:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    7d32:	df 91       	pop	r29
    7d34:	cf 91       	pop	r28
    7d36:	1f 91       	pop	r17
    7d38:	0f 91       	pop	r16
    7d3a:	ff 90       	pop	r15
    7d3c:	ef 90       	pop	r14
    7d3e:	df 90       	pop	r13
    7d40:	cf 90       	pop	r12
    7d42:	bf 90       	pop	r11
    7d44:	af 90       	pop	r10
    7d46:	9f 90       	pop	r9
    7d48:	8f 90       	pop	r8
    7d4a:	7f 90       	pop	r7
    7d4c:	6f 90       	pop	r6
    7d4e:	5f 90       	pop	r5
    7d50:	4f 90       	pop	r4
    7d52:	3f 90       	pop	r3
    7d54:	2f 90       	pop	r2
    7d56:	08 95       	ret

00007d58 <_Z19publishBatteryVoltsi>:
    7d58:	ef 92       	push	r14
    7d5a:	ff 92       	push	r15
    7d5c:	0f 93       	push	r16
    7d5e:	1f 93       	push	r17
    7d60:	cf 93       	push	r28
    7d62:	df 93       	push	r29
    7d64:	7c 01       	movw	r14, r24
    7d66:	ed e3       	ldi	r30, 0x3D	; 61
    7d68:	f9 e0       	ldi	r31, 0x09	; 9
    7d6a:	64 91       	lpm	r22, Z
    7d6c:	66 23       	and	r22, r22
    7d6e:	81 f0       	breq	.+32     	; 0x7d90 <_Z19publishBatteryVoltsi+0x38>
    7d70:	8f 01       	movw	r16, r30
    7d72:	c8 e0       	ldi	r28, 0x08	; 8
    7d74:	da e0       	ldi	r29, 0x0A	; 10
    7d76:	e8 81       	ld	r30, Y
    7d78:	f9 81       	ldd	r31, Y+1	; 0x01
    7d7a:	01 90       	ld	r0, Z+
    7d7c:	f0 81       	ld	r31, Z
    7d7e:	e0 2d       	mov	r30, r0
    7d80:	ce 01       	movw	r24, r28
    7d82:	19 95       	eicall
    7d84:	0f 5f       	subi	r16, 0xFF	; 255
    7d86:	1f 4f       	sbci	r17, 0xFF	; 255
    7d88:	f8 01       	movw	r30, r16
    7d8a:	64 91       	lpm	r22, Z
    7d8c:	61 11       	cpse	r22, r1
    7d8e:	f3 cf       	rjmp	.-26     	; 0x7d76 <_Z19publishBatteryVoltsi+0x1e>
    7d90:	e5 e3       	ldi	r30, 0x35	; 53
    7d92:	f9 e0       	ldi	r31, 0x09	; 9
    7d94:	64 91       	lpm	r22, Z
    7d96:	66 23       	and	r22, r22
    7d98:	81 f0       	breq	.+32     	; 0x7dba <_Z19publishBatteryVoltsi+0x62>
    7d9a:	8f 01       	movw	r16, r30
    7d9c:	c8 e0       	ldi	r28, 0x08	; 8
    7d9e:	da e0       	ldi	r29, 0x0A	; 10
    7da0:	e8 81       	ld	r30, Y
    7da2:	f9 81       	ldd	r31, Y+1	; 0x01
    7da4:	01 90       	ld	r0, Z+
    7da6:	f0 81       	ld	r31, Z
    7da8:	e0 2d       	mov	r30, r0
    7daa:	ce 01       	movw	r24, r28
    7dac:	19 95       	eicall
    7dae:	0f 5f       	subi	r16, 0xFF	; 255
    7db0:	1f 4f       	sbci	r17, 0xFF	; 255
    7db2:	f8 01       	movw	r30, r16
    7db4:	64 91       	lpm	r22, Z
    7db6:	61 11       	cpse	r22, r1
    7db8:	f3 cf       	rjmp	.-26     	; 0x7da0 <_Z19publishBatteryVoltsi+0x48>
    7dba:	e3 e3       	ldi	r30, 0x33	; 51
    7dbc:	f9 e0       	ldi	r31, 0x09	; 9
    7dbe:	64 91       	lpm	r22, Z
    7dc0:	66 23       	and	r22, r22
    7dc2:	81 f0       	breq	.+32     	; 0x7de4 <_Z19publishBatteryVoltsi+0x8c>
    7dc4:	8f 01       	movw	r16, r30
    7dc6:	c8 e0       	ldi	r28, 0x08	; 8
    7dc8:	da e0       	ldi	r29, 0x0A	; 10
    7dca:	e8 81       	ld	r30, Y
    7dcc:	f9 81       	ldd	r31, Y+1	; 0x01
    7dce:	01 90       	ld	r0, Z+
    7dd0:	f0 81       	ld	r31, Z
    7dd2:	e0 2d       	mov	r30, r0
    7dd4:	ce 01       	movw	r24, r28
    7dd6:	19 95       	eicall
    7dd8:	0f 5f       	subi	r16, 0xFF	; 255
    7dda:	1f 4f       	sbci	r17, 0xFF	; 255
    7ddc:	f8 01       	movw	r30, r16
    7dde:	64 91       	lpm	r22, Z
    7de0:	61 11       	cpse	r22, r1
    7de2:	f3 cf       	rjmp	.-26     	; 0x7dca <_Z19publishBatteryVoltsi+0x72>
    7de4:	88 e0       	ldi	r24, 0x08	; 8
    7de6:	9a e0       	ldi	r25, 0x0A	; 10
    7de8:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    7dec:	e0 e3       	ldi	r30, 0x30	; 48
    7dee:	f9 e0       	ldi	r31, 0x09	; 9
    7df0:	64 91       	lpm	r22, Z
    7df2:	66 23       	and	r22, r22
    7df4:	81 f0       	breq	.+32     	; 0x7e16 <_Z19publishBatteryVoltsi+0xbe>
    7df6:	8f 01       	movw	r16, r30
    7df8:	c8 e0       	ldi	r28, 0x08	; 8
    7dfa:	da e0       	ldi	r29, 0x0A	; 10
    7dfc:	e8 81       	ld	r30, Y
    7dfe:	f9 81       	ldd	r31, Y+1	; 0x01
    7e00:	01 90       	ld	r0, Z+
    7e02:	f0 81       	ld	r31, Z
    7e04:	e0 2d       	mov	r30, r0
    7e06:	ce 01       	movw	r24, r28
    7e08:	19 95       	eicall
    7e0a:	0f 5f       	subi	r16, 0xFF	; 255
    7e0c:	1f 4f       	sbci	r17, 0xFF	; 255
    7e0e:	f8 01       	movw	r30, r16
    7e10:	64 91       	lpm	r22, Z
    7e12:	61 11       	cpse	r22, r1
    7e14:	f3 cf       	rjmp	.-26     	; 0x7dfc <_Z19publishBatteryVoltsi+0xa4>
    7e16:	4a e0       	ldi	r20, 0x0A	; 10
    7e18:	50 e0       	ldi	r21, 0x00	; 0
    7e1a:	b7 01       	movw	r22, r14
    7e1c:	88 e0       	ldi	r24, 0x08	; 8
    7e1e:	9a e0       	ldi	r25, 0x0A	; 10
    7e20:	0e 94 ab 8a 	call	0x11556	; 0x11556 <_ZN5Print7printlnEii>
    7e24:	ee e2       	ldi	r30, 0x2E	; 46
    7e26:	f9 e0       	ldi	r31, 0x09	; 9
    7e28:	64 91       	lpm	r22, Z
    7e2a:	66 23       	and	r22, r22
    7e2c:	81 f0       	breq	.+32     	; 0x7e4e <_Z19publishBatteryVoltsi+0xf6>
    7e2e:	ef 01       	movw	r28, r30
    7e30:	08 e0       	ldi	r16, 0x08	; 8
    7e32:	1a e0       	ldi	r17, 0x0A	; 10
    7e34:	d8 01       	movw	r26, r16
    7e36:	ed 91       	ld	r30, X+
    7e38:	fc 91       	ld	r31, X
    7e3a:	01 90       	ld	r0, Z+
    7e3c:	f0 81       	ld	r31, Z
    7e3e:	e0 2d       	mov	r30, r0
    7e40:	c8 01       	movw	r24, r16
    7e42:	19 95       	eicall
    7e44:	21 96       	adiw	r28, 0x01	; 1
    7e46:	fe 01       	movw	r30, r28
    7e48:	64 91       	lpm	r22, Z
    7e4a:	61 11       	cpse	r22, r1
    7e4c:	f3 cf       	rjmp	.-26     	; 0x7e34 <_Z19publishBatteryVoltsi+0xdc>
    7e4e:	e6 e2       	ldi	r30, 0x26	; 38
    7e50:	f9 e0       	ldi	r31, 0x09	; 9
    7e52:	64 91       	lpm	r22, Z
    7e54:	66 23       	and	r22, r22
    7e56:	81 f0       	breq	.+32     	; 0x7e78 <_Z19publishBatteryVoltsi+0x120>
    7e58:	ef 01       	movw	r28, r30
    7e5a:	08 e0       	ldi	r16, 0x08	; 8
    7e5c:	1a e0       	ldi	r17, 0x0A	; 10
    7e5e:	d8 01       	movw	r26, r16
    7e60:	ed 91       	ld	r30, X+
    7e62:	fc 91       	ld	r31, X
    7e64:	01 90       	ld	r0, Z+
    7e66:	f0 81       	ld	r31, Z
    7e68:	e0 2d       	mov	r30, r0
    7e6a:	c8 01       	movw	r24, r16
    7e6c:	19 95       	eicall
    7e6e:	21 96       	adiw	r28, 0x01	; 1
    7e70:	fe 01       	movw	r30, r28
    7e72:	64 91       	lpm	r22, Z
    7e74:	61 11       	cpse	r22, r1
    7e76:	f3 cf       	rjmp	.-26     	; 0x7e5e <_Z19publishBatteryVoltsi+0x106>
    7e78:	e3 e2       	ldi	r30, 0x23	; 35
    7e7a:	f9 e0       	ldi	r31, 0x09	; 9
    7e7c:	64 91       	lpm	r22, Z
    7e7e:	66 23       	and	r22, r22
    7e80:	81 f0       	breq	.+32     	; 0x7ea2 <_Z19publishBatteryVoltsi+0x14a>
    7e82:	ef 01       	movw	r28, r30
    7e84:	08 e0       	ldi	r16, 0x08	; 8
    7e86:	1a e0       	ldi	r17, 0x0A	; 10
    7e88:	d8 01       	movw	r26, r16
    7e8a:	ed 91       	ld	r30, X+
    7e8c:	fc 91       	ld	r31, X
    7e8e:	01 90       	ld	r0, Z+
    7e90:	f0 81       	ld	r31, Z
    7e92:	e0 2d       	mov	r30, r0
    7e94:	c8 01       	movw	r24, r16
    7e96:	19 95       	eicall
    7e98:	21 96       	adiw	r28, 0x01	; 1
    7e9a:	fe 01       	movw	r30, r28
    7e9c:	64 91       	lpm	r22, Z
    7e9e:	61 11       	cpse	r22, r1
    7ea0:	f3 cf       	rjmp	.-26     	; 0x7e88 <_Z19publishBatteryVoltsi+0x130>
    7ea2:	88 e0       	ldi	r24, 0x08	; 8
    7ea4:	9a e0       	ldi	r25, 0x0A	; 10
    7ea6:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    7eaa:	df 91       	pop	r29
    7eac:	cf 91       	pop	r28
    7eae:	1f 91       	pop	r17
    7eb0:	0f 91       	pop	r16
    7eb2:	ff 90       	pop	r15
    7eb4:	ef 90       	pop	r14
    7eb6:	08 95       	ret

00007eb8 <_Z15printUltrasonicP10Ultrasonici>:

/*
* Print the ultrasonic range
*/
void printUltrasonic(Ultrasonic* us, int index) {
    7eb8:	bf 92       	push	r11
    7eba:	cf 92       	push	r12
    7ebc:	df 92       	push	r13
    7ebe:	ef 92       	push	r14
    7ec0:	ff 92       	push	r15
    7ec2:	0f 93       	push	r16
    7ec4:	1f 93       	push	r17
    7ec6:	cf 93       	push	r28
    7ec8:	df 93       	push	r29
    7eca:	ec 01       	movw	r28, r24
    7ecc:	8b 01       	movw	r16, r22
		float range = us->getRange();
    7ece:	0e 94 15 8c 	call	0x1182a	; 0x1182a <_ZN10Ultrasonic8getRangeEv>
    7ed2:	6b 01       	movw	r12, r22
    7ed4:	7c 01       	movw	r14, r24
		uint8_t ultpin = us->getPin();
		if( range != sonicDist[index] ) {
    7ed6:	f8 01       	movw	r30, r16
    7ed8:	ee 0f       	add	r30, r30
    7eda:	ff 1f       	adc	r31, r31
    7edc:	ee 0f       	add	r30, r30
    7ede:	ff 1f       	adc	r31, r31
    7ee0:	e5 5e       	subi	r30, 0xE5	; 229
    7ee2:	fb 4e       	sbci	r31, 0xEB	; 235
    7ee4:	20 81       	ld	r18, Z
    7ee6:	31 81       	ldd	r19, Z+1	; 0x01
    7ee8:	42 81       	ldd	r20, Z+2	; 0x02
    7eea:	53 81       	ldd	r21, Z+3	; 0x03
    7eec:	0e 94 d2 a4 	call	0x149a4	; 0x149a4 <__cmpsf2>
    7ef0:	88 23       	and	r24, r24
    7ef2:	09 f4       	brne	.+2      	; 0x7ef6 <_Z15printUltrasonicP10Ultrasonici+0x3e>
    7ef4:	cd c0       	rjmp	.+410    	; 0x8090 <_Z15printUltrasonicP10Ultrasonici+0x1d8>
		Digital* pin;
		float getRange();
		Ultrasonic(int ipin) {
			pin = new Digital(ipin);
		}
		uint8_t getPin(void) { return pin->pin; }
    7ef6:	ec 81       	ldd	r30, Y+4	; 0x04
    7ef8:	fd 81       	ldd	r31, Y+5	; 0x05
    7efa:	b0 80       	ld	r11, Z
			sonicDist[index] = range;
    7efc:	00 0f       	add	r16, r16
    7efe:	11 1f       	adc	r17, r17
    7f00:	00 0f       	add	r16, r16
    7f02:	11 1f       	adc	r17, r17
    7f04:	f8 01       	movw	r30, r16
    7f06:	e5 5e       	subi	r30, 0xE5	; 229
    7f08:	fb 4e       	sbci	r31, 0xEB	; 235
    7f0a:	c0 82       	st	Z, r12
    7f0c:	d1 82       	std	Z+1, r13	; 0x01
    7f0e:	e2 82       	std	Z+2, r14	; 0x02
    7f10:	f3 82       	std	Z+3, r15	; 0x03
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    7f12:	e1 e2       	ldi	r30, 0x21	; 33
    7f14:	f9 e0       	ldi	r31, 0x09	; 9
    7f16:	64 91       	lpm	r22, Z
	while(ch)
    7f18:	66 23       	and	r22, r22
    7f1a:	81 f0       	breq	.+32     	; 0x7f3c <_Z15printUltrasonicP10Ultrasonici+0x84>
    7f1c:	8f 01       	movw	r16, r30
    7f1e:	c8 e0       	ldi	r28, 0x08	; 8
    7f20:	da e0       	ldi	r29, 0x0A	; 10
    7f22:	e8 81       	ld	r30, Y
    7f24:	f9 81       	ldd	r31, Y+1	; 0x01
    7f26:	01 90       	ld	r0, Z+
    7f28:	f0 81       	ld	r31, Z
    7f2a:	e0 2d       	mov	r30, r0
    7f2c:	ce 01       	movw	r24, r28
    7f2e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    7f30:	0f 5f       	subi	r16, 0xFF	; 255
    7f32:	1f 4f       	sbci	r17, 0xFF	; 255
    7f34:	f8 01       	movw	r30, r16
    7f36:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    7f38:	61 11       	cpse	r22, r1
    7f3a:	f3 cf       	rjmp	.-26     	; 0x7f22 <_Z15printUltrasonicP10Ultrasonici+0x6a>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    7f3c:	e6 e1       	ldi	r30, 0x16	; 22
    7f3e:	f9 e0       	ldi	r31, 0x09	; 9
    7f40:	64 91       	lpm	r22, Z
	while(ch)
    7f42:	66 23       	and	r22, r22
    7f44:	81 f0       	breq	.+32     	; 0x7f66 <_Z15printUltrasonicP10Ultrasonici+0xae>
    7f46:	8f 01       	movw	r16, r30
    7f48:	c8 e0       	ldi	r28, 0x08	; 8
    7f4a:	da e0       	ldi	r29, 0x0A	; 10
    7f4c:	e8 81       	ld	r30, Y
    7f4e:	f9 81       	ldd	r31, Y+1	; 0x01
    7f50:	01 90       	ld	r0, Z+
    7f52:	f0 81       	ld	r31, Z
    7f54:	e0 2d       	mov	r30, r0
    7f56:	ce 01       	movw	r24, r28
    7f58:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    7f5a:	0f 5f       	subi	r16, 0xFF	; 255
    7f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    7f5e:	f8 01       	movw	r30, r16
    7f60:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    7f62:	61 11       	cpse	r22, r1
    7f64:	f3 cf       	rjmp	.-26     	; 0x7f4c <_Z15printUltrasonicP10Ultrasonici+0x94>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    7f66:	e4 e1       	ldi	r30, 0x14	; 20
    7f68:	f9 e0       	ldi	r31, 0x09	; 9
    7f6a:	64 91       	lpm	r22, Z
	while(ch)
    7f6c:	66 23       	and	r22, r22
    7f6e:	81 f0       	breq	.+32     	; 0x7f90 <_Z15printUltrasonicP10Ultrasonici+0xd8>
    7f70:	8f 01       	movw	r16, r30
    7f72:	c8 e0       	ldi	r28, 0x08	; 8
    7f74:	da e0       	ldi	r29, 0x0A	; 10
    7f76:	e8 81       	ld	r30, Y
    7f78:	f9 81       	ldd	r31, Y+1	; 0x01
    7f7a:	01 90       	ld	r0, Z+
    7f7c:	f0 81       	ld	r31, Z
    7f7e:	e0 2d       	mov	r30, r0
    7f80:	ce 01       	movw	r24, r28
    7f82:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    7f84:	0f 5f       	subi	r16, 0xFF	; 255
    7f86:	1f 4f       	sbci	r17, 0xFF	; 255
    7f88:	f8 01       	movw	r30, r16
    7f8a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    7f8c:	61 11       	cpse	r22, r1
    7f8e:	f3 cf       	rjmp	.-26     	; 0x7f76 <_Z15printUltrasonicP10Ultrasonici+0xbe>
			SERIAL_PGM(MSG_BEGIN);
			SERIAL_PGM(sonicCntrlHdr);
			SERIAL_PGMLN(MSG_DELIMIT);
    7f90:	88 e0       	ldi	r24, 0x08	; 8
    7f92:	9a e0       	ldi	r25, 0x0A	; 10
    7f94:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    7f98:	e1 e1       	ldi	r30, 0x11	; 17
    7f9a:	f9 e0       	ldi	r31, 0x09	; 9
    7f9c:	64 91       	lpm	r22, Z
	while(ch)
    7f9e:	66 23       	and	r22, r22
    7fa0:	81 f0       	breq	.+32     	; 0x7fc2 <_Z15printUltrasonicP10Ultrasonici+0x10a>
    7fa2:	8f 01       	movw	r16, r30
    7fa4:	c8 e0       	ldi	r28, 0x08	; 8
    7fa6:	da e0       	ldi	r29, 0x0A	; 10
    7fa8:	e8 81       	ld	r30, Y
    7faa:	f9 81       	ldd	r31, Y+1	; 0x01
    7fac:	01 90       	ld	r0, Z+
    7fae:	f0 81       	ld	r31, Z
    7fb0:	e0 2d       	mov	r30, r0
    7fb2:	ce 01       	movw	r24, r28
    7fb4:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    7fb6:	0f 5f       	subi	r16, 0xFF	; 255
    7fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    7fba:	f8 01       	movw	r30, r16
    7fbc:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    7fbe:	61 11       	cpse	r22, r1
    7fc0:	f3 cf       	rjmp	.-26     	; 0x7fa8 <_Z15printUltrasonicP10Ultrasonici+0xf0>
			SERIAL_PGM("1 "); // pin
			SERIAL_PORT.println(ultpin);
    7fc2:	4a e0       	ldi	r20, 0x0A	; 10
    7fc4:	50 e0       	ldi	r21, 0x00	; 0
    7fc6:	6b 2d       	mov	r22, r11
    7fc8:	88 e0       	ldi	r24, 0x08	; 8
    7fca:	9a e0       	ldi	r25, 0x0A	; 10
    7fcc:	0e 94 e0 8a 	call	0x115c0	; 0x115c0 <_ZN5Print7printlnEhi>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    7fd0:	ee e0       	ldi	r30, 0x0E	; 14
    7fd2:	f9 e0       	ldi	r31, 0x09	; 9
    7fd4:	64 91       	lpm	r22, Z
	while(ch)
    7fd6:	66 23       	and	r22, r22
    7fd8:	81 f0       	breq	.+32     	; 0x7ffa <_Z15printUltrasonicP10Ultrasonici+0x142>
    7fda:	ef 01       	movw	r28, r30
    7fdc:	08 e0       	ldi	r16, 0x08	; 8
    7fde:	1a e0       	ldi	r17, 0x0A	; 10
    7fe0:	d8 01       	movw	r26, r16
    7fe2:	ed 91       	ld	r30, X+
    7fe4:	fc 91       	ld	r31, X
    7fe6:	01 90       	ld	r0, Z+
    7fe8:	f0 81       	ld	r31, Z
    7fea:	e0 2d       	mov	r30, r0
    7fec:	c8 01       	movw	r24, r16
    7fee:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    7ff0:	21 96       	adiw	r28, 0x01	; 1
    7ff2:	fe 01       	movw	r30, r28
    7ff4:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    7ff6:	61 11       	cpse	r22, r1
    7ff8:	f3 cf       	rjmp	.-26     	; 0x7fe0 <_Z15printUltrasonicP10Ultrasonici+0x128>
			SERIAL_PGM("2 "); // sequence
			SERIAL_PORT.println(range); // range
    7ffa:	22 e0       	ldi	r18, 0x02	; 2
    7ffc:	30 e0       	ldi	r19, 0x00	; 0
    7ffe:	b7 01       	movw	r22, r14
    8000:	a6 01       	movw	r20, r12
    8002:	88 e0       	ldi	r24, 0x08	; 8
    8004:	9a e0       	ldi	r25, 0x0A	; 10
    8006:	0e 94 05 8c 	call	0x1180a	; 0x1180a <_ZN5Print7printlnEdi>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    800a:	ec e0       	ldi	r30, 0x0C	; 12
    800c:	f9 e0       	ldi	r31, 0x09	; 9
    800e:	64 91       	lpm	r22, Z
	while(ch)
    8010:	66 23       	and	r22, r22
    8012:	81 f0       	breq	.+32     	; 0x8034 <_Z15printUltrasonicP10Ultrasonici+0x17c>
    8014:	ef 01       	movw	r28, r30
    8016:	08 e0       	ldi	r16, 0x08	; 8
    8018:	1a e0       	ldi	r17, 0x0A	; 10
    801a:	d8 01       	movw	r26, r16
    801c:	ed 91       	ld	r30, X+
    801e:	fc 91       	ld	r31, X
    8020:	01 90       	ld	r0, Z+
    8022:	f0 81       	ld	r31, Z
    8024:	e0 2d       	mov	r30, r0
    8026:	c8 01       	movw	r24, r16
    8028:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    802a:	21 96       	adiw	r28, 0x01	; 1
    802c:	fe 01       	movw	r30, r28
    802e:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    8030:	61 11       	cpse	r22, r1
    8032:	f3 cf       	rjmp	.-26     	; 0x801a <_Z15printUltrasonicP10Ultrasonici+0x162>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    8034:	e1 e0       	ldi	r30, 0x01	; 1
    8036:	f9 e0       	ldi	r31, 0x09	; 9
    8038:	64 91       	lpm	r22, Z
	while(ch)
    803a:	66 23       	and	r22, r22
    803c:	81 f0       	breq	.+32     	; 0x805e <_Z15printUltrasonicP10Ultrasonici+0x1a6>
    803e:	ef 01       	movw	r28, r30
    8040:	08 e0       	ldi	r16, 0x08	; 8
    8042:	1a e0       	ldi	r17, 0x0A	; 10
    8044:	d8 01       	movw	r26, r16
    8046:	ed 91       	ld	r30, X+
    8048:	fc 91       	ld	r31, X
    804a:	01 90       	ld	r0, Z+
    804c:	f0 81       	ld	r31, Z
    804e:	e0 2d       	mov	r30, r0
    8050:	c8 01       	movw	r24, r16
    8052:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    8054:	21 96       	adiw	r28, 0x01	; 1
    8056:	fe 01       	movw	r30, r28
    8058:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    805a:	61 11       	cpse	r22, r1
    805c:	f3 cf       	rjmp	.-26     	; 0x8044 <_Z15printUltrasonicP10Ultrasonici+0x18c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    805e:	ee ef       	ldi	r30, 0xFE	; 254
    8060:	f8 e0       	ldi	r31, 0x08	; 8
    8062:	64 91       	lpm	r22, Z
	while(ch)
    8064:	66 23       	and	r22, r22
    8066:	81 f0       	breq	.+32     	; 0x8088 <_Z15printUltrasonicP10Ultrasonici+0x1d0>
    8068:	ef 01       	movw	r28, r30
    806a:	08 e0       	ldi	r16, 0x08	; 8
    806c:	1a e0       	ldi	r17, 0x0A	; 10
    806e:	d8 01       	movw	r26, r16
    8070:	ed 91       	ld	r30, X+
    8072:	fc 91       	ld	r31, X
    8074:	01 90       	ld	r0, Z+
    8076:	f0 81       	ld	r31, Z
    8078:	e0 2d       	mov	r30, r0
    807a:	c8 01       	movw	r24, r16
    807c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    807e:	21 96       	adiw	r28, 0x01	; 1
    8080:	fe 01       	movw	r30, r28
    8082:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    8084:	61 11       	cpse	r22, r1
    8086:	f3 cf       	rjmp	.-26     	; 0x806e <_Z15printUltrasonicP10Ultrasonici+0x1b6>
			SERIAL_PGM(MSG_BEGIN);
			SERIAL_PGM(sonicCntrlHdr);
			SERIAL_PGMLN(MSG_TERMINATE);
    8088:	88 e0       	ldi	r24, 0x08	; 8
    808a:	9a e0       	ldi	r25, 0x0A	; 10
    808c:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		}
}
    8090:	df 91       	pop	r29
    8092:	cf 91       	pop	r28
    8094:	1f 91       	pop	r17
    8096:	0f 91       	pop	r16
    8098:	ff 90       	pop	r15
    809a:	ef 90       	pop	r14
    809c:	df 90       	pop	r13
    809e:	cf 90       	pop	r12
    80a0:	bf 90       	pop	r11
    80a2:	08 95       	ret

000080a4 <_Z11printAnalogP6Analogi>:
/*
* If we have values in analogRanges for this pin, check the reading and if it is between these ranges
* reject the reading. This allows us to define a center or rest point for a joystick etc.
* If no values were specified on the M code invocation, ignore and process regardless of value.
*/
void printAnalog(Analog* apin, int index) {
    80a4:	cf 92       	push	r12
    80a6:	df 92       	push	r13
    80a8:	ef 92       	push	r14
    80aa:	ff 92       	push	r15
    80ac:	0f 93       	push	r16
    80ae:	1f 93       	push	r17
    80b0:	cf 93       	push	r28
    80b2:	df 93       	push	r29
    80b4:	ec 01       	movw	r28, r24
* Compute the analog channel from the given pin, but maintain the pin number as its digital designation.
*/
int analogRead()
{
	uint8_t low, high;
	if (pin >= 54 && pin <= 69) 
    80b6:	e8 81       	ld	r30, Y
    80b8:	f9 81       	ldd	r31, Y+1	; 0x01
    80ba:	36 97       	sbiw	r30, 0x06	; 6
    80bc:	01 90       	ld	r0, Z+
    80be:	f0 81       	ld	r31, Z
    80c0:	e0 2d       	mov	r30, r0
    80c2:	e8 0f       	add	r30, r24
    80c4:	f9 1f       	adc	r31, r25
    80c6:	80 81       	ld	r24, Z
    80c8:	86 53       	subi	r24, 0x36	; 54
    80ca:	80 31       	cpi	r24, 0x10	; 16
    80cc:	08 f0       	brcs	.+2      	; 0x80d0 <_Z11printAnalogP6Analogi+0x2c>
    80ce:	4b c0       	rjmp	.+150    	; 0x8166 <_Z11printAnalogP6Analogi+0xc2>
		analog_channel = pin - 54; // allow for pin numbers
    80d0:	8a 83       	std	Y+2, r24	; 0x02
	else
		return -1; // can analog read a digital pin

	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((analog_channel >> 3) & 0x01) << MUX5);
    80d2:	eb e7       	ldi	r30, 0x7B	; 123
    80d4:	f0 e0       	ldi	r31, 0x00	; 0
    80d6:	90 81       	ld	r25, Z
    80d8:	97 7f       	andi	r25, 0xF7	; 247
    80da:	88 70       	andi	r24, 0x08	; 8
    80dc:	89 2b       	or	r24, r25
    80de:	80 83       	st	Z, r24
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
	ADMUX = (analog_reference << 6) | (analog_channel & 0x07);
    80e0:	8b 81       	ldd	r24, Y+3	; 0x03
    80e2:	20 e4       	ldi	r18, 0x40	; 64
    80e4:	82 9f       	mul	r24, r18
    80e6:	c0 01       	movw	r24, r0
    80e8:	11 24       	eor	r1, r1
    80ea:	9a 81       	ldd	r25, Y+2	; 0x02
    80ec:	97 70       	andi	r25, 0x07	; 7
    80ee:	89 2b       	or	r24, r25
    80f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>

	// without a delay, we seem to read from the wrong channel
	//_delay_ms(1);

	// start the conversion
	sbi(ADCSRA, ADSC);
    80f4:	ea e7       	ldi	r30, 0x7A	; 122
    80f6:	f0 e0       	ldi	r31, 0x00	; 0
    80f8:	80 81       	ld	r24, Z
    80fa:	80 64       	ori	r24, 0x40	; 64
    80fc:	80 83       	st	Z, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    80fe:	90 81       	ld	r25, Z
    8100:	96 fd       	sbrc	r25, 6
    8102:	fd cf       	rjmp	.-6      	; 0x80fe <_Z11printAnalogP6Analogi+0x5a>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    8104:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	high = ADCH;
    8108:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
* Compute the analog channel from the given pin, but maintain the pin number as its digital designation.
*/
int analogRead()
{
	uint8_t low, high;
	if (pin >= 54 && pin <= 69) 
    810c:	e8 81       	ld	r30, Y
    810e:	f9 81       	ldd	r31, Y+1	; 0x01
    8110:	36 97       	sbiw	r30, 0x06	; 6
    8112:	01 90       	ld	r0, Z+
    8114:	f0 81       	ld	r31, Z
    8116:	e0 2d       	mov	r30, r0
    8118:	ec 0f       	add	r30, r28
    811a:	fd 1f       	adc	r31, r29
    811c:	80 81       	ld	r24, Z
    811e:	86 53       	subi	r24, 0x36	; 54
    8120:	80 31       	cpi	r24, 0x10	; 16
    8122:	20 f5       	brcc	.+72     	; 0x816c <_Z11printAnalogP6Analogi+0xc8>
		analog_channel = pin - 54; // allow for pin numbers
    8124:	8a 83       	std	Y+2, r24	; 0x02
	else
		return -1; // can analog read a digital pin

	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((analog_channel >> 3) & 0x01) << MUX5);
    8126:	eb e7       	ldi	r30, 0x7B	; 123
    8128:	f0 e0       	ldi	r31, 0x00	; 0
    812a:	90 81       	ld	r25, Z
    812c:	97 7f       	andi	r25, 0xF7	; 247
    812e:	88 70       	andi	r24, 0x08	; 8
    8130:	89 2b       	or	r24, r25
    8132:	80 83       	st	Z, r24
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
	ADMUX = (analog_reference << 6) | (analog_channel & 0x07);
    8134:	8b 81       	ldd	r24, Y+3	; 0x03
    8136:	a0 e4       	ldi	r26, 0x40	; 64
    8138:	8a 9f       	mul	r24, r26
    813a:	c0 01       	movw	r24, r0
    813c:	11 24       	eor	r1, r1
    813e:	9a 81       	ldd	r25, Y+2	; 0x02
    8140:	97 70       	andi	r25, 0x07	; 7
    8142:	89 2b       	or	r24, r25
    8144:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>

	// without a delay, we seem to read from the wrong channel
	//_delay_ms(1);

	// start the conversion
	sbi(ADCSRA, ADSC);
    8148:	ea e7       	ldi	r30, 0x7A	; 122
    814a:	f0 e0       	ldi	r31, 0x00	; 0
    814c:	80 81       	ld	r24, Z
    814e:	80 64       	ori	r24, 0x40	; 64
    8150:	80 83       	st	Z, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    8152:	90 81       	ld	r25, Z
    8154:	96 fd       	sbrc	r25, 6
    8156:	fd cf       	rjmp	.-6      	; 0x8152 <_Z11printAnalogP6Analogi+0xae>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    8158:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	high = ADCH;
    815c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>

	// combine the two bytes
	return (high << 8) | low;
    8160:	10 e0       	ldi	r17, 0x00	; 0
    8162:	18 2b       	or	r17, r24
    8164:	05 c0       	rjmp	.+10     	; 0x8170 <_Z11printAnalogP6Analogi+0xcc>
{
	uint8_t low, high;
	if (pin >= 54 && pin <= 69) 
		analog_channel = pin - 54; // allow for pin numbers
	else
		return -1; // can analog read a digital pin
    8166:	0f ef       	ldi	r16, 0xFF	; 255
    8168:	1f ef       	ldi	r17, 0xFF	; 255
    816a:	02 c0       	rjmp	.+4      	; 0x8170 <_Z11printAnalogP6Analogi+0xcc>
    816c:	0f ef       	ldi	r16, 0xFF	; 255
    816e:	1f ef       	ldi	r17, 0xFF	; 255
	//pin = new Analog(upin);
	int nread = apin->analogRead();
	// jitter comp.
	nread = apin->analogRead();
	if( analogRanges[0][index] != 0 && nread >= analogRanges[0][index] && nread <= analogRanges[1][index])
    8170:	fb 01       	movw	r30, r22
    8172:	ee 0f       	add	r30, r30
    8174:	ff 1f       	adc	r31, r31
    8176:	e5 52       	subi	r30, 0x25	; 37
    8178:	fc 4e       	sbci	r31, 0xEC	; 236
    817a:	80 81       	ld	r24, Z
    817c:	91 81       	ldd	r25, Z+1	; 0x01
    817e:	00 97       	sbiw	r24, 0x00	; 0
    8180:	71 f0       	breq	.+28     	; 0x819e <_Z11printAnalogP6Analogi+0xfa>
    8182:	08 17       	cp	r16, r24
    8184:	19 07       	cpc	r17, r25
    8186:	5c f0       	brlt	.+22     	; 0x819e <_Z11printAnalogP6Analogi+0xfa>
    8188:	66 0f       	add	r22, r22
    818a:	77 1f       	adc	r23, r23
    818c:	fb 01       	movw	r30, r22
    818e:	e5 50       	subi	r30, 0x05	; 5
    8190:	fc 4e       	sbci	r31, 0xEC	; 236
    8192:	80 81       	ld	r24, Z
    8194:	91 81       	ldd	r25, Z+1	; 0x01
    8196:	80 17       	cp	r24, r16
    8198:	91 07       	cpc	r25, r17
    819a:	0c f0       	brlt	.+2      	; 0x819e <_Z11printAnalogP6Analogi+0xfa>
    819c:	b9 c0       	rjmp	.+370    	; 0x8310 <_Z11printAnalogP6Analogi+0x26c>
    819e:	6e 01       	movw	r12, r28
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    81a0:	ec ef       	ldi	r30, 0xFC	; 252
    81a2:	f8 e0       	ldi	r31, 0x08	; 8
    81a4:	64 91       	lpm	r22, Z
	while(ch)
    81a6:	66 23       	and	r22, r22
    81a8:	89 f0       	breq	.+34     	; 0x81cc <_Z11printAnalogP6Analogi+0x128>
    81aa:	7f 01       	movw	r14, r30
    81ac:	c8 e0       	ldi	r28, 0x08	; 8
    81ae:	da e0       	ldi	r29, 0x0A	; 10
    81b0:	e8 81       	ld	r30, Y
    81b2:	f9 81       	ldd	r31, Y+1	; 0x01
    81b4:	01 90       	ld	r0, Z+
    81b6:	f0 81       	ld	r31, Z
    81b8:	e0 2d       	mov	r30, r0
    81ba:	ce 01       	movw	r24, r28
    81bc:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    81be:	bf ef       	ldi	r27, 0xFF	; 255
    81c0:	eb 1a       	sub	r14, r27
    81c2:	fb 0a       	sbc	r15, r27
    81c4:	f7 01       	movw	r30, r14
    81c6:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    81c8:	61 11       	cpse	r22, r1
    81ca:	f2 cf       	rjmp	.-28     	; 0x81b0 <_Z11printAnalogP6Analogi+0x10c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    81cc:	e2 ef       	ldi	r30, 0xF2	; 242
    81ce:	f8 e0       	ldi	r31, 0x08	; 8
    81d0:	64 91       	lpm	r22, Z
	while(ch)
    81d2:	66 23       	and	r22, r22
    81d4:	89 f0       	breq	.+34     	; 0x81f8 <_Z11printAnalogP6Analogi+0x154>
    81d6:	7f 01       	movw	r14, r30
    81d8:	c8 e0       	ldi	r28, 0x08	; 8
    81da:	da e0       	ldi	r29, 0x0A	; 10
    81dc:	e8 81       	ld	r30, Y
    81de:	f9 81       	ldd	r31, Y+1	; 0x01
    81e0:	01 90       	ld	r0, Z+
    81e2:	f0 81       	ld	r31, Z
    81e4:	e0 2d       	mov	r30, r0
    81e6:	ce 01       	movw	r24, r28
    81e8:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    81ea:	ff ef       	ldi	r31, 0xFF	; 255
    81ec:	ef 1a       	sub	r14, r31
    81ee:	ff 0a       	sbc	r15, r31
    81f0:	f7 01       	movw	r30, r14
    81f2:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    81f4:	61 11       	cpse	r22, r1
    81f6:	f2 cf       	rjmp	.-28     	; 0x81dc <_Z11printAnalogP6Analogi+0x138>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    81f8:	e0 ef       	ldi	r30, 0xF0	; 240
    81fa:	f8 e0       	ldi	r31, 0x08	; 8
    81fc:	64 91       	lpm	r22, Z
	while(ch)
    81fe:	66 23       	and	r22, r22
    8200:	89 f0       	breq	.+34     	; 0x8224 <_Z11printAnalogP6Analogi+0x180>
    8202:	7f 01       	movw	r14, r30
    8204:	c8 e0       	ldi	r28, 0x08	; 8
    8206:	da e0       	ldi	r29, 0x0A	; 10
    8208:	e8 81       	ld	r30, Y
    820a:	f9 81       	ldd	r31, Y+1	; 0x01
    820c:	01 90       	ld	r0, Z+
    820e:	f0 81       	ld	r31, Z
    8210:	e0 2d       	mov	r30, r0
    8212:	ce 01       	movw	r24, r28
    8214:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    8216:	ff ef       	ldi	r31, 0xFF	; 255
    8218:	ef 1a       	sub	r14, r31
    821a:	ff 0a       	sbc	r15, r31
    821c:	f7 01       	movw	r30, r14
    821e:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    8220:	61 11       	cpse	r22, r1
    8222:	f2 cf       	rjmp	.-28     	; 0x8208 <_Z11printAnalogP6Analogi+0x164>
		return;
	SERIAL_PGM(MSG_BEGIN);
	SERIAL_PGM(analogPinHdr);
	SERIAL_PGMLN(MSG_DELIMIT);
    8224:	88 e0       	ldi	r24, 0x08	; 8
    8226:	9a e0       	ldi	r25, 0x0A	; 10
    8228:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
	SERIAL_PORT.print('1'); // sequence
    822c:	61 e3       	ldi	r22, 0x31	; 49
    822e:	88 e0       	ldi	r24, 0x08	; 8
    8230:	9a e0       	ldi	r25, 0x0A	; 10
    8232:	0e 94 ed 89 	call	0x113da	; 0x113da <_ZN5Print5printEc>
	SERIAL_PORT.print(' ');
    8236:	60 e2       	ldi	r22, 0x20	; 32
    8238:	88 e0       	ldi	r24, 0x08	; 8
    823a:	9a e0       	ldi	r25, 0x0A	; 10
    823c:	0e 94 ed 89 	call	0x113da	; 0x113da <_ZN5Print5printEc>
	// 0 element is pin number
	SERIAL_PORT.println(apin->pin);
    8240:	d6 01       	movw	r26, r12
    8242:	ed 91       	ld	r30, X+
    8244:	fc 91       	ld	r31, X
    8246:	36 97       	sbiw	r30, 0x06	; 6
    8248:	80 81       	ld	r24, Z
    824a:	91 81       	ldd	r25, Z+1	; 0x01
    824c:	e6 01       	movw	r28, r12
    824e:	c8 0f       	add	r28, r24
    8250:	d9 1f       	adc	r29, r25
    8252:	4a e0       	ldi	r20, 0x0A	; 10
    8254:	50 e0       	ldi	r21, 0x00	; 0
    8256:	68 81       	ld	r22, Y
    8258:	88 e0       	ldi	r24, 0x08	; 8
    825a:	9a e0       	ldi	r25, 0x0A	; 10
    825c:	0e 94 e0 8a 	call	0x115c0	; 0x115c0 <_ZN5Print7printlnEhi>
	SERIAL_PORT.print('2'); // sequence
    8260:	62 e3       	ldi	r22, 0x32	; 50
    8262:	88 e0       	ldi	r24, 0x08	; 8
    8264:	9a e0       	ldi	r25, 0x0A	; 10
    8266:	0e 94 ed 89 	call	0x113da	; 0x113da <_ZN5Print5printEc>
	SERIAL_PORT.print(' ');
    826a:	60 e2       	ldi	r22, 0x20	; 32
    826c:	88 e0       	ldi	r24, 0x08	; 8
    826e:	9a e0       	ldi	r25, 0x0A	; 10
    8270:	0e 94 ed 89 	call	0x113da	; 0x113da <_ZN5Print5printEc>
	SERIAL_PORT.print(nread);
    8274:	4a e0       	ldi	r20, 0x0A	; 10
    8276:	50 e0       	ldi	r21, 0x00	; 0
    8278:	b8 01       	movw	r22, r16
    827a:	88 e0       	ldi	r24, 0x08	; 8
    827c:	9a e0       	ldi	r25, 0x0A	; 10
    827e:	0e 94 a4 8a 	call	0x11548	; 0x11548 <_ZN5Print5printEii>
	SERIAL_PORT.println();
    8282:	88 e0       	ldi	r24, 0x08	; 8
    8284:	9a e0       	ldi	r25, 0x0A	; 10
    8286:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    828a:	ee ee       	ldi	r30, 0xEE	; 238
    828c:	f8 e0       	ldi	r31, 0x08	; 8
    828e:	64 91       	lpm	r22, Z
	while(ch)
    8290:	66 23       	and	r22, r22
    8292:	81 f0       	breq	.+32     	; 0x82b4 <_Z11printAnalogP6Analogi+0x210>
    8294:	ef 01       	movw	r28, r30
    8296:	08 e0       	ldi	r16, 0x08	; 8
    8298:	1a e0       	ldi	r17, 0x0A	; 10
    829a:	d8 01       	movw	r26, r16
    829c:	ed 91       	ld	r30, X+
    829e:	fc 91       	ld	r31, X
    82a0:	01 90       	ld	r0, Z+
    82a2:	f0 81       	ld	r31, Z
    82a4:	e0 2d       	mov	r30, r0
    82a6:	c8 01       	movw	r24, r16
    82a8:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    82aa:	21 96       	adiw	r28, 0x01	; 1
    82ac:	fe 01       	movw	r30, r28
    82ae:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    82b0:	61 11       	cpse	r22, r1
    82b2:	f3 cf       	rjmp	.-26     	; 0x829a <_Z11printAnalogP6Analogi+0x1f6>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    82b4:	e4 ee       	ldi	r30, 0xE4	; 228
    82b6:	f8 e0       	ldi	r31, 0x08	; 8
    82b8:	64 91       	lpm	r22, Z
	while(ch)
    82ba:	66 23       	and	r22, r22
    82bc:	81 f0       	breq	.+32     	; 0x82de <_Z11printAnalogP6Analogi+0x23a>
    82be:	ef 01       	movw	r28, r30
    82c0:	08 e0       	ldi	r16, 0x08	; 8
    82c2:	1a e0       	ldi	r17, 0x0A	; 10
    82c4:	d8 01       	movw	r26, r16
    82c6:	ed 91       	ld	r30, X+
    82c8:	fc 91       	ld	r31, X
    82ca:	01 90       	ld	r0, Z+
    82cc:	f0 81       	ld	r31, Z
    82ce:	e0 2d       	mov	r30, r0
    82d0:	c8 01       	movw	r24, r16
    82d2:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    82d4:	21 96       	adiw	r28, 0x01	; 1
    82d6:	fe 01       	movw	r30, r28
    82d8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    82da:	61 11       	cpse	r22, r1
    82dc:	f3 cf       	rjmp	.-26     	; 0x82c4 <_Z11printAnalogP6Analogi+0x220>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    82de:	e1 ee       	ldi	r30, 0xE1	; 225
    82e0:	f8 e0       	ldi	r31, 0x08	; 8
    82e2:	64 91       	lpm	r22, Z
	while(ch)
    82e4:	66 23       	and	r22, r22
    82e6:	81 f0       	breq	.+32     	; 0x8308 <_Z11printAnalogP6Analogi+0x264>
    82e8:	ef 01       	movw	r28, r30
    82ea:	08 e0       	ldi	r16, 0x08	; 8
    82ec:	1a e0       	ldi	r17, 0x0A	; 10
    82ee:	d8 01       	movw	r26, r16
    82f0:	ed 91       	ld	r30, X+
    82f2:	fc 91       	ld	r31, X
    82f4:	01 90       	ld	r0, Z+
    82f6:	f0 81       	ld	r31, Z
    82f8:	e0 2d       	mov	r30, r0
    82fa:	c8 01       	movw	r24, r16
    82fc:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    82fe:	21 96       	adiw	r28, 0x01	; 1
    8300:	fe 01       	movw	r30, r28
    8302:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    8304:	61 11       	cpse	r22, r1
    8306:	f3 cf       	rjmp	.-26     	; 0x82ee <_Z11printAnalogP6Analogi+0x24a>
	SERIAL_PGM(MSG_BEGIN);
	SERIAL_PGM(analogPinHdr);
	SERIAL_PGMLN(MSG_TERMINATE);
    8308:	88 e0       	ldi	r24, 0x08	; 8
    830a:	9a e0       	ldi	r25, 0x0A	; 10
    830c:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
	//delete pin;
}
    8310:	df 91       	pop	r29
    8312:	cf 91       	pop	r28
    8314:	1f 91       	pop	r17
    8316:	0f 91       	pop	r16
    8318:	ff 90       	pop	r15
    831a:	ef 90       	pop	r14
    831c:	df 90       	pop	r13
    831e:	cf 90       	pop	r12
    8320:	08 95       	ret

00008322 <_Z12printDigitalP7Digitali>:
/*
* 'target' represents the expected value. Two elements returned in sequence. 1 - Pin, 2 - reading
*/
void printDigital(Digital* dpin, int target) {
    8322:	cf 92       	push	r12
    8324:	df 92       	push	r13
    8326:	ef 92       	push	r14
    8328:	ff 92       	push	r15
    832a:	0f 93       	push	r16
    832c:	1f 93       	push	r17
    832e:	cf 93       	push	r28
    8330:	df 93       	push	r29
    8332:	8c 01       	movw	r16, r24
    8334:	6b 01       	movw	r12, r22
	SREG = oldSREG;
}

int digitalRead()
{
	uint8_t timer = digitalPinToTimer(this->pin);
    8336:	dc 01       	movw	r26, r24
    8338:	8c 91       	ld	r24, X
    833a:	90 e0       	ldi	r25, 0x00	; 0
    833c:	fc 01       	movw	r30, r24
    833e:	e5 57       	subi	r30, 0x75	; 117
    8340:	fd 4e       	sbci	r31, 0xED	; 237
    8342:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(this->pin);
    8344:	fc 01       	movw	r30, r24
    8346:	ef 52       	subi	r30, 0x2F	; 47
    8348:	fd 4e       	sbci	r31, 0xED	; 237
    834a:	e4 90       	lpm	r14, Z
	uint8_t port = digitalPinToPort(this->pin);
    834c:	fc 01       	movw	r30, r24
    834e:	e9 5e       	subi	r30, 0xE9	; 233
    8350:	fc 4e       	sbci	r31, 0xEC	; 236
    8352:	f4 90       	lpm	r15, Z

	if (port == NOT_A_PIN) return LOW;
    8354:	ff 20       	and	r15, r15
    8356:	09 f4       	brne	.+2      	; 0x835a <_Z12printDigitalP7Digitali+0x38>
    8358:	7f c0       	rjmp	.+254    	; 0x8458 <_Z12printDigitalP7Digitali+0x136>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    835a:	22 23       	and	r18, r18
    835c:	09 f4       	brne	.+2      	; 0x8360 <_Z12printDigitalP7Digitali+0x3e>
    835e:	67 c0       	rjmp	.+206    	; 0x842e <_Z12printDigitalP7Digitali+0x10c>

// If we detect the pin is on a timer, we may need to defuse PWM output, 
// we need to turn pin off before doing a digital write.
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    8360:	82 2f       	mov	r24, r18
    8362:	90 e0       	ldi	r25, 0x00	; 0
    8364:	fc 01       	movw	r30, r24
    8366:	31 97       	sbiw	r30, 0x01	; 1
    8368:	e0 31       	cpi	r30, 0x10	; 16
    836a:	f1 05       	cpc	r31, r1
    836c:	08 f0       	brcs	.+2      	; 0x8370 <_Z12printDigitalP7Digitali+0x4e>
    836e:	5f c0       	rjmp	.+190    	; 0x842e <_Z12printDigitalP7Digitali+0x10c>
    8370:	88 27       	eor	r24, r24
    8372:	ed 59       	subi	r30, 0x9D	; 157
    8374:	fe 4f       	sbci	r31, 0xFE	; 254
    8376:	8f 4f       	sbci	r24, 0xFF	; 255
    8378:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
	{
		case TIMER0A: Timer0.stopChannel(CHANNEL_A); break;
    837c:	60 e0       	ldi	r22, 0x00	; 0
    837e:	84 e7       	ldi	r24, 0x74	; 116
    8380:	97 e1       	ldi	r25, 0x17	; 23
    8382:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    8386:	53 c0       	rjmp	.+166    	; 0x842e <_Z12printDigitalP7Digitali+0x10c>
		case TIMER0B: Timer0.stopChannel(CHANNEL_B); break;
    8388:	61 e0       	ldi	r22, 0x01	; 1
    838a:	84 e7       	ldi	r24, 0x74	; 116
    838c:	97 e1       	ldi	r25, 0x17	; 23
    838e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    8392:	4d c0       	rjmp	.+154    	; 0x842e <_Z12printDigitalP7Digitali+0x10c>
	
		case TIMER1A: Timer1.stopChannel(CHANNEL_A); break;
    8394:	60 e0       	ldi	r22, 0x00	; 0
    8396:	85 e4       	ldi	r24, 0x45	; 69
    8398:	97 e1       	ldi	r25, 0x17	; 23
    839a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    839e:	47 c0       	rjmp	.+142    	; 0x842e <_Z12printDigitalP7Digitali+0x10c>
		case TIMER1B: Timer1.stopChannel(CHANNEL_B); break;
    83a0:	61 e0       	ldi	r22, 0x01	; 1
    83a2:	85 e4       	ldi	r24, 0x45	; 69
    83a4:	97 e1       	ldi	r25, 0x17	; 23
    83a6:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    83aa:	41 c0       	rjmp	.+130    	; 0x842e <_Z12printDigitalP7Digitali+0x10c>
		
		case TIMER2A: Timer2.stopChannel(CHANNEL_A); break;
    83ac:	60 e0       	ldi	r22, 0x00	; 0
    83ae:	86 e1       	ldi	r24, 0x16	; 22
    83b0:	97 e1       	ldi	r25, 0x17	; 23
    83b2:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    83b6:	3b c0       	rjmp	.+118    	; 0x842e <_Z12printDigitalP7Digitali+0x10c>
		case TIMER2B: Timer2.stopChannel(CHANNEL_B); break;
    83b8:	61 e0       	ldi	r22, 0x01	; 1
    83ba:	86 e1       	ldi	r24, 0x16	; 22
    83bc:	97 e1       	ldi	r25, 0x17	; 23
    83be:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    83c2:	35 c0       	rjmp	.+106    	; 0x842e <_Z12printDigitalP7Digitali+0x10c>
	
		case TIMER3A: Timer3.stopChannel(CHANNEL_A); break;
    83c4:	60 e0       	ldi	r22, 0x00	; 0
    83c6:	87 ee       	ldi	r24, 0xE7	; 231
    83c8:	96 e1       	ldi	r25, 0x16	; 22
    83ca:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    83ce:	2f c0       	rjmp	.+94     	; 0x842e <_Z12printDigitalP7Digitali+0x10c>
		case TIMER3B: Timer3.stopChannel(CHANNEL_B); break; 
    83d0:	61 e0       	ldi	r22, 0x01	; 1
    83d2:	87 ee       	ldi	r24, 0xE7	; 231
    83d4:	96 e1       	ldi	r25, 0x16	; 22
    83d6:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    83da:	29 c0       	rjmp	.+82     	; 0x842e <_Z12printDigitalP7Digitali+0x10c>
		case TIMER3C: Timer3.stopChannel(CHANNEL_C); break;
    83dc:	62 e0       	ldi	r22, 0x02	; 2
    83de:	87 ee       	ldi	r24, 0xE7	; 231
    83e0:	96 e1       	ldi	r25, 0x16	; 22
    83e2:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    83e6:	23 c0       	rjmp	.+70     	; 0x842e <_Z12printDigitalP7Digitali+0x10c>
		
		case TIMER4A: Timer4.stopChannel(CHANNEL_A); break;
    83e8:	60 e0       	ldi	r22, 0x00	; 0
    83ea:	88 eb       	ldi	r24, 0xB8	; 184
    83ec:	96 e1       	ldi	r25, 0x16	; 22
    83ee:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    83f2:	1d c0       	rjmp	.+58     	; 0x842e <_Z12printDigitalP7Digitali+0x10c>
		case TIMER4B: Timer4.stopChannel(CHANNEL_B); break; 
    83f4:	61 e0       	ldi	r22, 0x01	; 1
    83f6:	88 eb       	ldi	r24, 0xB8	; 184
    83f8:	96 e1       	ldi	r25, 0x16	; 22
    83fa:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    83fe:	17 c0       	rjmp	.+46     	; 0x842e <_Z12printDigitalP7Digitali+0x10c>
		case TIMER4C: Timer4.stopChannel(CHANNEL_C); break;
    8400:	62 e0       	ldi	r22, 0x02	; 2
    8402:	88 eb       	ldi	r24, 0xB8	; 184
    8404:	96 e1       	ldi	r25, 0x16	; 22
    8406:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    840a:	11 c0       	rjmp	.+34     	; 0x842e <_Z12printDigitalP7Digitali+0x10c>
		
		case TIMER5A: Timer5.stopChannel(CHANNEL_A); break;
    840c:	60 e0       	ldi	r22, 0x00	; 0
    840e:	89 e8       	ldi	r24, 0x89	; 137
    8410:	96 e1       	ldi	r25, 0x16	; 22
    8412:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    8416:	0b c0       	rjmp	.+22     	; 0x842e <_Z12printDigitalP7Digitali+0x10c>
		case TIMER5B: Timer5.stopChannel(CHANNEL_B); break; 
    8418:	61 e0       	ldi	r22, 0x01	; 1
    841a:	89 e8       	ldi	r24, 0x89	; 137
    841c:	96 e1       	ldi	r25, 0x16	; 22
    841e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    8422:	05 c0       	rjmp	.+10     	; 0x842e <_Z12printDigitalP7Digitali+0x10c>
		case TIMER5C: Timer5.stopChannel(CHANNEL_C); break;
    8424:	62 e0       	ldi	r22, 0x02	; 2
    8426:	89 e8       	ldi	r24, 0x89	; 137
    8428:	96 e1       	ldi	r25, 0x16	; 22
    842a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    842e:	ef 2d       	mov	r30, r15
    8430:	f0 e0       	ldi	r31, 0x00	; 0
    8432:	ee 0f       	add	r30, r30
    8434:	ff 1f       	adc	r31, r31
    8436:	e3 5a       	subi	r30, 0xA3	; 163
    8438:	fc 4e       	sbci	r31, 0xEC	; 236
    843a:	a5 91       	lpm	r26, Z+
    843c:	b4 91       	lpm	r27, Z
    843e:	ed 91       	ld	r30, X+
    8440:	fc 91       	ld	r31, X
{
	uint8_t timer = digitalPinToTimer(this->pin);
	uint8_t bit = digitalPinToBitMask(this->pin);
	uint8_t port = digitalPinToPort(this->pin);

	if (port == NOT_A_PIN) return LOW;
    8442:	f1 2c       	mov	r15, r1
    8444:	ee 22       	and	r14, r30
    8446:	ff 22       	and	r15, r31
    8448:	31 e0       	ldi	r19, 0x01	; 1
    844a:	20 e0       	ldi	r18, 0x00	; 0
    844c:	ef 28       	or	r14, r15
    844e:	09 f4       	brne	.+2      	; 0x8452 <_Z12printDigitalP7Digitali+0x130>
    8450:	30 e0       	ldi	r19, 0x00	; 0
    8452:	83 2f       	mov	r24, r19
    8454:	92 2f       	mov	r25, r18
    8456:	02 c0       	rjmp	.+4      	; 0x845c <_Z12printDigitalP7Digitali+0x13a>
    8458:	80 e0       	ldi	r24, 0x00	; 0
    845a:	90 e0       	ldi	r25, 0x00	; 0
	//dpin = new Digital(upin);
	//dpin->pinMode(INPUT);
	int nread = dpin->digitalRead();
	//delete dpin;
	// look for activated value
	if( !(nread ^ target) ) {
    845c:	c8 16       	cp	r12, r24
    845e:	d9 06       	cpc	r13, r25
    8460:	09 f0       	breq	.+2      	; 0x8464 <_Z12printDigitalP7Digitali+0x142>
    8462:	ac c0       	rjmp	.+344    	; 0x85bc <_Z12printDigitalP7Digitali+0x29a>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    8464:	ef ed       	ldi	r30, 0xDF	; 223
    8466:	f8 e0       	ldi	r31, 0x08	; 8
    8468:	64 91       	lpm	r22, Z
	while(ch)
    846a:	66 23       	and	r22, r22
    846c:	89 f0       	breq	.+34     	; 0x8490 <_Z12printDigitalP7Digitali+0x16e>
    846e:	7f 01       	movw	r14, r30
    8470:	c8 e0       	ldi	r28, 0x08	; 8
    8472:	da e0       	ldi	r29, 0x0A	; 10
    8474:	e8 81       	ld	r30, Y
    8476:	f9 81       	ldd	r31, Y+1	; 0x01
    8478:	01 90       	ld	r0, Z+
    847a:	f0 81       	ld	r31, Z
    847c:	e0 2d       	mov	r30, r0
    847e:	ce 01       	movw	r24, r28
    8480:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    8482:	bf ef       	ldi	r27, 0xFF	; 255
    8484:	eb 1a       	sub	r14, r27
    8486:	fb 0a       	sbc	r15, r27
    8488:	f7 01       	movw	r30, r14
    848a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    848c:	61 11       	cpse	r22, r1
    848e:	f2 cf       	rjmp	.-28     	; 0x8474 <_Z12printDigitalP7Digitali+0x152>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    8490:	e4 ed       	ldi	r30, 0xD4	; 212
    8492:	f8 e0       	ldi	r31, 0x08	; 8
    8494:	64 91       	lpm	r22, Z
	while(ch)
    8496:	66 23       	and	r22, r22
    8498:	89 f0       	breq	.+34     	; 0x84bc <_Z12printDigitalP7Digitali+0x19a>
    849a:	7f 01       	movw	r14, r30
    849c:	c8 e0       	ldi	r28, 0x08	; 8
    849e:	da e0       	ldi	r29, 0x0A	; 10
    84a0:	e8 81       	ld	r30, Y
    84a2:	f9 81       	ldd	r31, Y+1	; 0x01
    84a4:	01 90       	ld	r0, Z+
    84a6:	f0 81       	ld	r31, Z
    84a8:	e0 2d       	mov	r30, r0
    84aa:	ce 01       	movw	r24, r28
    84ac:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    84ae:	ff ef       	ldi	r31, 0xFF	; 255
    84b0:	ef 1a       	sub	r14, r31
    84b2:	ff 0a       	sbc	r15, r31
    84b4:	f7 01       	movw	r30, r14
    84b6:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    84b8:	61 11       	cpse	r22, r1
    84ba:	f2 cf       	rjmp	.-28     	; 0x84a0 <_Z12printDigitalP7Digitali+0x17e>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    84bc:	e2 ed       	ldi	r30, 0xD2	; 210
    84be:	f8 e0       	ldi	r31, 0x08	; 8
    84c0:	64 91       	lpm	r22, Z
	while(ch)
    84c2:	66 23       	and	r22, r22
    84c4:	89 f0       	breq	.+34     	; 0x84e8 <_Z12printDigitalP7Digitali+0x1c6>
    84c6:	7f 01       	movw	r14, r30
    84c8:	c8 e0       	ldi	r28, 0x08	; 8
    84ca:	da e0       	ldi	r29, 0x0A	; 10
    84cc:	e8 81       	ld	r30, Y
    84ce:	f9 81       	ldd	r31, Y+1	; 0x01
    84d0:	01 90       	ld	r0, Z+
    84d2:	f0 81       	ld	r31, Z
    84d4:	e0 2d       	mov	r30, r0
    84d6:	ce 01       	movw	r24, r28
    84d8:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    84da:	ff ef       	ldi	r31, 0xFF	; 255
    84dc:	ef 1a       	sub	r14, r31
    84de:	ff 0a       	sbc	r15, r31
    84e0:	f7 01       	movw	r30, r14
    84e2:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    84e4:	61 11       	cpse	r22, r1
    84e6:	f2 cf       	rjmp	.-28     	; 0x84cc <_Z12printDigitalP7Digitali+0x1aa>
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(digitalPinHdr);
		SERIAL_PGMLN(MSG_DELIMIT);
    84e8:	88 e0       	ldi	r24, 0x08	; 8
    84ea:	9a e0       	ldi	r25, 0x0A	; 10
    84ec:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		SERIAL_PORT.print('1'); // sequence
    84f0:	61 e3       	ldi	r22, 0x31	; 49
    84f2:	88 e0       	ldi	r24, 0x08	; 8
    84f4:	9a e0       	ldi	r25, 0x0A	; 10
    84f6:	0e 94 ed 89 	call	0x113da	; 0x113da <_ZN5Print5printEc>
		SERIAL_PORT.print(' ');
    84fa:	60 e2       	ldi	r22, 0x20	; 32
    84fc:	88 e0       	ldi	r24, 0x08	; 8
    84fe:	9a e0       	ldi	r25, 0x0A	; 10
    8500:	0e 94 ed 89 	call	0x113da	; 0x113da <_ZN5Print5printEc>
		SERIAL_PORT.println(dpin->pin);
    8504:	4a e0       	ldi	r20, 0x0A	; 10
    8506:	50 e0       	ldi	r21, 0x00	; 0
    8508:	d8 01       	movw	r26, r16
    850a:	6c 91       	ld	r22, X
    850c:	88 e0       	ldi	r24, 0x08	; 8
    850e:	9a e0       	ldi	r25, 0x0A	; 10
    8510:	0e 94 e0 8a 	call	0x115c0	; 0x115c0 <_ZN5Print7printlnEhi>
		SERIAL_PORT.print('2'); // sequence
    8514:	62 e3       	ldi	r22, 0x32	; 50
    8516:	88 e0       	ldi	r24, 0x08	; 8
    8518:	9a e0       	ldi	r25, 0x0A	; 10
    851a:	0e 94 ed 89 	call	0x113da	; 0x113da <_ZN5Print5printEc>
		SERIAL_PORT.print(' ');
    851e:	60 e2       	ldi	r22, 0x20	; 32
    8520:	88 e0       	ldi	r24, 0x08	; 8
    8522:	9a e0       	ldi	r25, 0x0A	; 10
    8524:	0e 94 ed 89 	call	0x113da	; 0x113da <_ZN5Print5printEc>
		SERIAL_PORT.println(nread);
    8528:	4a e0       	ldi	r20, 0x0A	; 10
    852a:	50 e0       	ldi	r21, 0x00	; 0
    852c:	b6 01       	movw	r22, r12
    852e:	88 e0       	ldi	r24, 0x08	; 8
    8530:	9a e0       	ldi	r25, 0x0A	; 10
    8532:	0e 94 ab 8a 	call	0x11556	; 0x11556 <_ZN5Print7printlnEii>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    8536:	e0 ed       	ldi	r30, 0xD0	; 208
    8538:	f8 e0       	ldi	r31, 0x08	; 8
    853a:	64 91       	lpm	r22, Z
	while(ch)
    853c:	66 23       	and	r22, r22
    853e:	81 f0       	breq	.+32     	; 0x8560 <_Z12printDigitalP7Digitali+0x23e>
    8540:	ef 01       	movw	r28, r30
    8542:	08 e0       	ldi	r16, 0x08	; 8
    8544:	1a e0       	ldi	r17, 0x0A	; 10
    8546:	d8 01       	movw	r26, r16
    8548:	ed 91       	ld	r30, X+
    854a:	fc 91       	ld	r31, X
    854c:	01 90       	ld	r0, Z+
    854e:	f0 81       	ld	r31, Z
    8550:	e0 2d       	mov	r30, r0
    8552:	c8 01       	movw	r24, r16
    8554:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    8556:	21 96       	adiw	r28, 0x01	; 1
    8558:	fe 01       	movw	r30, r28
    855a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    855c:	61 11       	cpse	r22, r1
    855e:	f3 cf       	rjmp	.-26     	; 0x8546 <_Z12printDigitalP7Digitali+0x224>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    8560:	e5 ec       	ldi	r30, 0xC5	; 197
    8562:	f8 e0       	ldi	r31, 0x08	; 8
    8564:	64 91       	lpm	r22, Z
	while(ch)
    8566:	66 23       	and	r22, r22
    8568:	81 f0       	breq	.+32     	; 0x858a <_Z12printDigitalP7Digitali+0x268>
    856a:	ef 01       	movw	r28, r30
    856c:	08 e0       	ldi	r16, 0x08	; 8
    856e:	1a e0       	ldi	r17, 0x0A	; 10
    8570:	d8 01       	movw	r26, r16
    8572:	ed 91       	ld	r30, X+
    8574:	fc 91       	ld	r31, X
    8576:	01 90       	ld	r0, Z+
    8578:	f0 81       	ld	r31, Z
    857a:	e0 2d       	mov	r30, r0
    857c:	c8 01       	movw	r24, r16
    857e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    8580:	21 96       	adiw	r28, 0x01	; 1
    8582:	fe 01       	movw	r30, r28
    8584:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    8586:	61 11       	cpse	r22, r1
    8588:	f3 cf       	rjmp	.-26     	; 0x8570 <_Z12printDigitalP7Digitali+0x24e>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    858a:	e2 ec       	ldi	r30, 0xC2	; 194
    858c:	f8 e0       	ldi	r31, 0x08	; 8
    858e:	64 91       	lpm	r22, Z
	while(ch)
    8590:	66 23       	and	r22, r22
    8592:	81 f0       	breq	.+32     	; 0x85b4 <_Z12printDigitalP7Digitali+0x292>
    8594:	ef 01       	movw	r28, r30
    8596:	08 e0       	ldi	r16, 0x08	; 8
    8598:	1a e0       	ldi	r17, 0x0A	; 10
    859a:	d8 01       	movw	r26, r16
    859c:	ed 91       	ld	r30, X+
    859e:	fc 91       	ld	r31, X
    85a0:	01 90       	ld	r0, Z+
    85a2:	f0 81       	ld	r31, Z
    85a4:	e0 2d       	mov	r30, r0
    85a6:	c8 01       	movw	r24, r16
    85a8:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    85aa:	21 96       	adiw	r28, 0x01	; 1
    85ac:	fe 01       	movw	r30, r28
    85ae:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    85b0:	61 11       	cpse	r22, r1
    85b2:	f3 cf       	rjmp	.-26     	; 0x859a <_Z12printDigitalP7Digitali+0x278>
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(digitalPinHdr);
		SERIAL_PGMLN(MSG_TERMINATE);
    85b4:	88 e0       	ldi	r24, 0x08	; 8
    85b6:	9a e0       	ldi	r25, 0x0A	; 10
    85b8:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
	}
}
    85bc:	df 91       	pop	r29
    85be:	cf 91       	pop	r28
    85c0:	1f 91       	pop	r17
    85c2:	0f 91       	pop	r16
    85c4:	ff 90       	pop	r15
    85c6:	ef 90       	pop	r14
    85c8:	df 90       	pop	r13
    85ca:	cf 90       	pop	r12
    85cc:	08 95       	ret

000085ce <_GLOBAL__sub_I_starttime>:
Digital* dpin;
PWM* ppin;
int nread = 0;
uint32_t micros = 0;
int* values;
String motorCntrlResp;
    85ce:	69 e9       	ldi	r22, 0x99	; 153
    85d0:	78 e0       	ldi	r23, 0x08	; 8
    85d2:	8b e5       	ldi	r24, 0x5B	; 91
    85d4:	94 e1       	ldi	r25, 0x14	; 20
    85d6:	0c 94 58 a4 	jmp	0x148b0	; 0x148b0 <_ZN6StringC1EPKc>
    85da:	08 95       	ret

000085dc <_GLOBAL__sub_D_starttime>:
    85dc:	8b e5       	ldi	r24, 0x5B	; 91
    85de:	94 e1       	ldi	r25, 0x14	; 20
    85e0:	0c 94 ec a3 	jmp	0x147d8	; 0x147d8 <_ZN6StringD1Ev>
    85e4:	08 95       	ret

000085e6 <_Z12processMCodei>:
  
  /*-------------------------------------
  * M Code processing
  *--------------------------------------
  */
  void processMCode(int cval) {
    85e6:	2f 92       	push	r2
    85e8:	3f 92       	push	r3
    85ea:	4f 92       	push	r4
    85ec:	5f 92       	push	r5
    85ee:	6f 92       	push	r6
    85f0:	7f 92       	push	r7
    85f2:	8f 92       	push	r8
    85f4:	9f 92       	push	r9
    85f6:	af 92       	push	r10
    85f8:	bf 92       	push	r11
    85fa:	cf 92       	push	r12
    85fc:	df 92       	push	r13
    85fe:	ef 92       	push	r14
    8600:	ff 92       	push	r15
    8602:	0f 93       	push	r16
    8604:	1f 93       	push	r17
    8606:	cf 93       	push	r28
    8608:	df 93       	push	r29
    860a:	00 d0       	rcall	.+0      	; 0x860c <_Z12processMCodei+0x26>
    860c:	1f 92       	push	r1
    860e:	cd b7       	in	r28, 0x3d	; 61
    8610:	de b7       	in	r29, 0x3e	; 62
	  int motorController = 0; 
	  int PWMDriver = 0;
	  
    switch( cval ) {
    8612:	8f 32       	cpi	r24, 0x2F	; 47
    8614:	91 05       	cpc	r25, r1
    8616:	11 f4       	brne	.+4      	; 0x861c <_Z12processMCodei+0x36>
    8618:	0c 94 1f 62 	jmp	0xc43e	; 0xc43e <_Z12processMCodei+0x3e58>
    861c:	0c f0       	brlt	.+2      	; 0x8620 <_Z12processMCodei+0x3a>
    861e:	79 c0       	rjmp	.+242    	; 0x8712 <_Z12processMCodei+0x12c>
    8620:	8c 30       	cpi	r24, 0x0C	; 12
    8622:	91 05       	cpc	r25, r1
    8624:	11 f4       	brne	.+4      	; 0x862a <_Z12processMCodei+0x44>
    8626:	0c 94 18 53 	jmp	0xa630	; 0xa630 <_Z12processMCodei+0x204a>
    862a:	9c f5       	brge	.+102    	; 0x8692 <_Z12processMCodei+0xac>
    862c:	85 30       	cpi	r24, 0x05	; 5
    862e:	91 05       	cpc	r25, r1
    8630:	09 f4       	brne	.+2      	; 0x8634 <_Z12processMCodei+0x4e>
    8632:	c9 c4       	rjmp	.+2450   	; 0x8fc6 <_Z12processMCodei+0x9e0>
    8634:	b4 f4       	brge	.+44     	; 0x8662 <_Z12processMCodei+0x7c>
    8636:	82 30       	cpi	r24, 0x02	; 2
    8638:	91 05       	cpc	r25, r1
    863a:	09 f4       	brne	.+2      	; 0x863e <_Z12processMCodei+0x58>
    863c:	bb c1       	rjmp	.+886    	; 0x89b4 <_Z12processMCodei+0x3ce>
    863e:	44 f4       	brge	.+16     	; 0x8650 <_Z12processMCodei+0x6a>
    8640:	00 97       	sbiw	r24, 0x00	; 0
    8642:	09 f4       	brne	.+2      	; 0x8646 <_Z12processMCodei+0x60>
    8644:	08 c1       	rjmp	.+528    	; 0x8856 <_Z12processMCodei+0x270>
    8646:	01 97       	sbiw	r24, 0x01	; 1
    8648:	09 f4       	brne	.+2      	; 0x864c <_Z12processMCodei+0x66>
    864a:	5c c1       	rjmp	.+696    	; 0x8904 <_Z12processMCodei+0x31e>
    864c:	0c 94 97 7e 	jmp	0xfd2e	; 0xfd2e <_Z12processMCodei+0x7748>
    8650:	83 30       	cpi	r24, 0x03	; 3
    8652:	91 05       	cpc	r25, r1
    8654:	09 f4       	brne	.+2      	; 0x8658 <_Z12processMCodei+0x72>
    8656:	5c c2       	rjmp	.+1208   	; 0x8b10 <_Z12processMCodei+0x52a>
    8658:	04 97       	sbiw	r24, 0x04	; 4
    865a:	09 f4       	brne	.+2      	; 0x865e <_Z12processMCodei+0x78>
    865c:	7c c3       	rjmp	.+1784   	; 0x8d56 <_Z12processMCodei+0x770>
    865e:	0c 94 97 7e 	jmp	0xfd2e	; 0xfd2e <_Z12processMCodei+0x7748>
    8662:	88 30       	cpi	r24, 0x08	; 8
    8664:	91 05       	cpc	r25, r1
    8666:	09 f4       	brne	.+2      	; 0x866a <_Z12processMCodei+0x84>
    8668:	c5 c7       	rjmp	.+3978   	; 0x95f4 <_Z12processMCodei+0x100e>
    866a:	4c f4       	brge	.+18     	; 0x867e <_Z12processMCodei+0x98>
    866c:	86 30       	cpi	r24, 0x06	; 6
    866e:	91 05       	cpc	r25, r1
    8670:	09 f4       	brne	.+2      	; 0x8674 <_Z12processMCodei+0x8e>
    8672:	ae c5       	rjmp	.+2908   	; 0x91d0 <_Z12processMCodei+0xbea>
    8674:	07 97       	sbiw	r24, 0x07	; 7
    8676:	09 f4       	brne	.+2      	; 0x867a <_Z12processMCodei+0x94>
    8678:	bf c6       	rjmp	.+3454   	; 0x93f8 <_Z12processMCodei+0xe12>
    867a:	0c 94 97 7e 	jmp	0xfd2e	; 0xfd2e <_Z12processMCodei+0x7748>
    867e:	8a 30       	cpi	r24, 0x0A	; 10
    8680:	91 05       	cpc	r25, r1
    8682:	11 f4       	brne	.+4      	; 0x8688 <_Z12processMCodei+0xa2>
    8684:	0c 94 ee 4c 	jmp	0x99dc	; 0x99dc <_Z12processMCodei+0x13f6>
    8688:	14 f4       	brge	.+4      	; 0x868e <_Z12processMCodei+0xa8>
    868a:	0c 94 f6 4b 	jmp	0x97ec	; 0x97ec <_Z12processMCodei+0x1206>
    868e:	0c 94 df 51 	jmp	0xa3be	; 0xa3be <_Z12processMCodei+0x1dd8>
    8692:	87 32       	cpi	r24, 0x27	; 39
    8694:	91 05       	cpc	r25, r1
    8696:	11 f4       	brne	.+4      	; 0x869c <_Z12processMCodei+0xb6>
    8698:	0c 94 2e 58 	jmp	0xb05c	; 0xb05c <_Z12processMCodei+0x2a76>
    869c:	dc f4       	brge	.+54     	; 0x86d4 <_Z12processMCodei+0xee>
    869e:	83 32       	cpi	r24, 0x23	; 35
    86a0:	91 05       	cpc	r25, r1
    86a2:	11 f4       	brne	.+4      	; 0x86a8 <_Z12processMCodei+0xc2>
    86a4:	0c 94 30 56 	jmp	0xac60	; 0xac60 <_Z12processMCodei+0x267a>
    86a8:	5c f4       	brge	.+22     	; 0x86c0 <_Z12processMCodei+0xda>
    86aa:	8d 30       	cpi	r24, 0x0D	; 13
    86ac:	91 05       	cpc	r25, r1
    86ae:	11 f4       	brne	.+4      	; 0x86b4 <_Z12processMCodei+0xce>
    86b0:	0c 94 5d 54 	jmp	0xa8ba	; 0xa8ba <_Z12processMCodei+0x22d4>
    86b4:	81 97       	sbiw	r24, 0x21	; 33
    86b6:	11 f4       	brne	.+4      	; 0x86bc <_Z12processMCodei+0xd6>
    86b8:	0c 94 75 55 	jmp	0xaaea	; 0xaaea <_Z12processMCodei+0x2504>
    86bc:	0c 94 97 7e 	jmp	0xfd2e	; 0xfd2e <_Z12processMCodei+0x7748>
    86c0:	85 32       	cpi	r24, 0x25	; 37
    86c2:	91 05       	cpc	r25, r1
    86c4:	11 f4       	brne	.+4      	; 0x86ca <_Z12processMCodei+0xe4>
    86c6:	0c 94 23 57 	jmp	0xae46	; 0xae46 <_Z12processMCodei+0x2860>
    86ca:	14 f4       	brge	.+4      	; 0x86d0 <_Z12processMCodei+0xea>
    86cc:	0c 94 a6 56 	jmp	0xad4c	; 0xad4c <_Z12processMCodei+0x2766>
    86d0:	0c 94 99 57 	jmp	0xaf32	; 0xaf32 <_Z12processMCodei+0x294c>
    86d4:	8a 32       	cpi	r24, 0x2A	; 42
    86d6:	91 05       	cpc	r25, r1
    86d8:	11 f4       	brne	.+4      	; 0x86de <_Z12processMCodei+0xf8>
    86da:	0c 94 3f 5b 	jmp	0xb67e	; 0xb67e <_Z12processMCodei+0x3098>
    86de:	5c f4       	brge	.+22     	; 0x86f6 <_Z12processMCodei+0x110>
    86e0:	88 32       	cpi	r24, 0x28	; 40
    86e2:	91 05       	cpc	r25, r1
    86e4:	11 f4       	brne	.+4      	; 0x86ea <_Z12processMCodei+0x104>
    86e6:	0c 94 c9 58 	jmp	0xb192	; 0xb192 <_Z12processMCodei+0x2bac>
    86ea:	89 97       	sbiw	r24, 0x29	; 41
    86ec:	11 f4       	brne	.+4      	; 0x86f2 <_Z12processMCodei+0x10c>
    86ee:	0c 94 60 59 	jmp	0xb2c0	; 0xb2c0 <_Z12processMCodei+0x2cda>
    86f2:	0c 94 97 7e 	jmp	0xfd2e	; 0xfd2e <_Z12processMCodei+0x7748>
    86f6:	8d 32       	cpi	r24, 0x2D	; 45
    86f8:	91 05       	cpc	r25, r1
    86fa:	11 f4       	brne	.+4      	; 0x8700 <_Z12processMCodei+0x11a>
    86fc:	0c 94 d8 5e 	jmp	0xbdb0	; 0xbdb0 <_Z12processMCodei+0x37ca>
    8700:	14 f0       	brlt	.+4      	; 0x8706 <_Z12processMCodei+0x120>
    8702:	0c 94 89 60 	jmp	0xc112	; 0xc112 <_Z12processMCodei+0x3b2c>
    8706:	8c 97       	sbiw	r24, 0x2c	; 44
    8708:	11 f4       	brne	.+4      	; 0x870e <_Z12processMCodei+0x128>
    870a:	0c 94 23 5d 	jmp	0xba46	; 0xba46 <_Z12processMCodei+0x3460>
    870e:	0c 94 97 7e 	jmp	0xfd2e	; 0xfd2e <_Z12processMCodei+0x7748>
    8712:	85 3f       	cpi	r24, 0xF5	; 245
    8714:	21 e0       	ldi	r18, 0x01	; 1
    8716:	92 07       	cpc	r25, r18
    8718:	11 f4       	brne	.+4      	; 0x871e <_Z12processMCodei+0x138>
    871a:	0c 94 6c 6b 	jmp	0xd6d8	; 0xd6d8 <_Z12processMCodei+0x50f2>
    871e:	0c f0       	brlt	.+2      	; 0x8722 <_Z12processMCodei+0x13c>
    8720:	4d c0       	rjmp	.+154    	; 0x87bc <_Z12processMCodei+0x1d6>
    8722:	8e 32       	cpi	r24, 0x2E	; 46
    8724:	41 e0       	ldi	r20, 0x01	; 1
    8726:	94 07       	cpc	r25, r20
    8728:	11 f4       	brne	.+4      	; 0x872e <_Z12processMCodei+0x148>
    872a:	0c 94 fb 66 	jmp	0xcdf6	; 0xcdf6 <_Z12processMCodei+0x4810>
    872e:	fc f4       	brge	.+62     	; 0x876e <_Z12processMCodei+0x188>
    8730:	83 37       	cpi	r24, 0x73	; 115
    8732:	91 05       	cpc	r25, r1
    8734:	11 f4       	brne	.+4      	; 0x873a <_Z12processMCodei+0x154>
    8736:	0c 94 a3 64 	jmp	0xc946	; 0xc946 <_Z12processMCodei+0x4360>
    873a:	64 f4       	brge	.+24     	; 0x8754 <_Z12processMCodei+0x16e>
    873c:	80 35       	cpi	r24, 0x50	; 80
    873e:	91 05       	cpc	r25, r1
    8740:	11 f4       	brne	.+4      	; 0x8746 <_Z12processMCodei+0x160>
    8742:	0c 94 3a 63 	jmp	0xc674	; 0xc674 <_Z12processMCodei+0x408e>
    8746:	81 35       	cpi	r24, 0x51	; 81
    8748:	91 05       	cpc	r25, r1
    874a:	11 f4       	brne	.+4      	; 0x8750 <_Z12processMCodei+0x16a>
    874c:	0c 94 8f 63 	jmp	0xc71e	; 0xc71e <_Z12processMCodei+0x4138>
    8750:	0c 94 97 7e 	jmp	0xfd2e	; 0xfd2e <_Z12processMCodei+0x7748>
    8754:	8c 32       	cpi	r24, 0x2C	; 44
    8756:	61 e0       	ldi	r22, 0x01	; 1
    8758:	96 07       	cpc	r25, r22
    875a:	11 f4       	brne	.+4      	; 0x8760 <_Z12processMCodei+0x17a>
    875c:	0c 94 64 65 	jmp	0xcac8	; 0xcac8 <_Z12processMCodei+0x44e2>
    8760:	8d 32       	cpi	r24, 0x2D	; 45
    8762:	91 40       	sbci	r25, 0x01	; 1
    8764:	11 f4       	brne	.+4      	; 0x876a <_Z12processMCodei+0x184>
    8766:	0c 94 68 66 	jmp	0xccd0	; 0xccd0 <_Z12processMCodei+0x46ea>
    876a:	0c 94 97 7e 	jmp	0xfd2e	; 0xfd2e <_Z12processMCodei+0x7748>
    876e:	81 33       	cpi	r24, 0x31	; 49
    8770:	b1 e0       	ldi	r27, 0x01	; 1
    8772:	9b 07       	cpc	r25, r27
    8774:	11 f4       	brne	.+4      	; 0x877a <_Z12processMCodei+0x194>
    8776:	0c 94 28 69 	jmp	0xd250	; 0xd250 <_Z12processMCodei+0x4c6a>
    877a:	6c f4       	brge	.+26     	; 0x8796 <_Z12processMCodei+0x1b0>
    877c:	8f 32       	cpi	r24, 0x2F	; 47
    877e:	f1 e0       	ldi	r31, 0x01	; 1
    8780:	9f 07       	cpc	r25, r31
    8782:	11 f4       	brne	.+4      	; 0x8788 <_Z12processMCodei+0x1a2>
    8784:	0c 94 8e 67 	jmp	0xcf1c	; 0xcf1c <_Z12processMCodei+0x4936>
    8788:	80 33       	cpi	r24, 0x30	; 48
    878a:	91 40       	sbci	r25, 0x01	; 1
    878c:	11 f4       	brne	.+4      	; 0x8792 <_Z12processMCodei+0x1ac>
    878e:	0c 94 b6 67 	jmp	0xcf6c	; 0xcf6c <_Z12processMCodei+0x4986>
    8792:	0c 94 97 7e 	jmp	0xfd2e	; 0xfd2e <_Z12processMCodei+0x7748>
    8796:	8d 3b       	cpi	r24, 0xBD	; 189
    8798:	31 e0       	ldi	r19, 0x01	; 1
    879a:	93 07       	cpc	r25, r19
    879c:	11 f4       	brne	.+4      	; 0x87a2 <_Z12processMCodei+0x1bc>
    879e:	0c 94 79 6a 	jmp	0xd4f2	; 0xd4f2 <_Z12processMCodei+0x4f0c>
    87a2:	84 3f       	cpi	r24, 0xF4	; 244
    87a4:	41 e0       	ldi	r20, 0x01	; 1
    87a6:	94 07       	cpc	r25, r20
    87a8:	11 f4       	brne	.+4      	; 0x87ae <_Z12processMCodei+0x1c8>
    87aa:	0c 94 15 6b 	jmp	0xd62a	; 0xd62a <_Z12processMCodei+0x5044>
    87ae:	82 33       	cpi	r24, 0x32	; 50
    87b0:	91 40       	sbci	r25, 0x01	; 1
    87b2:	11 f0       	breq	.+4      	; 0x87b8 <_Z12processMCodei+0x1d2>
    87b4:	0c 94 97 7e 	jmp	0xfd2e	; 0xfd2e <_Z12processMCodei+0x7748>
    87b8:	0c 94 52 69 	jmp	0xd2a4	; 0xd2a4 <_Z12processMCodei+0x4cbe>
    87bc:	80 3c       	cpi	r24, 0xC0	; 192
    87be:	62 e0       	ldi	r22, 0x02	; 2
    87c0:	96 07       	cpc	r25, r22
    87c2:	11 f4       	brne	.+4      	; 0x87c8 <_Z12processMCodei+0x1e2>
    87c4:	0c 94 b5 71 	jmp	0xe36a	; 0xe36a <_Z12processMCodei+0x5d84>
    87c8:	fc f4       	brge	.+62     	; 0x8808 <_Z12processMCodei+0x222>
    87ca:	8c 3b       	cpi	r24, 0xBC	; 188
    87cc:	b2 e0       	ldi	r27, 0x02	; 2
    87ce:	9b 07       	cpc	r25, r27
    87d0:	11 f4       	brne	.+4      	; 0x87d6 <_Z12processMCodei+0x1f0>
    87d2:	0c 94 22 6c 	jmp	0xd844	; 0xd844 <_Z12processMCodei+0x525e>
    87d6:	6c f4       	brge	.+26     	; 0x87f2 <_Z12processMCodei+0x20c>
    87d8:	86 3f       	cpi	r24, 0xF6	; 246
    87da:	f1 e0       	ldi	r31, 0x01	; 1
    87dc:	9f 07       	cpc	r25, r31
    87de:	11 f4       	brne	.+4      	; 0x87e4 <_Z12processMCodei+0x1fe>
    87e0:	0c 94 c3 6b 	jmp	0xd786	; 0xd786 <_Z12processMCodei+0x51a0>
    87e4:	87 3f       	cpi	r24, 0xF7	; 247
    87e6:	91 40       	sbci	r25, 0x01	; 1
    87e8:	11 f4       	brne	.+4      	; 0x87ee <_Z12processMCodei+0x208>
    87ea:	0c 94 1a 6c 	jmp	0xd834	; 0xd834 <_Z12processMCodei+0x524e>
    87ee:	0c 94 97 7e 	jmp	0xfd2e	; 0xfd2e <_Z12processMCodei+0x7748>
    87f2:	8e 3b       	cpi	r24, 0xBE	; 190
    87f4:	32 e0       	ldi	r19, 0x02	; 2
    87f6:	93 07       	cpc	r25, r19
    87f8:	11 f4       	brne	.+4      	; 0x87fe <_Z12processMCodei+0x218>
    87fa:	0c 94 66 6f 	jmp	0xdecc	; 0xdecc <_Z12processMCodei+0x58e6>
    87fe:	14 f4       	brge	.+4      	; 0x8804 <_Z12processMCodei+0x21e>
    8800:	0c 94 10 6e 	jmp	0xdc20	; 0xdc20 <_Z12processMCodei+0x563a>
    8804:	0c 94 ca 70 	jmp	0xe194	; 0xe194 <_Z12processMCodei+0x5bae>
    8808:	8e 31       	cpi	r24, 0x1E	; 30
    880a:	53 e0       	ldi	r21, 0x03	; 3
    880c:	95 07       	cpc	r25, r21
    880e:	11 f4       	brne	.+4      	; 0x8814 <_Z12processMCodei+0x22e>
    8810:	0c 94 91 78 	jmp	0xf122	; 0xf122 <_Z12processMCodei+0x6b3c>
    8814:	6c f4       	brge	.+26     	; 0x8830 <_Z12processMCodei+0x24a>
    8816:	81 3c       	cpi	r24, 0xC1	; 193
    8818:	a2 e0       	ldi	r26, 0x02	; 2
    881a:	9a 07       	cpc	r25, r26
    881c:	11 f4       	brne	.+4      	; 0x8822 <_Z12processMCodei+0x23c>
    881e:	0c 94 35 73 	jmp	0xe66a	; 0xe66a <_Z12processMCodei+0x6084>
    8822:	82 3c       	cpi	r24, 0xC2	; 194
    8824:	92 40       	sbci	r25, 0x02	; 2
    8826:	11 f4       	brne	.+4      	; 0x882c <_Z12processMCodei+0x246>
    8828:	0c 94 cb 77 	jmp	0xef96	; 0xef96 <_Z12processMCodei+0x69b0>
    882c:	0c 94 97 7e 	jmp	0xfd2e	; 0xfd2e <_Z12processMCodei+0x7748>
    8830:	82 32       	cpi	r24, 0x22	; 34
    8832:	e3 e0       	ldi	r30, 0x03	; 3
    8834:	9e 07       	cpc	r25, r30
    8836:	11 f4       	brne	.+4      	; 0x883c <_Z12processMCodei+0x256>
    8838:	0c 94 aa 7b 	jmp	0xf754	; 0xf754 <_Z12processMCodei+0x716e>
    883c:	87 3e       	cpi	r24, 0xE7	; 231
    883e:	f3 e0       	ldi	r31, 0x03	; 3
    8840:	9f 07       	cpc	r25, r31
    8842:	11 f4       	brne	.+4      	; 0x8848 <_Z12processMCodei+0x262>
    8844:	0c 94 19 7e 	jmp	0xfc32	; 0xfc32 <_Z12processMCodei+0x764c>
    8848:	8f 31       	cpi	r24, 0x1F	; 31
    884a:	93 40       	sbci	r25, 0x03	; 3
    884c:	11 f0       	breq	.+4      	; 0x8852 <_Z12processMCodei+0x26c>
    884e:	0c 94 97 7e 	jmp	0xfd2e	; 0xfd2e <_Z12processMCodei+0x7748>
    8852:	0c 94 3b 7a 	jmp	0xf476	; 0xf476 <_Z12processMCodei+0x6e90>
	case 0: // M0 - Set real time output off
		realtime_output = 0;
    8856:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <_ZL15realtime_output>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    885a:	e6 ee       	ldi	r30, 0xE6	; 230
    885c:	f0 e1       	ldi	r31, 0x10	; 16
    885e:	64 91       	lpm	r22, Z
	while(ch)
    8860:	66 23       	and	r22, r22
    8862:	a1 f0       	breq	.+40     	; 0x888c <_Z12processMCodei+0x2a6>
    8864:	fa 83       	std	Y+2, r31	; 0x02
    8866:	e9 83       	std	Y+1, r30	; 0x01
    8868:	08 e0       	ldi	r16, 0x08	; 8
    886a:	1a e0       	ldi	r17, 0x0A	; 10
    886c:	d8 01       	movw	r26, r16
    886e:	ed 91       	ld	r30, X+
    8870:	fc 91       	ld	r31, X
    8872:	01 90       	ld	r0, Z+
    8874:	f0 81       	ld	r31, Z
    8876:	e0 2d       	mov	r30, r0
    8878:	c8 01       	movw	r24, r16
    887a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    887c:	e9 81       	ldd	r30, Y+1	; 0x01
    887e:	fa 81       	ldd	r31, Y+2	; 0x02
    8880:	31 96       	adiw	r30, 0x01	; 1
    8882:	fa 83       	std	Y+2, r31	; 0x02
    8884:	e9 83       	std	Y+1, r30	; 0x01
    8886:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    8888:	61 11       	cpse	r22, r1
    888a:	f0 cf       	rjmp	.-32     	; 0x886c <_Z12processMCodei+0x286>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    888c:	e3 ee       	ldi	r30, 0xE3	; 227
    888e:	f0 e1       	ldi	r31, 0x10	; 16
    8890:	64 91       	lpm	r22, Z
	while(ch)
    8892:	66 23       	and	r22, r22
    8894:	a1 f0       	breq	.+40     	; 0x88be <_Z12processMCodei+0x2d8>
    8896:	fa 83       	std	Y+2, r31	; 0x02
    8898:	e9 83       	std	Y+1, r30	; 0x01
    889a:	08 e0       	ldi	r16, 0x08	; 8
    889c:	1a e0       	ldi	r17, 0x0A	; 10
    889e:	d8 01       	movw	r26, r16
    88a0:	ed 91       	ld	r30, X+
    88a2:	fc 91       	ld	r31, X
    88a4:	01 90       	ld	r0, Z+
    88a6:	f0 81       	ld	r31, Z
    88a8:	e0 2d       	mov	r30, r0
    88aa:	c8 01       	movw	r24, r16
    88ac:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    88ae:	e9 81       	ldd	r30, Y+1	; 0x01
    88b0:	fa 81       	ldd	r31, Y+2	; 0x02
    88b2:	31 96       	adiw	r30, 0x01	; 1
    88b4:	fa 83       	std	Y+2, r31	; 0x02
    88b6:	e9 83       	std	Y+1, r30	; 0x01
    88b8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    88ba:	61 11       	cpse	r22, r1
    88bc:	f0 cf       	rjmp	.-32     	; 0x889e <_Z12processMCodei+0x2b8>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    88be:	e0 ee       	ldi	r30, 0xE0	; 224
    88c0:	f0 e1       	ldi	r31, 0x10	; 16
    88c2:	64 91       	lpm	r22, Z
	while(ch)
    88c4:	66 23       	and	r22, r22
    88c6:	a1 f0       	breq	.+40     	; 0x88f0 <_Z12processMCodei+0x30a>
    88c8:	fa 83       	std	Y+2, r31	; 0x02
    88ca:	e9 83       	std	Y+1, r30	; 0x01
    88cc:	08 e0       	ldi	r16, 0x08	; 8
    88ce:	1a e0       	ldi	r17, 0x0A	; 10
    88d0:	d8 01       	movw	r26, r16
    88d2:	ed 91       	ld	r30, X+
    88d4:	fc 91       	ld	r31, X
    88d6:	01 90       	ld	r0, Z+
    88d8:	f0 81       	ld	r31, Z
    88da:	e0 2d       	mov	r30, r0
    88dc:	c8 01       	movw	r24, r16
    88de:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    88e0:	e9 81       	ldd	r30, Y+1	; 0x01
    88e2:	fa 81       	ldd	r31, Y+2	; 0x02
    88e4:	31 96       	adiw	r30, 0x01	; 1
    88e6:	fa 83       	std	Y+2, r31	; 0x02
    88e8:	e9 83       	std	Y+1, r30	; 0x01
    88ea:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    88ec:	61 11       	cpse	r22, r1
    88ee:	f0 cf       	rjmp	.-32     	; 0x88d0 <_Z12processMCodei+0x2ea>
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM("M0");
		SERIAL_PGMLN(MSG_TERMINATE);
    88f0:	88 e0       	ldi	r24, 0x08	; 8
    88f2:	9a e0       	ldi	r25, 0x0A	; 10
    88f4:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		SERIAL_PORT.flush();
    88f8:	88 e0       	ldi	r24, 0x08	; 8
    88fa:	9a e0       	ldi	r25, 0x0A	; 10
    88fc:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
		break;
    8900:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		
	case 1: // M1 - Set real time output on
		realtime_output = 1;
    8904:	81 e0       	ldi	r24, 0x01	; 1
    8906:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_ZL15realtime_output>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    890a:	ee ed       	ldi	r30, 0xDE	; 222
    890c:	f0 e1       	ldi	r31, 0x10	; 16
    890e:	64 91       	lpm	r22, Z
	while(ch)
    8910:	66 23       	and	r22, r22
    8912:	a1 f0       	breq	.+40     	; 0x893c <_Z12processMCodei+0x356>
    8914:	fa 83       	std	Y+2, r31	; 0x02
    8916:	e9 83       	std	Y+1, r30	; 0x01
    8918:	08 e0       	ldi	r16, 0x08	; 8
    891a:	1a e0       	ldi	r17, 0x0A	; 10
    891c:	d8 01       	movw	r26, r16
    891e:	ed 91       	ld	r30, X+
    8920:	fc 91       	ld	r31, X
    8922:	01 90       	ld	r0, Z+
    8924:	f0 81       	ld	r31, Z
    8926:	e0 2d       	mov	r30, r0
    8928:	c8 01       	movw	r24, r16
    892a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    892c:	e9 81       	ldd	r30, Y+1	; 0x01
    892e:	fa 81       	ldd	r31, Y+2	; 0x02
    8930:	31 96       	adiw	r30, 0x01	; 1
    8932:	fa 83       	std	Y+2, r31	; 0x02
    8934:	e9 83       	std	Y+1, r30	; 0x01
    8936:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    8938:	61 11       	cpse	r22, r1
    893a:	f0 cf       	rjmp	.-32     	; 0x891c <_Z12processMCodei+0x336>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    893c:	eb ed       	ldi	r30, 0xDB	; 219
    893e:	f0 e1       	ldi	r31, 0x10	; 16
    8940:	64 91       	lpm	r22, Z
	while(ch)
    8942:	66 23       	and	r22, r22
    8944:	a1 f0       	breq	.+40     	; 0x896e <_Z12processMCodei+0x388>
    8946:	fa 83       	std	Y+2, r31	; 0x02
    8948:	e9 83       	std	Y+1, r30	; 0x01
    894a:	08 e0       	ldi	r16, 0x08	; 8
    894c:	1a e0       	ldi	r17, 0x0A	; 10
    894e:	d8 01       	movw	r26, r16
    8950:	ed 91       	ld	r30, X+
    8952:	fc 91       	ld	r31, X
    8954:	01 90       	ld	r0, Z+
    8956:	f0 81       	ld	r31, Z
    8958:	e0 2d       	mov	r30, r0
    895a:	c8 01       	movw	r24, r16
    895c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    895e:	e9 81       	ldd	r30, Y+1	; 0x01
    8960:	fa 81       	ldd	r31, Y+2	; 0x02
    8962:	31 96       	adiw	r30, 0x01	; 1
    8964:	fa 83       	std	Y+2, r31	; 0x02
    8966:	e9 83       	std	Y+1, r30	; 0x01
    8968:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    896a:	61 11       	cpse	r22, r1
    896c:	f0 cf       	rjmp	.-32     	; 0x894e <_Z12processMCodei+0x368>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    896e:	e8 ed       	ldi	r30, 0xD8	; 216
    8970:	f0 e1       	ldi	r31, 0x10	; 16
    8972:	64 91       	lpm	r22, Z
	while(ch)
    8974:	66 23       	and	r22, r22
    8976:	a1 f0       	breq	.+40     	; 0x89a0 <_Z12processMCodei+0x3ba>
    8978:	fa 83       	std	Y+2, r31	; 0x02
    897a:	e9 83       	std	Y+1, r30	; 0x01
    897c:	08 e0       	ldi	r16, 0x08	; 8
    897e:	1a e0       	ldi	r17, 0x0A	; 10
    8980:	d8 01       	movw	r26, r16
    8982:	ed 91       	ld	r30, X+
    8984:	fc 91       	ld	r31, X
    8986:	01 90       	ld	r0, Z+
    8988:	f0 81       	ld	r31, Z
    898a:	e0 2d       	mov	r30, r0
    898c:	c8 01       	movw	r24, r16
    898e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    8990:	e9 81       	ldd	r30, Y+1	; 0x01
    8992:	fa 81       	ldd	r31, Y+2	; 0x02
    8994:	31 96       	adiw	r30, 0x01	; 1
    8996:	fa 83       	std	Y+2, r31	; 0x02
    8998:	e9 83       	std	Y+1, r30	; 0x01
    899a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    899c:	61 11       	cpse	r22, r1
    899e:	f0 cf       	rjmp	.-32     	; 0x8980 <_Z12processMCodei+0x39a>
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM("M1");
		SERIAL_PGMLN(MSG_TERMINATE);
    89a0:	88 e0       	ldi	r24, 0x08	; 8
    89a2:	9a e0       	ldi	r25, 0x0A	; 10
    89a4:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		SERIAL_PORT.flush();
    89a8:	88 e0       	ldi	r24, 0x08	; 8
    89aa:	9a e0       	ldi	r25, 0x0A	; 10
    89ac:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
		break;
    89b0:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		
	//CHANNEL 1-10, NO CHANNEL ZERO!	
	case 2: // M2 [Z<slot>] [C<channel> W<encoder pin> E<default dir>] - set smart controller (default) with optional encoder pin per channel, can be issued multiple times
		 if(code_seen('Z')) {
    89b4:	8a e5       	ldi	r24, 0x5A	; 90
    89b6:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    89ba:	88 23       	and	r24, r24
    89bc:	39 f0       	breq	.+14     	; 0x89cc <_Z12processMCodei+0x3e6>
			 motorController = code_value();
    89be:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    89c2:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    89c6:	7a 83       	std	Y+2, r23	; 0x02
    89c8:	69 83       	std	Y+1, r22	; 0x01
    89ca:	02 c0       	rjmp	.+4      	; 0x89d0 <_Z12processMCodei+0x3ea>
  /*-------------------------------------
  * M Code processing
  *--------------------------------------
  */
  void processMCode(int cval) {
	  int motorController = 0; 
    89cc:	1a 82       	std	Y+2, r1	; 0x02
    89ce:	19 82       	std	Y+1, r1	; 0x01
	//CHANNEL 1-10, NO CHANNEL ZERO!	
	case 2: // M2 [Z<slot>] [C<channel> W<encoder pin> E<default dir>] - set smart controller (default) with optional encoder pin per channel, can be issued multiple times
		 if(code_seen('Z')) {
			 motorController = code_value();
		 }
		if(code_seen('C')) {
    89d0:	83 e4       	ldi	r24, 0x43	; 67
    89d2:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    89d6:	88 23       	and	r24, r24
    89d8:	11 f4       	brne	.+4      	; 0x89de <_Z12processMCodei+0x3f8>
    89da:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			channel = code_value();
    89de:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    89e2:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    89e6:	60 93 22 13 	sts	0x1322, r22	; 0x801322 <channel>
			if(channel <= 0) {
    89ea:	66 23       	and	r22, r22
    89ec:	11 f4       	brne	.+4      	; 0x89f2 <_Z12processMCodei+0x40c>
    89ee:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
				break;
			}
			if(code_seen('W')) {
    89f2:	87 e5       	ldi	r24, 0x57	; 87
    89f4:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    89f8:	88 23       	and	r24, r24
    89fa:	a9 f0       	breq	.+42     	; 0x8a26 <_Z12processMCodei+0x440>
				pin_number = code_value();
    89fc:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    8a00:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    8a04:	46 2f       	mov	r20, r22
    8a06:	60 93 1c 13 	sts	0x131C, r22	; 0x80131c <pin_number>
    8a0a:	70 93 1d 13 	sts	0x131D, r23	; 0x80131d <pin_number+0x1>
				motorControl[motorController]->createEncoder(channel, pin_number);
    8a0e:	e9 81       	ldd	r30, Y+1	; 0x01
    8a10:	fa 81       	ldd	r31, Y+2	; 0x02
    8a12:	ee 0f       	add	r30, r30
    8a14:	ff 1f       	adc	r31, r31
    8a16:	e9 50       	subi	r30, 0x09	; 9
    8a18:	fd 4e       	sbci	r31, 0xED	; 237
    8a1a:	60 91 22 13 	lds	r22, 0x1322	; 0x801322 <channel>
    8a1e:	80 81       	ld	r24, Z
    8a20:	91 81       	ldd	r25, Z+1	; 0x01
    8a22:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <_ZN20AbstractMotorControl13createEncoderEhh>
			}
			if(code_seen('E')) {
    8a26:	85 e4       	ldi	r24, 0x45	; 69
    8a28:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    8a2c:	88 23       	and	r24, r24
    8a2e:	d9 f0       	breq	.+54     	; 0x8a66 <_Z12processMCodei+0x480>
				motorControl[motorController]->setDefaultDirection(channel, code_value());
    8a30:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    8a34:	e9 81       	ldd	r30, Y+1	; 0x01
    8a36:	fa 81       	ldd	r31, Y+2	; 0x02
    8a38:	ee 0f       	add	r30, r30
    8a3a:	ff 1f       	adc	r31, r31
    8a3c:	e9 50       	subi	r30, 0x09	; 9
    8a3e:	fd 4e       	sbci	r31, 0xED	; 237
	bool checkUltrasonicShutdown(void);
	bool checkEncoderShutdown(void);
	void createEncoder(uint8_t channel, uint8_t encode_pin);
	void setCurrentDirection(uint8_t ch, uint8_t val) { currentDirection[ch-1] = val; }
	// If the wheel is mirrored to speed commands or commutation, 0 - normal, 1 - mirror
	void setDefaultDirection(uint8_t ch, uint8_t val) { defaultDirection[ch-1] = val; }
    8a40:	20 81       	ld	r18, Z
    8a42:	31 81       	ldd	r19, Z+1	; 0x01
    8a44:	3a 83       	std	Y+2, r19	; 0x02
    8a46:	29 83       	std	Y+1, r18	; 0x01
    8a48:	20 91 22 13 	lds	r18, 0x1322	; 0x801322 <channel>
    8a4c:	49 81       	ldd	r20, Y+1	; 0x01
    8a4e:	5a 81       	ldd	r21, Y+2	; 0x02
    8a50:	42 0f       	add	r20, r18
    8a52:	51 1d       	adc	r21, r1
    8a54:	4a 57       	subi	r20, 0x7A	; 122
    8a56:	5f 4f       	sbci	r21, 0xFF	; 255
    8a58:	5a 83       	std	Y+2, r21	; 0x02
    8a5a:	49 83       	std	Y+1, r20	; 0x01
    8a5c:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    8a60:	a9 81       	ldd	r26, Y+1	; 0x01
    8a62:	ba 81       	ldd	r27, Y+2	; 0x02
    8a64:	6c 93       	st	X, r22
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    8a66:	e6 ed       	ldi	r30, 0xD6	; 214
    8a68:	f0 e1       	ldi	r31, 0x10	; 16
    8a6a:	64 91       	lpm	r22, Z
	while(ch)
    8a6c:	66 23       	and	r22, r22
    8a6e:	a1 f0       	breq	.+40     	; 0x8a98 <_Z12processMCodei+0x4b2>
    8a70:	fa 83       	std	Y+2, r31	; 0x02
    8a72:	e9 83       	std	Y+1, r30	; 0x01
    8a74:	08 e0       	ldi	r16, 0x08	; 8
    8a76:	1a e0       	ldi	r17, 0x0A	; 10
    8a78:	d8 01       	movw	r26, r16
    8a7a:	ed 91       	ld	r30, X+
    8a7c:	fc 91       	ld	r31, X
    8a7e:	01 90       	ld	r0, Z+
    8a80:	f0 81       	ld	r31, Z
    8a82:	e0 2d       	mov	r30, r0
    8a84:	c8 01       	movw	r24, r16
    8a86:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    8a88:	e9 81       	ldd	r30, Y+1	; 0x01
    8a8a:	fa 81       	ldd	r31, Y+2	; 0x02
    8a8c:	31 96       	adiw	r30, 0x01	; 1
    8a8e:	fa 83       	std	Y+2, r31	; 0x02
    8a90:	e9 83       	std	Y+1, r30	; 0x01
    8a92:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    8a94:	61 11       	cpse	r22, r1
    8a96:	f0 cf       	rjmp	.-32     	; 0x8a78 <_Z12processMCodei+0x492>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    8a98:	e3 ed       	ldi	r30, 0xD3	; 211
    8a9a:	f0 e1       	ldi	r31, 0x10	; 16
    8a9c:	64 91       	lpm	r22, Z
	while(ch)
    8a9e:	66 23       	and	r22, r22
    8aa0:	a1 f0       	breq	.+40     	; 0x8aca <_Z12processMCodei+0x4e4>
    8aa2:	fa 83       	std	Y+2, r31	; 0x02
    8aa4:	e9 83       	std	Y+1, r30	; 0x01
    8aa6:	08 e0       	ldi	r16, 0x08	; 8
    8aa8:	1a e0       	ldi	r17, 0x0A	; 10
    8aaa:	d8 01       	movw	r26, r16
    8aac:	ed 91       	ld	r30, X+
    8aae:	fc 91       	ld	r31, X
    8ab0:	01 90       	ld	r0, Z+
    8ab2:	f0 81       	ld	r31, Z
    8ab4:	e0 2d       	mov	r30, r0
    8ab6:	c8 01       	movw	r24, r16
    8ab8:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    8aba:	e9 81       	ldd	r30, Y+1	; 0x01
    8abc:	fa 81       	ldd	r31, Y+2	; 0x02
    8abe:	31 96       	adiw	r30, 0x01	; 1
    8ac0:	fa 83       	std	Y+2, r31	; 0x02
    8ac2:	e9 83       	std	Y+1, r30	; 0x01
    8ac4:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    8ac6:	61 11       	cpse	r22, r1
    8ac8:	f0 cf       	rjmp	.-32     	; 0x8aaa <_Z12processMCodei+0x4c4>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    8aca:	e0 ed       	ldi	r30, 0xD0	; 208
    8acc:	f0 e1       	ldi	r31, 0x10	; 16
    8ace:	64 91       	lpm	r22, Z
	while(ch)
    8ad0:	66 23       	and	r22, r22
    8ad2:	a1 f0       	breq	.+40     	; 0x8afc <_Z12processMCodei+0x516>
    8ad4:	fa 83       	std	Y+2, r31	; 0x02
    8ad6:	e9 83       	std	Y+1, r30	; 0x01
    8ad8:	08 e0       	ldi	r16, 0x08	; 8
    8ada:	1a e0       	ldi	r17, 0x0A	; 10
    8adc:	d8 01       	movw	r26, r16
    8ade:	ed 91       	ld	r30, X+
    8ae0:	fc 91       	ld	r31, X
    8ae2:	01 90       	ld	r0, Z+
    8ae4:	f0 81       	ld	r31, Z
    8ae6:	e0 2d       	mov	r30, r0
    8ae8:	c8 01       	movw	r24, r16
    8aea:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    8aec:	e9 81       	ldd	r30, Y+1	; 0x01
    8aee:	fa 81       	ldd	r31, Y+2	; 0x02
    8af0:	31 96       	adiw	r30, 0x01	; 1
    8af2:	fa 83       	std	Y+2, r31	; 0x02
    8af4:	e9 83       	std	Y+1, r30	; 0x01
    8af6:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    8af8:	61 11       	cpse	r22, r1
    8afa:	f0 cf       	rjmp	.-32     	; 0x8adc <_Z12processMCodei+0x4f6>
			}
			SERIAL_PGM(MSG_BEGIN);
			SERIAL_PGM("M2");
			SERIAL_PGMLN(MSG_TERMINATE);
    8afc:	88 e0       	ldi	r24, 0x08	; 8
    8afe:	9a e0       	ldi	r25, 0x0A	; 10
    8b00:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
			SERIAL_PORT.flush();
    8b04:	88 e0       	ldi	r24, 0x08	; 8
    8b06:	9a e0       	ldi	r25, 0x0A	; 10
    8b08:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    8b0c:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
	// 1 - Toggle on compare match
	// 2 - Clear on match
	// 3 - Set on match
	// For motor operation and general purpose PWM, mode 2 the most universally applicable.
	case 3: // M3 [Z<slot>] P<pin> C<channel> D<direction pin> E<default dir> W<encoder pin> [R<resolution 8,9,10 bits>] [X<prescale 0-7>]
		timer_res = 8; // resolution in bits
    8b10:	88 e0       	ldi	r24, 0x08	; 8
    8b12:	90 e0       	ldi	r25, 0x00	; 0
    8b14:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <timer_res+0x1>
    8b18:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <timer_res>
		timer_pre = 1; // 1 is no prescale
    8b1c:	81 e0       	ldi	r24, 0x01	; 1
    8b1e:	90 e0       	ldi	r25, 0x00	; 0
    8b20:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <timer_pre+0x1>
    8b24:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <timer_pre>
		pin_number = -1;
    8b28:	8f ef       	ldi	r24, 0xFF	; 255
    8b2a:	9f ef       	ldi	r25, 0xFF	; 255
    8b2c:	90 93 1d 13 	sts	0x131D, r25	; 0x80131d <pin_number+0x1>
    8b30:	80 93 1c 13 	sts	0x131C, r24	; 0x80131c <pin_number>
		encode_pin = 0;
    8b34:	10 92 13 13 	sts	0x1313, r1	; 0x801313 <encode_pin+0x1>
    8b38:	10 92 12 13 	sts	0x1312, r1	; 0x801312 <encode_pin>
		if(code_seen('Z')) {
    8b3c:	8a e5       	ldi	r24, 0x5A	; 90
    8b3e:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    8b42:	88 23       	and	r24, r24
    8b44:	39 f0       	breq	.+14     	; 0x8b54 <_Z12processMCodei+0x56e>
			motorController = code_value();
    8b46:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    8b4a:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    8b4e:	7a 83       	std	Y+2, r23	; 0x02
    8b50:	69 83       	std	Y+1, r22	; 0x01
    8b52:	02 c0       	rjmp	.+4      	; 0x8b58 <_Z12processMCodei+0x572>
  /*-------------------------------------
  * M Code processing
  *--------------------------------------
  */
  void processMCode(int cval) {
	  int motorController = 0; 
    8b54:	1a 82       	std	Y+2, r1	; 0x02
    8b56:	19 82       	std	Y+1, r1	; 0x01
		encode_pin = 0;
		if(code_seen('Z')) {
			motorController = code_value();
		}
	 // motorControl = (AbstractMotorControl*)&hBridgeDriver;
	 if(motorControl[motorController]) {
    8b58:	e9 81       	ldd	r30, Y+1	; 0x01
    8b5a:	fa 81       	ldd	r31, Y+2	; 0x02
    8b5c:	ee 0f       	add	r30, r30
    8b5e:	ff 1f       	adc	r31, r31
    8b60:	e9 50       	subi	r30, 0x09	; 9
    8b62:	fd 4e       	sbci	r31, 0xED	; 237
    8b64:	80 81       	ld	r24, Z
    8b66:	91 81       	ldd	r25, Z+1	; 0x01
    8b68:	00 97       	sbiw	r24, 0x00	; 0
    8b6a:	11 f4       	brne	.+4      	; 0x8b70 <_Z12processMCodei+0x58a>
    8b6c:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
	~HBridgeDriver();
	void resetMaxMotorPower() { MAXMOTORPOWER = 255; }
	int commandMotorPower(uint8_t ch, int16_t p);
	int commandEmergencyStop(int status);
	int isConnected(void) { return true; }
	void setMotors(PWM** pwm) { ppwms = pwm; }
    8b70:	fc 01       	movw	r30, r24
    8b72:	e8 51       	subi	r30, 0x18	; 24
    8b74:	ff 4f       	sbci	r31, 0xFF	; 255
    8b76:	23 e2       	ldi	r18, 0x23	; 35
    8b78:	33 e1       	ldi	r19, 0x13	; 19
    8b7a:	31 83       	std	Z+1, r19	; 0x01
    8b7c:	20 83       	st	Z, r18
	void setDirectionPins(Digital** dpin) { pdigitals = dpin; }
    8b7e:	32 96       	adiw	r30, 0x02	; 2
    8b80:	2b e3       	ldi	r18, 0x3B	; 59
    8b82:	33 e1       	ldi	r19, 0x13	; 19
    8b84:	31 83       	std	Z+1, r19	; 0x01
    8b86:	20 83       	st	Z, r18
	  ((HBridgeDriver*)motorControl[motorController])->setMotors((PWM**)&ppwms);
	  ((HBridgeDriver*)motorControl[motorController])->setDirectionPins((Digital**)&pdigitals);
	  if(code_seen('P')) {
    8b88:	80 e5       	ldi	r24, 0x50	; 80
    8b8a:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    8b8e:	88 23       	and	r24, r24
    8b90:	11 f4       	brne	.+4      	; 0x8b96 <_Z12processMCodei+0x5b0>
    8b92:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
          pin_number = code_value();
    8b96:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    8b9a:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    8b9e:	70 93 1d 13 	sts	0x131D, r23	; 0x80131d <pin_number+0x1>
    8ba2:	60 93 1c 13 	sts	0x131C, r22	; 0x80131c <pin_number>
	  } else {
		 break;
	  }
      if(code_seen('C')) {
    8ba6:	83 e4       	ldi	r24, 0x43	; 67
    8ba8:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    8bac:	88 23       	and	r24, r24
    8bae:	11 f4       	brne	.+4      	; 0x8bb4 <_Z12processMCodei+0x5ce>
    8bb0:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
        channel = code_value();
    8bb4:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    8bb8:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    8bbc:	60 93 22 13 	sts	0x1322, r22	; 0x801322 <channel>
		if(channel <= 0) {
    8bc0:	66 23       	and	r22, r22
    8bc2:	11 f4       	brne	.+4      	; 0x8bc8 <_Z12processMCodei+0x5e2>
    8bc4:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			break;
		}
		if( code_seen('D')) {
    8bc8:	84 e4       	ldi	r24, 0x44	; 68
    8bca:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    8bce:	88 23       	and	r24, r24
    8bd0:	11 f4       	brne	.+4      	; 0x8bd6 <_Z12processMCodei+0x5f0>
    8bd2:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			dir_pin = code_value();
    8bd6:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    8bda:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    8bde:	70 93 19 13 	sts	0x1319, r23	; 0x801319 <dir_pin+0x1>
    8be2:	60 93 18 13 	sts	0x1318, r22	; 0x801318 <dir_pin>
		} else {
			break;
		}
		if( code_seen('E')) {
    8be6:	85 e4       	ldi	r24, 0x45	; 69
    8be8:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    8bec:	88 23       	and	r24, r24
    8bee:	11 f4       	brne	.+4      	; 0x8bf4 <_Z12processMCodei+0x60e>
    8bf0:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			dir_default = code_value();
    8bf4:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    8bf8:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    8bfc:	70 93 17 13 	sts	0x1317, r23	; 0x801317 <dir_default+0x1>
    8c00:	60 93 16 13 	sts	0x1316, r22	; 0x801316 <dir_default>
		} else {
			break;
		}
		if( code_seen('W')) {
    8c04:	87 e5       	ldi	r24, 0x57	; 87
    8c06:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    8c0a:	88 23       	and	r24, r24
    8c0c:	41 f0       	breq	.+16     	; 0x8c1e <_Z12processMCodei+0x638>
			encode_pin = code_value();
    8c0e:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    8c12:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    8c16:	70 93 13 13 	sts	0x1313, r23	; 0x801313 <encode_pin+0x1>
    8c1a:	60 93 12 13 	sts	0x1312, r22	; 0x801312 <encode_pin>
		}
		if(code_seen('X')) {
    8c1e:	88 e5       	ldi	r24, 0x58	; 88
    8c20:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    8c24:	88 23       	and	r24, r24
    8c26:	41 f0       	breq	.+16     	; 0x8c38 <_Z12processMCodei+0x652>
			timer_pre = code_value();
    8c28:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    8c2c:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    8c30:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <timer_pre+0x1>
    8c34:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <timer_pre>
		}
		if( code_seen('R')) {
    8c38:	82 e5       	ldi	r24, 0x52	; 82
    8c3a:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    8c3e:	88 23       	and	r24, r24
    8c40:	41 f0       	breq	.+16     	; 0x8c52 <_Z12processMCodei+0x66c>
			timer_res = code_value();
    8c42:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    8c46:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    8c4a:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <timer_res+0x1>
    8c4e:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <timer_res>
		}
		((HBridgeDriver*)motorControl[motorController])->createPWM(channel, pin_number, dir_pin, dir_default, timer_pre, timer_res);
    8c52:	c0 90 08 02 	lds	r12, 0x0208	; 0x800208 <timer_res>
    8c56:	d0 90 09 02 	lds	r13, 0x0209	; 0x800209 <timer_res+0x1>
    8c5a:	e0 90 06 02 	lds	r14, 0x0206	; 0x800206 <timer_pre>
    8c5e:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <timer_pre+0x1>
    8c62:	e9 81       	ldd	r30, Y+1	; 0x01
    8c64:	fa 81       	ldd	r31, Y+2	; 0x02
    8c66:	ee 0f       	add	r30, r30
    8c68:	ff 1f       	adc	r31, r31
    8c6a:	e9 50       	subi	r30, 0x09	; 9
    8c6c:	fd 4e       	sbci	r31, 0xED	; 237
    8c6e:	00 91 16 13 	lds	r16, 0x1316	; 0x801316 <dir_default>
    8c72:	20 91 18 13 	lds	r18, 0x1318	; 0x801318 <dir_pin>
    8c76:	40 91 1c 13 	lds	r20, 0x131C	; 0x80131c <pin_number>
    8c7a:	60 91 22 13 	lds	r22, 0x1322	; 0x801322 <channel>
    8c7e:	80 81       	ld	r24, Z
    8c80:	91 81       	ldd	r25, Z+1	; 0x01
    8c82:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_ZN13HBridgeDriver9createPWMEhhhhii>
		if(encode_pin) {
    8c86:	40 91 12 13 	lds	r20, 0x1312	; 0x801312 <encode_pin>
    8c8a:	50 91 13 13 	lds	r21, 0x1313	; 0x801313 <encode_pin+0x1>
    8c8e:	41 15       	cp	r20, r1
    8c90:	51 05       	cpc	r21, r1
    8c92:	61 f0       	breq	.+24     	; 0x8cac <_Z12processMCodei+0x6c6>
			motorControl[motorController]->createEncoder(channel, encode_pin);
    8c94:	e9 81       	ldd	r30, Y+1	; 0x01
    8c96:	fa 81       	ldd	r31, Y+2	; 0x02
    8c98:	ee 0f       	add	r30, r30
    8c9a:	ff 1f       	adc	r31, r31
    8c9c:	e9 50       	subi	r30, 0x09	; 9
    8c9e:	fd 4e       	sbci	r31, 0xED	; 237
    8ca0:	60 91 22 13 	lds	r22, 0x1322	; 0x801322 <channel>
    8ca4:	80 81       	ld	r24, Z
    8ca6:	91 81       	ldd	r25, Z+1	; 0x01
    8ca8:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <_ZN20AbstractMotorControl13createEncoderEhh>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    8cac:	ee ec       	ldi	r30, 0xCE	; 206
    8cae:	f0 e1       	ldi	r31, 0x10	; 16
    8cb0:	64 91       	lpm	r22, Z
	while(ch)
    8cb2:	66 23       	and	r22, r22
    8cb4:	a1 f0       	breq	.+40     	; 0x8cde <_Z12processMCodei+0x6f8>
    8cb6:	fa 83       	std	Y+2, r31	; 0x02
    8cb8:	e9 83       	std	Y+1, r30	; 0x01
    8cba:	08 e0       	ldi	r16, 0x08	; 8
    8cbc:	1a e0       	ldi	r17, 0x0A	; 10
    8cbe:	d8 01       	movw	r26, r16
    8cc0:	ed 91       	ld	r30, X+
    8cc2:	fc 91       	ld	r31, X
    8cc4:	01 90       	ld	r0, Z+
    8cc6:	f0 81       	ld	r31, Z
    8cc8:	e0 2d       	mov	r30, r0
    8cca:	c8 01       	movw	r24, r16
    8ccc:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    8cce:	e9 81       	ldd	r30, Y+1	; 0x01
    8cd0:	fa 81       	ldd	r31, Y+2	; 0x02
    8cd2:	31 96       	adiw	r30, 0x01	; 1
    8cd4:	fa 83       	std	Y+2, r31	; 0x02
    8cd6:	e9 83       	std	Y+1, r30	; 0x01
    8cd8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    8cda:	61 11       	cpse	r22, r1
    8cdc:	f0 cf       	rjmp	.-32     	; 0x8cbe <_Z12processMCodei+0x6d8>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    8cde:	eb ec       	ldi	r30, 0xCB	; 203
    8ce0:	f0 e1       	ldi	r31, 0x10	; 16
    8ce2:	64 91       	lpm	r22, Z
	while(ch)
    8ce4:	66 23       	and	r22, r22
    8ce6:	a1 f0       	breq	.+40     	; 0x8d10 <_Z12processMCodei+0x72a>
    8ce8:	fa 83       	std	Y+2, r31	; 0x02
    8cea:	e9 83       	std	Y+1, r30	; 0x01
    8cec:	08 e0       	ldi	r16, 0x08	; 8
    8cee:	1a e0       	ldi	r17, 0x0A	; 10
    8cf0:	d8 01       	movw	r26, r16
    8cf2:	ed 91       	ld	r30, X+
    8cf4:	fc 91       	ld	r31, X
    8cf6:	01 90       	ld	r0, Z+
    8cf8:	f0 81       	ld	r31, Z
    8cfa:	e0 2d       	mov	r30, r0
    8cfc:	c8 01       	movw	r24, r16
    8cfe:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    8d00:	e9 81       	ldd	r30, Y+1	; 0x01
    8d02:	fa 81       	ldd	r31, Y+2	; 0x02
    8d04:	31 96       	adiw	r30, 0x01	; 1
    8d06:	fa 83       	std	Y+2, r31	; 0x02
    8d08:	e9 83       	std	Y+1, r30	; 0x01
    8d0a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    8d0c:	61 11       	cpse	r22, r1
    8d0e:	f0 cf       	rjmp	.-32     	; 0x8cf0 <_Z12processMCodei+0x70a>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    8d10:	e8 ec       	ldi	r30, 0xC8	; 200
    8d12:	f0 e1       	ldi	r31, 0x10	; 16
    8d14:	64 91       	lpm	r22, Z
	while(ch)
    8d16:	66 23       	and	r22, r22
    8d18:	a1 f0       	breq	.+40     	; 0x8d42 <_Z12processMCodei+0x75c>
    8d1a:	fa 83       	std	Y+2, r31	; 0x02
    8d1c:	e9 83       	std	Y+1, r30	; 0x01
    8d1e:	08 e0       	ldi	r16, 0x08	; 8
    8d20:	1a e0       	ldi	r17, 0x0A	; 10
    8d22:	d8 01       	movw	r26, r16
    8d24:	ed 91       	ld	r30, X+
    8d26:	fc 91       	ld	r31, X
    8d28:	01 90       	ld	r0, Z+
    8d2a:	f0 81       	ld	r31, Z
    8d2c:	e0 2d       	mov	r30, r0
    8d2e:	c8 01       	movw	r24, r16
    8d30:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    8d32:	e9 81       	ldd	r30, Y+1	; 0x01
    8d34:	fa 81       	ldd	r31, Y+2	; 0x02
    8d36:	31 96       	adiw	r30, 0x01	; 1
    8d38:	fa 83       	std	Y+2, r31	; 0x02
    8d3a:	e9 83       	std	Y+1, r30	; 0x01
    8d3c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    8d3e:	61 11       	cpse	r22, r1
    8d40:	f0 cf       	rjmp	.-32     	; 0x8d22 <_Z12processMCodei+0x73c>
		}
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM("M3");
		SERIAL_PGMLN(MSG_TERMINATE);
    8d42:	88 e0       	ldi	r24, 0x08	; 8
    8d44:	9a e0       	ldi	r25, 0x0A	; 10
    8d46:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		SERIAL_PORT.flush();
    8d4a:	88 e0       	ldi	r24, 0x08	; 8
    8d4c:	9a e0       	ldi	r25, 0x0A	; 10
    8d4e:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    8d52:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
	// Split bridge or 2 half bridge motor controller. Takes 2 inputs: one for forward,called P, one for backward,called Q, then motor channel, 
	// and then D, an enable pin. Finally, W<encoder pin>  to receive hall wheel sensor signals and 
	// optionally PWM timer setup [R<resolution 8,9,10 bits>] [X<prescale 0-7>].
	// Everything derived from HBridgeDriver can be done here.
	case 4:// M4 [Z<slot>] P<pin> Q<pin> C<channel> D<enable pin> E<default dir> [W<encoder pin>] [R<resolution 8,9,10 bits>] [X<prescale 0-7>]
	  timer_res = 8; // resolution in bits
    8d56:	88 e0       	ldi	r24, 0x08	; 8
    8d58:	90 e0       	ldi	r25, 0x00	; 0
    8d5a:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <timer_res+0x1>
    8d5e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <timer_res>
	  timer_pre = 1; // 1 is no prescale
    8d62:	81 e0       	ldi	r24, 0x01	; 1
    8d64:	90 e0       	ldi	r25, 0x00	; 0
    8d66:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <timer_pre+0x1>
    8d6a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <timer_pre>
	  pin_number = -1;
    8d6e:	8f ef       	ldi	r24, 0xFF	; 255
    8d70:	9f ef       	ldi	r25, 0xFF	; 255
    8d72:	90 93 1d 13 	sts	0x131D, r25	; 0x80131d <pin_number+0x1>
    8d76:	80 93 1c 13 	sts	0x131C, r24	; 0x80131c <pin_number>
	  pin_numberB = -1;
    8d7a:	90 93 1b 13 	sts	0x131B, r25	; 0x80131b <pin_numberB+0x1>
    8d7e:	80 93 1a 13 	sts	0x131A, r24	; 0x80131a <pin_numberB>
	  encode_pin = 0;
    8d82:	10 92 13 13 	sts	0x1313, r1	; 0x801313 <encode_pin+0x1>
    8d86:	10 92 12 13 	sts	0x1312, r1	; 0x801312 <encode_pin>
	  if(code_seen('Z')) {
    8d8a:	8a e5       	ldi	r24, 0x5A	; 90
    8d8c:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    8d90:	88 23       	and	r24, r24
    8d92:	39 f0       	breq	.+14     	; 0x8da2 <_Z12processMCodei+0x7bc>
		motorController = code_value();
    8d94:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    8d98:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    8d9c:	7a 83       	std	Y+2, r23	; 0x02
    8d9e:	69 83       	std	Y+1, r22	; 0x01
    8da0:	02 c0       	rjmp	.+4      	; 0x8da6 <_Z12processMCodei+0x7c0>
  /*-------------------------------------
  * M Code processing
  *--------------------------------------
  */
  void processMCode(int cval) {
	  int motorController = 0; 
    8da2:	1a 82       	std	Y+2, r1	; 0x02
    8da4:	19 82       	std	Y+1, r1	; 0x01
	  pin_numberB = -1;
	  encode_pin = 0;
	  if(code_seen('Z')) {
		motorController = code_value();
	  }
	  if(motorControl[motorController]) {
    8da6:	e9 81       	ldd	r30, Y+1	; 0x01
    8da8:	fa 81       	ldd	r31, Y+2	; 0x02
    8daa:	ee 0f       	add	r30, r30
    8dac:	ff 1f       	adc	r31, r31
    8dae:	e9 50       	subi	r30, 0x09	; 9
    8db0:	fd 4e       	sbci	r31, 0xED	; 237
    8db2:	80 81       	ld	r24, Z
    8db4:	91 81       	ldd	r25, Z+1	; 0x01
    8db6:	00 97       	sbiw	r24, 0x00	; 0
    8db8:	11 f4       	brne	.+4      	; 0x8dbe <_Z12processMCodei+0x7d8>
    8dba:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
	~HBridgeDriver();
	void resetMaxMotorPower() { MAXMOTORPOWER = 255; }
	int commandMotorPower(uint8_t ch, int16_t p);
	int commandEmergencyStop(int status);
	int isConnected(void) { return true; }
	void setMotors(PWM** pwm) { ppwms = pwm; }
    8dbe:	fc 01       	movw	r30, r24
    8dc0:	e8 51       	subi	r30, 0x18	; 24
    8dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    8dc4:	23 e2       	ldi	r18, 0x23	; 35
    8dc6:	33 e1       	ldi	r19, 0x13	; 19
    8dc8:	31 83       	std	Z+1, r19	; 0x01
    8dca:	20 83       	st	Z, r18
	void setDirectionPins(Digital** dpin) { pdigitals = dpin; }
    8dcc:	32 96       	adiw	r30, 0x02	; 2
    8dce:	2b e3       	ldi	r18, 0x3B	; 59
    8dd0:	33 e1       	ldi	r19, 0x13	; 19
    8dd2:	31 83       	std	Z+1, r19	; 0x01
    8dd4:	20 83       	st	Z, r18
	  //motorControl = (AbstractMotorControl*)&splitBridgeDriver;
	  ((SplitBridgeDriver*)motorControl[motorController])->setMotors((PWM**)&ppwms);
	  ((SplitBridgeDriver*)motorControl[motorController])->setDirectionPins((Digital**)&pdigitals);
	  if(code_seen('P')) {
    8dd6:	80 e5       	ldi	r24, 0x50	; 80
    8dd8:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    8ddc:	88 23       	and	r24, r24
    8dde:	11 f4       	brne	.+4      	; 0x8de4 <_Z12processMCodei+0x7fe>
    8de0:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		pin_number = code_value();
    8de4:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    8de8:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    8dec:	70 93 1d 13 	sts	0x131D, r23	; 0x80131d <pin_number+0x1>
    8df0:	60 93 1c 13 	sts	0x131C, r22	; 0x80131c <pin_number>
	  } else {
		 break;
	  }
	  if(code_seen('Q')) {
    8df4:	81 e5       	ldi	r24, 0x51	; 81
    8df6:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    8dfa:	88 23       	and	r24, r24
    8dfc:	11 f4       	brne	.+4      	; 0x8e02 <_Z12processMCodei+0x81c>
    8dfe:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		pin_numberB = code_value();
    8e02:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    8e06:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    8e0a:	70 93 1b 13 	sts	0x131B, r23	; 0x80131b <pin_numberB+0x1>
    8e0e:	60 93 1a 13 	sts	0x131A, r22	; 0x80131a <pin_numberB>
	 } else {
		break;
	 }
	  if(code_seen('C')) {
    8e12:	83 e4       	ldi	r24, 0x43	; 67
    8e14:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    8e18:	88 23       	and	r24, r24
    8e1a:	11 f4       	brne	.+4      	; 0x8e20 <_Z12processMCodei+0x83a>
    8e1c:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		  channel = code_value();
    8e20:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    8e24:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    8e28:	60 93 22 13 	sts	0x1322, r22	; 0x801322 <channel>
		  if(channel <= 0) {
    8e2c:	66 23       	and	r22, r22
    8e2e:	11 f4       	brne	.+4      	; 0x8e34 <_Z12processMCodei+0x84e>
    8e30:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			break;
		  }
		  if( code_seen('D')) {
    8e34:	84 e4       	ldi	r24, 0x44	; 68
    8e36:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    8e3a:	88 23       	and	r24, r24
    8e3c:	11 f4       	brne	.+4      	; 0x8e42 <_Z12processMCodei+0x85c>
    8e3e:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			dir_pin = code_value();
    8e42:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    8e46:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    8e4a:	70 93 19 13 	sts	0x1319, r23	; 0x801319 <dir_pin+0x1>
    8e4e:	60 93 18 13 	sts	0x1318, r22	; 0x801318 <dir_pin>
		  } else {
			break;
		  }
		  if( code_seen('E')) {
    8e52:	85 e4       	ldi	r24, 0x45	; 69
    8e54:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    8e58:	88 23       	and	r24, r24
    8e5a:	11 f4       	brne	.+4      	; 0x8e60 <_Z12processMCodei+0x87a>
    8e5c:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			dir_default = code_value();
    8e60:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    8e64:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    8e68:	70 93 17 13 	sts	0x1317, r23	; 0x801317 <dir_default+0x1>
    8e6c:	60 93 16 13 	sts	0x1316, r22	; 0x801316 <dir_default>
		  } else {
			break;
		  }
		  if( code_seen('W')) {
    8e70:	87 e5       	ldi	r24, 0x57	; 87
    8e72:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    8e76:	88 23       	and	r24, r24
    8e78:	41 f0       	breq	.+16     	; 0x8e8a <_Z12processMCodei+0x8a4>
			encode_pin = code_value();
    8e7a:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    8e7e:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    8e82:	70 93 13 13 	sts	0x1313, r23	; 0x801313 <encode_pin+0x1>
    8e86:	60 93 12 13 	sts	0x1312, r22	; 0x801312 <encode_pin>
		  }
		  if(code_seen('X')) {
    8e8a:	88 e5       	ldi	r24, 0x58	; 88
    8e8c:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    8e90:	88 23       	and	r24, r24
    8e92:	41 f0       	breq	.+16     	; 0x8ea4 <_Z12processMCodei+0x8be>
				timer_pre = code_value();
    8e94:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    8e98:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    8e9c:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <timer_pre+0x1>
    8ea0:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <timer_pre>
		  }
		  if( code_seen('R')) {
    8ea4:	82 e5       	ldi	r24, 0x52	; 82
    8ea6:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    8eaa:	88 23       	and	r24, r24
    8eac:	41 f0       	breq	.+16     	; 0x8ebe <_Z12processMCodei+0x8d8>
				timer_res = code_value();
    8eae:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    8eb2:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    8eb6:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <timer_res+0x1>
    8eba:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <timer_res>
		  }
		  ((SplitBridgeDriver*)motorControl[motorController])->createPWM(channel, pin_number, pin_numberB, dir_pin, dir_default, timer_pre, timer_res);
    8ebe:	a0 90 08 02 	lds	r10, 0x0208	; 0x800208 <timer_res>
    8ec2:	b0 90 09 02 	lds	r11, 0x0209	; 0x800209 <timer_res+0x1>
    8ec6:	c0 90 06 02 	lds	r12, 0x0206	; 0x800206 <timer_pre>
    8eca:	d0 90 07 02 	lds	r13, 0x0207	; 0x800207 <timer_pre+0x1>
    8ece:	e9 81       	ldd	r30, Y+1	; 0x01
    8ed0:	fa 81       	ldd	r31, Y+2	; 0x02
    8ed2:	ee 0f       	add	r30, r30
    8ed4:	ff 1f       	adc	r31, r31
    8ed6:	e9 50       	subi	r30, 0x09	; 9
    8ed8:	fd 4e       	sbci	r31, 0xED	; 237
    8eda:	e0 90 16 13 	lds	r14, 0x1316	; 0x801316 <dir_default>
    8ede:	00 91 18 13 	lds	r16, 0x1318	; 0x801318 <dir_pin>
    8ee2:	20 91 1a 13 	lds	r18, 0x131A	; 0x80131a <pin_numberB>
    8ee6:	40 91 1c 13 	lds	r20, 0x131C	; 0x80131c <pin_number>
    8eea:	60 91 22 13 	lds	r22, 0x1322	; 0x801322 <channel>
    8eee:	80 81       	ld	r24, Z
    8ef0:	91 81       	ldd	r25, Z+1	; 0x01
    8ef2:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <_ZN17SplitBridgeDriver9createPWMEhhhhhii>
		  if(encode_pin) {
    8ef6:	40 91 12 13 	lds	r20, 0x1312	; 0x801312 <encode_pin>
    8efa:	50 91 13 13 	lds	r21, 0x1313	; 0x801313 <encode_pin+0x1>
    8efe:	41 15       	cp	r20, r1
    8f00:	51 05       	cpc	r21, r1
    8f02:	61 f0       	breq	.+24     	; 0x8f1c <_Z12processMCodei+0x936>
			motorControl[motorController]->createEncoder(channel, encode_pin);
    8f04:	e9 81       	ldd	r30, Y+1	; 0x01
    8f06:	fa 81       	ldd	r31, Y+2	; 0x02
    8f08:	ee 0f       	add	r30, r30
    8f0a:	ff 1f       	adc	r31, r31
    8f0c:	e9 50       	subi	r30, 0x09	; 9
    8f0e:	fd 4e       	sbci	r31, 0xED	; 237
    8f10:	60 91 22 13 	lds	r22, 0x1322	; 0x801322 <channel>
    8f14:	80 81       	ld	r24, Z
    8f16:	91 81       	ldd	r25, Z+1	; 0x01
    8f18:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <_ZN20AbstractMotorControl13createEncoderEhh>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    8f1c:	e6 ec       	ldi	r30, 0xC6	; 198
    8f1e:	f0 e1       	ldi	r31, 0x10	; 16
    8f20:	64 91       	lpm	r22, Z
	while(ch)
    8f22:	66 23       	and	r22, r22
    8f24:	a1 f0       	breq	.+40     	; 0x8f4e <_Z12processMCodei+0x968>
    8f26:	fa 83       	std	Y+2, r31	; 0x02
    8f28:	e9 83       	std	Y+1, r30	; 0x01
    8f2a:	08 e0       	ldi	r16, 0x08	; 8
    8f2c:	1a e0       	ldi	r17, 0x0A	; 10
    8f2e:	d8 01       	movw	r26, r16
    8f30:	ed 91       	ld	r30, X+
    8f32:	fc 91       	ld	r31, X
    8f34:	01 90       	ld	r0, Z+
    8f36:	f0 81       	ld	r31, Z
    8f38:	e0 2d       	mov	r30, r0
    8f3a:	c8 01       	movw	r24, r16
    8f3c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    8f3e:	e9 81       	ldd	r30, Y+1	; 0x01
    8f40:	fa 81       	ldd	r31, Y+2	; 0x02
    8f42:	31 96       	adiw	r30, 0x01	; 1
    8f44:	fa 83       	std	Y+2, r31	; 0x02
    8f46:	e9 83       	std	Y+1, r30	; 0x01
    8f48:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    8f4a:	61 11       	cpse	r22, r1
    8f4c:	f0 cf       	rjmp	.-32     	; 0x8f2e <_Z12processMCodei+0x948>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    8f4e:	e3 ec       	ldi	r30, 0xC3	; 195
    8f50:	f0 e1       	ldi	r31, 0x10	; 16
    8f52:	64 91       	lpm	r22, Z
	while(ch)
    8f54:	66 23       	and	r22, r22
    8f56:	a1 f0       	breq	.+40     	; 0x8f80 <_Z12processMCodei+0x99a>
    8f58:	fa 83       	std	Y+2, r31	; 0x02
    8f5a:	e9 83       	std	Y+1, r30	; 0x01
    8f5c:	08 e0       	ldi	r16, 0x08	; 8
    8f5e:	1a e0       	ldi	r17, 0x0A	; 10
    8f60:	d8 01       	movw	r26, r16
    8f62:	ed 91       	ld	r30, X+
    8f64:	fc 91       	ld	r31, X
    8f66:	01 90       	ld	r0, Z+
    8f68:	f0 81       	ld	r31, Z
    8f6a:	e0 2d       	mov	r30, r0
    8f6c:	c8 01       	movw	r24, r16
    8f6e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    8f70:	e9 81       	ldd	r30, Y+1	; 0x01
    8f72:	fa 81       	ldd	r31, Y+2	; 0x02
    8f74:	31 96       	adiw	r30, 0x01	; 1
    8f76:	fa 83       	std	Y+2, r31	; 0x02
    8f78:	e9 83       	std	Y+1, r30	; 0x01
    8f7a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    8f7c:	61 11       	cpse	r22, r1
    8f7e:	f0 cf       	rjmp	.-32     	; 0x8f60 <_Z12processMCodei+0x97a>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    8f80:	e0 ec       	ldi	r30, 0xC0	; 192
    8f82:	f0 e1       	ldi	r31, 0x10	; 16
    8f84:	64 91       	lpm	r22, Z
	while(ch)
    8f86:	66 23       	and	r22, r22
    8f88:	a1 f0       	breq	.+40     	; 0x8fb2 <_Z12processMCodei+0x9cc>
    8f8a:	fa 83       	std	Y+2, r31	; 0x02
    8f8c:	e9 83       	std	Y+1, r30	; 0x01
    8f8e:	08 e0       	ldi	r16, 0x08	; 8
    8f90:	1a e0       	ldi	r17, 0x0A	; 10
    8f92:	d8 01       	movw	r26, r16
    8f94:	ed 91       	ld	r30, X+
    8f96:	fc 91       	ld	r31, X
    8f98:	01 90       	ld	r0, Z+
    8f9a:	f0 81       	ld	r31, Z
    8f9c:	e0 2d       	mov	r30, r0
    8f9e:	c8 01       	movw	r24, r16
    8fa0:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    8fa2:	e9 81       	ldd	r30, Y+1	; 0x01
    8fa4:	fa 81       	ldd	r31, Y+2	; 0x02
    8fa6:	31 96       	adiw	r30, 0x01	; 1
    8fa8:	fa 83       	std	Y+2, r31	; 0x02
    8faa:	e9 83       	std	Y+1, r30	; 0x01
    8fac:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    8fae:	61 11       	cpse	r22, r1
    8fb0:	f0 cf       	rjmp	.-32     	; 0x8f92 <_Z12processMCodei+0x9ac>
		  }
		  SERIAL_PGM(MSG_BEGIN);
		  SERIAL_PGM("M4");
		  SERIAL_PGMLN(MSG_TERMINATE);
    8fb2:	88 e0       	ldi	r24, 0x08	; 8
    8fb4:	9a e0       	ldi	r25, 0x0A	; 10
    8fb6:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		  SERIAL_PORT.flush();
    8fba:	88 e0       	ldi	r24, 0x08	; 8
    8fbc:	9a e0       	ldi	r25, 0x0A	; 10
    8fbe:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    8fc2:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		break;
		
	// Switch bridge or 2 digital motor controller. Takes 2 inputs: one digital pin for forward,called P, one for backward,called Q, then motor channel,
	// and then D, an enable pin, and E default dir, with optional encoder
	case 5: //M5 Z<slot> P<pin> Q<pin> C<channel> D<enable pin> E<default dir> [W<encoder>]- Create switch bridge Z slot, P forward pin, Q reverse pin, D enable, E default state of enable for dir
		pin_number = -1;
    8fc6:	8f ef       	ldi	r24, 0xFF	; 255
    8fc8:	9f ef       	ldi	r25, 0xFF	; 255
    8fca:	90 93 1d 13 	sts	0x131D, r25	; 0x80131d <pin_number+0x1>
    8fce:	80 93 1c 13 	sts	0x131C, r24	; 0x80131c <pin_number>
		pin_numberB = -1;
    8fd2:	90 93 1b 13 	sts	0x131B, r25	; 0x80131b <pin_numberB+0x1>
    8fd6:	80 93 1a 13 	sts	0x131A, r24	; 0x80131a <pin_numberB>
		encode_pin = 0;
    8fda:	10 92 13 13 	sts	0x1313, r1	; 0x801313 <encode_pin+0x1>
    8fde:	10 92 12 13 	sts	0x1312, r1	; 0x801312 <encode_pin>
		  if(code_seen('Z')) {
    8fe2:	8a e5       	ldi	r24, 0x5A	; 90
    8fe4:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    8fe8:	88 23       	and	r24, r24
    8fea:	39 f0       	breq	.+14     	; 0x8ffa <_Z12processMCodei+0xa14>
			  motorController = code_value();
    8fec:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    8ff0:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    8ff4:	7a 83       	std	Y+2, r23	; 0x02
    8ff6:	69 83       	std	Y+1, r22	; 0x01
    8ff8:	02 c0       	rjmp	.+4      	; 0x8ffe <_Z12processMCodei+0xa18>
  /*-------------------------------------
  * M Code processing
  *--------------------------------------
  */
  void processMCode(int cval) {
	  int motorController = 0; 
    8ffa:	1a 82       	std	Y+2, r1	; 0x02
    8ffc:	19 82       	std	Y+1, r1	; 0x01
		pin_numberB = -1;
		encode_pin = 0;
		  if(code_seen('Z')) {
			  motorController = code_value();
		  }
		  if(motorControl[motorController]) {
    8ffe:	e9 81       	ldd	r30, Y+1	; 0x01
    9000:	fa 81       	ldd	r31, Y+2	; 0x02
    9002:	ee 0f       	add	r30, r30
    9004:	ff 1f       	adc	r31, r31
    9006:	e9 50       	subi	r30, 0x09	; 9
    9008:	fd 4e       	sbci	r31, 0xED	; 237
    900a:	80 81       	ld	r24, Z
    900c:	91 81       	ldd	r25, Z+1	; 0x01
    900e:	00 97       	sbiw	r24, 0x00	; 0
    9010:	11 f4       	brne	.+4      	; 0x9016 <_Z12processMCodei+0xa30>
    9012:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
	uint8_t getMotorDigitalPin(uint8_t channel) { return motorDrive[channel-1][0]; }
	uint8_t getMotorDigitalPinB(uint8_t channel) { return motorDriveB[channel-1][0]; }
	int commandMotorPower(uint8_t ch, int16_t p);
	int commandEmergencyStop(int status);
	int isConnected(void) { return true; }
	void setPins(Digital** pins) { pdigitals = pins; }
    9016:	fc 01       	movw	r30, r24
    9018:	e8 51       	subi	r30, 0x18	; 24
    901a:	ff 4f       	sbci	r31, 0xFF	; 255
    901c:	2b e3       	ldi	r18, 0x3B	; 59
    901e:	33 e1       	ldi	r19, 0x13	; 19
    9020:	31 83       	std	Z+1, r19	; 0x01
    9022:	20 83       	st	Z, r18
			  ((SwitchBridgeDriver*)motorControl[motorController])->setPins((Digital**)&pdigitals);
			  if(code_seen('P')) {
    9024:	80 e5       	ldi	r24, 0x50	; 80
    9026:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    902a:	88 23       	and	r24, r24
    902c:	11 f4       	brne	.+4      	; 0x9032 <_Z12processMCodei+0xa4c>
    902e:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
				  pin_number = code_value();
    9032:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    9036:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    903a:	70 93 1d 13 	sts	0x131D, r23	; 0x80131d <pin_number+0x1>
    903e:	60 93 1c 13 	sts	0x131C, r22	; 0x80131c <pin_number>
			  } else {
				  break;
			  }
			  if(code_seen('Q')) {
    9042:	81 e5       	ldi	r24, 0x51	; 81
    9044:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    9048:	88 23       	and	r24, r24
    904a:	11 f4       	brne	.+4      	; 0x9050 <_Z12processMCodei+0xa6a>
    904c:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
				  pin_numberB = code_value();
    9050:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    9054:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    9058:	70 93 1b 13 	sts	0x131B, r23	; 0x80131b <pin_numberB+0x1>
    905c:	60 93 1a 13 	sts	0x131A, r22	; 0x80131a <pin_numberB>
			  } else {
				  break;
			  }
			  if(code_seen('C')) {
    9060:	83 e4       	ldi	r24, 0x43	; 67
    9062:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    9066:	88 23       	and	r24, r24
    9068:	11 f4       	brne	.+4      	; 0x906e <_Z12processMCodei+0xa88>
    906a:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
				  channel = code_value();
    906e:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    9072:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    9076:	60 93 22 13 	sts	0x1322, r22	; 0x801322 <channel>
				  if(channel <= 0) {
    907a:	66 23       	and	r22, r22
    907c:	11 f4       	brne	.+4      	; 0x9082 <_Z12processMCodei+0xa9c>
    907e:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
					  break;
				  }
				  if( code_seen('D')) {
    9082:	84 e4       	ldi	r24, 0x44	; 68
    9084:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    9088:	88 23       	and	r24, r24
    908a:	11 f4       	brne	.+4      	; 0x9090 <_Z12processMCodei+0xaaa>
    908c:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
					  dir_pin = code_value();
    9090:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    9094:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    9098:	70 93 19 13 	sts	0x1319, r23	; 0x801319 <dir_pin+0x1>
    909c:	60 93 18 13 	sts	0x1318, r22	; 0x801318 <dir_pin>
				  } else {
					  break;
				  }
				  if( code_seen('E')) {
    90a0:	85 e4       	ldi	r24, 0x45	; 69
    90a2:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    90a6:	88 23       	and	r24, r24
    90a8:	11 f4       	brne	.+4      	; 0x90ae <_Z12processMCodei+0xac8>
    90aa:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
					  dir_default = code_value();
    90ae:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    90b2:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    90b6:	70 93 17 13 	sts	0x1317, r23	; 0x801317 <dir_default+0x1>
    90ba:	60 93 16 13 	sts	0x1316, r22	; 0x801316 <dir_default>
				  } else {
					  break;
				  }
				  if( code_seen('W')) {
    90be:	87 e5       	ldi	r24, 0x57	; 87
    90c0:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    90c4:	88 23       	and	r24, r24
    90c6:	41 f0       	breq	.+16     	; 0x90d8 <_Z12processMCodei+0xaf2>
					 encode_pin = code_value();
    90c8:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    90cc:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    90d0:	70 93 13 13 	sts	0x1313, r23	; 0x801313 <encode_pin+0x1>
    90d4:	60 93 12 13 	sts	0x1312, r22	; 0x801312 <encode_pin>
				  }
				  ((SwitchBridgeDriver*)motorControl[motorController])->createDigital(channel, pin_number, pin_numberB, dir_pin, dir_default);
    90d8:	e9 81       	ldd	r30, Y+1	; 0x01
    90da:	fa 81       	ldd	r31, Y+2	; 0x02
    90dc:	ee 0f       	add	r30, r30
    90de:	ff 1f       	adc	r31, r31
    90e0:	e9 50       	subi	r30, 0x09	; 9
    90e2:	fd 4e       	sbci	r31, 0xED	; 237
    90e4:	e0 90 16 13 	lds	r14, 0x1316	; 0x801316 <dir_default>
    90e8:	00 91 18 13 	lds	r16, 0x1318	; 0x801318 <dir_pin>
    90ec:	20 91 1a 13 	lds	r18, 0x131A	; 0x80131a <pin_numberB>
    90f0:	40 91 1c 13 	lds	r20, 0x131C	; 0x80131c <pin_number>
    90f4:	60 91 22 13 	lds	r22, 0x1322	; 0x801322 <channel>
    90f8:	80 81       	ld	r24, Z
    90fa:	91 81       	ldd	r25, Z+1	; 0x01
    90fc:	0e 94 68 38 	call	0x70d0	; 0x70d0 <_ZN18SwitchBridgeDriver13createDigitalEhhhhh>
				  if(encode_pin) {
    9100:	40 91 12 13 	lds	r20, 0x1312	; 0x801312 <encode_pin>
    9104:	50 91 13 13 	lds	r21, 0x1313	; 0x801313 <encode_pin+0x1>
    9108:	41 15       	cp	r20, r1
    910a:	51 05       	cpc	r21, r1
    910c:	61 f0       	breq	.+24     	; 0x9126 <_Z12processMCodei+0xb40>
					  motorControl[motorController]->createEncoder(channel, encode_pin);
    910e:	e9 81       	ldd	r30, Y+1	; 0x01
    9110:	fa 81       	ldd	r31, Y+2	; 0x02
    9112:	ee 0f       	add	r30, r30
    9114:	ff 1f       	adc	r31, r31
    9116:	e9 50       	subi	r30, 0x09	; 9
    9118:	fd 4e       	sbci	r31, 0xED	; 237
    911a:	60 91 22 13 	lds	r22, 0x1322	; 0x801322 <channel>
    911e:	80 81       	ld	r24, Z
    9120:	91 81       	ldd	r25, Z+1	; 0x01
    9122:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <_ZN20AbstractMotorControl13createEncoderEhh>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    9126:	ee eb       	ldi	r30, 0xBE	; 190
    9128:	f0 e1       	ldi	r31, 0x10	; 16
    912a:	64 91       	lpm	r22, Z
	while(ch)
    912c:	66 23       	and	r22, r22
    912e:	a1 f0       	breq	.+40     	; 0x9158 <_Z12processMCodei+0xb72>
    9130:	fa 83       	std	Y+2, r31	; 0x02
    9132:	e9 83       	std	Y+1, r30	; 0x01
    9134:	08 e0       	ldi	r16, 0x08	; 8
    9136:	1a e0       	ldi	r17, 0x0A	; 10
    9138:	d8 01       	movw	r26, r16
    913a:	ed 91       	ld	r30, X+
    913c:	fc 91       	ld	r31, X
    913e:	01 90       	ld	r0, Z+
    9140:	f0 81       	ld	r31, Z
    9142:	e0 2d       	mov	r30, r0
    9144:	c8 01       	movw	r24, r16
    9146:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    9148:	e9 81       	ldd	r30, Y+1	; 0x01
    914a:	fa 81       	ldd	r31, Y+2	; 0x02
    914c:	31 96       	adiw	r30, 0x01	; 1
    914e:	fa 83       	std	Y+2, r31	; 0x02
    9150:	e9 83       	std	Y+1, r30	; 0x01
    9152:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    9154:	61 11       	cpse	r22, r1
    9156:	f0 cf       	rjmp	.-32     	; 0x9138 <_Z12processMCodei+0xb52>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    9158:	eb eb       	ldi	r30, 0xBB	; 187
    915a:	f0 e1       	ldi	r31, 0x10	; 16
    915c:	64 91       	lpm	r22, Z
	while(ch)
    915e:	66 23       	and	r22, r22
    9160:	a1 f0       	breq	.+40     	; 0x918a <_Z12processMCodei+0xba4>
    9162:	fa 83       	std	Y+2, r31	; 0x02
    9164:	e9 83       	std	Y+1, r30	; 0x01
    9166:	08 e0       	ldi	r16, 0x08	; 8
    9168:	1a e0       	ldi	r17, 0x0A	; 10
    916a:	d8 01       	movw	r26, r16
    916c:	ed 91       	ld	r30, X+
    916e:	fc 91       	ld	r31, X
    9170:	01 90       	ld	r0, Z+
    9172:	f0 81       	ld	r31, Z
    9174:	e0 2d       	mov	r30, r0
    9176:	c8 01       	movw	r24, r16
    9178:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    917a:	e9 81       	ldd	r30, Y+1	; 0x01
    917c:	fa 81       	ldd	r31, Y+2	; 0x02
    917e:	31 96       	adiw	r30, 0x01	; 1
    9180:	fa 83       	std	Y+2, r31	; 0x02
    9182:	e9 83       	std	Y+1, r30	; 0x01
    9184:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    9186:	61 11       	cpse	r22, r1
    9188:	f0 cf       	rjmp	.-32     	; 0x916a <_Z12processMCodei+0xb84>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    918a:	e8 eb       	ldi	r30, 0xB8	; 184
    918c:	f0 e1       	ldi	r31, 0x10	; 16
    918e:	64 91       	lpm	r22, Z
	while(ch)
    9190:	66 23       	and	r22, r22
    9192:	a1 f0       	breq	.+40     	; 0x91bc <_Z12processMCodei+0xbd6>
    9194:	fa 83       	std	Y+2, r31	; 0x02
    9196:	e9 83       	std	Y+1, r30	; 0x01
    9198:	08 e0       	ldi	r16, 0x08	; 8
    919a:	1a e0       	ldi	r17, 0x0A	; 10
    919c:	d8 01       	movw	r26, r16
    919e:	ed 91       	ld	r30, X+
    91a0:	fc 91       	ld	r31, X
    91a2:	01 90       	ld	r0, Z+
    91a4:	f0 81       	ld	r31, Z
    91a6:	e0 2d       	mov	r30, r0
    91a8:	c8 01       	movw	r24, r16
    91aa:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    91ac:	e9 81       	ldd	r30, Y+1	; 0x01
    91ae:	fa 81       	ldd	r31, Y+2	; 0x02
    91b0:	31 96       	adiw	r30, 0x01	; 1
    91b2:	fa 83       	std	Y+2, r31	; 0x02
    91b4:	e9 83       	std	Y+1, r30	; 0x01
    91b6:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    91b8:	61 11       	cpse	r22, r1
    91ba:	f0 cf       	rjmp	.-32     	; 0x919c <_Z12processMCodei+0xbb6>
				  }
				  SERIAL_PGM(MSG_BEGIN);
				  SERIAL_PGM("M5");
				  SERIAL_PGMLN(MSG_TERMINATE);
    91bc:	88 e0       	ldi	r24, 0x08	; 8
    91be:	9a e0       	ldi	r25, 0x0A	; 10
    91c0:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
				  SERIAL_PORT.flush();
    91c4:	88 e0       	ldi	r24, 0x08	; 8
    91c6:	9a e0       	ldi	r25, 0x0A	; 10
    91c8:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    91cc:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			  } // code C
		  } //motorcontrol[motorcontroller]
		break;
		
	case 6: //M6 [Z<slot>] [S<scale>] [X<scale>] - Set motor or PWM scaling, divisor for final power to limit speed or level, set to 0 to cancel. If X, slot is PWM
		if(code_seen('Z')) {
    91d0:	8a e5       	ldi	r24, 0x5A	; 90
    91d2:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    91d6:	88 23       	and	r24, r24
    91d8:	39 f0       	breq	.+14     	; 0x91e8 <_Z12processMCodei+0xc02>
			motorController = code_value();
    91da:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    91de:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    91e2:	7a 83       	std	Y+2, r23	; 0x02
    91e4:	69 83       	std	Y+1, r22	; 0x01
    91e6:	02 c0       	rjmp	.+4      	; 0x91ec <_Z12processMCodei+0xc06>
  /*-------------------------------------
  * M Code processing
  *--------------------------------------
  */
  void processMCode(int cval) {
	  int motorController = 0; 
    91e8:	1a 82       	std	Y+2, r1	; 0x02
    91ea:	19 82       	std	Y+1, r1	; 0x01
		
	case 6: //M6 [Z<slot>] [S<scale>] [X<scale>] - Set motor or PWM scaling, divisor for final power to limit speed or level, set to 0 to cancel. If X, slot is PWM
		if(code_seen('Z')) {
			motorController = code_value();
		}
		if( code_seen('S') ) {
    91ec:	83 e5       	ldi	r24, 0x53	; 83
    91ee:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    91f2:	88 23       	and	r24, r24
    91f4:	09 f4       	brne	.+2      	; 0x91f8 <_Z12processMCodei+0xc12>
    91f6:	84 c0       	rjmp	.+264    	; 0x9300 <_Z12processMCodei+0xd1a>
			if(motorControl[motorController]) {
    91f8:	e9 81       	ldd	r30, Y+1	; 0x01
    91fa:	fa 81       	ldd	r31, Y+2	; 0x02
    91fc:	ee 0f       	add	r30, r30
    91fe:	ff 1f       	adc	r31, r31
    9200:	e9 50       	subi	r30, 0x09	; 9
    9202:	fd 4e       	sbci	r31, 0xED	; 237
    9204:	80 81       	ld	r24, Z
    9206:	91 81       	ldd	r25, Z+1	; 0x01
    9208:	89 2b       	or	r24, r25
    920a:	11 f4       	brne	.+4      	; 0x9210 <_Z12processMCodei+0xc2a>
    920c:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
				motorControl[motorController]->setMotorPowerScale(code_value());
    9210:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    9214:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    9218:	e9 81       	ldd	r30, Y+1	; 0x01
    921a:	fa 81       	ldd	r31, Y+2	; 0x02
    921c:	ee 0f       	add	r30, r30
    921e:	ff 1f       	adc	r31, r31
    9220:	e9 50       	subi	r30, 0x09	; 9
    9222:	fd 4e       	sbci	r31, 0xED	; 237
    9224:	20 81       	ld	r18, Z
    9226:	31 81       	ldd	r19, Z+1	; 0x01
	void resetSpeeds(void);
	void resetEncoders(void);
	void setMotorShutdown(void) { commandEmergencyStop(1); MOTORSHUTDOWN = 1;}
	void setMotorRun(void) { commandEmergencyStop(0); MOTORSHUTDOWN = 0;}
	uint8_t getMotorShutdown(void) { return MOTORSHUTDOWN; }
	void setMotorPowerScale(int p) { MOTORPOWERSCALE = p; if( p != 0 ) MOTORPOWERSCALE /= 4;}
    9228:	61 15       	cp	r22, r1
    922a:	71 05       	cpc	r23, r1
    922c:	31 f4       	brne	.+12     	; 0x923a <_Z12processMCodei+0xc54>
    922e:	f9 01       	movw	r30, r18
    9230:	ef 51       	subi	r30, 0x1F	; 31
    9232:	ff 4f       	sbci	r31, 0xFF	; 255
    9234:	11 82       	std	Z+1, r1	; 0x01
    9236:	10 82       	st	Z, r1
    9238:	0e c0       	rjmp	.+28     	; 0x9256 <_Z12processMCodei+0xc70>
    923a:	f9 01       	movw	r30, r18
    923c:	ef 51       	subi	r30, 0x1F	; 31
    923e:	ff 4f       	sbci	r31, 0xFF	; 255
    9240:	9b 01       	movw	r18, r22
    9242:	77 23       	and	r23, r23
    9244:	14 f4       	brge	.+4      	; 0x924a <_Z12processMCodei+0xc64>
    9246:	2d 5f       	subi	r18, 0xFD	; 253
    9248:	3f 4f       	sbci	r19, 0xFF	; 255
    924a:	35 95       	asr	r19
    924c:	27 95       	ror	r18
    924e:	35 95       	asr	r19
    9250:	27 95       	ror	r18
    9252:	31 83       	std	Z+1, r19	; 0x01
    9254:	20 83       	st	Z, r18
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    9256:	e6 eb       	ldi	r30, 0xB6	; 182
    9258:	f0 e1       	ldi	r31, 0x10	; 16
    925a:	64 91       	lpm	r22, Z
	while(ch)
    925c:	66 23       	and	r22, r22
    925e:	a1 f0       	breq	.+40     	; 0x9288 <_Z12processMCodei+0xca2>
    9260:	fa 83       	std	Y+2, r31	; 0x02
    9262:	e9 83       	std	Y+1, r30	; 0x01
    9264:	08 e0       	ldi	r16, 0x08	; 8
    9266:	1a e0       	ldi	r17, 0x0A	; 10
    9268:	d8 01       	movw	r26, r16
    926a:	ed 91       	ld	r30, X+
    926c:	fc 91       	ld	r31, X
    926e:	01 90       	ld	r0, Z+
    9270:	f0 81       	ld	r31, Z
    9272:	e0 2d       	mov	r30, r0
    9274:	c8 01       	movw	r24, r16
    9276:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    9278:	e9 81       	ldd	r30, Y+1	; 0x01
    927a:	fa 81       	ldd	r31, Y+2	; 0x02
    927c:	31 96       	adiw	r30, 0x01	; 1
    927e:	fa 83       	std	Y+2, r31	; 0x02
    9280:	e9 83       	std	Y+1, r30	; 0x01
    9282:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    9284:	61 11       	cpse	r22, r1
    9286:	f0 cf       	rjmp	.-32     	; 0x9268 <_Z12processMCodei+0xc82>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    9288:	e3 eb       	ldi	r30, 0xB3	; 179
    928a:	f0 e1       	ldi	r31, 0x10	; 16
    928c:	64 91       	lpm	r22, Z
	while(ch)
    928e:	66 23       	and	r22, r22
    9290:	a1 f0       	breq	.+40     	; 0x92ba <_Z12processMCodei+0xcd4>
    9292:	fa 83       	std	Y+2, r31	; 0x02
    9294:	e9 83       	std	Y+1, r30	; 0x01
    9296:	08 e0       	ldi	r16, 0x08	; 8
    9298:	1a e0       	ldi	r17, 0x0A	; 10
    929a:	d8 01       	movw	r26, r16
    929c:	ed 91       	ld	r30, X+
    929e:	fc 91       	ld	r31, X
    92a0:	01 90       	ld	r0, Z+
    92a2:	f0 81       	ld	r31, Z
    92a4:	e0 2d       	mov	r30, r0
    92a6:	c8 01       	movw	r24, r16
    92a8:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    92aa:	e9 81       	ldd	r30, Y+1	; 0x01
    92ac:	fa 81       	ldd	r31, Y+2	; 0x02
    92ae:	31 96       	adiw	r30, 0x01	; 1
    92b0:	fa 83       	std	Y+2, r31	; 0x02
    92b2:	e9 83       	std	Y+1, r30	; 0x01
    92b4:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    92b6:	61 11       	cpse	r22, r1
    92b8:	f0 cf       	rjmp	.-32     	; 0x929a <_Z12processMCodei+0xcb4>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    92ba:	e0 eb       	ldi	r30, 0xB0	; 176
    92bc:	f0 e1       	ldi	r31, 0x10	; 16
    92be:	64 91       	lpm	r22, Z
	while(ch)
    92c0:	66 23       	and	r22, r22
    92c2:	a1 f0       	breq	.+40     	; 0x92ec <_Z12processMCodei+0xd06>
    92c4:	fa 83       	std	Y+2, r31	; 0x02
    92c6:	e9 83       	std	Y+1, r30	; 0x01
    92c8:	08 e0       	ldi	r16, 0x08	; 8
    92ca:	1a e0       	ldi	r17, 0x0A	; 10
    92cc:	d8 01       	movw	r26, r16
    92ce:	ed 91       	ld	r30, X+
    92d0:	fc 91       	ld	r31, X
    92d2:	01 90       	ld	r0, Z+
    92d4:	f0 81       	ld	r31, Z
    92d6:	e0 2d       	mov	r30, r0
    92d8:	c8 01       	movw	r24, r16
    92da:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    92dc:	e9 81       	ldd	r30, Y+1	; 0x01
    92de:	fa 81       	ldd	r31, Y+2	; 0x02
    92e0:	31 96       	adiw	r30, 0x01	; 1
    92e2:	fa 83       	std	Y+2, r31	; 0x02
    92e4:	e9 83       	std	Y+1, r30	; 0x01
    92e6:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    92e8:	61 11       	cpse	r22, r1
    92ea:	f0 cf       	rjmp	.-32     	; 0x92cc <_Z12processMCodei+0xce6>
				SERIAL_PGM(MSG_BEGIN);
				SERIAL_PGM("M6");
				SERIAL_PGMLN(MSG_TERMINATE);
    92ec:	88 e0       	ldi	r24, 0x08	; 8
    92ee:	9a e0       	ldi	r25, 0x0A	; 10
    92f0:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
				SERIAL_PORT.flush();
    92f4:	88 e0       	ldi	r24, 0x08	; 8
    92f6:	9a e0       	ldi	r25, 0x0A	; 10
    92f8:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    92fc:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			}
		} else {
			if(code_seen('X')) {
    9300:	88 e5       	ldi	r24, 0x58	; 88
    9302:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    9306:	88 23       	and	r24, r24
    9308:	11 f4       	brne	.+4      	; 0x930e <_Z12processMCodei+0xd28>
    930a:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
				if(pwmControl[motorController]) {
    930e:	e9 81       	ldd	r30, Y+1	; 0x01
    9310:	fa 81       	ldd	r31, Y+2	; 0x02
    9312:	ee 0f       	add	r30, r30
    9314:	ff 1f       	adc	r31, r31
    9316:	ed 51       	subi	r30, 0x1D	; 29
    9318:	fd 4e       	sbci	r31, 0xED	; 237
    931a:	80 81       	ld	r24, Z
    931c:	91 81       	ldd	r25, Z+1	; 0x01
    931e:	89 2b       	or	r24, r25
    9320:	11 f4       	brne	.+4      	; 0x9326 <_Z12processMCodei+0xd40>
    9322:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
					pwmControl[motorController]->setPWMPowerScale(code_value());
    9326:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    932a:	e9 81       	ldd	r30, Y+1	; 0x01
    932c:	fa 81       	ldd	r31, Y+2	; 0x02
    932e:	ee 0f       	add	r30, r30
    9330:	ff 1f       	adc	r31, r31
    9332:	ed 51       	subi	r30, 0x1D	; 29
    9334:	fd 4e       	sbci	r31, 0xED	; 237
	uint8_t getChannels(void) { return channels; }
	void resetLevels(void);
	void setPWMShutdown(void) { commandEmergencyStop(1); PWMSHUTDOWN = 1;}
	void setPWMRun(void) { commandEmergencyStop(0); PWMSHUTDOWN = 0;}
	uint8_t getPWMShutdown(void) { return PWMSHUTDOWN; }
	void setPWMPowerScale(int p) { PWMPOWERSCALE = p; }
    9336:	20 81       	ld	r18, Z
    9338:	31 81       	ldd	r19, Z+1	; 0x01
    933a:	2b 56       	subi	r18, 0x6B	; 107
    933c:	3f 4f       	sbci	r19, 0xFF	; 255
    933e:	3a 83       	std	Y+2, r19	; 0x02
    9340:	29 83       	std	Y+1, r18	; 0x01
    9342:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    9346:	a9 81       	ldd	r26, Y+1	; 0x01
    9348:	ba 81       	ldd	r27, Y+2	; 0x02
    934a:	6d 93       	st	X+, r22
    934c:	7c 93       	st	X, r23
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    934e:	ee ea       	ldi	r30, 0xAE	; 174
    9350:	f0 e1       	ldi	r31, 0x10	; 16
    9352:	64 91       	lpm	r22, Z
	while(ch)
    9354:	66 23       	and	r22, r22
    9356:	a1 f0       	breq	.+40     	; 0x9380 <_Z12processMCodei+0xd9a>
    9358:	fa 83       	std	Y+2, r31	; 0x02
    935a:	e9 83       	std	Y+1, r30	; 0x01
    935c:	08 e0       	ldi	r16, 0x08	; 8
    935e:	1a e0       	ldi	r17, 0x0A	; 10
    9360:	d8 01       	movw	r26, r16
    9362:	ed 91       	ld	r30, X+
    9364:	fc 91       	ld	r31, X
    9366:	01 90       	ld	r0, Z+
    9368:	f0 81       	ld	r31, Z
    936a:	e0 2d       	mov	r30, r0
    936c:	c8 01       	movw	r24, r16
    936e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    9370:	e9 81       	ldd	r30, Y+1	; 0x01
    9372:	fa 81       	ldd	r31, Y+2	; 0x02
    9374:	31 96       	adiw	r30, 0x01	; 1
    9376:	fa 83       	std	Y+2, r31	; 0x02
    9378:	e9 83       	std	Y+1, r30	; 0x01
    937a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    937c:	61 11       	cpse	r22, r1
    937e:	f0 cf       	rjmp	.-32     	; 0x9360 <_Z12processMCodei+0xd7a>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    9380:	eb ea       	ldi	r30, 0xAB	; 171
    9382:	f0 e1       	ldi	r31, 0x10	; 16
    9384:	64 91       	lpm	r22, Z
	while(ch)
    9386:	66 23       	and	r22, r22
    9388:	a1 f0       	breq	.+40     	; 0x93b2 <_Z12processMCodei+0xdcc>
    938a:	fa 83       	std	Y+2, r31	; 0x02
    938c:	e9 83       	std	Y+1, r30	; 0x01
    938e:	08 e0       	ldi	r16, 0x08	; 8
    9390:	1a e0       	ldi	r17, 0x0A	; 10
    9392:	d8 01       	movw	r26, r16
    9394:	ed 91       	ld	r30, X+
    9396:	fc 91       	ld	r31, X
    9398:	01 90       	ld	r0, Z+
    939a:	f0 81       	ld	r31, Z
    939c:	e0 2d       	mov	r30, r0
    939e:	c8 01       	movw	r24, r16
    93a0:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    93a2:	e9 81       	ldd	r30, Y+1	; 0x01
    93a4:	fa 81       	ldd	r31, Y+2	; 0x02
    93a6:	31 96       	adiw	r30, 0x01	; 1
    93a8:	fa 83       	std	Y+2, r31	; 0x02
    93aa:	e9 83       	std	Y+1, r30	; 0x01
    93ac:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    93ae:	61 11       	cpse	r22, r1
    93b0:	f0 cf       	rjmp	.-32     	; 0x9392 <_Z12processMCodei+0xdac>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    93b2:	e8 ea       	ldi	r30, 0xA8	; 168
    93b4:	f0 e1       	ldi	r31, 0x10	; 16
    93b6:	64 91       	lpm	r22, Z
	while(ch)
    93b8:	66 23       	and	r22, r22
    93ba:	a1 f0       	breq	.+40     	; 0x93e4 <_Z12processMCodei+0xdfe>
    93bc:	fa 83       	std	Y+2, r31	; 0x02
    93be:	e9 83       	std	Y+1, r30	; 0x01
    93c0:	08 e0       	ldi	r16, 0x08	; 8
    93c2:	1a e0       	ldi	r17, 0x0A	; 10
    93c4:	d8 01       	movw	r26, r16
    93c6:	ed 91       	ld	r30, X+
    93c8:	fc 91       	ld	r31, X
    93ca:	01 90       	ld	r0, Z+
    93cc:	f0 81       	ld	r31, Z
    93ce:	e0 2d       	mov	r30, r0
    93d0:	c8 01       	movw	r24, r16
    93d2:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    93d4:	e9 81       	ldd	r30, Y+1	; 0x01
    93d6:	fa 81       	ldd	r31, Y+2	; 0x02
    93d8:	31 96       	adiw	r30, 0x01	; 1
    93da:	fa 83       	std	Y+2, r31	; 0x02
    93dc:	e9 83       	std	Y+1, r30	; 0x01
    93de:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    93e0:	61 11       	cpse	r22, r1
    93e2:	f0 cf       	rjmp	.-32     	; 0x93c4 <_Z12processMCodei+0xdde>
					SERIAL_PGM(MSG_BEGIN);
					SERIAL_PGM("M6");
					SERIAL_PGMLN(MSG_TERMINATE);
    93e4:	88 e0       	ldi	r24, 0x08	; 8
    93e6:	9a e0       	ldi	r25, 0x0A	; 10
    93e8:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
					SERIAL_PORT.flush();
    93ec:	88 e0       	ldi	r24, 0x08	; 8
    93ee:	9a e0       	ldi	r25, 0x0A	; 10
    93f0:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    93f4:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			}
		}
		break;
		
	case 7: // M7 [Z<slot>] [X]- Set motor override to stop motor operation, or optionally PWM operation, if X, slot is PWM
		if(code_seen('Z')) {
    93f8:	8a e5       	ldi	r24, 0x5A	; 90
    93fa:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    93fe:	88 23       	and	r24, r24
    9400:	39 f0       	breq	.+14     	; 0x9410 <_Z12processMCodei+0xe2a>
			motorController = code_value();
    9402:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    9406:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    940a:	7a 83       	std	Y+2, r23	; 0x02
    940c:	69 83       	std	Y+1, r22	; 0x01
    940e:	02 c0       	rjmp	.+4      	; 0x9414 <_Z12processMCodei+0xe2e>
  /*-------------------------------------
  * M Code processing
  *--------------------------------------
  */
  void processMCode(int cval) {
	  int motorController = 0; 
    9410:	1a 82       	std	Y+2, r1	; 0x02
    9412:	19 82       	std	Y+1, r1	; 0x01
		
	case 7: // M7 [Z<slot>] [X]- Set motor override to stop motor operation, or optionally PWM operation, if X, slot is PWM
		if(code_seen('Z')) {
			motorController = code_value();
		}
		if(code_seen('X')) {
    9414:	88 e5       	ldi	r24, 0x58	; 88
    9416:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    941a:	88 23       	and	r24, r24
    941c:	09 f4       	brne	.+2      	; 0x9420 <_Z12processMCodei+0xe3a>
    941e:	75 c0       	rjmp	.+234    	; 0x950a <_Z12processMCodei+0xf24>
			if(pwmControl[motorController]) {
    9420:	69 81       	ldd	r22, Y+1	; 0x01
    9422:	7a 81       	ldd	r23, Y+2	; 0x02
    9424:	66 0f       	add	r22, r22
    9426:	77 1f       	adc	r23, r23
    9428:	fb 01       	movw	r30, r22
    942a:	ed 51       	subi	r30, 0x1D	; 29
    942c:	fd 4e       	sbci	r31, 0xED	; 237
    942e:	20 81       	ld	r18, Z
    9430:	31 81       	ldd	r19, Z+1	; 0x01
    9432:	3a 83       	std	Y+2, r19	; 0x02
    9434:	29 83       	std	Y+1, r18	; 0x01
    9436:	21 15       	cp	r18, r1
    9438:	31 05       	cpc	r19, r1
    943a:	11 f4       	brne	.+4      	; 0x9440 <_Z12processMCodei+0xe5a>
    943c:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
	uint32_t getMinPWMLevel(uint8_t ch) { return minPWMLevel[ch-1] ; }
	int getPWMLevel(uint8_t ch) { return pwmLevel[ch-1]; }
	void setChannels(uint8_t ch) { channels = ch; }
	uint8_t getChannels(void) { return channels; }
	void resetLevels(void);
	void setPWMShutdown(void) { commandEmergencyStop(1); PWMSHUTDOWN = 1;}
    9440:	d9 01       	movw	r26, r18
    9442:	ed 91       	ld	r30, X+
    9444:	fc 91       	ld	r31, X
    9446:	06 80       	ldd	r0, Z+6	; 0x06
    9448:	f7 81       	ldd	r31, Z+7	; 0x07
    944a:	e0 2d       	mov	r30, r0
    944c:	61 e0       	ldi	r22, 0x01	; 1
    944e:	70 e0       	ldi	r23, 0x00	; 0
    9450:	c9 01       	movw	r24, r18
    9452:	19 95       	eicall
    9454:	e9 81       	ldd	r30, Y+1	; 0x01
    9456:	fa 81       	ldd	r31, Y+2	; 0x02
    9458:	e9 56       	subi	r30, 0x69	; 105
    945a:	ff 4f       	sbci	r31, 0xFF	; 255
    945c:	81 e0       	ldi	r24, 0x01	; 1
    945e:	80 83       	st	Z, r24
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    9460:	e6 ea       	ldi	r30, 0xA6	; 166
    9462:	f0 e1       	ldi	r31, 0x10	; 16
    9464:	64 91       	lpm	r22, Z
	while(ch)
    9466:	66 23       	and	r22, r22
    9468:	a1 f0       	breq	.+40     	; 0x9492 <_Z12processMCodei+0xeac>
    946a:	fa 83       	std	Y+2, r31	; 0x02
    946c:	e9 83       	std	Y+1, r30	; 0x01
    946e:	08 e0       	ldi	r16, 0x08	; 8
    9470:	1a e0       	ldi	r17, 0x0A	; 10
    9472:	d8 01       	movw	r26, r16
    9474:	ed 91       	ld	r30, X+
    9476:	fc 91       	ld	r31, X
    9478:	01 90       	ld	r0, Z+
    947a:	f0 81       	ld	r31, Z
    947c:	e0 2d       	mov	r30, r0
    947e:	c8 01       	movw	r24, r16
    9480:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    9482:	e9 81       	ldd	r30, Y+1	; 0x01
    9484:	fa 81       	ldd	r31, Y+2	; 0x02
    9486:	31 96       	adiw	r30, 0x01	; 1
    9488:	fa 83       	std	Y+2, r31	; 0x02
    948a:	e9 83       	std	Y+1, r30	; 0x01
    948c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    948e:	61 11       	cpse	r22, r1
    9490:	f0 cf       	rjmp	.-32     	; 0x9472 <_Z12processMCodei+0xe8c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    9492:	e3 ea       	ldi	r30, 0xA3	; 163
    9494:	f0 e1       	ldi	r31, 0x10	; 16
    9496:	64 91       	lpm	r22, Z
	while(ch)
    9498:	66 23       	and	r22, r22
    949a:	a1 f0       	breq	.+40     	; 0x94c4 <_Z12processMCodei+0xede>
    949c:	fa 83       	std	Y+2, r31	; 0x02
    949e:	e9 83       	std	Y+1, r30	; 0x01
    94a0:	08 e0       	ldi	r16, 0x08	; 8
    94a2:	1a e0       	ldi	r17, 0x0A	; 10
    94a4:	d8 01       	movw	r26, r16
    94a6:	ed 91       	ld	r30, X+
    94a8:	fc 91       	ld	r31, X
    94aa:	01 90       	ld	r0, Z+
    94ac:	f0 81       	ld	r31, Z
    94ae:	e0 2d       	mov	r30, r0
    94b0:	c8 01       	movw	r24, r16
    94b2:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    94b4:	e9 81       	ldd	r30, Y+1	; 0x01
    94b6:	fa 81       	ldd	r31, Y+2	; 0x02
    94b8:	31 96       	adiw	r30, 0x01	; 1
    94ba:	fa 83       	std	Y+2, r31	; 0x02
    94bc:	e9 83       	std	Y+1, r30	; 0x01
    94be:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    94c0:	61 11       	cpse	r22, r1
    94c2:	f0 cf       	rjmp	.-32     	; 0x94a4 <_Z12processMCodei+0xebe>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    94c4:	e0 ea       	ldi	r30, 0xA0	; 160
    94c6:	f0 e1       	ldi	r31, 0x10	; 16
    94c8:	64 91       	lpm	r22, Z
	while(ch)
    94ca:	66 23       	and	r22, r22
    94cc:	a1 f0       	breq	.+40     	; 0x94f6 <_Z12processMCodei+0xf10>
    94ce:	fa 83       	std	Y+2, r31	; 0x02
    94d0:	e9 83       	std	Y+1, r30	; 0x01
    94d2:	08 e0       	ldi	r16, 0x08	; 8
    94d4:	1a e0       	ldi	r17, 0x0A	; 10
    94d6:	d8 01       	movw	r26, r16
    94d8:	ed 91       	ld	r30, X+
    94da:	fc 91       	ld	r31, X
    94dc:	01 90       	ld	r0, Z+
    94de:	f0 81       	ld	r31, Z
    94e0:	e0 2d       	mov	r30, r0
    94e2:	c8 01       	movw	r24, r16
    94e4:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    94e6:	e9 81       	ldd	r30, Y+1	; 0x01
    94e8:	fa 81       	ldd	r31, Y+2	; 0x02
    94ea:	31 96       	adiw	r30, 0x01	; 1
    94ec:	fa 83       	std	Y+2, r31	; 0x02
    94ee:	e9 83       	std	Y+1, r30	; 0x01
    94f0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    94f2:	61 11       	cpse	r22, r1
    94f4:	f0 cf       	rjmp	.-32     	; 0x94d6 <_Z12processMCodei+0xef0>
				pwmControl[motorController]->setPWMShutdown();
				SERIAL_PGM(MSG_BEGIN);
				SERIAL_PGM("M7");
				SERIAL_PGMLN(MSG_TERMINATE);
    94f6:	88 e0       	ldi	r24, 0x08	; 8
    94f8:	9a e0       	ldi	r25, 0x0A	; 10
    94fa:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
				SERIAL_PORT.flush();
    94fe:	88 e0       	ldi	r24, 0x08	; 8
    9500:	9a e0       	ldi	r25, 0x0A	; 10
    9502:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    9506:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			}
		} else {
			if(motorControl[motorController]) {
    950a:	69 81       	ldd	r22, Y+1	; 0x01
    950c:	7a 81       	ldd	r23, Y+2	; 0x02
    950e:	66 0f       	add	r22, r22
    9510:	77 1f       	adc	r23, r23
    9512:	fb 01       	movw	r30, r22
    9514:	e9 50       	subi	r30, 0x09	; 9
    9516:	fd 4e       	sbci	r31, 0xED	; 237
    9518:	20 81       	ld	r18, Z
    951a:	31 81       	ldd	r19, Z+1	; 0x01
    951c:	3a 83       	std	Y+2, r19	; 0x02
    951e:	29 83       	std	Y+1, r18	; 0x01
    9520:	21 15       	cp	r18, r1
    9522:	31 05       	cpc	r19, r1
    9524:	11 f4       	brne	.+4      	; 0x952a <_Z12processMCodei+0xf44>
    9526:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
	CounterInterruptService* getWheelEncoderService(uint8_t ch) { return wheelEncoderService[ch-1]; }
	void setChannels(uint8_t ch) { channels = ch; }
	uint8_t getChannels(void) { return channels; }
	void resetSpeeds(void);
	void resetEncoders(void);
	void setMotorShutdown(void) { commandEmergencyStop(1); MOTORSHUTDOWN = 1;}
    952a:	d9 01       	movw	r26, r18
    952c:	ed 91       	ld	r30, X+
    952e:	fc 91       	ld	r31, X
    9530:	06 80       	ldd	r0, Z+6	; 0x06
    9532:	f7 81       	ldd	r31, Z+7	; 0x07
    9534:	e0 2d       	mov	r30, r0
    9536:	61 e0       	ldi	r22, 0x01	; 1
    9538:	70 e0       	ldi	r23, 0x00	; 0
    953a:	c9 01       	movw	r24, r18
    953c:	19 95       	eicall
    953e:	e9 81       	ldd	r30, Y+1	; 0x01
    9540:	fa 81       	ldd	r31, Y+2	; 0x02
    9542:	ed 51       	subi	r30, 0x1D	; 29
    9544:	ff 4f       	sbci	r31, 0xFF	; 255
    9546:	81 e0       	ldi	r24, 0x01	; 1
    9548:	80 83       	st	Z, r24
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    954a:	ee e9       	ldi	r30, 0x9E	; 158
    954c:	f0 e1       	ldi	r31, 0x10	; 16
    954e:	64 91       	lpm	r22, Z
	while(ch)
    9550:	66 23       	and	r22, r22
    9552:	a1 f0       	breq	.+40     	; 0x957c <_Z12processMCodei+0xf96>
    9554:	fa 83       	std	Y+2, r31	; 0x02
    9556:	e9 83       	std	Y+1, r30	; 0x01
    9558:	08 e0       	ldi	r16, 0x08	; 8
    955a:	1a e0       	ldi	r17, 0x0A	; 10
    955c:	d8 01       	movw	r26, r16
    955e:	ed 91       	ld	r30, X+
    9560:	fc 91       	ld	r31, X
    9562:	01 90       	ld	r0, Z+
    9564:	f0 81       	ld	r31, Z
    9566:	e0 2d       	mov	r30, r0
    9568:	c8 01       	movw	r24, r16
    956a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    956c:	e9 81       	ldd	r30, Y+1	; 0x01
    956e:	fa 81       	ldd	r31, Y+2	; 0x02
    9570:	31 96       	adiw	r30, 0x01	; 1
    9572:	fa 83       	std	Y+2, r31	; 0x02
    9574:	e9 83       	std	Y+1, r30	; 0x01
    9576:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    9578:	61 11       	cpse	r22, r1
    957a:	f0 cf       	rjmp	.-32     	; 0x955c <_Z12processMCodei+0xf76>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    957c:	eb e9       	ldi	r30, 0x9B	; 155
    957e:	f0 e1       	ldi	r31, 0x10	; 16
    9580:	64 91       	lpm	r22, Z
	while(ch)
    9582:	66 23       	and	r22, r22
    9584:	a1 f0       	breq	.+40     	; 0x95ae <_Z12processMCodei+0xfc8>
    9586:	fa 83       	std	Y+2, r31	; 0x02
    9588:	e9 83       	std	Y+1, r30	; 0x01
    958a:	08 e0       	ldi	r16, 0x08	; 8
    958c:	1a e0       	ldi	r17, 0x0A	; 10
    958e:	d8 01       	movw	r26, r16
    9590:	ed 91       	ld	r30, X+
    9592:	fc 91       	ld	r31, X
    9594:	01 90       	ld	r0, Z+
    9596:	f0 81       	ld	r31, Z
    9598:	e0 2d       	mov	r30, r0
    959a:	c8 01       	movw	r24, r16
    959c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    959e:	e9 81       	ldd	r30, Y+1	; 0x01
    95a0:	fa 81       	ldd	r31, Y+2	; 0x02
    95a2:	31 96       	adiw	r30, 0x01	; 1
    95a4:	fa 83       	std	Y+2, r31	; 0x02
    95a6:	e9 83       	std	Y+1, r30	; 0x01
    95a8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    95aa:	61 11       	cpse	r22, r1
    95ac:	f0 cf       	rjmp	.-32     	; 0x958e <_Z12processMCodei+0xfa8>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    95ae:	e8 e9       	ldi	r30, 0x98	; 152
    95b0:	f0 e1       	ldi	r31, 0x10	; 16
    95b2:	64 91       	lpm	r22, Z
	while(ch)
    95b4:	66 23       	and	r22, r22
    95b6:	a1 f0       	breq	.+40     	; 0x95e0 <_Z12processMCodei+0xffa>
    95b8:	fa 83       	std	Y+2, r31	; 0x02
    95ba:	e9 83       	std	Y+1, r30	; 0x01
    95bc:	08 e0       	ldi	r16, 0x08	; 8
    95be:	1a e0       	ldi	r17, 0x0A	; 10
    95c0:	d8 01       	movw	r26, r16
    95c2:	ed 91       	ld	r30, X+
    95c4:	fc 91       	ld	r31, X
    95c6:	01 90       	ld	r0, Z+
    95c8:	f0 81       	ld	r31, Z
    95ca:	e0 2d       	mov	r30, r0
    95cc:	c8 01       	movw	r24, r16
    95ce:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    95d0:	e9 81       	ldd	r30, Y+1	; 0x01
    95d2:	fa 81       	ldd	r31, Y+2	; 0x02
    95d4:	31 96       	adiw	r30, 0x01	; 1
    95d6:	fa 83       	std	Y+2, r31	; 0x02
    95d8:	e9 83       	std	Y+1, r30	; 0x01
    95da:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    95dc:	61 11       	cpse	r22, r1
    95de:	f0 cf       	rjmp	.-32     	; 0x95c0 <_Z12processMCodei+0xfda>
				motorControl[motorController]->setMotorShutdown();
				SERIAL_PGM(MSG_BEGIN);
				SERIAL_PGM("M7");
				SERIAL_PGMLN(MSG_TERMINATE);
    95e0:	88 e0       	ldi	r24, 0x08	; 8
    95e2:	9a e0       	ldi	r25, 0x0A	; 10
    95e4:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
				SERIAL_PORT.flush();
    95e8:	88 e0       	ldi	r24, 0x08	; 8
    95ea:	9a e0       	ldi	r25, 0x0A	; 10
    95ec:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    95f0:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			}
		}
		break;
		
	case 8: // M8 [Z<slot>][X] - Set motor override to start motor operation after stop override M7. If X, slot is PWM
		if(code_seen('Z')) {
    95f4:	8a e5       	ldi	r24, 0x5A	; 90
    95f6:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    95fa:	88 23       	and	r24, r24
    95fc:	39 f0       	breq	.+14     	; 0x960c <_Z12processMCodei+0x1026>
			motorController = code_value();
    95fe:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    9602:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    9606:	7a 83       	std	Y+2, r23	; 0x02
    9608:	69 83       	std	Y+1, r22	; 0x01
    960a:	02 c0       	rjmp	.+4      	; 0x9610 <_Z12processMCodei+0x102a>
  /*-------------------------------------
  * M Code processing
  *--------------------------------------
  */
  void processMCode(int cval) {
	  int motorController = 0; 
    960c:	1a 82       	std	Y+2, r1	; 0x02
    960e:	19 82       	std	Y+1, r1	; 0x01
		
	case 8: // M8 [Z<slot>][X] - Set motor override to start motor operation after stop override M7. If X, slot is PWM
		if(code_seen('Z')) {
			motorController = code_value();
		}
		if(code_seen('X')) {
    9610:	88 e5       	ldi	r24, 0x58	; 88
    9612:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    9616:	88 23       	and	r24, r24
    9618:	09 f4       	brne	.+2      	; 0x961c <_Z12processMCodei+0x1036>
    961a:	74 c0       	rjmp	.+232    	; 0x9704 <_Z12processMCodei+0x111e>
			if(pwmControl[motorController]) {
    961c:	69 81       	ldd	r22, Y+1	; 0x01
    961e:	7a 81       	ldd	r23, Y+2	; 0x02
    9620:	66 0f       	add	r22, r22
    9622:	77 1f       	adc	r23, r23
    9624:	fb 01       	movw	r30, r22
    9626:	ed 51       	subi	r30, 0x1D	; 29
    9628:	fd 4e       	sbci	r31, 0xED	; 237
    962a:	20 81       	ld	r18, Z
    962c:	31 81       	ldd	r19, Z+1	; 0x01
    962e:	3a 83       	std	Y+2, r19	; 0x02
    9630:	29 83       	std	Y+1, r18	; 0x01
    9632:	21 15       	cp	r18, r1
    9634:	31 05       	cpc	r19, r1
    9636:	11 f4       	brne	.+4      	; 0x963c <_Z12processMCodei+0x1056>
    9638:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
	void setPWMRun(void) { commandEmergencyStop(0); PWMSHUTDOWN = 0;}
    963c:	d9 01       	movw	r26, r18
    963e:	ed 91       	ld	r30, X+
    9640:	fc 91       	ld	r31, X
    9642:	06 80       	ldd	r0, Z+6	; 0x06
    9644:	f7 81       	ldd	r31, Z+7	; 0x07
    9646:	e0 2d       	mov	r30, r0
    9648:	60 e0       	ldi	r22, 0x00	; 0
    964a:	70 e0       	ldi	r23, 0x00	; 0
    964c:	c9 01       	movw	r24, r18
    964e:	19 95       	eicall
    9650:	e9 81       	ldd	r30, Y+1	; 0x01
    9652:	fa 81       	ldd	r31, Y+2	; 0x02
    9654:	e9 56       	subi	r30, 0x69	; 105
    9656:	ff 4f       	sbci	r31, 0xFF	; 255
    9658:	10 82       	st	Z, r1
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    965a:	e6 e9       	ldi	r30, 0x96	; 150
    965c:	f0 e1       	ldi	r31, 0x10	; 16
    965e:	64 91       	lpm	r22, Z
	while(ch)
    9660:	66 23       	and	r22, r22
    9662:	a1 f0       	breq	.+40     	; 0x968c <_Z12processMCodei+0x10a6>
    9664:	fa 83       	std	Y+2, r31	; 0x02
    9666:	e9 83       	std	Y+1, r30	; 0x01
    9668:	08 e0       	ldi	r16, 0x08	; 8
    966a:	1a e0       	ldi	r17, 0x0A	; 10
    966c:	d8 01       	movw	r26, r16
    966e:	ed 91       	ld	r30, X+
    9670:	fc 91       	ld	r31, X
    9672:	01 90       	ld	r0, Z+
    9674:	f0 81       	ld	r31, Z
    9676:	e0 2d       	mov	r30, r0
    9678:	c8 01       	movw	r24, r16
    967a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    967c:	e9 81       	ldd	r30, Y+1	; 0x01
    967e:	fa 81       	ldd	r31, Y+2	; 0x02
    9680:	31 96       	adiw	r30, 0x01	; 1
    9682:	fa 83       	std	Y+2, r31	; 0x02
    9684:	e9 83       	std	Y+1, r30	; 0x01
    9686:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    9688:	61 11       	cpse	r22, r1
    968a:	f0 cf       	rjmp	.-32     	; 0x966c <_Z12processMCodei+0x1086>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    968c:	e3 e9       	ldi	r30, 0x93	; 147
    968e:	f0 e1       	ldi	r31, 0x10	; 16
    9690:	64 91       	lpm	r22, Z
	while(ch)
    9692:	66 23       	and	r22, r22
    9694:	a1 f0       	breq	.+40     	; 0x96be <_Z12processMCodei+0x10d8>
    9696:	fa 83       	std	Y+2, r31	; 0x02
    9698:	e9 83       	std	Y+1, r30	; 0x01
    969a:	08 e0       	ldi	r16, 0x08	; 8
    969c:	1a e0       	ldi	r17, 0x0A	; 10
    969e:	d8 01       	movw	r26, r16
    96a0:	ed 91       	ld	r30, X+
    96a2:	fc 91       	ld	r31, X
    96a4:	01 90       	ld	r0, Z+
    96a6:	f0 81       	ld	r31, Z
    96a8:	e0 2d       	mov	r30, r0
    96aa:	c8 01       	movw	r24, r16
    96ac:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    96ae:	e9 81       	ldd	r30, Y+1	; 0x01
    96b0:	fa 81       	ldd	r31, Y+2	; 0x02
    96b2:	31 96       	adiw	r30, 0x01	; 1
    96b4:	fa 83       	std	Y+2, r31	; 0x02
    96b6:	e9 83       	std	Y+1, r30	; 0x01
    96b8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    96ba:	61 11       	cpse	r22, r1
    96bc:	f0 cf       	rjmp	.-32     	; 0x969e <_Z12processMCodei+0x10b8>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    96be:	e0 e9       	ldi	r30, 0x90	; 144
    96c0:	f0 e1       	ldi	r31, 0x10	; 16
    96c2:	64 91       	lpm	r22, Z
	while(ch)
    96c4:	66 23       	and	r22, r22
    96c6:	a1 f0       	breq	.+40     	; 0x96f0 <_Z12processMCodei+0x110a>
    96c8:	fa 83       	std	Y+2, r31	; 0x02
    96ca:	e9 83       	std	Y+1, r30	; 0x01
    96cc:	08 e0       	ldi	r16, 0x08	; 8
    96ce:	1a e0       	ldi	r17, 0x0A	; 10
    96d0:	d8 01       	movw	r26, r16
    96d2:	ed 91       	ld	r30, X+
    96d4:	fc 91       	ld	r31, X
    96d6:	01 90       	ld	r0, Z+
    96d8:	f0 81       	ld	r31, Z
    96da:	e0 2d       	mov	r30, r0
    96dc:	c8 01       	movw	r24, r16
    96de:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    96e0:	e9 81       	ldd	r30, Y+1	; 0x01
    96e2:	fa 81       	ldd	r31, Y+2	; 0x02
    96e4:	31 96       	adiw	r30, 0x01	; 1
    96e6:	fa 83       	std	Y+2, r31	; 0x02
    96e8:	e9 83       	std	Y+1, r30	; 0x01
    96ea:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    96ec:	61 11       	cpse	r22, r1
    96ee:	f0 cf       	rjmp	.-32     	; 0x96d0 <_Z12processMCodei+0x10ea>
				pwmControl[motorController]->setPWMRun();
				SERIAL_PGM(MSG_BEGIN);
				SERIAL_PGM("M8");
				SERIAL_PGMLN(MSG_TERMINATE);
    96f0:	88 e0       	ldi	r24, 0x08	; 8
    96f2:	9a e0       	ldi	r25, 0x0A	; 10
    96f4:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
				SERIAL_PORT.flush();
    96f8:	88 e0       	ldi	r24, 0x08	; 8
    96fa:	9a e0       	ldi	r25, 0x0A	; 10
    96fc:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    9700:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			}
		} else {
			if(motorControl[motorController] ) {
    9704:	69 81       	ldd	r22, Y+1	; 0x01
    9706:	7a 81       	ldd	r23, Y+2	; 0x02
    9708:	66 0f       	add	r22, r22
    970a:	77 1f       	adc	r23, r23
    970c:	fb 01       	movw	r30, r22
    970e:	e9 50       	subi	r30, 0x09	; 9
    9710:	fd 4e       	sbci	r31, 0xED	; 237
    9712:	20 81       	ld	r18, Z
    9714:	31 81       	ldd	r19, Z+1	; 0x01
    9716:	3a 83       	std	Y+2, r19	; 0x02
    9718:	29 83       	std	Y+1, r18	; 0x01
    971a:	21 15       	cp	r18, r1
    971c:	31 05       	cpc	r19, r1
    971e:	11 f4       	brne	.+4      	; 0x9724 <_Z12processMCodei+0x113e>
    9720:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
	void setMotorRun(void) { commandEmergencyStop(0); MOTORSHUTDOWN = 0;}
    9724:	d9 01       	movw	r26, r18
    9726:	ed 91       	ld	r30, X+
    9728:	fc 91       	ld	r31, X
    972a:	06 80       	ldd	r0, Z+6	; 0x06
    972c:	f7 81       	ldd	r31, Z+7	; 0x07
    972e:	e0 2d       	mov	r30, r0
    9730:	60 e0       	ldi	r22, 0x00	; 0
    9732:	70 e0       	ldi	r23, 0x00	; 0
    9734:	c9 01       	movw	r24, r18
    9736:	19 95       	eicall
    9738:	e9 81       	ldd	r30, Y+1	; 0x01
    973a:	fa 81       	ldd	r31, Y+2	; 0x02
    973c:	ed 51       	subi	r30, 0x1D	; 29
    973e:	ff 4f       	sbci	r31, 0xFF	; 255
    9740:	10 82       	st	Z, r1
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    9742:	ee e8       	ldi	r30, 0x8E	; 142
    9744:	f0 e1       	ldi	r31, 0x10	; 16
    9746:	64 91       	lpm	r22, Z
	while(ch)
    9748:	66 23       	and	r22, r22
    974a:	a1 f0       	breq	.+40     	; 0x9774 <_Z12processMCodei+0x118e>
    974c:	fa 83       	std	Y+2, r31	; 0x02
    974e:	e9 83       	std	Y+1, r30	; 0x01
    9750:	08 e0       	ldi	r16, 0x08	; 8
    9752:	1a e0       	ldi	r17, 0x0A	; 10
    9754:	d8 01       	movw	r26, r16
    9756:	ed 91       	ld	r30, X+
    9758:	fc 91       	ld	r31, X
    975a:	01 90       	ld	r0, Z+
    975c:	f0 81       	ld	r31, Z
    975e:	e0 2d       	mov	r30, r0
    9760:	c8 01       	movw	r24, r16
    9762:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    9764:	e9 81       	ldd	r30, Y+1	; 0x01
    9766:	fa 81       	ldd	r31, Y+2	; 0x02
    9768:	31 96       	adiw	r30, 0x01	; 1
    976a:	fa 83       	std	Y+2, r31	; 0x02
    976c:	e9 83       	std	Y+1, r30	; 0x01
    976e:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    9770:	61 11       	cpse	r22, r1
    9772:	f0 cf       	rjmp	.-32     	; 0x9754 <_Z12processMCodei+0x116e>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    9774:	eb e8       	ldi	r30, 0x8B	; 139
    9776:	f0 e1       	ldi	r31, 0x10	; 16
    9778:	64 91       	lpm	r22, Z
	while(ch)
    977a:	66 23       	and	r22, r22
    977c:	a1 f0       	breq	.+40     	; 0x97a6 <_Z12processMCodei+0x11c0>
    977e:	fa 83       	std	Y+2, r31	; 0x02
    9780:	e9 83       	std	Y+1, r30	; 0x01
    9782:	08 e0       	ldi	r16, 0x08	; 8
    9784:	1a e0       	ldi	r17, 0x0A	; 10
    9786:	d8 01       	movw	r26, r16
    9788:	ed 91       	ld	r30, X+
    978a:	fc 91       	ld	r31, X
    978c:	01 90       	ld	r0, Z+
    978e:	f0 81       	ld	r31, Z
    9790:	e0 2d       	mov	r30, r0
    9792:	c8 01       	movw	r24, r16
    9794:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    9796:	e9 81       	ldd	r30, Y+1	; 0x01
    9798:	fa 81       	ldd	r31, Y+2	; 0x02
    979a:	31 96       	adiw	r30, 0x01	; 1
    979c:	fa 83       	std	Y+2, r31	; 0x02
    979e:	e9 83       	std	Y+1, r30	; 0x01
    97a0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    97a2:	61 11       	cpse	r22, r1
    97a4:	f0 cf       	rjmp	.-32     	; 0x9786 <_Z12processMCodei+0x11a0>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    97a6:	e8 e8       	ldi	r30, 0x88	; 136
    97a8:	f0 e1       	ldi	r31, 0x10	; 16
    97aa:	64 91       	lpm	r22, Z
	while(ch)
    97ac:	66 23       	and	r22, r22
    97ae:	a1 f0       	breq	.+40     	; 0x97d8 <_Z12processMCodei+0x11f2>
    97b0:	fa 83       	std	Y+2, r31	; 0x02
    97b2:	e9 83       	std	Y+1, r30	; 0x01
    97b4:	08 e0       	ldi	r16, 0x08	; 8
    97b6:	1a e0       	ldi	r17, 0x0A	; 10
    97b8:	d8 01       	movw	r26, r16
    97ba:	ed 91       	ld	r30, X+
    97bc:	fc 91       	ld	r31, X
    97be:	01 90       	ld	r0, Z+
    97c0:	f0 81       	ld	r31, Z
    97c2:	e0 2d       	mov	r30, r0
    97c4:	c8 01       	movw	r24, r16
    97c6:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    97c8:	e9 81       	ldd	r30, Y+1	; 0x01
    97ca:	fa 81       	ldd	r31, Y+2	; 0x02
    97cc:	31 96       	adiw	r30, 0x01	; 1
    97ce:	fa 83       	std	Y+2, r31	; 0x02
    97d0:	e9 83       	std	Y+1, r30	; 0x01
    97d2:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    97d4:	61 11       	cpse	r22, r1
    97d6:	f0 cf       	rjmp	.-32     	; 0x97b8 <_Z12processMCodei+0x11d2>
				motorControl[motorController]->setMotorRun();
				SERIAL_PGM(MSG_BEGIN);
				SERIAL_PGM("M8");
				SERIAL_PGMLN(MSG_TERMINATE);
    97d8:	88 e0       	ldi	r24, 0x08	; 8
    97da:	9a e0       	ldi	r25, 0x0A	; 10
    97dc:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
				SERIAL_PORT.flush();
    97e0:	88 e0       	ldi	r24, 0x08	; 8
    97e2:	9a e0       	ldi	r25, 0x0A	; 10
    97e4:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    97e8:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		
	// Activate a previously created PWM controller of type AbstractPWMControl - a non propulsion PWM device such as LED or pump
	// Note there is no encoder or direction pin, and no possibility of reverse. What would be reverse in a motor control is the first
	// half of the power scale instead.
	case 9: // M9 [Z<slot>] P<pin> C<channel> D<enable pin> [R<resolution 8,9,10 bits>] [X<prescale 0-7>] - PWM control
		timer_res = 8; // resolution in bits
    97ec:	88 e0       	ldi	r24, 0x08	; 8
    97ee:	90 e0       	ldi	r25, 0x00	; 0
    97f0:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <timer_res+0x1>
    97f4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <timer_res>
		timer_pre = 1; // 1 is no prescale
    97f8:	81 e0       	ldi	r24, 0x01	; 1
    97fa:	90 e0       	ldi	r25, 0x00	; 0
    97fc:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <timer_pre+0x1>
    9800:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <timer_pre>
		pin_number = -1;
    9804:	8f ef       	ldi	r24, 0xFF	; 255
    9806:	9f ef       	ldi	r25, 0xFF	; 255
    9808:	90 93 1d 13 	sts	0x131D, r25	; 0x80131d <pin_number+0x1>
    980c:	80 93 1c 13 	sts	0x131C, r24	; 0x80131c <pin_number>
		encode_pin = 0;
    9810:	10 92 13 13 	sts	0x1313, r1	; 0x801313 <encode_pin+0x1>
    9814:	10 92 12 13 	sts	0x1312, r1	; 0x801312 <encode_pin>
		if(code_seen('Z')) {
    9818:	8a e5       	ldi	r24, 0x5A	; 90
    981a:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    981e:	88 23       	and	r24, r24
    9820:	39 f0       	breq	.+14     	; 0x9830 <_Z12processMCodei+0x124a>
			  PWMDriver = code_value();
    9822:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    9826:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    982a:	7a 83       	std	Y+2, r23	; 0x02
    982c:	69 83       	std	Y+1, r22	; 0x01
    982e:	02 c0       	rjmp	.+4      	; 0x9834 <_Z12processMCodei+0x124e>
  * M Code processing
  *--------------------------------------
  */
  void processMCode(int cval) {
	  int motorController = 0; 
	  int PWMDriver = 0;
    9830:	1a 82       	std	Y+2, r1	; 0x02
    9832:	19 82       	std	Y+1, r1	; 0x01
		pin_number = -1;
		encode_pin = 0;
		if(code_seen('Z')) {
			  PWMDriver = code_value();
		}
		if(pwmControl[PWMDriver]) {
    9834:	e9 81       	ldd	r30, Y+1	; 0x01
    9836:	fa 81       	ldd	r31, Y+2	; 0x02
    9838:	ee 0f       	add	r30, r30
    983a:	ff 1f       	adc	r31, r31
    983c:	ed 51       	subi	r30, 0x1D	; 29
    983e:	fd 4e       	sbci	r31, 0xED	; 237
    9840:	01 90       	ld	r0, Z+
    9842:	f0 81       	ld	r31, Z
    9844:	e0 2d       	mov	r30, r0
    9846:	30 97       	sbiw	r30, 0x00	; 0
    9848:	11 f4       	brne	.+4      	; 0x984e <_Z12processMCodei+0x1268>
    984a:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
	VariablePWMDriver();
	~VariablePWMDriver();
	int commandPWMLevel(uint8_t ch, int16_t p);
	int commandEmergencyStop(int status);
	int isConnected(void) { return true; }
	void setPWMs(PWM** pwm) { ppwms = pwm; }
    984e:	83 e2       	ldi	r24, 0x23	; 35
    9850:	93 e1       	ldi	r25, 0x13	; 19
    9852:	96 83       	std	Z+6, r25	; 0x06
    9854:	85 83       	std	Z+5, r24	; 0x05
		 ((VariablePWMDriver*)pwmControl[PWMDriver])->setPWMs((PWM**)&ppwms);
		 ((VariablePWMDriver*)pwmControl[PWMDriver])->setEnablePins((Digital**)&pdigitals);
    9856:	e9 81       	ldd	r30, Y+1	; 0x01
    9858:	fa 81       	ldd	r31, Y+2	; 0x02
    985a:	ee 0f       	add	r30, r30
    985c:	ff 1f       	adc	r31, r31
    985e:	ed 51       	subi	r30, 0x1D	; 29
    9860:	fd 4e       	sbci	r31, 0xED	; 237
    9862:	01 90       	ld	r0, Z+
    9864:	f0 81       	ld	r31, Z
    9866:	e0 2d       	mov	r30, r0
	void setEnablePins(Digital** dpin) { pdigitals = dpin; }
    9868:	8b e3       	ldi	r24, 0x3B	; 59
    986a:	93 e1       	ldi	r25, 0x13	; 19
    986c:	90 87       	std	Z+8, r25	; 0x08
    986e:	87 83       	std	Z+7, r24	; 0x07
		 if(code_seen('P')) {
    9870:	80 e5       	ldi	r24, 0x50	; 80
    9872:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    9876:	88 23       	and	r24, r24
    9878:	11 f4       	brne	.+4      	; 0x987e <_Z12processMCodei+0x1298>
    987a:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			  pin_number = code_value();
    987e:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    9882:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    9886:	70 93 1d 13 	sts	0x131D, r23	; 0x80131d <pin_number+0x1>
    988a:	60 93 1c 13 	sts	0x131C, r22	; 0x80131c <pin_number>
		 } else {
			  break;
		 }
		 if(code_seen('C')) {
    988e:	83 e4       	ldi	r24, 0x43	; 67
    9890:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    9894:	88 23       	and	r24, r24
    9896:	11 f4       	brne	.+4      	; 0x989c <_Z12processMCodei+0x12b6>
    9898:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			channel = code_value();
    989c:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    98a0:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    98a4:	60 93 22 13 	sts	0x1322, r22	; 0x801322 <channel>
			if(channel <= 0) {
    98a8:	66 23       	and	r22, r22
    98aa:	11 f4       	brne	.+4      	; 0x98b0 <_Z12processMCodei+0x12ca>
    98ac:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
				break;
			}
			if( code_seen('D')) {
    98b0:	84 e4       	ldi	r24, 0x44	; 68
    98b2:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    98b6:	88 23       	and	r24, r24
    98b8:	11 f4       	brne	.+4      	; 0x98be <_Z12processMCodei+0x12d8>
    98ba:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
				enable_pin = code_value();
    98be:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    98c2:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    98c6:	70 93 15 13 	sts	0x1315, r23	; 0x801315 <enable_pin+0x1>
    98ca:	60 93 14 13 	sts	0x1314, r22	; 0x801314 <enable_pin>
			} else {
				break;
			}
			if(code_seen('X')) {
    98ce:	88 e5       	ldi	r24, 0x58	; 88
    98d0:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    98d4:	88 23       	and	r24, r24
    98d6:	41 f0       	breq	.+16     	; 0x98e8 <_Z12processMCodei+0x1302>
				timer_pre = code_value();
    98d8:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    98dc:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    98e0:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <timer_pre+0x1>
    98e4:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <timer_pre>
			}
			if( code_seen('R')) {
    98e8:	82 e5       	ldi	r24, 0x52	; 82
    98ea:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    98ee:	88 23       	and	r24, r24
    98f0:	41 f0       	breq	.+16     	; 0x9902 <_Z12processMCodei+0x131c>
				timer_res = code_value();
    98f2:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    98f6:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    98fa:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <timer_res+0x1>
    98fe:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <timer_res>
			}
			((VariablePWMDriver*)pwmControl[PWMDriver])->createPWM(channel, pin_number, enable_pin, timer_pre, timer_res);
    9902:	e0 90 08 02 	lds	r14, 0x0208	; 0x800208 <timer_res>
    9906:	f0 90 09 02 	lds	r15, 0x0209	; 0x800209 <timer_res+0x1>
    990a:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <timer_pre>
    990e:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <timer_pre+0x1>
    9912:	e9 81       	ldd	r30, Y+1	; 0x01
    9914:	fa 81       	ldd	r31, Y+2	; 0x02
    9916:	ee 0f       	add	r30, r30
    9918:	ff 1f       	adc	r31, r31
    991a:	ed 51       	subi	r30, 0x1D	; 29
    991c:	fd 4e       	sbci	r31, 0xED	; 237
    991e:	20 91 14 13 	lds	r18, 0x1314	; 0x801314 <enable_pin>
    9922:	40 91 1c 13 	lds	r20, 0x131C	; 0x80131c <pin_number>
    9926:	60 91 22 13 	lds	r22, 0x1322	; 0x801322 <channel>
    992a:	80 81       	ld	r24, Z
    992c:	91 81       	ldd	r25, Z+1	; 0x01
    992e:	0e 94 31 94 	call	0x12862	; 0x12862 <_ZN17VariablePWMDriver9createPWMEhhhii>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    9932:	e6 e8       	ldi	r30, 0x86	; 134
    9934:	f0 e1       	ldi	r31, 0x10	; 16
    9936:	64 91       	lpm	r22, Z
	while(ch)
    9938:	66 23       	and	r22, r22
    993a:	a1 f0       	breq	.+40     	; 0x9964 <_Z12processMCodei+0x137e>
    993c:	fa 83       	std	Y+2, r31	; 0x02
    993e:	e9 83       	std	Y+1, r30	; 0x01
    9940:	08 e0       	ldi	r16, 0x08	; 8
    9942:	1a e0       	ldi	r17, 0x0A	; 10
    9944:	d8 01       	movw	r26, r16
    9946:	ed 91       	ld	r30, X+
    9948:	fc 91       	ld	r31, X
    994a:	01 90       	ld	r0, Z+
    994c:	f0 81       	ld	r31, Z
    994e:	e0 2d       	mov	r30, r0
    9950:	c8 01       	movw	r24, r16
    9952:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    9954:	e9 81       	ldd	r30, Y+1	; 0x01
    9956:	fa 81       	ldd	r31, Y+2	; 0x02
    9958:	31 96       	adiw	r30, 0x01	; 1
    995a:	fa 83       	std	Y+2, r31	; 0x02
    995c:	e9 83       	std	Y+1, r30	; 0x01
    995e:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    9960:	61 11       	cpse	r22, r1
    9962:	f0 cf       	rjmp	.-32     	; 0x9944 <_Z12processMCodei+0x135e>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    9964:	e3 e8       	ldi	r30, 0x83	; 131
    9966:	f0 e1       	ldi	r31, 0x10	; 16
    9968:	64 91       	lpm	r22, Z
	while(ch)
    996a:	66 23       	and	r22, r22
    996c:	a1 f0       	breq	.+40     	; 0x9996 <_Z12processMCodei+0x13b0>
    996e:	fa 83       	std	Y+2, r31	; 0x02
    9970:	e9 83       	std	Y+1, r30	; 0x01
    9972:	08 e0       	ldi	r16, 0x08	; 8
    9974:	1a e0       	ldi	r17, 0x0A	; 10
    9976:	d8 01       	movw	r26, r16
    9978:	ed 91       	ld	r30, X+
    997a:	fc 91       	ld	r31, X
    997c:	01 90       	ld	r0, Z+
    997e:	f0 81       	ld	r31, Z
    9980:	e0 2d       	mov	r30, r0
    9982:	c8 01       	movw	r24, r16
    9984:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    9986:	e9 81       	ldd	r30, Y+1	; 0x01
    9988:	fa 81       	ldd	r31, Y+2	; 0x02
    998a:	31 96       	adiw	r30, 0x01	; 1
    998c:	fa 83       	std	Y+2, r31	; 0x02
    998e:	e9 83       	std	Y+1, r30	; 0x01
    9990:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    9992:	61 11       	cpse	r22, r1
    9994:	f0 cf       	rjmp	.-32     	; 0x9976 <_Z12processMCodei+0x1390>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    9996:	e0 e8       	ldi	r30, 0x80	; 128
    9998:	f0 e1       	ldi	r31, 0x10	; 16
    999a:	64 91       	lpm	r22, Z
	while(ch)
    999c:	66 23       	and	r22, r22
    999e:	a1 f0       	breq	.+40     	; 0x99c8 <_Z12processMCodei+0x13e2>
    99a0:	fa 83       	std	Y+2, r31	; 0x02
    99a2:	e9 83       	std	Y+1, r30	; 0x01
    99a4:	08 e0       	ldi	r16, 0x08	; 8
    99a6:	1a e0       	ldi	r17, 0x0A	; 10
    99a8:	d8 01       	movw	r26, r16
    99aa:	ed 91       	ld	r30, X+
    99ac:	fc 91       	ld	r31, X
    99ae:	01 90       	ld	r0, Z+
    99b0:	f0 81       	ld	r31, Z
    99b2:	e0 2d       	mov	r30, r0
    99b4:	c8 01       	movw	r24, r16
    99b6:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    99b8:	e9 81       	ldd	r30, Y+1	; 0x01
    99ba:	fa 81       	ldd	r31, Y+2	; 0x02
    99bc:	31 96       	adiw	r30, 0x01	; 1
    99be:	fa 83       	std	Y+2, r31	; 0x02
    99c0:	e9 83       	std	Y+1, r30	; 0x01
    99c2:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    99c4:	61 11       	cpse	r22, r1
    99c6:	f0 cf       	rjmp	.-32     	; 0x99a8 <_Z12processMCodei+0x13c2>
			SERIAL_PGM(MSG_BEGIN);
			SERIAL_PGM("M9");
			SERIAL_PGMLN(MSG_TERMINATE);
    99c8:	88 e0       	ldi	r24, 0x08	; 8
    99ca:	9a e0       	ldi	r25, 0x0A	; 10
    99cc:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
			SERIAL_PORT.flush();
    99d0:	88 e0       	ldi	r24, 0x08	; 8
    99d2:	9a e0       	ldi	r25, 0x0A	; 10
    99d4:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    99d8:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
	// to the dynamically allocated controller in other M codes that relate to motor control functions.
	// The M10 code merely creates the instance of the proper controller and assigns the slot. Other M codes
	// refer to the slot and provide further configuration. when creating new type of controllers, this is the code
	// that can be expanded to instantiate those controllers
	case 10: // M10 Z<controller slot> T<controller type>
		if( code_seen('Z') ) {
    99dc:	8a e5       	ldi	r24, 0x5A	; 90
    99de:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    99e2:	88 23       	and	r24, r24
    99e4:	11 f4       	brne	.+4      	; 0x99ea <_Z12processMCodei+0x1404>
    99e6:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			motorController = code_value();
    99ea:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    99ee:	6b 01       	movw	r12, r22
    99f0:	7c 01       	movw	r14, r24
			if( code_seen('T') ) {
    99f2:	84 e5       	ldi	r24, 0x54	; 84
    99f4:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    99f8:	88 23       	and	r24, r24
    99fa:	11 f4       	brne	.+4      	; 0x9a00 <_Z12processMCodei+0x141a>
    99fc:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
	// The M10 code merely creates the instance of the proper controller and assigns the slot. Other M codes
	// refer to the slot and provide further configuration. when creating new type of controllers, this is the code
	// that can be expanded to instantiate those controllers
	case 10: // M10 Z<controller slot> T<controller type>
		if( code_seen('Z') ) {
			motorController = code_value();
    9a00:	c7 01       	movw	r24, r14
    9a02:	b6 01       	movw	r22, r12
    9a04:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    9a08:	6b 01       	movw	r12, r22
    9a0a:	7c 01       	movw	r14, r24
    9a0c:	7a 83       	std	Y+2, r23	; 0x02
    9a0e:	69 83       	std	Y+1, r22	; 0x01
			if( code_seen('T') ) {
				int controllerType = code_value();		 
    9a10:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    9a14:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    9a18:	4b 01       	movw	r8, r22
    9a1a:	5c 01       	movw	r10, r24
    9a1c:	cb 01       	movw	r24, r22
				switch(controllerType) {
    9a1e:	62 30       	cpi	r22, 0x02	; 2
    9a20:	71 05       	cpc	r23, r1
    9a22:	09 f4       	brne	.+2      	; 0x9a26 <_Z12processMCodei+0x1440>
    9a24:	8b c1       	rjmp	.+790    	; 0x9d3c <_Z12processMCodei+0x1756>
    9a26:	3c f4       	brge	.+14     	; 0x9a36 <_Z12processMCodei+0x1450>
    9a28:	89 2b       	or	r24, r25
    9a2a:	71 f0       	breq	.+28     	; 0x9a48 <_Z12processMCodei+0x1462>
    9a2c:	61 30       	cpi	r22, 0x01	; 1
    9a2e:	71 05       	cpc	r23, r1
    9a30:	09 f4       	brne	.+2      	; 0x9a34 <_Z12processMCodei+0x144e>
    9a32:	a5 c0       	rjmp	.+330    	; 0x9b7e <_Z12processMCodei+0x1598>
    9a34:	68 c4       	rjmp	.+2256   	; 0xa306 <_Z12processMCodei+0x1d20>
    9a36:	63 30       	cpi	r22, 0x03	; 3
    9a38:	71 05       	cpc	r23, r1
    9a3a:	09 f4       	brne	.+2      	; 0x9a3e <_Z12processMCodei+0x1458>
    9a3c:	83 c2       	rjmp	.+1286   	; 0x9f44 <_Z12processMCodei+0x195e>
    9a3e:	64 30       	cpi	r22, 0x04	; 4
    9a40:	71 05       	cpc	r23, r1
    9a42:	09 f4       	brne	.+2      	; 0x9a46 <_Z12processMCodei+0x1460>
    9a44:	7f c3       	rjmp	.+1790   	; 0xa144 <_Z12processMCodei+0x1b5e>
    9a46:	5f c4       	rjmp	.+2238   	; 0xa306 <_Z12processMCodei+0x1d20>
					case 0: // type 0 smart controller
						if( motorControl[motorController] ) {
    9a48:	f6 01       	movw	r30, r12
    9a4a:	ee 0f       	add	r30, r30
    9a4c:	ff 1f       	adc	r31, r31
    9a4e:	e9 50       	subi	r30, 0x09	; 9
    9a50:	fd 4e       	sbci	r31, 0xED	; 237
    9a52:	80 81       	ld	r24, Z
    9a54:	91 81       	ldd	r25, Z+1	; 0x01
    9a56:	00 97       	sbiw	r24, 0x00	; 0
    9a58:	71 f0       	breq	.+28     	; 0x9a76 <_Z12processMCodei+0x1490>
							delete motorControl[motorController];
    9a5a:	dc 01       	movw	r26, r24
    9a5c:	ed 91       	ld	r30, X+
    9a5e:	fc 91       	ld	r31, X
    9a60:	02 80       	ldd	r0, Z+2	; 0x02
    9a62:	f3 81       	ldd	r31, Z+3	; 0x03
    9a64:	e0 2d       	mov	r30, r0
    9a66:	19 95       	eicall
							motorControl[motorController] = 0; // in case assignment below fails
    9a68:	f6 01       	movw	r30, r12
    9a6a:	ee 0f       	add	r30, r30
    9a6c:	ff 1f       	adc	r31, r31
    9a6e:	e9 50       	subi	r30, 0x09	; 9
    9a70:	fd 4e       	sbci	r31, 0xED	; 237
    9a72:	11 82       	std	Z+1, r1	; 0x01
    9a74:	10 82       	st	Z, r1
						}
						motorControl[motorController] = new RoboteqDevice();
    9a76:	80 e4       	ldi	r24, 0x40	; 64
    9a78:	91 e0       	ldi	r25, 0x01	; 1
    9a7a:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    9a7e:	9a 83       	std	Y+2, r25	; 0x02
    9a80:	89 83       	std	Y+1, r24	; 0x01

class AbstractSmartMotorControl : public AbstractMotorControl
{
//functions
public:
	AbstractSmartMotorControl(uint32_t maxPower) {MAXMOTORPOWER = maxPower;}
    9a82:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <_ZN20AbstractMotorControlC1Ev>
    9a86:	e9 81       	ldd	r30, Y+1	; 0x01
    9a88:	fa 81       	ldd	r31, Y+2	; 0x02
    9a8a:	ec 51       	subi	r30, 0x1C	; 28
    9a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    9a8e:	88 ee       	ldi	r24, 0xE8	; 232
    9a90:	93 e0       	ldi	r25, 0x03	; 3
    9a92:	91 83       	std	Z+1, r25	; 0x01
    9a94:	80 83       	st	Z, r24
	private:
		char command[ROBOTEQ_COMMAND_BUFFER_SIZE];
		uint8_t buffer[ROBOTEQ_BUFFER_SIZE];
    // Constructors
    public:
	    RoboteqDevice() : AbstractSmartMotorControl(1000) {
    9a96:	22 e8       	ldi	r18, 0x82	; 130
    9a98:	39 e0       	ldi	r19, 0x09	; 9
    9a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    9a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    9a9e:	31 83       	std	Z+1, r19	; 0x01
    9aa0:	20 83       	st	Z, r18
				m_Timeout = ROBOTEQ_DEFAULT_TIMEOUT;
    9aa2:	e4 5c       	subi	r30, 0xC4	; 196
    9aa4:	fe 4f       	sbci	r31, 0xFE	; 254
    9aa6:	91 83       	std	Z+1, r25	; 0x01
    9aa8:	80 83       	st	Z, r24
	int getMotorSpeed(uint8_t ch) { return motorSpeed[ch-1]; }
	uint8_t getCurrentDirection(uint8_t ch) { return currentDirection[ch-1]; }
	uint8_t getDefaultDirection(uint8_t ch) { return defaultDirection[ch-1]; }
	PCInterrupts* getWheelEncoder(uint8_t ch) { return wheelEncoder[ch-1]; }
	CounterInterruptService* getWheelEncoderService(uint8_t ch) { return wheelEncoderService[ch-1]; }
	void setChannels(uint8_t ch) { channels = ch; }
    9aaa:	82 e0       	ldi	r24, 0x02	; 2
    9aac:	a9 81       	ldd	r26, Y+1	; 0x01
    9aae:	ba 81       	ldd	r27, Y+2	; 0x02
    9ab0:	12 96       	adiw	r26, 0x02	; 2
    9ab2:	8c 93       	st	X, r24
    9ab4:	12 97       	sbiw	r26, 0x02	; 2
				setChannels(2);
				m_Serial = &Serial2;
    9ab6:	fd 01       	movw	r30, r26
    9ab8:	e2 5c       	subi	r30, 0xC2	; 194
    9aba:	fe 4f       	sbci	r31, 0xFE	; 254
    9abc:	82 e4       	ldi	r24, 0x42	; 66
    9abe:	9e e0       	ldi	r25, 0x0E	; 14
    9ac0:	91 83       	std	Z+1, r25	; 0x01
    9ac2:	80 83       	st	Z, r24
    9ac4:	c6 01       	movw	r24, r12
    9ac6:	88 0f       	add	r24, r24
    9ac8:	99 1f       	adc	r25, r25
    9aca:	fc 01       	movw	r30, r24
    9acc:	e9 50       	subi	r30, 0x09	; 9
    9ace:	fd 4e       	sbci	r31, 0xED	; 237
    9ad0:	b1 83       	std	Z+1, r27	; 0x01
    9ad2:	a0 83       	st	Z, r26
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    9ad4:	ee e7       	ldi	r30, 0x7E	; 126
    9ad6:	f0 e1       	ldi	r31, 0x10	; 16
    9ad8:	64 91       	lpm	r22, Z
	while(ch)
    9ada:	66 23       	and	r22, r22
    9adc:	a1 f0       	breq	.+40     	; 0x9b06 <_Z12processMCodei+0x1520>
    9ade:	fa 83       	std	Y+2, r31	; 0x02
    9ae0:	e9 83       	std	Y+1, r30	; 0x01
    9ae2:	08 e0       	ldi	r16, 0x08	; 8
    9ae4:	1a e0       	ldi	r17, 0x0A	; 10
    9ae6:	d8 01       	movw	r26, r16
    9ae8:	ed 91       	ld	r30, X+
    9aea:	fc 91       	ld	r31, X
    9aec:	01 90       	ld	r0, Z+
    9aee:	f0 81       	ld	r31, Z
    9af0:	e0 2d       	mov	r30, r0
    9af2:	c8 01       	movw	r24, r16
    9af4:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    9af6:	e9 81       	ldd	r30, Y+1	; 0x01
    9af8:	fa 81       	ldd	r31, Y+2	; 0x02
    9afa:	31 96       	adiw	r30, 0x01	; 1
    9afc:	fa 83       	std	Y+2, r31	; 0x02
    9afe:	e9 83       	std	Y+1, r30	; 0x01
    9b00:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    9b02:	61 11       	cpse	r22, r1
    9b04:	f0 cf       	rjmp	.-32     	; 0x9ae6 <_Z12processMCodei+0x1500>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    9b06:	ea e7       	ldi	r30, 0x7A	; 122
    9b08:	f0 e1       	ldi	r31, 0x10	; 16
    9b0a:	64 91       	lpm	r22, Z
	while(ch)
    9b0c:	66 23       	and	r22, r22
    9b0e:	a1 f0       	breq	.+40     	; 0x9b38 <_Z12processMCodei+0x1552>
    9b10:	fa 83       	std	Y+2, r31	; 0x02
    9b12:	e9 83       	std	Y+1, r30	; 0x01
    9b14:	08 e0       	ldi	r16, 0x08	; 8
    9b16:	1a e0       	ldi	r17, 0x0A	; 10
    9b18:	d8 01       	movw	r26, r16
    9b1a:	ed 91       	ld	r30, X+
    9b1c:	fc 91       	ld	r31, X
    9b1e:	01 90       	ld	r0, Z+
    9b20:	f0 81       	ld	r31, Z
    9b22:	e0 2d       	mov	r30, r0
    9b24:	c8 01       	movw	r24, r16
    9b26:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    9b28:	e9 81       	ldd	r30, Y+1	; 0x01
    9b2a:	fa 81       	ldd	r31, Y+2	; 0x02
    9b2c:	31 96       	adiw	r30, 0x01	; 1
    9b2e:	fa 83       	std	Y+2, r31	; 0x02
    9b30:	e9 83       	std	Y+1, r30	; 0x01
    9b32:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    9b34:	61 11       	cpse	r22, r1
    9b36:	f0 cf       	rjmp	.-32     	; 0x9b18 <_Z12processMCodei+0x1532>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    9b38:	e7 e7       	ldi	r30, 0x77	; 119
    9b3a:	f0 e1       	ldi	r31, 0x10	; 16
    9b3c:	64 91       	lpm	r22, Z
	while(ch)
    9b3e:	66 23       	and	r22, r22
    9b40:	a1 f0       	breq	.+40     	; 0x9b6a <_Z12processMCodei+0x1584>
    9b42:	fa 83       	std	Y+2, r31	; 0x02
    9b44:	e9 83       	std	Y+1, r30	; 0x01
    9b46:	08 e0       	ldi	r16, 0x08	; 8
    9b48:	1a e0       	ldi	r17, 0x0A	; 10
    9b4a:	d8 01       	movw	r26, r16
    9b4c:	ed 91       	ld	r30, X+
    9b4e:	fc 91       	ld	r31, X
    9b50:	01 90       	ld	r0, Z+
    9b52:	f0 81       	ld	r31, Z
    9b54:	e0 2d       	mov	r30, r0
    9b56:	c8 01       	movw	r24, r16
    9b58:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    9b5a:	e9 81       	ldd	r30, Y+1	; 0x01
    9b5c:	fa 81       	ldd	r31, Y+2	; 0x02
    9b5e:	31 96       	adiw	r30, 0x01	; 1
    9b60:	fa 83       	std	Y+2, r31	; 0x02
    9b62:	e9 83       	std	Y+1, r30	; 0x01
    9b64:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    9b66:	61 11       	cpse	r22, r1
    9b68:	f0 cf       	rjmp	.-32     	; 0x9b4a <_Z12processMCodei+0x1564>
						SERIAL_PGM(MSG_BEGIN);
						SERIAL_PGM("M10");
						SERIAL_PGMLN(MSG_TERMINATE);
    9b6a:	88 e0       	ldi	r24, 0x08	; 8
    9b6c:	9a e0       	ldi	r25, 0x0A	; 10
    9b6e:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
						SERIAL_PORT.flush();
    9b72:	88 e0       	ldi	r24, 0x08	; 8
    9b74:	9a e0       	ldi	r25, 0x0A	; 10
    9b76:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
						break;
    9b7a:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
					case 1: // type 1 Hbridge
						// up to 10 channels, each channel has a direction pin (1), and a PWM pin (0)
						if(motorControl[motorController]) {
    9b7e:	f6 01       	movw	r30, r12
    9b80:	ee 0f       	add	r30, r30
    9b82:	ff 1f       	adc	r31, r31
    9b84:	e9 50       	subi	r30, 0x09	; 9
    9b86:	fd 4e       	sbci	r31, 0xED	; 237
    9b88:	a0 81       	ld	r26, Z
    9b8a:	b1 81       	ldd	r27, Z+1	; 0x01
    9b8c:	10 97       	sbiw	r26, 0x00	; 0
    9b8e:	09 f4       	brne	.+2      	; 0x9b92 <_Z12processMCodei+0x15ac>
    9b90:	6e c0       	rjmp	.+220    	; 0x9c6e <_Z12processMCodei+0x1688>
							// for each channel, delete the direction pin and PWM created in main pin array to prepare new assignment
							// each controller can have up to 10 channels, each with its own PWM and direction pin
							for(uint8_t i = 0; i < motorControl[motorController]->getChannels(); i++) {
    9b92:	12 96       	adiw	r26, 0x02	; 2
    9b94:	8c 91       	ld	r24, X
    9b96:	12 97       	sbiw	r26, 0x02	; 2
    9b98:	88 23       	and	r24, r24
    9b9a:	09 f4       	brne	.+2      	; 0x9b9e <_Z12processMCodei+0x15b8>
    9b9c:	59 c0       	rjmp	.+178    	; 0x9c50 <_Z12processMCodei+0x166a>
    9b9e:	10 e0       	ldi	r17, 0x00	; 0
    9ba0:	29 81       	ldd	r18, Y+1	; 0x01
    9ba2:	3a 81       	ldd	r19, Y+2	; 0x02
    9ba4:	22 0f       	add	r18, r18
    9ba6:	33 1f       	adc	r19, r19
    9ba8:	29 50       	subi	r18, 0x09	; 9
    9baa:	3d 4e       	sbci	r19, 0xED	; 237
    9bac:	3a 83       	std	Y+2, r19	; 0x02
    9bae:	29 83       	std	Y+1, r18	; 0x01
	uint8_t getMotorPWMPin(uint8_t channel) { return motorDrive[channel-1][0]; }
    9bb0:	21 2f       	mov	r18, r17
    9bb2:	30 e0       	ldi	r19, 0x00	; 0
    9bb4:	c9 01       	movw	r24, r18
    9bb6:	01 97       	sbiw	r24, 0x01	; 1
    9bb8:	f9 01       	movw	r30, r18
    9bba:	fa 96       	adiw	r30, 0x3a	; 58
    9bbc:	ee 0f       	add	r30, r30
    9bbe:	ff 1f       	adc	r31, r31
    9bc0:	ee 0f       	add	r30, r30
    9bc2:	ff 1f       	adc	r31, r31
    9bc4:	ea 0f       	add	r30, r26
    9bc6:	fb 1f       	adc	r31, r27
    9bc8:	00 81       	ld	r16, Z
	uint8_t getMotorEnablePin(uint8_t channel) {return motorDrive[channel-1][1]; }
    9bca:	fc 01       	movw	r30, r24
    9bcc:	ee 0f       	add	r30, r30
    9bce:	ff 1f       	adc	r31, r31
    9bd0:	ee 0f       	add	r30, r30
    9bd2:	ff 1f       	adc	r31, r31
    9bd4:	ea 0f       	add	r30, r26
    9bd6:	fb 1f       	adc	r31, r27
    9bd8:	e3 51       	subi	r30, 0x13	; 19
    9bda:	ff 4f       	sbci	r31, 0xFF	; 255
    9bdc:	e0 81       	ld	r30, Z
									uint8_t pMotor1 = ((HBridgeDriver*)motorControl[motorController])->getMotorPWMPin(i);
									uint8_t pMotor2 = ((HBridgeDriver*)motorControl[motorController])->getMotorEnablePin(i);
									if(pMotor2 != 255 && pdigitals[pMotor2]) {
    9bde:	ef 3f       	cpi	r30, 0xFF	; 255
    9be0:	a1 f0       	breq	.+40     	; 0x9c0a <_Z12processMCodei+0x1624>
    9be2:	ae 2e       	mov	r10, r30
    9be4:	b1 2c       	mov	r11, r1
    9be6:	f5 01       	movw	r30, r10
    9be8:	ee 0f       	add	r30, r30
    9bea:	ff 1f       	adc	r31, r31
    9bec:	e5 5c       	subi	r30, 0xC5	; 197
    9bee:	fc 4e       	sbci	r31, 0xEC	; 236
    9bf0:	80 81       	ld	r24, Z
    9bf2:	91 81       	ldd	r25, Z+1	; 0x01
    9bf4:	00 97       	sbiw	r24, 0x00	; 0
    9bf6:	49 f0       	breq	.+18     	; 0x9c0a <_Z12processMCodei+0x1624>
										delete pdigitals[pMotor2];
    9bf8:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
										pdigitals[pMotor2] = 0;
    9bfc:	f5 01       	movw	r30, r10
    9bfe:	ee 0f       	add	r30, r30
    9c00:	ff 1f       	adc	r31, r31
    9c02:	e5 5c       	subi	r30, 0xC5	; 197
    9c04:	fc 4e       	sbci	r31, 0xEC	; 236
    9c06:	11 82       	std	Z+1, r1	; 0x01
    9c08:	10 82       	st	Z, r1
									}
									if(pMotor1 != 255 && ppwms[pMotor1]) {
    9c0a:	0f 3f       	cpi	r16, 0xFF	; 255
    9c0c:	a1 f0       	breq	.+40     	; 0x9c36 <_Z12processMCodei+0x1650>
    9c0e:	a0 2e       	mov	r10, r16
    9c10:	b1 2c       	mov	r11, r1
    9c12:	f5 01       	movw	r30, r10
    9c14:	ee 0f       	add	r30, r30
    9c16:	ff 1f       	adc	r31, r31
    9c18:	ed 5d       	subi	r30, 0xDD	; 221
    9c1a:	fc 4e       	sbci	r31, 0xEC	; 236
    9c1c:	80 81       	ld	r24, Z
    9c1e:	91 81       	ldd	r25, Z+1	; 0x01
    9c20:	00 97       	sbiw	r24, 0x00	; 0
    9c22:	49 f0       	breq	.+18     	; 0x9c36 <_Z12processMCodei+0x1650>
										delete ppwms[pMotor1];
    9c24:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
										ppwms[pMotor1] = 0;
    9c28:	f5 01       	movw	r30, r10
    9c2a:	ee 0f       	add	r30, r30
    9c2c:	ff 1f       	adc	r31, r31
    9c2e:	ed 5d       	subi	r30, 0xDD	; 221
    9c30:	fc 4e       	sbci	r31, 0xEC	; 236
    9c32:	11 82       	std	Z+1, r1	; 0x01
    9c34:	10 82       	st	Z, r1
					case 1: // type 1 Hbridge
						// up to 10 channels, each channel has a direction pin (1), and a PWM pin (0)
						if(motorControl[motorController]) {
							// for each channel, delete the direction pin and PWM created in main pin array to prepare new assignment
							// each controller can have up to 10 channels, each with its own PWM and direction pin
							for(uint8_t i = 0; i < motorControl[motorController]->getChannels(); i++) {
    9c36:	1f 5f       	subi	r17, 0xFF	; 255
    9c38:	e9 81       	ldd	r30, Y+1	; 0x01
    9c3a:	fa 81       	ldd	r31, Y+2	; 0x02
    9c3c:	a0 81       	ld	r26, Z
    9c3e:	b1 81       	ldd	r27, Z+1	; 0x01
    9c40:	12 96       	adiw	r26, 0x02	; 2
    9c42:	8c 91       	ld	r24, X
    9c44:	12 97       	sbiw	r26, 0x02	; 2
    9c46:	18 17       	cp	r17, r24
    9c48:	08 f4       	brcc	.+2      	; 0x9c4c <_Z12processMCodei+0x1666>
    9c4a:	b2 cf       	rjmp	.-156    	; 0x9bb0 <_Z12processMCodei+0x15ca>
									if(pMotor1 != 255 && ppwms[pMotor1]) {
										delete ppwms[pMotor1];
										ppwms[pMotor1] = 0;
									}
							}
							delete motorControl[motorController];
    9c4c:	10 97       	sbiw	r26, 0x00	; 0
    9c4e:	41 f0       	breq	.+16     	; 0x9c60 <_Z12processMCodei+0x167a>
    9c50:	ed 91       	ld	r30, X+
    9c52:	fc 91       	ld	r31, X
    9c54:	11 97       	sbiw	r26, 0x01	; 1
    9c56:	02 80       	ldd	r0, Z+2	; 0x02
    9c58:	f3 81       	ldd	r31, Z+3	; 0x03
    9c5a:	e0 2d       	mov	r30, r0
    9c5c:	cd 01       	movw	r24, r26
    9c5e:	19 95       	eicall
							motorControl[motorController] = 0; // in case assignment below fails
    9c60:	f6 01       	movw	r30, r12
    9c62:	ee 0f       	add	r30, r30
    9c64:	ff 1f       	adc	r31, r31
    9c66:	e9 50       	subi	r30, 0x09	; 9
    9c68:	fd 4e       	sbci	r31, 0xED	; 237
    9c6a:	11 82       	std	Z+1, r1	; 0x01
    9c6c:	10 82       	st	Z, r1
						}
						motorControl[motorController] = new HBridgeDriver();
    9c6e:	86 e1       	ldi	r24, 0x16	; 22
    9c70:	91 e0       	ldi	r25, 0x01	; 1
    9c72:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    9c76:	9a 83       	std	Y+2, r25	; 0x02
    9c78:	89 83       	std	Y+1, r24	; 0x01
    9c7a:	0e 94 2d 3b 	call	0x765a	; 0x765a <_ZN13HBridgeDriverC1Ev>
    9c7e:	c6 01       	movw	r24, r12
    9c80:	88 0f       	add	r24, r24
    9c82:	99 1f       	adc	r25, r25
    9c84:	fc 01       	movw	r30, r24
    9c86:	e9 50       	subi	r30, 0x09	; 9
    9c88:	fd 4e       	sbci	r31, 0xED	; 237
    9c8a:	29 81       	ldd	r18, Y+1	; 0x01
    9c8c:	3a 81       	ldd	r19, Y+2	; 0x02
    9c8e:	31 83       	std	Z+1, r19	; 0x01
    9c90:	20 83       	st	Z, r18
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    9c92:	e5 e7       	ldi	r30, 0x75	; 117
    9c94:	f0 e1       	ldi	r31, 0x10	; 16
    9c96:	64 91       	lpm	r22, Z
	while(ch)
    9c98:	66 23       	and	r22, r22
    9c9a:	a1 f0       	breq	.+40     	; 0x9cc4 <_Z12processMCodei+0x16de>
    9c9c:	fa 83       	std	Y+2, r31	; 0x02
    9c9e:	e9 83       	std	Y+1, r30	; 0x01
    9ca0:	08 e0       	ldi	r16, 0x08	; 8
    9ca2:	1a e0       	ldi	r17, 0x0A	; 10
    9ca4:	d8 01       	movw	r26, r16
    9ca6:	ed 91       	ld	r30, X+
    9ca8:	fc 91       	ld	r31, X
    9caa:	01 90       	ld	r0, Z+
    9cac:	f0 81       	ld	r31, Z
    9cae:	e0 2d       	mov	r30, r0
    9cb0:	c8 01       	movw	r24, r16
    9cb2:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    9cb4:	e9 81       	ldd	r30, Y+1	; 0x01
    9cb6:	fa 81       	ldd	r31, Y+2	; 0x02
    9cb8:	31 96       	adiw	r30, 0x01	; 1
    9cba:	fa 83       	std	Y+2, r31	; 0x02
    9cbc:	e9 83       	std	Y+1, r30	; 0x01
    9cbe:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    9cc0:	61 11       	cpse	r22, r1
    9cc2:	f0 cf       	rjmp	.-32     	; 0x9ca4 <_Z12processMCodei+0x16be>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    9cc4:	e1 e7       	ldi	r30, 0x71	; 113
    9cc6:	f0 e1       	ldi	r31, 0x10	; 16
    9cc8:	64 91       	lpm	r22, Z
	while(ch)
    9cca:	66 23       	and	r22, r22
    9ccc:	a1 f0       	breq	.+40     	; 0x9cf6 <_Z12processMCodei+0x1710>
    9cce:	fa 83       	std	Y+2, r31	; 0x02
    9cd0:	e9 83       	std	Y+1, r30	; 0x01
    9cd2:	08 e0       	ldi	r16, 0x08	; 8
    9cd4:	1a e0       	ldi	r17, 0x0A	; 10
    9cd6:	d8 01       	movw	r26, r16
    9cd8:	ed 91       	ld	r30, X+
    9cda:	fc 91       	ld	r31, X
    9cdc:	01 90       	ld	r0, Z+
    9cde:	f0 81       	ld	r31, Z
    9ce0:	e0 2d       	mov	r30, r0
    9ce2:	c8 01       	movw	r24, r16
    9ce4:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    9ce6:	e9 81       	ldd	r30, Y+1	; 0x01
    9ce8:	fa 81       	ldd	r31, Y+2	; 0x02
    9cea:	31 96       	adiw	r30, 0x01	; 1
    9cec:	fa 83       	std	Y+2, r31	; 0x02
    9cee:	e9 83       	std	Y+1, r30	; 0x01
    9cf0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    9cf2:	61 11       	cpse	r22, r1
    9cf4:	f0 cf       	rjmp	.-32     	; 0x9cd6 <_Z12processMCodei+0x16f0>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    9cf6:	ee e6       	ldi	r30, 0x6E	; 110
    9cf8:	f0 e1       	ldi	r31, 0x10	; 16
    9cfa:	64 91       	lpm	r22, Z
	while(ch)
    9cfc:	66 23       	and	r22, r22
    9cfe:	a1 f0       	breq	.+40     	; 0x9d28 <_Z12processMCodei+0x1742>
    9d00:	fa 83       	std	Y+2, r31	; 0x02
    9d02:	e9 83       	std	Y+1, r30	; 0x01
    9d04:	08 e0       	ldi	r16, 0x08	; 8
    9d06:	1a e0       	ldi	r17, 0x0A	; 10
    9d08:	d8 01       	movw	r26, r16
    9d0a:	ed 91       	ld	r30, X+
    9d0c:	fc 91       	ld	r31, X
    9d0e:	01 90       	ld	r0, Z+
    9d10:	f0 81       	ld	r31, Z
    9d12:	e0 2d       	mov	r30, r0
    9d14:	c8 01       	movw	r24, r16
    9d16:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    9d18:	e9 81       	ldd	r30, Y+1	; 0x01
    9d1a:	fa 81       	ldd	r31, Y+2	; 0x02
    9d1c:	31 96       	adiw	r30, 0x01	; 1
    9d1e:	fa 83       	std	Y+2, r31	; 0x02
    9d20:	e9 83       	std	Y+1, r30	; 0x01
    9d22:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    9d24:	61 11       	cpse	r22, r1
    9d26:	f0 cf       	rjmp	.-32     	; 0x9d08 <_Z12processMCodei+0x1722>
						SERIAL_PGM(MSG_BEGIN);
						SERIAL_PGM("M10");
						SERIAL_PGMLN(MSG_TERMINATE);
    9d28:	88 e0       	ldi	r24, 0x08	; 8
    9d2a:	9a e0       	ldi	r25, 0x0A	; 10
    9d2c:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
						SERIAL_PORT.flush();
    9d30:	88 e0       	ldi	r24, 0x08	; 8
    9d32:	9a e0       	ldi	r25, 0x0A	; 10
    9d34:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
						break;
    9d38:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
					case 2: // type 2 Split bridge, each channel has 2 PWM pins and an enable pin, so up to 5 channels
						if(motorControl[motorController]) {
    9d3c:	f6 01       	movw	r30, r12
    9d3e:	ee 0f       	add	r30, r30
    9d40:	ff 1f       	adc	r31, r31
    9d42:	e9 50       	subi	r30, 0x09	; 9
    9d44:	fd 4e       	sbci	r31, 0xED	; 237
    9d46:	a0 81       	ld	r26, Z
    9d48:	b1 81       	ldd	r27, Z+1	; 0x01
    9d4a:	10 97       	sbiw	r26, 0x00	; 0
    9d4c:	09 f4       	brne	.+2      	; 0x9d50 <_Z12processMCodei+0x176a>
    9d4e:	93 c0       	rjmp	.+294    	; 0x9e76 <_Z12processMCodei+0x1890>
								// for each channel, delete the direction pin and PWM created in main pin array to prepare new assignment
								// each controller can have up to 10 channels, each with its own PWM and direction pin
								for(uint8_t i = 0; i < motorControl[motorController]->getChannels(); i++) {
    9d50:	12 96       	adiw	r26, 0x02	; 2
    9d52:	8c 91       	ld	r24, X
    9d54:	12 97       	sbiw	r26, 0x02	; 2
    9d56:	88 23       	and	r24, r24
    9d58:	09 f4       	brne	.+2      	; 0x9d5c <_Z12processMCodei+0x1776>
    9d5a:	7e c0       	rjmp	.+252    	; 0x9e58 <_Z12processMCodei+0x1872>
    9d5c:	b1 2c       	mov	r11, r1
										}
										if(pMotor1 != 255 && ppwms[pMotor1]) {
											delete ppwms[pMotor1];
											ppwms[pMotor1] = 0;
										}
										pMotor1 = ((SplitBridgeDriver*)motorControl[motorController])->getMotorPWMPinB(i);
    9d5e:	29 81       	ldd	r18, Y+1	; 0x01
    9d60:	3a 81       	ldd	r19, Y+2	; 0x02
    9d62:	22 0f       	add	r18, r18
    9d64:	33 1f       	adc	r19, r19
    9d66:	29 50       	subi	r18, 0x09	; 9
    9d68:	3d 4e       	sbci	r19, 0xED	; 237
    9d6a:	3a 83       	std	Y+2, r19	; 0x02
    9d6c:	29 83       	std	Y+1, r18	; 0x01
	int commandMotorPower(uint8_t ch, int16_t p);
	int commandEmergencyStop(int status);
	int isConnected(void) { return true; }
	void setMotors(PWM** pwm) { ppwms = pwm; }
	void setDirectionPins(Digital** dpin) { pdigitals = dpin; }
	uint8_t getMotorPWMPin(uint8_t channel) { return motorDrive[channel-1][0]; }
    9d6e:	8b 2d       	mov	r24, r11
    9d70:	90 e0       	ldi	r25, 0x00	; 0
    9d72:	8c 01       	movw	r16, r24
    9d74:	01 50       	subi	r16, 0x01	; 1
    9d76:	11 09       	sbc	r17, r1
    9d78:	fc 01       	movw	r30, r24
    9d7a:	fa 96       	adiw	r30, 0x3a	; 58
    9d7c:	ee 0f       	add	r30, r30
    9d7e:	ff 1f       	adc	r31, r31
    9d80:	ee 0f       	add	r30, r30
    9d82:	ff 1f       	adc	r31, r31
    9d84:	ea 0f       	add	r30, r26
    9d86:	fb 1f       	adc	r31, r27
    9d88:	a0 80       	ld	r10, Z
	uint8_t getMotorEnablePin(uint8_t channel) {return motorDrive[channel-1][1]; }
    9d8a:	f8 01       	movw	r30, r16
    9d8c:	ee 0f       	add	r30, r30
    9d8e:	ff 1f       	adc	r31, r31
    9d90:	ee 0f       	add	r30, r30
    9d92:	ff 1f       	adc	r31, r31
    9d94:	ea 0f       	add	r30, r26
    9d96:	fb 1f       	adc	r31, r27
    9d98:	e3 51       	subi	r30, 0x13	; 19
    9d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    9d9c:	80 81       	ld	r24, Z
								// for each channel, delete the direction pin and PWM created in main pin array to prepare new assignment
								// each controller can have up to 10 channels, each with its own PWM and direction pin
								for(uint8_t i = 0; i < motorControl[motorController]->getChannels(); i++) {
										uint8_t pMotor1 = ((SplitBridgeDriver*)motorControl[motorController])->getMotorPWMPin(i);
										uint8_t pMotor2 = ((SplitBridgeDriver*)motorControl[motorController])->getMotorEnablePin(i);
										if(pMotor2 != 255 && pdigitals[pMotor2]) {
    9d9e:	8f 3f       	cpi	r24, 0xFF	; 255
    9da0:	a1 f0       	breq	.+40     	; 0x9dca <_Z12processMCodei+0x17e4>
    9da2:	88 2e       	mov	r8, r24
    9da4:	91 2c       	mov	r9, r1
    9da6:	f4 01       	movw	r30, r8
    9da8:	ee 0f       	add	r30, r30
    9daa:	ff 1f       	adc	r31, r31
    9dac:	e5 5c       	subi	r30, 0xC5	; 197
    9dae:	fc 4e       	sbci	r31, 0xEC	; 236
    9db0:	80 81       	ld	r24, Z
    9db2:	91 81       	ldd	r25, Z+1	; 0x01
    9db4:	00 97       	sbiw	r24, 0x00	; 0
    9db6:	49 f0       	breq	.+18     	; 0x9dca <_Z12processMCodei+0x17e4>
											delete pdigitals[pMotor2];
    9db8:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
											pdigitals[pMotor2] = 0;
    9dbc:	f4 01       	movw	r30, r8
    9dbe:	ee 0f       	add	r30, r30
    9dc0:	ff 1f       	adc	r31, r31
    9dc2:	e5 5c       	subi	r30, 0xC5	; 197
    9dc4:	fc 4e       	sbci	r31, 0xEC	; 236
    9dc6:	11 82       	std	Z+1, r1	; 0x01
    9dc8:	10 82       	st	Z, r1
										}
										if(pMotor1 != 255 && ppwms[pMotor1]) {
    9dca:	3f ef       	ldi	r19, 0xFF	; 255
    9dcc:	a3 16       	cp	r10, r19
    9dce:	a1 f0       	breq	.+40     	; 0x9df8 <_Z12processMCodei+0x1812>
    9dd0:	8a 2c       	mov	r8, r10
    9dd2:	91 2c       	mov	r9, r1
    9dd4:	f4 01       	movw	r30, r8
    9dd6:	ee 0f       	add	r30, r30
    9dd8:	ff 1f       	adc	r31, r31
    9dda:	ed 5d       	subi	r30, 0xDD	; 221
    9ddc:	fc 4e       	sbci	r31, 0xEC	; 236
    9dde:	80 81       	ld	r24, Z
    9de0:	91 81       	ldd	r25, Z+1	; 0x01
    9de2:	00 97       	sbiw	r24, 0x00	; 0
    9de4:	49 f0       	breq	.+18     	; 0x9df8 <_Z12processMCodei+0x1812>
											delete ppwms[pMotor1];
    9de6:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
											ppwms[pMotor1] = 0;
    9dea:	f4 01       	movw	r30, r8
    9dec:	ee 0f       	add	r30, r30
    9dee:	ff 1f       	adc	r31, r31
    9df0:	ed 5d       	subi	r30, 0xDD	; 221
    9df2:	fc 4e       	sbci	r31, 0xEC	; 236
    9df4:	11 82       	std	Z+1, r1	; 0x01
    9df6:	10 82       	st	Z, r1
	SplitBridgeDriver() : HBridgeDriver(){};
	~SplitBridgeDriver();
	int commandEmergencyStop(int status);
	void createPWM(uint8_t channel, uint8_t pin_numberA, uint8_t pin_numberB, uint8_t enb_pin, uint8_t dir_default, int timer_pre, int timer_res);
	int commandMotorPower(uint8_t motorChannel, int16_t motorPower);
	uint8_t getMotorPWMPinB(uint8_t channel) { return motorDriveB[channel-1][0]; }
    9df8:	a9 81       	ldd	r26, Y+1	; 0x01
    9dfa:	ba 81       	ldd	r27, Y+2	; 0x02
    9dfc:	ed 91       	ld	r30, X+
    9dfe:	fc 91       	ld	r31, X
    9e00:	00 0f       	add	r16, r16
    9e02:	11 1f       	adc	r17, r17
    9e04:	00 0f       	add	r16, r16
    9e06:	11 1f       	adc	r17, r17
    9e08:	e0 0f       	add	r30, r16
    9e0a:	f1 1f       	adc	r31, r17
    9e0c:	ea 5e       	subi	r30, 0xEA	; 234
    9e0e:	fe 4f       	sbci	r31, 0xFE	; 254
    9e10:	e0 81       	ld	r30, Z
										}
										pMotor1 = ((SplitBridgeDriver*)motorControl[motorController])->getMotorPWMPinB(i);
										if(pMotor1 != 255 && ppwms[pMotor1]) {
    9e12:	ef 3f       	cpi	r30, 0xFF	; 255
    9e14:	a1 f0       	breq	.+40     	; 0x9e3e <_Z12processMCodei+0x1858>
    9e16:	0e 2f       	mov	r16, r30
    9e18:	10 e0       	ldi	r17, 0x00	; 0
    9e1a:	f8 01       	movw	r30, r16
    9e1c:	ee 0f       	add	r30, r30
    9e1e:	ff 1f       	adc	r31, r31
    9e20:	ed 5d       	subi	r30, 0xDD	; 221
    9e22:	fc 4e       	sbci	r31, 0xEC	; 236
    9e24:	80 81       	ld	r24, Z
    9e26:	91 81       	ldd	r25, Z+1	; 0x01
    9e28:	00 97       	sbiw	r24, 0x00	; 0
    9e2a:	49 f0       	breq	.+18     	; 0x9e3e <_Z12processMCodei+0x1858>
											delete ppwms[pMotor1];
    9e2c:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
											ppwms[pMotor1] = 0;
    9e30:	f8 01       	movw	r30, r16
    9e32:	ee 0f       	add	r30, r30
    9e34:	ff 1f       	adc	r31, r31
    9e36:	ed 5d       	subi	r30, 0xDD	; 221
    9e38:	fc 4e       	sbci	r31, 0xEC	; 236
    9e3a:	11 82       	std	Z+1, r1	; 0x01
    9e3c:	10 82       	st	Z, r1
						break;
					case 2: // type 2 Split bridge, each channel has 2 PWM pins and an enable pin, so up to 5 channels
						if(motorControl[motorController]) {
								// for each channel, delete the direction pin and PWM created in main pin array to prepare new assignment
								// each controller can have up to 10 channels, each with its own PWM and direction pin
								for(uint8_t i = 0; i < motorControl[motorController]->getChannels(); i++) {
    9e3e:	b3 94       	inc	r11
    9e40:	e9 81       	ldd	r30, Y+1	; 0x01
    9e42:	fa 81       	ldd	r31, Y+2	; 0x02
    9e44:	a0 81       	ld	r26, Z
    9e46:	b1 81       	ldd	r27, Z+1	; 0x01
    9e48:	12 96       	adiw	r26, 0x02	; 2
    9e4a:	8c 91       	ld	r24, X
    9e4c:	12 97       	sbiw	r26, 0x02	; 2
    9e4e:	b8 16       	cp	r11, r24
    9e50:	08 f4       	brcc	.+2      	; 0x9e54 <_Z12processMCodei+0x186e>
    9e52:	8d cf       	rjmp	.-230    	; 0x9d6e <_Z12processMCodei+0x1788>
											delete ppwms[pMotor1];
											ppwms[pMotor1] = 0;
										}
										
								}
								delete motorControl[motorController];
    9e54:	10 97       	sbiw	r26, 0x00	; 0
    9e56:	41 f0       	breq	.+16     	; 0x9e68 <_Z12processMCodei+0x1882>
    9e58:	ed 91       	ld	r30, X+
    9e5a:	fc 91       	ld	r31, X
    9e5c:	11 97       	sbiw	r26, 0x01	; 1
    9e5e:	02 80       	ldd	r0, Z+2	; 0x02
    9e60:	f3 81       	ldd	r31, Z+3	; 0x03
    9e62:	e0 2d       	mov	r30, r0
    9e64:	cd 01       	movw	r24, r26
    9e66:	19 95       	eicall
								motorControl[motorController] = 0; // in case assignment below fails
    9e68:	f6 01       	movw	r30, r12
    9e6a:	ee 0f       	add	r30, r30
    9e6c:	ff 1f       	adc	r31, r31
    9e6e:	e9 50       	subi	r30, 0x09	; 9
    9e70:	fd 4e       	sbci	r31, 0xED	; 237
    9e72:	11 82       	std	Z+1, r1	; 0x01
    9e74:	10 82       	st	Z, r1
						}
						motorControl[motorController] = new SplitBridgeDriver();
    9e76:	8e e3       	ldi	r24, 0x3E	; 62
    9e78:	91 e0       	ldi	r25, 0x01	; 1
    9e7a:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    9e7e:	9a 83       	std	Y+2, r25	; 0x02
    9e80:	89 83       	std	Y+1, r24	; 0x01
    9e82:	0e 94 92 3b 	call	0x7724	; 0x7724 <_ZN17SplitBridgeDriverC1Ev>
    9e86:	c6 01       	movw	r24, r12
    9e88:	88 0f       	add	r24, r24
    9e8a:	99 1f       	adc	r25, r25
    9e8c:	fc 01       	movw	r30, r24
    9e8e:	e9 50       	subi	r30, 0x09	; 9
    9e90:	fd 4e       	sbci	r31, 0xED	; 237
    9e92:	29 81       	ldd	r18, Y+1	; 0x01
    9e94:	3a 81       	ldd	r19, Y+2	; 0x02
    9e96:	31 83       	std	Z+1, r19	; 0x01
    9e98:	20 83       	st	Z, r18
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    9e9a:	ec e6       	ldi	r30, 0x6C	; 108
    9e9c:	f0 e1       	ldi	r31, 0x10	; 16
    9e9e:	64 91       	lpm	r22, Z
	while(ch)
    9ea0:	66 23       	and	r22, r22
    9ea2:	a1 f0       	breq	.+40     	; 0x9ecc <_Z12processMCodei+0x18e6>
    9ea4:	fa 83       	std	Y+2, r31	; 0x02
    9ea6:	e9 83       	std	Y+1, r30	; 0x01
    9ea8:	08 e0       	ldi	r16, 0x08	; 8
    9eaa:	1a e0       	ldi	r17, 0x0A	; 10
    9eac:	d8 01       	movw	r26, r16
    9eae:	ed 91       	ld	r30, X+
    9eb0:	fc 91       	ld	r31, X
    9eb2:	01 90       	ld	r0, Z+
    9eb4:	f0 81       	ld	r31, Z
    9eb6:	e0 2d       	mov	r30, r0
    9eb8:	c8 01       	movw	r24, r16
    9eba:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    9ebc:	e9 81       	ldd	r30, Y+1	; 0x01
    9ebe:	fa 81       	ldd	r31, Y+2	; 0x02
    9ec0:	31 96       	adiw	r30, 0x01	; 1
    9ec2:	fa 83       	std	Y+2, r31	; 0x02
    9ec4:	e9 83       	std	Y+1, r30	; 0x01
    9ec6:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    9ec8:	61 11       	cpse	r22, r1
    9eca:	f0 cf       	rjmp	.-32     	; 0x9eac <_Z12processMCodei+0x18c6>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    9ecc:	e8 e6       	ldi	r30, 0x68	; 104
    9ece:	f0 e1       	ldi	r31, 0x10	; 16
    9ed0:	64 91       	lpm	r22, Z
	while(ch)
    9ed2:	66 23       	and	r22, r22
    9ed4:	a1 f0       	breq	.+40     	; 0x9efe <_Z12processMCodei+0x1918>
    9ed6:	fa 83       	std	Y+2, r31	; 0x02
    9ed8:	e9 83       	std	Y+1, r30	; 0x01
    9eda:	08 e0       	ldi	r16, 0x08	; 8
    9edc:	1a e0       	ldi	r17, 0x0A	; 10
    9ede:	d8 01       	movw	r26, r16
    9ee0:	ed 91       	ld	r30, X+
    9ee2:	fc 91       	ld	r31, X
    9ee4:	01 90       	ld	r0, Z+
    9ee6:	f0 81       	ld	r31, Z
    9ee8:	e0 2d       	mov	r30, r0
    9eea:	c8 01       	movw	r24, r16
    9eec:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    9eee:	e9 81       	ldd	r30, Y+1	; 0x01
    9ef0:	fa 81       	ldd	r31, Y+2	; 0x02
    9ef2:	31 96       	adiw	r30, 0x01	; 1
    9ef4:	fa 83       	std	Y+2, r31	; 0x02
    9ef6:	e9 83       	std	Y+1, r30	; 0x01
    9ef8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    9efa:	61 11       	cpse	r22, r1
    9efc:	f0 cf       	rjmp	.-32     	; 0x9ede <_Z12processMCodei+0x18f8>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    9efe:	e5 e6       	ldi	r30, 0x65	; 101
    9f00:	f0 e1       	ldi	r31, 0x10	; 16
    9f02:	64 91       	lpm	r22, Z
	while(ch)
    9f04:	66 23       	and	r22, r22
    9f06:	a1 f0       	breq	.+40     	; 0x9f30 <_Z12processMCodei+0x194a>
    9f08:	fa 83       	std	Y+2, r31	; 0x02
    9f0a:	e9 83       	std	Y+1, r30	; 0x01
    9f0c:	08 e0       	ldi	r16, 0x08	; 8
    9f0e:	1a e0       	ldi	r17, 0x0A	; 10
    9f10:	d8 01       	movw	r26, r16
    9f12:	ed 91       	ld	r30, X+
    9f14:	fc 91       	ld	r31, X
    9f16:	01 90       	ld	r0, Z+
    9f18:	f0 81       	ld	r31, Z
    9f1a:	e0 2d       	mov	r30, r0
    9f1c:	c8 01       	movw	r24, r16
    9f1e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    9f20:	e9 81       	ldd	r30, Y+1	; 0x01
    9f22:	fa 81       	ldd	r31, Y+2	; 0x02
    9f24:	31 96       	adiw	r30, 0x01	; 1
    9f26:	fa 83       	std	Y+2, r31	; 0x02
    9f28:	e9 83       	std	Y+1, r30	; 0x01
    9f2a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    9f2c:	61 11       	cpse	r22, r1
    9f2e:	f0 cf       	rjmp	.-32     	; 0x9f10 <_Z12processMCodei+0x192a>
						SERIAL_PGM(MSG_BEGIN);
						SERIAL_PGM("M10");
						SERIAL_PGMLN(MSG_TERMINATE);
    9f30:	88 e0       	ldi	r24, 0x08	; 8
    9f32:	9a e0       	ldi	r25, 0x0A	; 10
    9f34:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
						SERIAL_PORT.flush();
    9f38:	88 e0       	ldi	r24, 0x08	; 8
    9f3a:	9a e0       	ldi	r25, 0x0A	; 10
    9f3c:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
						break;
    9f40:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
					case 3: // type 3 Switch bridge, each channel has 2 PWM pins and an enable pin, so up to 5 channels
						if(motorControl[motorController]) {
    9f44:	f6 01       	movw	r30, r12
    9f46:	ee 0f       	add	r30, r30
    9f48:	ff 1f       	adc	r31, r31
    9f4a:	e9 50       	subi	r30, 0x09	; 9
    9f4c:	fd 4e       	sbci	r31, 0xED	; 237
    9f4e:	a0 81       	ld	r26, Z
    9f50:	b1 81       	ldd	r27, Z+1	; 0x01
    9f52:	10 97       	sbiw	r26, 0x00	; 0
    9f54:	09 f4       	brne	.+2      	; 0x9f58 <_Z12processMCodei+0x1972>
    9f56:	8f c0       	rjmp	.+286    	; 0xa076 <_Z12processMCodei+0x1a90>
							// for each channel, delete the direction pin and PWM created in main pin array to prepare new assignment
							// each controller can have up to 10 channels, each with its own PWM and direction pin
							for(uint8_t i = 0; i < motorControl[motorController]->getChannels(); i++) {
    9f58:	12 96       	adiw	r26, 0x02	; 2
    9f5a:	8c 91       	ld	r24, X
    9f5c:	12 97       	sbiw	r26, 0x02	; 2
    9f5e:	88 23       	and	r24, r24
    9f60:	09 f4       	brne	.+2      	; 0x9f64 <_Z12processMCodei+0x197e>
    9f62:	7a c0       	rjmp	.+244    	; 0xa058 <_Z12processMCodei+0x1a72>
    9f64:	b1 2c       	mov	r11, r1
								}
								if(pMotor1 != 255 && pdigitals[pMotor1]) {
									delete pdigitals[pMotor1];
									pdigitals[pMotor1] = 0;
								}
								pMotor1 = ((SwitchBridgeDriver*)motorControl[motorController])->getMotorDigitalPinB(i);
    9f66:	29 81       	ldd	r18, Y+1	; 0x01
    9f68:	3a 81       	ldd	r19, Y+2	; 0x02
    9f6a:	22 0f       	add	r18, r18
    9f6c:	33 1f       	adc	r19, r19
    9f6e:	29 50       	subi	r18, 0x09	; 9
    9f70:	3d 4e       	sbci	r19, 0xED	; 237
    9f72:	3a 83       	std	Y+2, r19	; 0x02
    9f74:	29 83       	std	Y+1, r18	; 0x01

//functions
public:
	SwitchBridgeDriver();
	~SwitchBridgeDriver();
	uint8_t getMotorDigitalPin(uint8_t channel) { return motorDrive[channel-1][0]; }
    9f76:	8b 2d       	mov	r24, r11
    9f78:	90 e0       	ldi	r25, 0x00	; 0
    9f7a:	8c 01       	movw	r16, r24
    9f7c:	01 50       	subi	r16, 0x01	; 1
    9f7e:	11 09       	sbc	r17, r1
    9f80:	fc 01       	movw	r30, r24
    9f82:	ec 58       	subi	r30, 0x8C	; 140
    9f84:	ff 4f       	sbci	r31, 0xFF	; 255
    9f86:	ee 0f       	add	r30, r30
    9f88:	ff 1f       	adc	r31, r31
    9f8a:	ea 0f       	add	r30, r26
    9f8c:	fb 1f       	adc	r31, r27
    9f8e:	a0 80       	ld	r10, Z
	uint8_t getMotorDigitalPinB(uint8_t channel) { return motorDriveB[channel-1][0]; }
	int commandMotorPower(uint8_t ch, int16_t p);
	int commandEmergencyStop(int status);
	int isConnected(void) { return true; }
	void setPins(Digital** pins) { pdigitals = pins; }
	uint8_t getMotorEnablePin(uint8_t channel) {return motorDrive[channel-1][1]; }
    9f90:	f8 01       	movw	r30, r16
    9f92:	ee 0f       	add	r30, r30
    9f94:	ff 1f       	adc	r31, r31
    9f96:	ea 0f       	add	r30, r26
    9f98:	fb 1f       	adc	r31, r27
    9f9a:	e5 51       	subi	r30, 0x15	; 21
    9f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    9f9e:	80 81       	ld	r24, Z
							// for each channel, delete the direction pin and PWM created in main pin array to prepare new assignment
							// each controller can have up to 10 channels, each with its own PWM and direction pin
							for(uint8_t i = 0; i < motorControl[motorController]->getChannels(); i++) {
								uint8_t pMotor1 = ((SwitchBridgeDriver*)motorControl[motorController])->getMotorDigitalPin(i);
								uint8_t pMotor2 = ((SwitchBridgeDriver*)motorControl[motorController])->getMotorEnablePin(i);
								if(pMotor2 != 255 && pdigitals[pMotor2]) {
    9fa0:	8f 3f       	cpi	r24, 0xFF	; 255
    9fa2:	a1 f0       	breq	.+40     	; 0x9fcc <_Z12processMCodei+0x19e6>
    9fa4:	88 2e       	mov	r8, r24
    9fa6:	91 2c       	mov	r9, r1
    9fa8:	f4 01       	movw	r30, r8
    9faa:	ee 0f       	add	r30, r30
    9fac:	ff 1f       	adc	r31, r31
    9fae:	e5 5c       	subi	r30, 0xC5	; 197
    9fb0:	fc 4e       	sbci	r31, 0xEC	; 236
    9fb2:	80 81       	ld	r24, Z
    9fb4:	91 81       	ldd	r25, Z+1	; 0x01
    9fb6:	00 97       	sbiw	r24, 0x00	; 0
    9fb8:	49 f0       	breq	.+18     	; 0x9fcc <_Z12processMCodei+0x19e6>
									delete pdigitals[pMotor2];
    9fba:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
									pdigitals[pMotor2] = 0;
    9fbe:	f4 01       	movw	r30, r8
    9fc0:	ee 0f       	add	r30, r30
    9fc2:	ff 1f       	adc	r31, r31
    9fc4:	e5 5c       	subi	r30, 0xC5	; 197
    9fc6:	fc 4e       	sbci	r31, 0xEC	; 236
    9fc8:	11 82       	std	Z+1, r1	; 0x01
    9fca:	10 82       	st	Z, r1
								}
								if(pMotor1 != 255 && pdigitals[pMotor1]) {
    9fcc:	3f ef       	ldi	r19, 0xFF	; 255
    9fce:	a3 16       	cp	r10, r19
    9fd0:	a1 f0       	breq	.+40     	; 0x9ffa <_Z12processMCodei+0x1a14>
    9fd2:	8a 2c       	mov	r8, r10
    9fd4:	91 2c       	mov	r9, r1
    9fd6:	f4 01       	movw	r30, r8
    9fd8:	ee 0f       	add	r30, r30
    9fda:	ff 1f       	adc	r31, r31
    9fdc:	e5 5c       	subi	r30, 0xC5	; 197
    9fde:	fc 4e       	sbci	r31, 0xEC	; 236
    9fe0:	80 81       	ld	r24, Z
    9fe2:	91 81       	ldd	r25, Z+1	; 0x01
    9fe4:	00 97       	sbiw	r24, 0x00	; 0
    9fe6:	49 f0       	breq	.+18     	; 0x9ffa <_Z12processMCodei+0x1a14>
									delete pdigitals[pMotor1];
    9fe8:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
									pdigitals[pMotor1] = 0;
    9fec:	f4 01       	movw	r30, r8
    9fee:	ee 0f       	add	r30, r30
    9ff0:	ff 1f       	adc	r31, r31
    9ff2:	e5 5c       	subi	r30, 0xC5	; 197
    9ff4:	fc 4e       	sbci	r31, 0xEC	; 236
    9ff6:	11 82       	std	Z+1, r1	; 0x01
    9ff8:	10 82       	st	Z, r1
//functions
public:
	SwitchBridgeDriver();
	~SwitchBridgeDriver();
	uint8_t getMotorDigitalPin(uint8_t channel) { return motorDrive[channel-1][0]; }
	uint8_t getMotorDigitalPinB(uint8_t channel) { return motorDriveB[channel-1][0]; }
    9ffa:	a9 81       	ldd	r26, Y+1	; 0x01
    9ffc:	ba 81       	ldd	r27, Y+2	; 0x02
    9ffe:	ed 91       	ld	r30, X+
    a000:	fc 91       	ld	r31, X
    a002:	c8 01       	movw	r24, r16
    a004:	81 58       	subi	r24, 0x81	; 129
    a006:	9f 4f       	sbci	r25, 0xFF	; 255
    a008:	88 0f       	add	r24, r24
    a00a:	99 1f       	adc	r25, r25
    a00c:	e8 0f       	add	r30, r24
    a00e:	f9 1f       	adc	r31, r25
    a010:	e0 81       	ld	r30, Z
								}
								pMotor1 = ((SwitchBridgeDriver*)motorControl[motorController])->getMotorDigitalPinB(i);
								if(pMotor1 != 255 && pdigitals[pMotor1]) {
    a012:	ef 3f       	cpi	r30, 0xFF	; 255
    a014:	a1 f0       	breq	.+40     	; 0xa03e <_Z12processMCodei+0x1a58>
    a016:	0e 2f       	mov	r16, r30
    a018:	10 e0       	ldi	r17, 0x00	; 0
    a01a:	f8 01       	movw	r30, r16
    a01c:	ee 0f       	add	r30, r30
    a01e:	ff 1f       	adc	r31, r31
    a020:	e5 5c       	subi	r30, 0xC5	; 197
    a022:	fc 4e       	sbci	r31, 0xEC	; 236
    a024:	80 81       	ld	r24, Z
    a026:	91 81       	ldd	r25, Z+1	; 0x01
    a028:	00 97       	sbiw	r24, 0x00	; 0
    a02a:	49 f0       	breq	.+18     	; 0xa03e <_Z12processMCodei+0x1a58>
									delete pdigitals[pMotor1];
    a02c:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
									pdigitals[pMotor1] = 0;
    a030:	f8 01       	movw	r30, r16
    a032:	ee 0f       	add	r30, r30
    a034:	ff 1f       	adc	r31, r31
    a036:	e5 5c       	subi	r30, 0xC5	; 197
    a038:	fc 4e       	sbci	r31, 0xEC	; 236
    a03a:	11 82       	std	Z+1, r1	; 0x01
    a03c:	10 82       	st	Z, r1
						break;
					case 3: // type 3 Switch bridge, each channel has 2 PWM pins and an enable pin, so up to 5 channels
						if(motorControl[motorController]) {
							// for each channel, delete the direction pin and PWM created in main pin array to prepare new assignment
							// each controller can have up to 10 channels, each with its own PWM and direction pin
							for(uint8_t i = 0; i < motorControl[motorController]->getChannels(); i++) {
    a03e:	b3 94       	inc	r11
    a040:	e9 81       	ldd	r30, Y+1	; 0x01
    a042:	fa 81       	ldd	r31, Y+2	; 0x02
    a044:	a0 81       	ld	r26, Z
    a046:	b1 81       	ldd	r27, Z+1	; 0x01
    a048:	12 96       	adiw	r26, 0x02	; 2
    a04a:	8c 91       	ld	r24, X
    a04c:	12 97       	sbiw	r26, 0x02	; 2
    a04e:	b8 16       	cp	r11, r24
    a050:	08 f4       	brcc	.+2      	; 0xa054 <_Z12processMCodei+0x1a6e>
    a052:	91 cf       	rjmp	.-222    	; 0x9f76 <_Z12processMCodei+0x1990>
								if(pMotor1 != 255 && pdigitals[pMotor1]) {
									delete pdigitals[pMotor1];
									pdigitals[pMotor1] = 0;
								}
							}
							delete motorControl[motorController];
    a054:	10 97       	sbiw	r26, 0x00	; 0
    a056:	41 f0       	breq	.+16     	; 0xa068 <_Z12processMCodei+0x1a82>
    a058:	ed 91       	ld	r30, X+
    a05a:	fc 91       	ld	r31, X
    a05c:	11 97       	sbiw	r26, 0x01	; 1
    a05e:	02 80       	ldd	r0, Z+2	; 0x02
    a060:	f3 81       	ldd	r31, Z+3	; 0x03
    a062:	e0 2d       	mov	r30, r0
    a064:	cd 01       	movw	r24, r26
    a066:	19 95       	eicall
							motorControl[motorController] = 0; // in case assignment below fails
    a068:	f6 01       	movw	r30, r12
    a06a:	ee 0f       	add	r30, r30
    a06c:	ff 1f       	adc	r31, r31
    a06e:	e9 50       	subi	r30, 0x09	; 9
    a070:	fd 4e       	sbci	r31, 0xED	; 237
    a072:	11 82       	std	Z+1, r1	; 0x01
    a074:	10 82       	st	Z, r1
						}
						motorControl[motorController] = new SwitchBridgeDriver();
    a076:	84 e1       	ldi	r24, 0x14	; 20
    a078:	91 e0       	ldi	r25, 0x01	; 1
    a07a:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    a07e:	9a 83       	std	Y+2, r25	; 0x02
    a080:	89 83       	std	Y+1, r24	; 0x01
    a082:	0e 94 f9 37 	call	0x6ff2	; 0x6ff2 <_ZN18SwitchBridgeDriverC1Ev>
    a086:	c6 01       	movw	r24, r12
    a088:	88 0f       	add	r24, r24
    a08a:	99 1f       	adc	r25, r25
    a08c:	fc 01       	movw	r30, r24
    a08e:	e9 50       	subi	r30, 0x09	; 9
    a090:	fd 4e       	sbci	r31, 0xED	; 237
    a092:	29 81       	ldd	r18, Y+1	; 0x01
    a094:	3a 81       	ldd	r19, Y+2	; 0x02
    a096:	31 83       	std	Z+1, r19	; 0x01
    a098:	20 83       	st	Z, r18
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a09a:	e3 e6       	ldi	r30, 0x63	; 99
    a09c:	f0 e1       	ldi	r31, 0x10	; 16
    a09e:	64 91       	lpm	r22, Z
	while(ch)
    a0a0:	66 23       	and	r22, r22
    a0a2:	a1 f0       	breq	.+40     	; 0xa0cc <_Z12processMCodei+0x1ae6>
    a0a4:	fa 83       	std	Y+2, r31	; 0x02
    a0a6:	e9 83       	std	Y+1, r30	; 0x01
    a0a8:	08 e0       	ldi	r16, 0x08	; 8
    a0aa:	1a e0       	ldi	r17, 0x0A	; 10
    a0ac:	d8 01       	movw	r26, r16
    a0ae:	ed 91       	ld	r30, X+
    a0b0:	fc 91       	ld	r31, X
    a0b2:	01 90       	ld	r0, Z+
    a0b4:	f0 81       	ld	r31, Z
    a0b6:	e0 2d       	mov	r30, r0
    a0b8:	c8 01       	movw	r24, r16
    a0ba:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a0bc:	e9 81       	ldd	r30, Y+1	; 0x01
    a0be:	fa 81       	ldd	r31, Y+2	; 0x02
    a0c0:	31 96       	adiw	r30, 0x01	; 1
    a0c2:	fa 83       	std	Y+2, r31	; 0x02
    a0c4:	e9 83       	std	Y+1, r30	; 0x01
    a0c6:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a0c8:	61 11       	cpse	r22, r1
    a0ca:	f0 cf       	rjmp	.-32     	; 0xa0ac <_Z12processMCodei+0x1ac6>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a0cc:	ef e5       	ldi	r30, 0x5F	; 95
    a0ce:	f0 e1       	ldi	r31, 0x10	; 16
    a0d0:	64 91       	lpm	r22, Z
	while(ch)
    a0d2:	66 23       	and	r22, r22
    a0d4:	a1 f0       	breq	.+40     	; 0xa0fe <_Z12processMCodei+0x1b18>
    a0d6:	fa 83       	std	Y+2, r31	; 0x02
    a0d8:	e9 83       	std	Y+1, r30	; 0x01
    a0da:	08 e0       	ldi	r16, 0x08	; 8
    a0dc:	1a e0       	ldi	r17, 0x0A	; 10
    a0de:	d8 01       	movw	r26, r16
    a0e0:	ed 91       	ld	r30, X+
    a0e2:	fc 91       	ld	r31, X
    a0e4:	01 90       	ld	r0, Z+
    a0e6:	f0 81       	ld	r31, Z
    a0e8:	e0 2d       	mov	r30, r0
    a0ea:	c8 01       	movw	r24, r16
    a0ec:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a0ee:	e9 81       	ldd	r30, Y+1	; 0x01
    a0f0:	fa 81       	ldd	r31, Y+2	; 0x02
    a0f2:	31 96       	adiw	r30, 0x01	; 1
    a0f4:	fa 83       	std	Y+2, r31	; 0x02
    a0f6:	e9 83       	std	Y+1, r30	; 0x01
    a0f8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a0fa:	61 11       	cpse	r22, r1
    a0fc:	f0 cf       	rjmp	.-32     	; 0xa0de <_Z12processMCodei+0x1af8>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a0fe:	ec e5       	ldi	r30, 0x5C	; 92
    a100:	f0 e1       	ldi	r31, 0x10	; 16
    a102:	64 91       	lpm	r22, Z
	while(ch)
    a104:	66 23       	and	r22, r22
    a106:	a1 f0       	breq	.+40     	; 0xa130 <_Z12processMCodei+0x1b4a>
    a108:	fa 83       	std	Y+2, r31	; 0x02
    a10a:	e9 83       	std	Y+1, r30	; 0x01
    a10c:	08 e0       	ldi	r16, 0x08	; 8
    a10e:	1a e0       	ldi	r17, 0x0A	; 10
    a110:	d8 01       	movw	r26, r16
    a112:	ed 91       	ld	r30, X+
    a114:	fc 91       	ld	r31, X
    a116:	01 90       	ld	r0, Z+
    a118:	f0 81       	ld	r31, Z
    a11a:	e0 2d       	mov	r30, r0
    a11c:	c8 01       	movw	r24, r16
    a11e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a120:	e9 81       	ldd	r30, Y+1	; 0x01
    a122:	fa 81       	ldd	r31, Y+2	; 0x02
    a124:	31 96       	adiw	r30, 0x01	; 1
    a126:	fa 83       	std	Y+2, r31	; 0x02
    a128:	e9 83       	std	Y+1, r30	; 0x01
    a12a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a12c:	61 11       	cpse	r22, r1
    a12e:	f0 cf       	rjmp	.-32     	; 0xa110 <_Z12processMCodei+0x1b2a>
						SERIAL_PGM(MSG_BEGIN);
						SERIAL_PGM("M10");
						SERIAL_PGMLN(MSG_TERMINATE);
    a130:	88 e0       	ldi	r24, 0x08	; 8
    a132:	9a e0       	ldi	r25, 0x0A	; 10
    a134:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
						SERIAL_PORT.flush();
    a138:	88 e0       	ldi	r24, 0x08	; 8
    a13a:	9a e0       	ldi	r25, 0x0A	; 10
    a13c:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
						break;
    a140:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
					case 4: // Type 4 non-propulsion PWM driver 
						if(pwmControl[motorController]) {
    a144:	f6 01       	movw	r30, r12
    a146:	ee 0f       	add	r30, r30
    a148:	ff 1f       	adc	r31, r31
    a14a:	ed 51       	subi	r30, 0x1D	; 29
    a14c:	fd 4e       	sbci	r31, 0xED	; 237
    a14e:	a0 81       	ld	r26, Z
    a150:	b1 81       	ldd	r27, Z+1	; 0x01
    a152:	10 97       	sbiw	r26, 0x00	; 0
    a154:	09 f4       	brne	.+2      	; 0xa158 <_Z12processMCodei+0x1b72>
    a156:	70 c0       	rjmp	.+224    	; 0xa238 <_Z12processMCodei+0x1c52>
							// for each channel, delete the direction pin and PWM created in main pin array to prepare new assignment
							// each controller can have up to 10 channels, each with its own PWM and direction pin
							for(uint8_t i = 0; i < pwmControl[motorController]->getChannels(); i++) {
    a158:	12 96       	adiw	r26, 0x02	; 2
    a15a:	8c 91       	ld	r24, X
    a15c:	12 97       	sbiw	r26, 0x02	; 2
    a15e:	88 23       	and	r24, r24
    a160:	09 f4       	brne	.+2      	; 0xa164 <_Z12processMCodei+0x1b7e>
    a162:	5b c0       	rjmp	.+182    	; 0xa21a <_Z12processMCodei+0x1c34>
    a164:	10 e0       	ldi	r17, 0x00	; 0
								uint8_t pMotor1 = ((VariablePWMDriver*)pwmControl[motorController])->getPWMEnablePin(i);
									if(pMotor1 != 255 && pdigitals[pMotor1]) {
										delete pdigitals[pMotor1];
										pdigitals[pMotor1] = 0;
									}
									pMotor1 = ((VariablePWMDriver*)pwmControl[motorController])->getPWMLevelPin(i);
    a166:	29 81       	ldd	r18, Y+1	; 0x01
    a168:	3a 81       	ldd	r19, Y+2	; 0x02
    a16a:	22 0f       	add	r18, r18
    a16c:	33 1f       	adc	r19, r19
    a16e:	2d 51       	subi	r18, 0x1D	; 29
    a170:	3d 4e       	sbci	r19, 0xED	; 237
    a172:	3a 83       	std	Y+2, r19	; 0x02
    a174:	29 83       	std	Y+1, r18	; 0x01
	void setMaxPWMLevel(int p) { MAXPWMLEVEL = p; }
	uint8_t getPWMLevelPin(uint8_t channel) { return pwmDrive[channel-1][0]; }
	uint8_t getPWMEnablePin(uint8_t channel) {return pwmDrive[channel-1][1]; }
    a176:	a1 2e       	mov	r10, r17
    a178:	b1 2c       	mov	r11, r1
    a17a:	31 e0       	ldi	r19, 0x01	; 1
    a17c:	a3 1a       	sub	r10, r19
    a17e:	b1 08       	sbc	r11, r1
    a180:	c5 01       	movw	r24, r10
    a182:	88 0f       	add	r24, r24
    a184:	99 1f       	adc	r25, r25
    a186:	88 0f       	add	r24, r24
    a188:	99 1f       	adc	r25, r25
    a18a:	a8 0f       	add	r26, r24
    a18c:	b9 1f       	adc	r27, r25
    a18e:	1a 96       	adiw	r26, 0x0a	; 10
    a190:	ec 91       	ld	r30, X
						if(pwmControl[motorController]) {
							// for each channel, delete the direction pin and PWM created in main pin array to prepare new assignment
							// each controller can have up to 10 channels, each with its own PWM and direction pin
							for(uint8_t i = 0; i < pwmControl[motorController]->getChannels(); i++) {
								uint8_t pMotor1 = ((VariablePWMDriver*)pwmControl[motorController])->getPWMEnablePin(i);
									if(pMotor1 != 255 && pdigitals[pMotor1]) {
    a192:	ef 3f       	cpi	r30, 0xFF	; 255
    a194:	a1 f0       	breq	.+40     	; 0xa1be <_Z12processMCodei+0x1bd8>
    a196:	8e 2e       	mov	r8, r30
    a198:	91 2c       	mov	r9, r1
    a19a:	f4 01       	movw	r30, r8
    a19c:	ee 0f       	add	r30, r30
    a19e:	ff 1f       	adc	r31, r31
    a1a0:	e5 5c       	subi	r30, 0xC5	; 197
    a1a2:	fc 4e       	sbci	r31, 0xEC	; 236
    a1a4:	80 81       	ld	r24, Z
    a1a6:	91 81       	ldd	r25, Z+1	; 0x01
    a1a8:	00 97       	sbiw	r24, 0x00	; 0
    a1aa:	49 f0       	breq	.+18     	; 0xa1be <_Z12processMCodei+0x1bd8>
										delete pdigitals[pMotor1];
    a1ac:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
										pdigitals[pMotor1] = 0;
    a1b0:	f4 01       	movw	r30, r8
    a1b2:	ee 0f       	add	r30, r30
    a1b4:	ff 1f       	adc	r31, r31
    a1b6:	e5 5c       	subi	r30, 0xC5	; 197
    a1b8:	fc 4e       	sbci	r31, 0xEC	; 236
    a1ba:	11 82       	std	Z+1, r1	; 0x01
    a1bc:	10 82       	st	Z, r1
	int commandEmergencyStop(int status);
	int isConnected(void) { return true; }
	void setPWMs(PWM** pwm) { ppwms = pwm; }
	void setEnablePins(Digital** dpin) { pdigitals = dpin; }
	void setMaxPWMLevel(int p) { MAXPWMLEVEL = p; }
	uint8_t getPWMLevelPin(uint8_t channel) { return pwmDrive[channel-1][0]; }
    a1be:	a9 81       	ldd	r26, Y+1	; 0x01
    a1c0:	ba 81       	ldd	r27, Y+2	; 0x02
    a1c2:	ed 91       	ld	r30, X+
    a1c4:	fc 91       	ld	r31, X
    a1c6:	aa 0c       	add	r10, r10
    a1c8:	bb 1c       	adc	r11, r11
    a1ca:	aa 0c       	add	r10, r10
    a1cc:	bb 1c       	adc	r11, r11
    a1ce:	ea 0d       	add	r30, r10
    a1d0:	fb 1d       	adc	r31, r11
    a1d2:	e1 85       	ldd	r30, Z+9	; 0x09
									}
									pMotor1 = ((VariablePWMDriver*)pwmControl[motorController])->getPWMLevelPin(i);
									if(pMotor1 != 255 && ppwms[pMotor1]) {
    a1d4:	ef 3f       	cpi	r30, 0xFF	; 255
    a1d6:	a1 f0       	breq	.+40     	; 0xa200 <_Z12processMCodei+0x1c1a>
    a1d8:	ae 2e       	mov	r10, r30
    a1da:	b1 2c       	mov	r11, r1
    a1dc:	f5 01       	movw	r30, r10
    a1de:	ee 0f       	add	r30, r30
    a1e0:	ff 1f       	adc	r31, r31
    a1e2:	ed 5d       	subi	r30, 0xDD	; 221
    a1e4:	fc 4e       	sbci	r31, 0xEC	; 236
    a1e6:	80 81       	ld	r24, Z
    a1e8:	91 81       	ldd	r25, Z+1	; 0x01
    a1ea:	00 97       	sbiw	r24, 0x00	; 0
    a1ec:	49 f0       	breq	.+18     	; 0xa200 <_Z12processMCodei+0x1c1a>
										delete ppwms[pMotor1];
    a1ee:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
										ppwms[pMotor1] = 0;
    a1f2:	f5 01       	movw	r30, r10
    a1f4:	ee 0f       	add	r30, r30
    a1f6:	ff 1f       	adc	r31, r31
    a1f8:	ed 5d       	subi	r30, 0xDD	; 221
    a1fa:	fc 4e       	sbci	r31, 0xEC	; 236
    a1fc:	11 82       	std	Z+1, r1	; 0x01
    a1fe:	10 82       	st	Z, r1
						break;
					case 4: // Type 4 non-propulsion PWM driver 
						if(pwmControl[motorController]) {
							// for each channel, delete the direction pin and PWM created in main pin array to prepare new assignment
							// each controller can have up to 10 channels, each with its own PWM and direction pin
							for(uint8_t i = 0; i < pwmControl[motorController]->getChannels(); i++) {
    a200:	1f 5f       	subi	r17, 0xFF	; 255
    a202:	e9 81       	ldd	r30, Y+1	; 0x01
    a204:	fa 81       	ldd	r31, Y+2	; 0x02
    a206:	a0 81       	ld	r26, Z
    a208:	b1 81       	ldd	r27, Z+1	; 0x01
    a20a:	12 96       	adiw	r26, 0x02	; 2
    a20c:	8c 91       	ld	r24, X
    a20e:	12 97       	sbiw	r26, 0x02	; 2
    a210:	18 17       	cp	r17, r24
    a212:	08 f4       	brcc	.+2      	; 0xa216 <_Z12processMCodei+0x1c30>
    a214:	b0 cf       	rjmp	.-160    	; 0xa176 <_Z12processMCodei+0x1b90>
									if(pMotor1 != 255 && ppwms[pMotor1]) {
										delete ppwms[pMotor1];
										ppwms[pMotor1] = 0;
									}
							}
							delete pwmControl[motorController];
    a216:	10 97       	sbiw	r26, 0x00	; 0
    a218:	41 f0       	breq	.+16     	; 0xa22a <_Z12processMCodei+0x1c44>
    a21a:	ed 91       	ld	r30, X+
    a21c:	fc 91       	ld	r31, X
    a21e:	11 97       	sbiw	r26, 0x01	; 1
    a220:	02 80       	ldd	r0, Z+2	; 0x02
    a222:	f3 81       	ldd	r31, Z+3	; 0x03
    a224:	e0 2d       	mov	r30, r0
    a226:	cd 01       	movw	r24, r26
    a228:	19 95       	eicall
							motorControl[motorController] = 0; // in case assignment below fails
    a22a:	f6 01       	movw	r30, r12
    a22c:	ee 0f       	add	r30, r30
    a22e:	ff 1f       	adc	r31, r31
    a230:	e9 50       	subi	r30, 0x09	; 9
    a232:	fd 4e       	sbci	r31, 0xED	; 237
    a234:	11 82       	std	Z+1, r1	; 0x01
    a236:	10 82       	st	Z, r1
						}
						pwmControl[motorController] = new VariablePWMDriver();
    a238:	8c e9       	ldi	r24, 0x9C	; 156
    a23a:	90 e0       	ldi	r25, 0x00	; 0
    a23c:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    a240:	9a 83       	std	Y+2, r25	; 0x02
    a242:	89 83       	std	Y+1, r24	; 0x01
    a244:	0e 94 1e 95 	call	0x12a3c	; 0x12a3c <_ZN17VariablePWMDriverC1Ev>
    a248:	c6 01       	movw	r24, r12
    a24a:	88 0f       	add	r24, r24
    a24c:	99 1f       	adc	r25, r25
    a24e:	fc 01       	movw	r30, r24
    a250:	ed 51       	subi	r30, 0x1D	; 29
    a252:	fd 4e       	sbci	r31, 0xED	; 237
    a254:	29 81       	ldd	r18, Y+1	; 0x01
    a256:	3a 81       	ldd	r19, Y+2	; 0x02
    a258:	31 83       	std	Z+1, r19	; 0x01
    a25a:	20 83       	st	Z, r18
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a25c:	ea e5       	ldi	r30, 0x5A	; 90
    a25e:	f0 e1       	ldi	r31, 0x10	; 16
    a260:	64 91       	lpm	r22, Z
	while(ch)
    a262:	66 23       	and	r22, r22
    a264:	a1 f0       	breq	.+40     	; 0xa28e <_Z12processMCodei+0x1ca8>
    a266:	fa 83       	std	Y+2, r31	; 0x02
    a268:	e9 83       	std	Y+1, r30	; 0x01
    a26a:	08 e0       	ldi	r16, 0x08	; 8
    a26c:	1a e0       	ldi	r17, 0x0A	; 10
    a26e:	d8 01       	movw	r26, r16
    a270:	ed 91       	ld	r30, X+
    a272:	fc 91       	ld	r31, X
    a274:	01 90       	ld	r0, Z+
    a276:	f0 81       	ld	r31, Z
    a278:	e0 2d       	mov	r30, r0
    a27a:	c8 01       	movw	r24, r16
    a27c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a27e:	e9 81       	ldd	r30, Y+1	; 0x01
    a280:	fa 81       	ldd	r31, Y+2	; 0x02
    a282:	31 96       	adiw	r30, 0x01	; 1
    a284:	fa 83       	std	Y+2, r31	; 0x02
    a286:	e9 83       	std	Y+1, r30	; 0x01
    a288:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a28a:	61 11       	cpse	r22, r1
    a28c:	f0 cf       	rjmp	.-32     	; 0xa26e <_Z12processMCodei+0x1c88>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a28e:	e6 e5       	ldi	r30, 0x56	; 86
    a290:	f0 e1       	ldi	r31, 0x10	; 16
    a292:	64 91       	lpm	r22, Z
	while(ch)
    a294:	66 23       	and	r22, r22
    a296:	a1 f0       	breq	.+40     	; 0xa2c0 <_Z12processMCodei+0x1cda>
    a298:	fa 83       	std	Y+2, r31	; 0x02
    a29a:	e9 83       	std	Y+1, r30	; 0x01
    a29c:	08 e0       	ldi	r16, 0x08	; 8
    a29e:	1a e0       	ldi	r17, 0x0A	; 10
    a2a0:	d8 01       	movw	r26, r16
    a2a2:	ed 91       	ld	r30, X+
    a2a4:	fc 91       	ld	r31, X
    a2a6:	01 90       	ld	r0, Z+
    a2a8:	f0 81       	ld	r31, Z
    a2aa:	e0 2d       	mov	r30, r0
    a2ac:	c8 01       	movw	r24, r16
    a2ae:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a2b0:	e9 81       	ldd	r30, Y+1	; 0x01
    a2b2:	fa 81       	ldd	r31, Y+2	; 0x02
    a2b4:	31 96       	adiw	r30, 0x01	; 1
    a2b6:	fa 83       	std	Y+2, r31	; 0x02
    a2b8:	e9 83       	std	Y+1, r30	; 0x01
    a2ba:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a2bc:	61 11       	cpse	r22, r1
    a2be:	f0 cf       	rjmp	.-32     	; 0xa2a0 <_Z12processMCodei+0x1cba>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a2c0:	e3 e5       	ldi	r30, 0x53	; 83
    a2c2:	f0 e1       	ldi	r31, 0x10	; 16
    a2c4:	64 91       	lpm	r22, Z
	while(ch)
    a2c6:	66 23       	and	r22, r22
    a2c8:	a1 f0       	breq	.+40     	; 0xa2f2 <_Z12processMCodei+0x1d0c>
    a2ca:	fa 83       	std	Y+2, r31	; 0x02
    a2cc:	e9 83       	std	Y+1, r30	; 0x01
    a2ce:	08 e0       	ldi	r16, 0x08	; 8
    a2d0:	1a e0       	ldi	r17, 0x0A	; 10
    a2d2:	d8 01       	movw	r26, r16
    a2d4:	ed 91       	ld	r30, X+
    a2d6:	fc 91       	ld	r31, X
    a2d8:	01 90       	ld	r0, Z+
    a2da:	f0 81       	ld	r31, Z
    a2dc:	e0 2d       	mov	r30, r0
    a2de:	c8 01       	movw	r24, r16
    a2e0:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a2e2:	e9 81       	ldd	r30, Y+1	; 0x01
    a2e4:	fa 81       	ldd	r31, Y+2	; 0x02
    a2e6:	31 96       	adiw	r30, 0x01	; 1
    a2e8:	fa 83       	std	Y+2, r31	; 0x02
    a2ea:	e9 83       	std	Y+1, r30	; 0x01
    a2ec:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a2ee:	61 11       	cpse	r22, r1
    a2f0:	f0 cf       	rjmp	.-32     	; 0xa2d2 <_Z12processMCodei+0x1cec>
						SERIAL_PGM(MSG_BEGIN);
						SERIAL_PGM("M10");
						SERIAL_PGMLN(MSG_TERMINATE);
    a2f2:	88 e0       	ldi	r24, 0x08	; 8
    a2f4:	9a e0       	ldi	r25, 0x0A	; 10
    a2f6:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
						SERIAL_PORT.flush();
    a2fa:	88 e0       	ldi	r24, 0x08	; 8
    a2fc:	9a e0       	ldi	r25, 0x0A	; 10
    a2fe:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
						break;
    a302:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a306:	e1 e5       	ldi	r30, 0x51	; 81
    a308:	f0 e1       	ldi	r31, 0x10	; 16
    a30a:	64 91       	lpm	r22, Z
	while(ch)
    a30c:	66 23       	and	r22, r22
    a30e:	a1 f0       	breq	.+40     	; 0xa338 <_Z12processMCodei+0x1d52>
    a310:	fa 83       	std	Y+2, r31	; 0x02
    a312:	e9 83       	std	Y+1, r30	; 0x01
    a314:	08 e0       	ldi	r16, 0x08	; 8
    a316:	1a e0       	ldi	r17, 0x0A	; 10
    a318:	d8 01       	movw	r26, r16
    a31a:	ed 91       	ld	r30, X+
    a31c:	fc 91       	ld	r31, X
    a31e:	01 90       	ld	r0, Z+
    a320:	f0 81       	ld	r31, Z
    a322:	e0 2d       	mov	r30, r0
    a324:	c8 01       	movw	r24, r16
    a326:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a328:	e9 81       	ldd	r30, Y+1	; 0x01
    a32a:	fa 81       	ldd	r31, Y+2	; 0x02
    a32c:	31 96       	adiw	r30, 0x01	; 1
    a32e:	fa 83       	std	Y+2, r31	; 0x02
    a330:	e9 83       	std	Y+1, r30	; 0x01
    a332:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a334:	61 11       	cpse	r22, r1
    a336:	f0 cf       	rjmp	.-32     	; 0xa318 <_Z12processMCodei+0x1d32>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a338:	ec e3       	ldi	r30, 0x3C	; 60
    a33a:	f0 e1       	ldi	r31, 0x10	; 16
    a33c:	64 91       	lpm	r22, Z
	while(ch)
    a33e:	66 23       	and	r22, r22
    a340:	a1 f0       	breq	.+40     	; 0xa36a <_Z12processMCodei+0x1d84>
    a342:	fa 83       	std	Y+2, r31	; 0x02
    a344:	e9 83       	std	Y+1, r30	; 0x01
    a346:	08 e0       	ldi	r16, 0x08	; 8
    a348:	1a e0       	ldi	r17, 0x0A	; 10
    a34a:	d8 01       	movw	r26, r16
    a34c:	ed 91       	ld	r30, X+
    a34e:	fc 91       	ld	r31, X
    a350:	01 90       	ld	r0, Z+
    a352:	f0 81       	ld	r31, Z
    a354:	e0 2d       	mov	r30, r0
    a356:	c8 01       	movw	r24, r16
    a358:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a35a:	e9 81       	ldd	r30, Y+1	; 0x01
    a35c:	fa 81       	ldd	r31, Y+2	; 0x02
    a35e:	31 96       	adiw	r30, 0x01	; 1
    a360:	fa 83       	std	Y+2, r31	; 0x02
    a362:	e9 83       	std	Y+1, r30	; 0x01
    a364:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a366:	61 11       	cpse	r22, r1
    a368:	f0 cf       	rjmp	.-32     	; 0xa34a <_Z12processMCodei+0x1d64>
					default:
						SERIAL_PGM(MSG_BEGIN);
						SERIAL_PGM("BAD CONTROLLER TYPE:");
						SERIAL_PORT.println(controllerType);
    a36a:	4a e0       	ldi	r20, 0x0A	; 10
    a36c:	50 e0       	ldi	r21, 0x00	; 0
    a36e:	b4 01       	movw	r22, r8
    a370:	88 e0       	ldi	r24, 0x08	; 8
    a372:	9a e0       	ldi	r25, 0x0A	; 10
    a374:	0e 94 ab 8a 	call	0x11556	; 0x11556 <_ZN5Print7printlnEii>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a378:	e9 e3       	ldi	r30, 0x39	; 57
    a37a:	f0 e1       	ldi	r31, 0x10	; 16
    a37c:	64 91       	lpm	r22, Z
	while(ch)
    a37e:	66 23       	and	r22, r22
    a380:	a1 f0       	breq	.+40     	; 0xa3aa <_Z12processMCodei+0x1dc4>
    a382:	fa 83       	std	Y+2, r31	; 0x02
    a384:	e9 83       	std	Y+1, r30	; 0x01
    a386:	08 e0       	ldi	r16, 0x08	; 8
    a388:	1a e0       	ldi	r17, 0x0A	; 10
    a38a:	d8 01       	movw	r26, r16
    a38c:	ed 91       	ld	r30, X+
    a38e:	fc 91       	ld	r31, X
    a390:	01 90       	ld	r0, Z+
    a392:	f0 81       	ld	r31, Z
    a394:	e0 2d       	mov	r30, r0
    a396:	c8 01       	movw	r24, r16
    a398:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a39a:	e9 81       	ldd	r30, Y+1	; 0x01
    a39c:	fa 81       	ldd	r31, Y+2	; 0x02
    a39e:	31 96       	adiw	r30, 0x01	; 1
    a3a0:	fa 83       	std	Y+2, r31	; 0x02
    a3a2:	e9 83       	std	Y+1, r30	; 0x01
    a3a4:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a3a6:	61 11       	cpse	r22, r1
    a3a8:	f0 cf       	rjmp	.-32     	; 0xa38a <_Z12processMCodei+0x1da4>
						SERIAL_PGMLN(MSG_TERMINATE);
    a3aa:	88 e0       	ldi	r24, 0x08	; 8
    a3ac:	9a e0       	ldi	r25, 0x0A	; 10
    a3ae:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
						SERIAL_PORT.flush();
    a3b2:	88 e0       	ldi	r24, 0x08	; 8
    a3b4:	9a e0       	ldi	r25, 0x0A	; 10
    a3b6:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
						break;
    a3ba:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			}
		}
		break;
		
	case 11: // M11 [Z<slot>] C<channel> [D<duration>] [X<duration>] - Set maximum cycle duration for given channel. If X, slot is PWM
		if(code_seen('Z')) {
    a3be:	8a e5       	ldi	r24, 0x5A	; 90
    a3c0:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    a3c4:	88 23       	and	r24, r24
    a3c6:	39 f0       	breq	.+14     	; 0xa3d6 <_Z12processMCodei+0x1df0>
			motorController = code_value();
    a3c8:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    a3cc:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    a3d0:	7a 83       	std	Y+2, r23	; 0x02
    a3d2:	69 83       	std	Y+1, r22	; 0x01
    a3d4:	02 c0       	rjmp	.+4      	; 0xa3da <_Z12processMCodei+0x1df4>
  /*-------------------------------------
  * M Code processing
  *--------------------------------------
  */
  void processMCode(int cval) {
	  int motorController = 0; 
    a3d6:	1a 82       	std	Y+2, r1	; 0x02
    a3d8:	19 82       	std	Y+1, r1	; 0x01
		
	case 11: // M11 [Z<slot>] C<channel> [D<duration>] [X<duration>] - Set maximum cycle duration for given channel. If X, slot is PWM
		if(code_seen('Z')) {
			motorController = code_value();
		}
		if( code_seen('C') ) {
    a3da:	83 e4       	ldi	r24, 0x43	; 67
    a3dc:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    a3e0:	88 23       	and	r24, r24
    a3e2:	11 f4       	brne	.+4      	; 0xa3e8 <_Z12processMCodei+0x1e02>
    a3e4:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			channel = code_value();
    a3e8:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    a3ec:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    a3f0:	60 93 22 13 	sts	0x1322, r22	; 0x801322 <channel>
			if(channel <= 0) {
    a3f4:	66 23       	and	r22, r22
    a3f6:	11 f4       	brne	.+4      	; 0xa3fc <_Z12processMCodei+0x1e16>
    a3f8:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
				break;
			}
			if(code_seen('X')) {
    a3fc:	88 e5       	ldi	r24, 0x58	; 88
    a3fe:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    a402:	88 23       	and	r24, r24
    a404:	09 f4       	brne	.+2      	; 0xa408 <_Z12processMCodei+0x1e22>
    a406:	86 c0       	rjmp	.+268    	; 0xa514 <_Z12processMCodei+0x1f2e>
				if(pwmControl[motorController]) {
    a408:	e9 81       	ldd	r30, Y+1	; 0x01
    a40a:	fa 81       	ldd	r31, Y+2	; 0x02
    a40c:	ee 0f       	add	r30, r30
    a40e:	ff 1f       	adc	r31, r31
    a410:	ed 51       	subi	r30, 0x1D	; 29
    a412:	fd 4e       	sbci	r31, 0xED	; 237
    a414:	80 81       	ld	r24, Z
    a416:	91 81       	ldd	r25, Z+1	; 0x01
    a418:	89 2b       	or	r24, r25
    a41a:	11 f4       	brne	.+4      	; 0xa420 <_Z12processMCodei+0x1e3a>
    a41c:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
					pwmControl[motorController]->setDuration(channel, code_value());
    a420:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    a424:	e9 81       	ldd	r30, Y+1	; 0x01
    a426:	fa 81       	ldd	r31, Y+2	; 0x02
    a428:	ee 0f       	add	r30, r30
    a42a:	ff 1f       	adc	r31, r31
    a42c:	ed 51       	subi	r30, 0x1D	; 29
    a42e:	fd 4e       	sbci	r31, 0xED	; 237
	uint8_t PWMSHUTDOWN = 0; // Override of PWM controls, puts it in irons
	int fault_flag = 0;
//functions
public:
	virtual ~AbstractPWMControl();
	void setDuration(uint8_t ch, uint32_t durx) { maxPWMDuration[ch-1] = durx; }
    a430:	20 81       	ld	r18, Z
    a432:	31 81       	ldd	r19, Z+1	; 0x01
    a434:	3a 83       	std	Y+2, r19	; 0x02
    a436:	29 83       	std	Y+1, r18	; 0x01
    a438:	20 91 22 13 	lds	r18, 0x1322	; 0x801322 <channel>
    a43c:	30 e0       	ldi	r19, 0x00	; 0
    a43e:	21 50       	subi	r18, 0x01	; 1
    a440:	31 09       	sbc	r19, r1
    a442:	22 0f       	add	r18, r18
    a444:	33 1f       	adc	r19, r19
    a446:	22 0f       	add	r18, r18
    a448:	33 1f       	adc	r19, r19
    a44a:	49 81       	ldd	r20, Y+1	; 0x01
    a44c:	5a 81       	ldd	r21, Y+2	; 0x02
    a44e:	42 0f       	add	r20, r18
    a450:	53 1f       	adc	r21, r19
    a452:	5a 83       	std	Y+2, r21	; 0x02
    a454:	49 83       	std	Y+1, r20	; 0x01
    a456:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    a45a:	a9 81       	ldd	r26, Y+1	; 0x01
    a45c:	ba 81       	ldd	r27, Y+2	; 0x02
    a45e:	d1 96       	adiw	r26, 0x31	; 49
    a460:	6d 93       	st	X+, r22
    a462:	7d 93       	st	X+, r23
    a464:	8d 93       	st	X+, r24
    a466:	9c 93       	st	X, r25
    a468:	d4 97       	sbiw	r26, 0x34	; 52
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a46a:	e7 e3       	ldi	r30, 0x37	; 55
    a46c:	f0 e1       	ldi	r31, 0x10	; 16
    a46e:	64 91       	lpm	r22, Z
	while(ch)
    a470:	66 23       	and	r22, r22
    a472:	a1 f0       	breq	.+40     	; 0xa49c <_Z12processMCodei+0x1eb6>
    a474:	fa 83       	std	Y+2, r31	; 0x02
    a476:	e9 83       	std	Y+1, r30	; 0x01
    a478:	08 e0       	ldi	r16, 0x08	; 8
    a47a:	1a e0       	ldi	r17, 0x0A	; 10
    a47c:	d8 01       	movw	r26, r16
    a47e:	ed 91       	ld	r30, X+
    a480:	fc 91       	ld	r31, X
    a482:	01 90       	ld	r0, Z+
    a484:	f0 81       	ld	r31, Z
    a486:	e0 2d       	mov	r30, r0
    a488:	c8 01       	movw	r24, r16
    a48a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a48c:	e9 81       	ldd	r30, Y+1	; 0x01
    a48e:	fa 81       	ldd	r31, Y+2	; 0x02
    a490:	31 96       	adiw	r30, 0x01	; 1
    a492:	fa 83       	std	Y+2, r31	; 0x02
    a494:	e9 83       	std	Y+1, r30	; 0x01
    a496:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a498:	61 11       	cpse	r22, r1
    a49a:	f0 cf       	rjmp	.-32     	; 0xa47c <_Z12processMCodei+0x1e96>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a49c:	e3 e3       	ldi	r30, 0x33	; 51
    a49e:	f0 e1       	ldi	r31, 0x10	; 16
    a4a0:	64 91       	lpm	r22, Z
	while(ch)
    a4a2:	66 23       	and	r22, r22
    a4a4:	a1 f0       	breq	.+40     	; 0xa4ce <_Z12processMCodei+0x1ee8>
    a4a6:	fa 83       	std	Y+2, r31	; 0x02
    a4a8:	e9 83       	std	Y+1, r30	; 0x01
    a4aa:	08 e0       	ldi	r16, 0x08	; 8
    a4ac:	1a e0       	ldi	r17, 0x0A	; 10
    a4ae:	d8 01       	movw	r26, r16
    a4b0:	ed 91       	ld	r30, X+
    a4b2:	fc 91       	ld	r31, X
    a4b4:	01 90       	ld	r0, Z+
    a4b6:	f0 81       	ld	r31, Z
    a4b8:	e0 2d       	mov	r30, r0
    a4ba:	c8 01       	movw	r24, r16
    a4bc:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a4be:	e9 81       	ldd	r30, Y+1	; 0x01
    a4c0:	fa 81       	ldd	r31, Y+2	; 0x02
    a4c2:	31 96       	adiw	r30, 0x01	; 1
    a4c4:	fa 83       	std	Y+2, r31	; 0x02
    a4c6:	e9 83       	std	Y+1, r30	; 0x01
    a4c8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a4ca:	61 11       	cpse	r22, r1
    a4cc:	f0 cf       	rjmp	.-32     	; 0xa4ae <_Z12processMCodei+0x1ec8>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a4ce:	e0 e3       	ldi	r30, 0x30	; 48
    a4d0:	f0 e1       	ldi	r31, 0x10	; 16
    a4d2:	64 91       	lpm	r22, Z
	while(ch)
    a4d4:	66 23       	and	r22, r22
    a4d6:	a1 f0       	breq	.+40     	; 0xa500 <_Z12processMCodei+0x1f1a>
    a4d8:	fa 83       	std	Y+2, r31	; 0x02
    a4da:	e9 83       	std	Y+1, r30	; 0x01
    a4dc:	08 e0       	ldi	r16, 0x08	; 8
    a4de:	1a e0       	ldi	r17, 0x0A	; 10
    a4e0:	d8 01       	movw	r26, r16
    a4e2:	ed 91       	ld	r30, X+
    a4e4:	fc 91       	ld	r31, X
    a4e6:	01 90       	ld	r0, Z+
    a4e8:	f0 81       	ld	r31, Z
    a4ea:	e0 2d       	mov	r30, r0
    a4ec:	c8 01       	movw	r24, r16
    a4ee:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a4f0:	e9 81       	ldd	r30, Y+1	; 0x01
    a4f2:	fa 81       	ldd	r31, Y+2	; 0x02
    a4f4:	31 96       	adiw	r30, 0x01	; 1
    a4f6:	fa 83       	std	Y+2, r31	; 0x02
    a4f8:	e9 83       	std	Y+1, r30	; 0x01
    a4fa:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a4fc:	61 11       	cpse	r22, r1
    a4fe:	f0 cf       	rjmp	.-32     	; 0xa4e0 <_Z12processMCodei+0x1efa>
					SERIAL_PGM(MSG_BEGIN);
					SERIAL_PGM("M11");
					SERIAL_PGMLN(MSG_TERMINATE);
    a500:	88 e0       	ldi	r24, 0x08	; 8
    a502:	9a e0       	ldi	r25, 0x0A	; 10
    a504:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
					SERIAL_PORT.flush();
    a508:	88 e0       	ldi	r24, 0x08	; 8
    a50a:	9a e0       	ldi	r25, 0x0A	; 10
    a50c:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    a510:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
				}
			} else {
				if(code_seen('D')) {
    a514:	84 e4       	ldi	r24, 0x44	; 68
    a516:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    a51a:	88 23       	and	r24, r24
    a51c:	11 f4       	brne	.+4      	; 0xa522 <_Z12processMCodei+0x1f3c>
    a51e:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
					if(motorControl[motorController]) {
    a522:	e9 81       	ldd	r30, Y+1	; 0x01
    a524:	fa 81       	ldd	r31, Y+2	; 0x02
    a526:	ee 0f       	add	r30, r30
    a528:	ff 1f       	adc	r31, r31
    a52a:	e9 50       	subi	r30, 0x09	; 9
    a52c:	fd 4e       	sbci	r31, 0xED	; 237
    a52e:	80 81       	ld	r24, Z
    a530:	91 81       	ldd	r25, Z+1	; 0x01
    a532:	89 2b       	or	r24, r25
    a534:	11 f4       	brne	.+4      	; 0xa53a <_Z12processMCodei+0x1f54>
    a536:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
						motorControl[motorController]->setDuration(channel, code_value());
    a53a:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    a53e:	e9 81       	ldd	r30, Y+1	; 0x01
    a540:	fa 81       	ldd	r31, Y+2	; 0x02
    a542:	ee 0f       	add	r30, r30
    a544:	ff 1f       	adc	r31, r31
    a546:	e9 50       	subi	r30, 0x09	; 9
    a548:	fd 4e       	sbci	r31, 0xED	; 237
	bool checkEncoderShutdown(void);
	void createEncoder(uint8_t channel, uint8_t encode_pin);
	void setCurrentDirection(uint8_t ch, uint8_t val) { currentDirection[ch-1] = val; }
	// If the wheel is mirrored to speed commands or commutation, 0 - normal, 1 - mirror
	void setDefaultDirection(uint8_t ch, uint8_t val) { defaultDirection[ch-1] = val; }
	void setDuration(uint8_t ch, uint32_t durx) { maxMotorDuration[ch-1] = durx; }
    a54a:	20 81       	ld	r18, Z
    a54c:	31 81       	ldd	r19, Z+1	; 0x01
    a54e:	3a 83       	std	Y+2, r19	; 0x02
    a550:	29 83       	std	Y+1, r18	; 0x01
    a552:	20 91 22 13 	lds	r18, 0x1322	; 0x801322 <channel>
    a556:	30 e0       	ldi	r19, 0x00	; 0
    a558:	21 50       	subi	r18, 0x01	; 1
    a55a:	31 09       	sbc	r19, r1
    a55c:	22 0f       	add	r18, r18
    a55e:	33 1f       	adc	r19, r19
    a560:	22 0f       	add	r18, r18
    a562:	33 1f       	adc	r19, r19
    a564:	49 81       	ldd	r20, Y+1	; 0x01
    a566:	5a 81       	ldd	r21, Y+2	; 0x02
    a568:	42 0f       	add	r20, r18
    a56a:	53 1f       	adc	r21, r19
    a56c:	4f 5b       	subi	r20, 0xBF	; 191
    a56e:	5f 4f       	sbci	r21, 0xFF	; 255
    a570:	5a 83       	std	Y+2, r21	; 0x02
    a572:	49 83       	std	Y+1, r20	; 0x01
    a574:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    a578:	a9 81       	ldd	r26, Y+1	; 0x01
    a57a:	ba 81       	ldd	r27, Y+2	; 0x02
    a57c:	6d 93       	st	X+, r22
    a57e:	7d 93       	st	X+, r23
    a580:	8d 93       	st	X+, r24
    a582:	9c 93       	st	X, r25
    a584:	13 97       	sbiw	r26, 0x03	; 3
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a586:	ee e2       	ldi	r30, 0x2E	; 46
    a588:	f0 e1       	ldi	r31, 0x10	; 16
    a58a:	64 91       	lpm	r22, Z
	while(ch)
    a58c:	66 23       	and	r22, r22
    a58e:	a1 f0       	breq	.+40     	; 0xa5b8 <_Z12processMCodei+0x1fd2>
    a590:	fa 83       	std	Y+2, r31	; 0x02
    a592:	e9 83       	std	Y+1, r30	; 0x01
    a594:	08 e0       	ldi	r16, 0x08	; 8
    a596:	1a e0       	ldi	r17, 0x0A	; 10
    a598:	d8 01       	movw	r26, r16
    a59a:	ed 91       	ld	r30, X+
    a59c:	fc 91       	ld	r31, X
    a59e:	01 90       	ld	r0, Z+
    a5a0:	f0 81       	ld	r31, Z
    a5a2:	e0 2d       	mov	r30, r0
    a5a4:	c8 01       	movw	r24, r16
    a5a6:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a5a8:	e9 81       	ldd	r30, Y+1	; 0x01
    a5aa:	fa 81       	ldd	r31, Y+2	; 0x02
    a5ac:	31 96       	adiw	r30, 0x01	; 1
    a5ae:	fa 83       	std	Y+2, r31	; 0x02
    a5b0:	e9 83       	std	Y+1, r30	; 0x01
    a5b2:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a5b4:	61 11       	cpse	r22, r1
    a5b6:	f0 cf       	rjmp	.-32     	; 0xa598 <_Z12processMCodei+0x1fb2>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a5b8:	ea e2       	ldi	r30, 0x2A	; 42
    a5ba:	f0 e1       	ldi	r31, 0x10	; 16
    a5bc:	64 91       	lpm	r22, Z
	while(ch)
    a5be:	66 23       	and	r22, r22
    a5c0:	a1 f0       	breq	.+40     	; 0xa5ea <_Z12processMCodei+0x2004>
    a5c2:	fa 83       	std	Y+2, r31	; 0x02
    a5c4:	e9 83       	std	Y+1, r30	; 0x01
    a5c6:	08 e0       	ldi	r16, 0x08	; 8
    a5c8:	1a e0       	ldi	r17, 0x0A	; 10
    a5ca:	d8 01       	movw	r26, r16
    a5cc:	ed 91       	ld	r30, X+
    a5ce:	fc 91       	ld	r31, X
    a5d0:	01 90       	ld	r0, Z+
    a5d2:	f0 81       	ld	r31, Z
    a5d4:	e0 2d       	mov	r30, r0
    a5d6:	c8 01       	movw	r24, r16
    a5d8:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a5da:	e9 81       	ldd	r30, Y+1	; 0x01
    a5dc:	fa 81       	ldd	r31, Y+2	; 0x02
    a5de:	31 96       	adiw	r30, 0x01	; 1
    a5e0:	fa 83       	std	Y+2, r31	; 0x02
    a5e2:	e9 83       	std	Y+1, r30	; 0x01
    a5e4:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a5e6:	61 11       	cpse	r22, r1
    a5e8:	f0 cf       	rjmp	.-32     	; 0xa5ca <_Z12processMCodei+0x1fe4>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a5ea:	e7 e2       	ldi	r30, 0x27	; 39
    a5ec:	f0 e1       	ldi	r31, 0x10	; 16
    a5ee:	64 91       	lpm	r22, Z
	while(ch)
    a5f0:	66 23       	and	r22, r22
    a5f2:	a1 f0       	breq	.+40     	; 0xa61c <_Z12processMCodei+0x2036>
    a5f4:	fa 83       	std	Y+2, r31	; 0x02
    a5f6:	e9 83       	std	Y+1, r30	; 0x01
    a5f8:	08 e0       	ldi	r16, 0x08	; 8
    a5fa:	1a e0       	ldi	r17, 0x0A	; 10
    a5fc:	d8 01       	movw	r26, r16
    a5fe:	ed 91       	ld	r30, X+
    a600:	fc 91       	ld	r31, X
    a602:	01 90       	ld	r0, Z+
    a604:	f0 81       	ld	r31, Z
    a606:	e0 2d       	mov	r30, r0
    a608:	c8 01       	movw	r24, r16
    a60a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a60c:	e9 81       	ldd	r30, Y+1	; 0x01
    a60e:	fa 81       	ldd	r31, Y+2	; 0x02
    a610:	31 96       	adiw	r30, 0x01	; 1
    a612:	fa 83       	std	Y+2, r31	; 0x02
    a614:	e9 83       	std	Y+1, r30	; 0x01
    a616:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a618:	61 11       	cpse	r22, r1
    a61a:	f0 cf       	rjmp	.-32     	; 0xa5fc <_Z12processMCodei+0x2016>
						SERIAL_PGM(MSG_BEGIN);
						SERIAL_PGM("M11");
						SERIAL_PGMLN(MSG_TERMINATE);
    a61c:	88 e0       	ldi	r24, 0x08	; 8
    a61e:	9a e0       	ldi	r25, 0x0A	; 10
    a620:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
						SERIAL_PORT.flush();
    a624:	88 e0       	ldi	r24, 0x08	; 8
    a626:	9a e0       	ldi	r25, 0x0A	; 10
    a628:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    a62c:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			}
		}
		break;
	
	case 12: // M12 [Z<slot>] C<channel> [P<offset>] [X<offset>] - set amount to add to G5 for min motor power, or X PWM level, If X, slot is PWM
		if(code_seen('Z')) {
    a630:	8a e5       	ldi	r24, 0x5A	; 90
    a632:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    a636:	88 23       	and	r24, r24
    a638:	39 f0       	breq	.+14     	; 0xa648 <_Z12processMCodei+0x2062>
			motorController = code_value();
    a63a:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    a63e:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    a642:	7a 83       	std	Y+2, r23	; 0x02
    a644:	69 83       	std	Y+1, r22	; 0x01
    a646:	02 c0       	rjmp	.+4      	; 0xa64c <_Z12processMCodei+0x2066>
  /*-------------------------------------
  * M Code processing
  *--------------------------------------
  */
  void processMCode(int cval) {
	  int motorController = 0; 
    a648:	1a 82       	std	Y+2, r1	; 0x02
    a64a:	19 82       	std	Y+1, r1	; 0x01
	
	case 12: // M12 [Z<slot>] C<channel> [P<offset>] [X<offset>] - set amount to add to G5 for min motor power, or X PWM level, If X, slot is PWM
		if(code_seen('Z')) {
			motorController = code_value();
		}
		if( code_seen('C') ) {
    a64c:	83 e4       	ldi	r24, 0x43	; 67
    a64e:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    a652:	88 23       	and	r24, r24
    a654:	11 f4       	brne	.+4      	; 0xa65a <_Z12processMCodei+0x2074>
    a656:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			channel = code_value();
    a65a:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    a65e:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    a662:	60 93 22 13 	sts	0x1322, r22	; 0x801322 <channel>
			if(channel <= 0) {
    a666:	66 23       	and	r22, r22
    a668:	11 f4       	brne	.+4      	; 0xa66e <_Z12processMCodei+0x2088>
    a66a:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
				break;
			}
			if(code_seen('X')) {
    a66e:	88 e5       	ldi	r24, 0x58	; 88
    a670:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    a674:	88 23       	and	r24, r24
    a676:	09 f4       	brne	.+2      	; 0xa67a <_Z12processMCodei+0x2094>
    a678:	84 c0       	rjmp	.+264    	; 0xa782 <_Z12processMCodei+0x219c>
				if(pwmControl[motorController]) {
    a67a:	e9 81       	ldd	r30, Y+1	; 0x01
    a67c:	fa 81       	ldd	r31, Y+2	; 0x02
    a67e:	ee 0f       	add	r30, r30
    a680:	ff 1f       	adc	r31, r31
    a682:	ed 51       	subi	r30, 0x1D	; 29
    a684:	fd 4e       	sbci	r31, 0xED	; 237
    a686:	80 81       	ld	r24, Z
    a688:	91 81       	ldd	r25, Z+1	; 0x01
    a68a:	89 2b       	or	r24, r25
    a68c:	11 f4       	brne	.+4      	; 0xa692 <_Z12processMCodei+0x20ac>
    a68e:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
					pwmControl[motorController]->setMinPWMLevel(channel, code_value());
    a692:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    a696:	e9 81       	ldd	r30, Y+1	; 0x01
    a698:	fa 81       	ldd	r31, Y+2	; 0x02
    a69a:	ee 0f       	add	r30, r30
    a69c:	ff 1f       	adc	r31, r31
    a69e:	ed 51       	subi	r30, 0x1D	; 29
    a6a0:	fd 4e       	sbci	r31, 0xED	; 237
	void setMinPWMLevel(uint8_t ch, uint32_t mpow) { minPWMLevel[ch-1] = mpow;}
    a6a2:	20 81       	ld	r18, Z
    a6a4:	31 81       	ldd	r19, Z+1	; 0x01
    a6a6:	40 91 22 13 	lds	r20, 0x1322	; 0x801322 <channel>
    a6aa:	50 e0       	ldi	r21, 0x00	; 0
    a6ac:	41 50       	subi	r20, 0x01	; 1
    a6ae:	51 09       	sbc	r21, r1
    a6b0:	44 0f       	add	r20, r20
    a6b2:	55 1f       	adc	r21, r21
    a6b4:	44 0f       	add	r20, r20
    a6b6:	55 1f       	adc	r21, r21
    a6b8:	24 0f       	add	r18, r20
    a6ba:	35 1f       	adc	r19, r21
    a6bc:	a9 01       	movw	r20, r18
    a6be:	43 59       	subi	r20, 0x93	; 147
    a6c0:	5f 4f       	sbci	r21, 0xFF	; 255
    a6c2:	5a 83       	std	Y+2, r21	; 0x02
    a6c4:	49 83       	std	Y+1, r20	; 0x01
    a6c6:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    a6ca:	a9 81       	ldd	r26, Y+1	; 0x01
    a6cc:	ba 81       	ldd	r27, Y+2	; 0x02
    a6ce:	6d 93       	st	X+, r22
    a6d0:	7d 93       	st	X+, r23
    a6d2:	8d 93       	st	X+, r24
    a6d4:	9c 93       	st	X, r25
    a6d6:	13 97       	sbiw	r26, 0x03	; 3
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a6d8:	e5 e2       	ldi	r30, 0x25	; 37
    a6da:	f0 e1       	ldi	r31, 0x10	; 16
    a6dc:	64 91       	lpm	r22, Z
	while(ch)
    a6de:	66 23       	and	r22, r22
    a6e0:	a1 f0       	breq	.+40     	; 0xa70a <_Z12processMCodei+0x2124>
    a6e2:	fa 83       	std	Y+2, r31	; 0x02
    a6e4:	e9 83       	std	Y+1, r30	; 0x01
    a6e6:	08 e0       	ldi	r16, 0x08	; 8
    a6e8:	1a e0       	ldi	r17, 0x0A	; 10
    a6ea:	d8 01       	movw	r26, r16
    a6ec:	ed 91       	ld	r30, X+
    a6ee:	fc 91       	ld	r31, X
    a6f0:	01 90       	ld	r0, Z+
    a6f2:	f0 81       	ld	r31, Z
    a6f4:	e0 2d       	mov	r30, r0
    a6f6:	c8 01       	movw	r24, r16
    a6f8:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a6fa:	e9 81       	ldd	r30, Y+1	; 0x01
    a6fc:	fa 81       	ldd	r31, Y+2	; 0x02
    a6fe:	31 96       	adiw	r30, 0x01	; 1
    a700:	fa 83       	std	Y+2, r31	; 0x02
    a702:	e9 83       	std	Y+1, r30	; 0x01
    a704:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a706:	61 11       	cpse	r22, r1
    a708:	f0 cf       	rjmp	.-32     	; 0xa6ea <_Z12processMCodei+0x2104>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a70a:	e1 e2       	ldi	r30, 0x21	; 33
    a70c:	f0 e1       	ldi	r31, 0x10	; 16
    a70e:	64 91       	lpm	r22, Z
	while(ch)
    a710:	66 23       	and	r22, r22
    a712:	a1 f0       	breq	.+40     	; 0xa73c <_Z12processMCodei+0x2156>
    a714:	fa 83       	std	Y+2, r31	; 0x02
    a716:	e9 83       	std	Y+1, r30	; 0x01
    a718:	08 e0       	ldi	r16, 0x08	; 8
    a71a:	1a e0       	ldi	r17, 0x0A	; 10
    a71c:	d8 01       	movw	r26, r16
    a71e:	ed 91       	ld	r30, X+
    a720:	fc 91       	ld	r31, X
    a722:	01 90       	ld	r0, Z+
    a724:	f0 81       	ld	r31, Z
    a726:	e0 2d       	mov	r30, r0
    a728:	c8 01       	movw	r24, r16
    a72a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a72c:	e9 81       	ldd	r30, Y+1	; 0x01
    a72e:	fa 81       	ldd	r31, Y+2	; 0x02
    a730:	31 96       	adiw	r30, 0x01	; 1
    a732:	fa 83       	std	Y+2, r31	; 0x02
    a734:	e9 83       	std	Y+1, r30	; 0x01
    a736:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a738:	61 11       	cpse	r22, r1
    a73a:	f0 cf       	rjmp	.-32     	; 0xa71c <_Z12processMCodei+0x2136>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a73c:	ee e1       	ldi	r30, 0x1E	; 30
    a73e:	f0 e1       	ldi	r31, 0x10	; 16
    a740:	64 91       	lpm	r22, Z
	while(ch)
    a742:	66 23       	and	r22, r22
    a744:	a1 f0       	breq	.+40     	; 0xa76e <_Z12processMCodei+0x2188>
    a746:	fa 83       	std	Y+2, r31	; 0x02
    a748:	e9 83       	std	Y+1, r30	; 0x01
    a74a:	08 e0       	ldi	r16, 0x08	; 8
    a74c:	1a e0       	ldi	r17, 0x0A	; 10
    a74e:	d8 01       	movw	r26, r16
    a750:	ed 91       	ld	r30, X+
    a752:	fc 91       	ld	r31, X
    a754:	01 90       	ld	r0, Z+
    a756:	f0 81       	ld	r31, Z
    a758:	e0 2d       	mov	r30, r0
    a75a:	c8 01       	movw	r24, r16
    a75c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a75e:	e9 81       	ldd	r30, Y+1	; 0x01
    a760:	fa 81       	ldd	r31, Y+2	; 0x02
    a762:	31 96       	adiw	r30, 0x01	; 1
    a764:	fa 83       	std	Y+2, r31	; 0x02
    a766:	e9 83       	std	Y+1, r30	; 0x01
    a768:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a76a:	61 11       	cpse	r22, r1
    a76c:	f0 cf       	rjmp	.-32     	; 0xa74e <_Z12processMCodei+0x2168>
					SERIAL_PGM(MSG_BEGIN);
					SERIAL_PGM("M12");
					SERIAL_PGMLN(MSG_TERMINATE);
    a76e:	88 e0       	ldi	r24, 0x08	; 8
    a770:	9a e0       	ldi	r25, 0x0A	; 10
    a772:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
					SERIAL_PORT.flush();
    a776:	88 e0       	ldi	r24, 0x08	; 8
    a778:	9a e0       	ldi	r25, 0x0A	; 10
    a77a:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    a77e:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
				}
			} else {
				if( code_seen('P')) {
    a782:	80 e5       	ldi	r24, 0x50	; 80
    a784:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    a788:	88 23       	and	r24, r24
    a78a:	11 f4       	brne	.+4      	; 0xa790 <_Z12processMCodei+0x21aa>
    a78c:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
					if(motorControl[motorController]) {
    a790:	e9 81       	ldd	r30, Y+1	; 0x01
    a792:	fa 81       	ldd	r31, Y+2	; 0x02
    a794:	ee 0f       	add	r30, r30
    a796:	ff 1f       	adc	r31, r31
    a798:	e9 50       	subi	r30, 0x09	; 9
    a79a:	fd 4e       	sbci	r31, 0xED	; 237
    a79c:	80 81       	ld	r24, Z
    a79e:	91 81       	ldd	r25, Z+1	; 0x01
    a7a0:	89 2b       	or	r24, r25
    a7a2:	11 f4       	brne	.+4      	; 0xa7a8 <_Z12processMCodei+0x21c2>
    a7a4:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
						motorControl[motorController]->setMinMotorPower(channel, code_value());
    a7a8:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    a7ac:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    a7b0:	e9 81       	ldd	r30, Y+1	; 0x01
    a7b2:	fa 81       	ldd	r31, Y+2	; 0x02
    a7b4:	ee 0f       	add	r30, r30
    a7b6:	ff 1f       	adc	r31, r31
    a7b8:	e9 50       	subi	r30, 0x09	; 9
    a7ba:	fd 4e       	sbci	r31, 0xED	; 237
    a7bc:	01 90       	ld	r0, Z+
    a7be:	f0 81       	ld	r31, Z
    a7c0:	e0 2d       	mov	r30, r0
	void setMinMotorPower(uint8_t ch, uint32_t mpow) { minMotorPower[ch-1] = mpow; 	if( mpow != 0 ) minMotorPower[ch-1] /= 4; }
    a7c2:	20 91 22 13 	lds	r18, 0x1322	; 0x801322 <channel>
    a7c6:	30 e0       	ldi	r19, 0x00	; 0
    a7c8:	21 50       	subi	r18, 0x01	; 1
    a7ca:	31 09       	sbc	r19, r1
    a7cc:	d9 01       	movw	r26, r18
    a7ce:	aa 0f       	add	r26, r26
    a7d0:	bb 1f       	adc	r27, r27
    a7d2:	aa 0f       	add	r26, r26
    a7d4:	bb 1f       	adc	r27, r27
    a7d6:	ae 0f       	add	r26, r30
    a7d8:	bf 1f       	adc	r27, r31
    a7da:	af 56       	subi	r26, 0x6F	; 111
    a7dc:	bf 4f       	sbci	r27, 0xFF	; 255
    a7de:	6d 93       	st	X+, r22
    a7e0:	7d 93       	st	X+, r23
    a7e2:	8d 93       	st	X+, r24
    a7e4:	9c 93       	st	X, r25
    a7e6:	13 97       	sbiw	r26, 0x03	; 3
    a7e8:	61 15       	cp	r22, r1
    a7ea:	71 05       	cpc	r23, r1
    a7ec:	81 05       	cpc	r24, r1
    a7ee:	91 05       	cpc	r25, r1
    a7f0:	79 f0       	breq	.+30     	; 0xa810 <_Z12processMCodei+0x222a>
    a7f2:	fd 01       	movw	r30, r26
    a7f4:	ab 01       	movw	r20, r22
    a7f6:	bc 01       	movw	r22, r24
    a7f8:	76 95       	lsr	r23
    a7fa:	67 95       	ror	r22
    a7fc:	57 95       	ror	r21
    a7fe:	47 95       	ror	r20
    a800:	76 95       	lsr	r23
    a802:	67 95       	ror	r22
    a804:	57 95       	ror	r21
    a806:	47 95       	ror	r20
    a808:	40 83       	st	Z, r20
    a80a:	51 83       	std	Z+1, r21	; 0x01
    a80c:	62 83       	std	Z+2, r22	; 0x02
    a80e:	73 83       	std	Z+3, r23	; 0x03
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a810:	ec e1       	ldi	r30, 0x1C	; 28
    a812:	f0 e1       	ldi	r31, 0x10	; 16
    a814:	64 91       	lpm	r22, Z
	while(ch)
    a816:	66 23       	and	r22, r22
    a818:	a1 f0       	breq	.+40     	; 0xa842 <_Z12processMCodei+0x225c>
    a81a:	fa 83       	std	Y+2, r31	; 0x02
    a81c:	e9 83       	std	Y+1, r30	; 0x01
    a81e:	08 e0       	ldi	r16, 0x08	; 8
    a820:	1a e0       	ldi	r17, 0x0A	; 10
    a822:	d8 01       	movw	r26, r16
    a824:	ed 91       	ld	r30, X+
    a826:	fc 91       	ld	r31, X
    a828:	01 90       	ld	r0, Z+
    a82a:	f0 81       	ld	r31, Z
    a82c:	e0 2d       	mov	r30, r0
    a82e:	c8 01       	movw	r24, r16
    a830:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a832:	e9 81       	ldd	r30, Y+1	; 0x01
    a834:	fa 81       	ldd	r31, Y+2	; 0x02
    a836:	31 96       	adiw	r30, 0x01	; 1
    a838:	fa 83       	std	Y+2, r31	; 0x02
    a83a:	e9 83       	std	Y+1, r30	; 0x01
    a83c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a83e:	61 11       	cpse	r22, r1
    a840:	f0 cf       	rjmp	.-32     	; 0xa822 <_Z12processMCodei+0x223c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a842:	e8 e1       	ldi	r30, 0x18	; 24
    a844:	f0 e1       	ldi	r31, 0x10	; 16
    a846:	64 91       	lpm	r22, Z
	while(ch)
    a848:	66 23       	and	r22, r22
    a84a:	a1 f0       	breq	.+40     	; 0xa874 <_Z12processMCodei+0x228e>
    a84c:	fa 83       	std	Y+2, r31	; 0x02
    a84e:	e9 83       	std	Y+1, r30	; 0x01
    a850:	08 e0       	ldi	r16, 0x08	; 8
    a852:	1a e0       	ldi	r17, 0x0A	; 10
    a854:	d8 01       	movw	r26, r16
    a856:	ed 91       	ld	r30, X+
    a858:	fc 91       	ld	r31, X
    a85a:	01 90       	ld	r0, Z+
    a85c:	f0 81       	ld	r31, Z
    a85e:	e0 2d       	mov	r30, r0
    a860:	c8 01       	movw	r24, r16
    a862:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a864:	e9 81       	ldd	r30, Y+1	; 0x01
    a866:	fa 81       	ldd	r31, Y+2	; 0x02
    a868:	31 96       	adiw	r30, 0x01	; 1
    a86a:	fa 83       	std	Y+2, r31	; 0x02
    a86c:	e9 83       	std	Y+1, r30	; 0x01
    a86e:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a870:	61 11       	cpse	r22, r1
    a872:	f0 cf       	rjmp	.-32     	; 0xa854 <_Z12processMCodei+0x226e>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a874:	e5 e1       	ldi	r30, 0x15	; 21
    a876:	f0 e1       	ldi	r31, 0x10	; 16
    a878:	64 91       	lpm	r22, Z
	while(ch)
    a87a:	66 23       	and	r22, r22
    a87c:	a1 f0       	breq	.+40     	; 0xa8a6 <_Z12processMCodei+0x22c0>
    a87e:	fa 83       	std	Y+2, r31	; 0x02
    a880:	e9 83       	std	Y+1, r30	; 0x01
    a882:	08 e0       	ldi	r16, 0x08	; 8
    a884:	1a e0       	ldi	r17, 0x0A	; 10
    a886:	d8 01       	movw	r26, r16
    a888:	ed 91       	ld	r30, X+
    a88a:	fc 91       	ld	r31, X
    a88c:	01 90       	ld	r0, Z+
    a88e:	f0 81       	ld	r31, Z
    a890:	e0 2d       	mov	r30, r0
    a892:	c8 01       	movw	r24, r16
    a894:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a896:	e9 81       	ldd	r30, Y+1	; 0x01
    a898:	fa 81       	ldd	r31, Y+2	; 0x02
    a89a:	31 96       	adiw	r30, 0x01	; 1
    a89c:	fa 83       	std	Y+2, r31	; 0x02
    a89e:	e9 83       	std	Y+1, r30	; 0x01
    a8a0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a8a2:	61 11       	cpse	r22, r1
    a8a4:	f0 cf       	rjmp	.-32     	; 0xa886 <_Z12processMCodei+0x22a0>
						SERIAL_PGM(MSG_BEGIN);
						SERIAL_PGM("M12");
						SERIAL_PGMLN(MSG_TERMINATE);
    a8a6:	88 e0       	ldi	r24, 0x08	; 8
    a8a8:	9a e0       	ldi	r25, 0x0A	; 10
    a8aa:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
						SERIAL_PORT.flush();
    a8ae:	88 e0       	ldi	r24, 0x08	; 8
    a8b0:	9a e0       	ldi	r25, 0x0A	; 10
    a8b2:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    a8b6:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			}
		}
		break;
		
	  case 13: //M13 [Z<slot>] [P<power>] [X<power>]- Set maximum motor power or optionally with X, a PWM control maximum level. If X, slot is PWM
		if(code_seen('Z')) {
    a8ba:	8a e5       	ldi	r24, 0x5A	; 90
    a8bc:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    a8c0:	88 23       	and	r24, r24
    a8c2:	39 f0       	breq	.+14     	; 0xa8d2 <_Z12processMCodei+0x22ec>
		  motorController = code_value();
    a8c4:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    a8c8:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    a8cc:	7a 83       	std	Y+2, r23	; 0x02
    a8ce:	69 83       	std	Y+1, r22	; 0x01
    a8d0:	02 c0       	rjmp	.+4      	; 0xa8d6 <_Z12processMCodei+0x22f0>
  /*-------------------------------------
  * M Code processing
  *--------------------------------------
  */
  void processMCode(int cval) {
	  int motorController = 0; 
    a8d2:	1a 82       	std	Y+2, r1	; 0x02
    a8d4:	19 82       	std	Y+1, r1	; 0x01
		
	  case 13: //M13 [Z<slot>] [P<power>] [X<power>]- Set maximum motor power or optionally with X, a PWM control maximum level. If X, slot is PWM
		if(code_seen('Z')) {
		  motorController = code_value();
		}
		if( code_seen('P') ) {
    a8d6:	80 e5       	ldi	r24, 0x50	; 80
    a8d8:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    a8dc:	88 23       	and	r24, r24
    a8de:	09 f4       	brne	.+2      	; 0xa8e2 <_Z12processMCodei+0x22fc>
    a8e0:	84 c0       	rjmp	.+264    	; 0xa9ea <_Z12processMCodei+0x2404>
		  if(motorControl[motorController]) {
    a8e2:	e9 81       	ldd	r30, Y+1	; 0x01
    a8e4:	fa 81       	ldd	r31, Y+2	; 0x02
    a8e6:	ee 0f       	add	r30, r30
    a8e8:	ff 1f       	adc	r31, r31
    a8ea:	e9 50       	subi	r30, 0x09	; 9
    a8ec:	fd 4e       	sbci	r31, 0xED	; 237
    a8ee:	80 81       	ld	r24, Z
    a8f0:	91 81       	ldd	r25, Z+1	; 0x01
    a8f2:	89 2b       	or	r24, r25
    a8f4:	11 f4       	brne	.+4      	; 0xa8fa <_Z12processMCodei+0x2314>
    a8f6:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			  motorControl[motorController]->setMaxMotorPower(code_value());
    a8fa:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    a8fe:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    a902:	e9 81       	ldd	r30, Y+1	; 0x01
    a904:	fa 81       	ldd	r31, Y+2	; 0x02
    a906:	ee 0f       	add	r30, r30
    a908:	ff 1f       	adc	r31, r31
    a90a:	e9 50       	subi	r30, 0x09	; 9
    a90c:	fd 4e       	sbci	r31, 0xED	; 237
    a90e:	20 81       	ld	r18, Z
    a910:	31 81       	ldd	r19, Z+1	; 0x01
	uint8_t getUltrasonicFacing(uint8_t ch) { return ultrasonicIndex[ch-1][1]; }
	uint32_t getMinMotorDist(uint8_t ch) { return minMotorDist[ch-1]; }
	uint8_t getUltrasonicIndex(uint8_t ch) { return ultrasonicIndex[ch-1][0]; }
	uint32_t getMaxMotorDuration(uint8_t ch) { return maxMotorDuration[ch-1]; }
	uint32_t getMinMotorPower(uint8_t ch) { return minMotorPower[ch-1] ; }
	void setMaxMotorPower(int p) { MAXMOTORPOWER = p; if( p != 0 ) MAXMOTORPOWER /= 4; }
    a912:	61 15       	cp	r22, r1
    a914:	71 05       	cpc	r23, r1
    a916:	31 f4       	brne	.+12     	; 0xa924 <_Z12processMCodei+0x233e>
    a918:	f9 01       	movw	r30, r18
    a91a:	ec 51       	subi	r30, 0x1C	; 28
    a91c:	ff 4f       	sbci	r31, 0xFF	; 255
    a91e:	11 82       	std	Z+1, r1	; 0x01
    a920:	10 82       	st	Z, r1
    a922:	0e c0       	rjmp	.+28     	; 0xa940 <_Z12processMCodei+0x235a>
    a924:	f9 01       	movw	r30, r18
    a926:	ec 51       	subi	r30, 0x1C	; 28
    a928:	ff 4f       	sbci	r31, 0xFF	; 255
    a92a:	9b 01       	movw	r18, r22
    a92c:	77 23       	and	r23, r23
    a92e:	14 f4       	brge	.+4      	; 0xa934 <_Z12processMCodei+0x234e>
    a930:	2d 5f       	subi	r18, 0xFD	; 253
    a932:	3f 4f       	sbci	r19, 0xFF	; 255
    a934:	35 95       	asr	r19
    a936:	27 95       	ror	r18
    a938:	35 95       	asr	r19
    a93a:	27 95       	ror	r18
    a93c:	31 83       	std	Z+1, r19	; 0x01
    a93e:	20 83       	st	Z, r18
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a940:	e3 e1       	ldi	r30, 0x13	; 19
    a942:	f0 e1       	ldi	r31, 0x10	; 16
    a944:	64 91       	lpm	r22, Z
	while(ch)
    a946:	66 23       	and	r22, r22
    a948:	a1 f0       	breq	.+40     	; 0xa972 <_Z12processMCodei+0x238c>
    a94a:	fa 83       	std	Y+2, r31	; 0x02
    a94c:	e9 83       	std	Y+1, r30	; 0x01
    a94e:	08 e0       	ldi	r16, 0x08	; 8
    a950:	1a e0       	ldi	r17, 0x0A	; 10
    a952:	d8 01       	movw	r26, r16
    a954:	ed 91       	ld	r30, X+
    a956:	fc 91       	ld	r31, X
    a958:	01 90       	ld	r0, Z+
    a95a:	f0 81       	ld	r31, Z
    a95c:	e0 2d       	mov	r30, r0
    a95e:	c8 01       	movw	r24, r16
    a960:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a962:	e9 81       	ldd	r30, Y+1	; 0x01
    a964:	fa 81       	ldd	r31, Y+2	; 0x02
    a966:	31 96       	adiw	r30, 0x01	; 1
    a968:	fa 83       	std	Y+2, r31	; 0x02
    a96a:	e9 83       	std	Y+1, r30	; 0x01
    a96c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a96e:	61 11       	cpse	r22, r1
    a970:	f0 cf       	rjmp	.-32     	; 0xa952 <_Z12processMCodei+0x236c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a972:	e0 e1       	ldi	r30, 0x10	; 16
    a974:	f0 e1       	ldi	r31, 0x10	; 16
    a976:	64 91       	lpm	r22, Z
	while(ch)
    a978:	66 23       	and	r22, r22
    a97a:	a1 f0       	breq	.+40     	; 0xa9a4 <_Z12processMCodei+0x23be>
    a97c:	fa 83       	std	Y+2, r31	; 0x02
    a97e:	e9 83       	std	Y+1, r30	; 0x01
    a980:	08 e0       	ldi	r16, 0x08	; 8
    a982:	1a e0       	ldi	r17, 0x0A	; 10
    a984:	d8 01       	movw	r26, r16
    a986:	ed 91       	ld	r30, X+
    a988:	fc 91       	ld	r31, X
    a98a:	01 90       	ld	r0, Z+
    a98c:	f0 81       	ld	r31, Z
    a98e:	e0 2d       	mov	r30, r0
    a990:	c8 01       	movw	r24, r16
    a992:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a994:	e9 81       	ldd	r30, Y+1	; 0x01
    a996:	fa 81       	ldd	r31, Y+2	; 0x02
    a998:	31 96       	adiw	r30, 0x01	; 1
    a99a:	fa 83       	std	Y+2, r31	; 0x02
    a99c:	e9 83       	std	Y+1, r30	; 0x01
    a99e:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a9a0:	61 11       	cpse	r22, r1
    a9a2:	f0 cf       	rjmp	.-32     	; 0xa984 <_Z12processMCodei+0x239e>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    a9a4:	ed e0       	ldi	r30, 0x0D	; 13
    a9a6:	f0 e1       	ldi	r31, 0x10	; 16
    a9a8:	64 91       	lpm	r22, Z
	while(ch)
    a9aa:	66 23       	and	r22, r22
    a9ac:	a1 f0       	breq	.+40     	; 0xa9d6 <_Z12processMCodei+0x23f0>
    a9ae:	fa 83       	std	Y+2, r31	; 0x02
    a9b0:	e9 83       	std	Y+1, r30	; 0x01
    a9b2:	08 e0       	ldi	r16, 0x08	; 8
    a9b4:	1a e0       	ldi	r17, 0x0A	; 10
    a9b6:	d8 01       	movw	r26, r16
    a9b8:	ed 91       	ld	r30, X+
    a9ba:	fc 91       	ld	r31, X
    a9bc:	01 90       	ld	r0, Z+
    a9be:	f0 81       	ld	r31, Z
    a9c0:	e0 2d       	mov	r30, r0
    a9c2:	c8 01       	movw	r24, r16
    a9c4:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    a9c6:	e9 81       	ldd	r30, Y+1	; 0x01
    a9c8:	fa 81       	ldd	r31, Y+2	; 0x02
    a9ca:	31 96       	adiw	r30, 0x01	; 1
    a9cc:	fa 83       	std	Y+2, r31	; 0x02
    a9ce:	e9 83       	std	Y+1, r30	; 0x01
    a9d0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    a9d2:	61 11       	cpse	r22, r1
    a9d4:	f0 cf       	rjmp	.-32     	; 0xa9b6 <_Z12processMCodei+0x23d0>
			  SERIAL_PGM(MSG_BEGIN);
			  SERIAL_PGM("M5");
			  SERIAL_PGMLN(MSG_TERMINATE);
    a9d6:	88 e0       	ldi	r24, 0x08	; 8
    a9d8:	9a e0       	ldi	r25, 0x0A	; 10
    a9da:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
			  SERIAL_PORT.flush();
    a9de:	88 e0       	ldi	r24, 0x08	; 8
    a9e0:	9a e0       	ldi	r25, 0x0A	; 10
    a9e2:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    a9e6:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		  }
		  } else {
		  if(code_seen('X')) {
    a9ea:	88 e5       	ldi	r24, 0x58	; 88
    a9ec:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    a9f0:	88 23       	and	r24, r24
    a9f2:	11 f4       	brne	.+4      	; 0xa9f8 <_Z12processMCodei+0x2412>
    a9f4:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			  if(pwmControl[motorController]) {
    a9f8:	e9 81       	ldd	r30, Y+1	; 0x01
    a9fa:	fa 81       	ldd	r31, Y+2	; 0x02
    a9fc:	ee 0f       	add	r30, r30
    a9fe:	ff 1f       	adc	r31, r31
    aa00:	ed 51       	subi	r30, 0x1D	; 29
    aa02:	fd 4e       	sbci	r31, 0xED	; 237
    aa04:	01 90       	ld	r0, Z+
    aa06:	f0 81       	ld	r31, Z
    aa08:	e0 2d       	mov	r30, r0
    aa0a:	30 97       	sbiw	r30, 0x00	; 0
    aa0c:	11 f4       	brne	.+4      	; 0xaa12 <_Z12processMCodei+0x242c>
    aa0e:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
				  pwmControl[motorController]->setMaxPWMLevel(code_value());
    aa12:	01 90       	ld	r0, Z+
    aa14:	f0 81       	ld	r31, Z
    aa16:	e0 2d       	mov	r30, r0
    aa18:	00 89       	ldd	r16, Z+16	; 0x10
    aa1a:	11 89       	ldd	r17, Z+17	; 0x11
    aa1c:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    aa20:	e9 81       	ldd	r30, Y+1	; 0x01
    aa22:	fa 81       	ldd	r31, Y+2	; 0x02
    aa24:	ee 0f       	add	r30, r30
    aa26:	ff 1f       	adc	r31, r31
    aa28:	ed 51       	subi	r30, 0x1D	; 29
    aa2a:	fd 4e       	sbci	r31, 0xED	; 237
    aa2c:	20 81       	ld	r18, Z
    aa2e:	31 81       	ldd	r19, Z+1	; 0x01
    aa30:	3a 83       	std	Y+2, r19	; 0x02
    aa32:	29 83       	std	Y+1, r18	; 0x01
    aa34:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    aa38:	89 81       	ldd	r24, Y+1	; 0x01
    aa3a:	9a 81       	ldd	r25, Y+2	; 0x02
    aa3c:	f8 01       	movw	r30, r16
    aa3e:	19 95       	eicall
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    aa40:	eb e0       	ldi	r30, 0x0B	; 11
    aa42:	f0 e1       	ldi	r31, 0x10	; 16
    aa44:	64 91       	lpm	r22, Z
	while(ch)
    aa46:	66 23       	and	r22, r22
    aa48:	a1 f0       	breq	.+40     	; 0xaa72 <_Z12processMCodei+0x248c>
    aa4a:	fa 83       	std	Y+2, r31	; 0x02
    aa4c:	e9 83       	std	Y+1, r30	; 0x01
    aa4e:	08 e0       	ldi	r16, 0x08	; 8
    aa50:	1a e0       	ldi	r17, 0x0A	; 10
    aa52:	d8 01       	movw	r26, r16
    aa54:	ed 91       	ld	r30, X+
    aa56:	fc 91       	ld	r31, X
    aa58:	01 90       	ld	r0, Z+
    aa5a:	f0 81       	ld	r31, Z
    aa5c:	e0 2d       	mov	r30, r0
    aa5e:	c8 01       	movw	r24, r16
    aa60:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    aa62:	e9 81       	ldd	r30, Y+1	; 0x01
    aa64:	fa 81       	ldd	r31, Y+2	; 0x02
    aa66:	31 96       	adiw	r30, 0x01	; 1
    aa68:	fa 83       	std	Y+2, r31	; 0x02
    aa6a:	e9 83       	std	Y+1, r30	; 0x01
    aa6c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    aa6e:	61 11       	cpse	r22, r1
    aa70:	f0 cf       	rjmp	.-32     	; 0xaa52 <_Z12processMCodei+0x246c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    aa72:	e8 e0       	ldi	r30, 0x08	; 8
    aa74:	f0 e1       	ldi	r31, 0x10	; 16
    aa76:	64 91       	lpm	r22, Z
	while(ch)
    aa78:	66 23       	and	r22, r22
    aa7a:	a1 f0       	breq	.+40     	; 0xaaa4 <_Z12processMCodei+0x24be>
    aa7c:	fa 83       	std	Y+2, r31	; 0x02
    aa7e:	e9 83       	std	Y+1, r30	; 0x01
    aa80:	08 e0       	ldi	r16, 0x08	; 8
    aa82:	1a e0       	ldi	r17, 0x0A	; 10
    aa84:	d8 01       	movw	r26, r16
    aa86:	ed 91       	ld	r30, X+
    aa88:	fc 91       	ld	r31, X
    aa8a:	01 90       	ld	r0, Z+
    aa8c:	f0 81       	ld	r31, Z
    aa8e:	e0 2d       	mov	r30, r0
    aa90:	c8 01       	movw	r24, r16
    aa92:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    aa94:	e9 81       	ldd	r30, Y+1	; 0x01
    aa96:	fa 81       	ldd	r31, Y+2	; 0x02
    aa98:	31 96       	adiw	r30, 0x01	; 1
    aa9a:	fa 83       	std	Y+2, r31	; 0x02
    aa9c:	e9 83       	std	Y+1, r30	; 0x01
    aa9e:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    aaa0:	61 11       	cpse	r22, r1
    aaa2:	f0 cf       	rjmp	.-32     	; 0xaa84 <_Z12processMCodei+0x249e>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    aaa4:	e5 e0       	ldi	r30, 0x05	; 5
    aaa6:	f0 e1       	ldi	r31, 0x10	; 16
    aaa8:	64 91       	lpm	r22, Z
	while(ch)
    aaaa:	66 23       	and	r22, r22
    aaac:	a1 f0       	breq	.+40     	; 0xaad6 <_Z12processMCodei+0x24f0>
    aaae:	fa 83       	std	Y+2, r31	; 0x02
    aab0:	e9 83       	std	Y+1, r30	; 0x01
    aab2:	08 e0       	ldi	r16, 0x08	; 8
    aab4:	1a e0       	ldi	r17, 0x0A	; 10
    aab6:	d8 01       	movw	r26, r16
    aab8:	ed 91       	ld	r30, X+
    aaba:	fc 91       	ld	r31, X
    aabc:	01 90       	ld	r0, Z+
    aabe:	f0 81       	ld	r31, Z
    aac0:	e0 2d       	mov	r30, r0
    aac2:	c8 01       	movw	r24, r16
    aac4:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    aac6:	e9 81       	ldd	r30, Y+1	; 0x01
    aac8:	fa 81       	ldd	r31, Y+2	; 0x02
    aaca:	31 96       	adiw	r30, 0x01	; 1
    aacc:	fa 83       	std	Y+2, r31	; 0x02
    aace:	e9 83       	std	Y+1, r30	; 0x01
    aad0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    aad2:	61 11       	cpse	r22, r1
    aad4:	f0 cf       	rjmp	.-32     	; 0xaab6 <_Z12processMCodei+0x24d0>
				  SERIAL_PGM(MSG_BEGIN);
				  SERIAL_PGM("M5");
				  SERIAL_PGMLN(MSG_TERMINATE);
    aad6:	88 e0       	ldi	r24, 0x08	; 8
    aad8:	9a e0       	ldi	r25, 0x0A	; 10
    aada:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
				  SERIAL_PORT.flush();
    aade:	88 e0       	ldi	r24, 0x08	; 8
    aae0:	9a e0       	ldi	r25, 0x0A	; 10
    aae2:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    aae6:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		}
	  break;
	  
	case 33: // M33 [Z<slot>] P<ultrasonic pin> D<min. distance in cm> [E<direction 1- forward facing, 0 - reverse facing sensor>] 
	// link Motor controller to ultrasonic sensor, the sensor must exist via M301
		if(code_seen('Z')) {
    aaea:	8a e5       	ldi	r24, 0x5A	; 90
    aaec:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    aaf0:	88 23       	and	r24, r24
    aaf2:	39 f0       	breq	.+14     	; 0xab02 <_Z12processMCodei+0x251c>
			motorController = code_value();
    aaf4:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    aaf8:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    aafc:	7a 83       	std	Y+2, r23	; 0x02
    aafe:	69 83       	std	Y+1, r22	; 0x01
    ab00:	02 c0       	rjmp	.+4      	; 0xab06 <_Z12processMCodei+0x2520>
  /*-------------------------------------
  * M Code processing
  *--------------------------------------
  */
  void processMCode(int cval) {
	  int motorController = 0; 
    ab02:	1a 82       	std	Y+2, r1	; 0x02
    ab04:	19 82       	std	Y+1, r1	; 0x01
	case 33: // M33 [Z<slot>] P<ultrasonic pin> D<min. distance in cm> [E<direction 1- forward facing, 0 - reverse facing sensor>] 
	// link Motor controller to ultrasonic sensor, the sensor must exist via M301
		if(code_seen('Z')) {
			motorController = code_value();
		}
	if(motorControl[motorController]) {
    ab06:	e9 81       	ldd	r30, Y+1	; 0x01
    ab08:	fa 81       	ldd	r31, Y+2	; 0x02
    ab0a:	ee 0f       	add	r30, r30
    ab0c:	ff 1f       	adc	r31, r31
    ab0e:	e9 50       	subi	r30, 0x09	; 9
    ab10:	fd 4e       	sbci	r31, 0xED	; 237
    ab12:	80 81       	ld	r24, Z
    ab14:	91 81       	ldd	r25, Z+1	; 0x01
    ab16:	89 2b       	or	r24, r25
    ab18:	11 f4       	brne	.+4      	; 0xab1e <_Z12processMCodei+0x2538>
    ab1a:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
	  pin_number = 0;
    ab1e:	10 92 1d 13 	sts	0x131D, r1	; 0x80131d <pin_number+0x1>
    ab22:	10 92 1c 13 	sts	0x131C, r1	; 0x80131c <pin_number>
	  if(code_seen('P')) {
    ab26:	80 e5       	ldi	r24, 0x50	; 80
    ab28:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    ab2c:	88 23       	and	r24, r24
    ab2e:	11 f4       	brne	.+4      	; 0xab34 <_Z12processMCodei+0x254e>
    ab30:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
        pin_number = code_value();
    ab34:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    ab38:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    ab3c:	70 93 1d 13 	sts	0x131D, r23	; 0x80131d <pin_number+0x1>
    ab40:	60 93 1c 13 	sts	0x131C, r22	; 0x80131c <pin_number>
		if( code_seen('D')) {
    ab44:	84 e4       	ldi	r24, 0x44	; 68
    ab46:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    ab4a:	88 23       	and	r24, r24
    ab4c:	11 f4       	brne	.+4      	; 0xab52 <_Z12processMCodei+0x256c>
    ab4e:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			dist = code_value();
    ab52:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    ab56:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    ab5a:	60 93 0d 13 	sts	0x130D, r22	; 0x80130d <dist>
    ab5e:	70 93 0e 13 	sts	0x130E, r23	; 0x80130e <dist+0x1>
    ab62:	80 93 0f 13 	sts	0x130F, r24	; 0x80130f <dist+0x2>
    ab66:	90 93 10 13 	sts	0x1310, r25	; 0x801310 <dist+0x3>
		} else {
			break;
		}
		dir_face = 1; // default forward
    ab6a:	81 e0       	ldi	r24, 0x01	; 1
    ab6c:	80 93 11 13 	sts	0x1311, r24	; 0x801311 <dir_face>
		if( code_seen('E')) {
    ab70:	85 e4       	ldi	r24, 0x45	; 69
    ab72:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    ab76:	88 23       	and	r24, r24
    ab78:	31 f0       	breq	.+12     	; 0xab86 <_Z12processMCodei+0x25a0>
			dir_face = code_value(); // optional
    ab7a:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    ab7e:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    ab82:	60 93 11 13 	sts	0x1311, r22	; 0x801311 <dir_face>
		}
		motorControl[motorController]->linkDistanceSensor((Ultrasonic**)psonics, pin_number, dist, dir_face);
    ab86:	00 91 0d 13 	lds	r16, 0x130D	; 0x80130d <dist>
    ab8a:	10 91 0e 13 	lds	r17, 0x130E	; 0x80130e <dist+0x1>
    ab8e:	20 91 0f 13 	lds	r18, 0x130F	; 0x80130f <dist+0x2>
    ab92:	30 91 10 13 	lds	r19, 0x1310	; 0x801310 <dist+0x3>
    ab96:	e9 81       	ldd	r30, Y+1	; 0x01
    ab98:	fa 81       	ldd	r31, Y+2	; 0x02
    ab9a:	ee 0f       	add	r30, r30
    ab9c:	ff 1f       	adc	r31, r31
    ab9e:	e9 50       	subi	r30, 0x09	; 9
    aba0:	fd 4e       	sbci	r31, 0xED	; 237
    aba2:	e0 90 11 13 	lds	r14, 0x1311	; 0x801311 <dir_face>
    aba6:	40 91 1c 13 	lds	r20, 0x131C	; 0x80131c <pin_number>
    abaa:	63 e4       	ldi	r22, 0x43	; 67
    abac:	74 e1       	ldi	r23, 0x14	; 20
    abae:	80 81       	ld	r24, Z
    abb0:	91 81       	ldd	r25, Z+1	; 0x01
    abb2:	0e 94 a5 1c 	call	0x394a	; 0x394a <_ZN20AbstractMotorControl18linkDistanceSensorEPP10Ultrasonichmh>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    abb6:	e3 e0       	ldi	r30, 0x03	; 3
    abb8:	f0 e1       	ldi	r31, 0x10	; 16
    abba:	64 91       	lpm	r22, Z
	while(ch)
    abbc:	66 23       	and	r22, r22
    abbe:	a1 f0       	breq	.+40     	; 0xabe8 <_Z12processMCodei+0x2602>
    abc0:	fa 83       	std	Y+2, r31	; 0x02
    abc2:	e9 83       	std	Y+1, r30	; 0x01
    abc4:	08 e0       	ldi	r16, 0x08	; 8
    abc6:	1a e0       	ldi	r17, 0x0A	; 10
    abc8:	d8 01       	movw	r26, r16
    abca:	ed 91       	ld	r30, X+
    abcc:	fc 91       	ld	r31, X
    abce:	01 90       	ld	r0, Z+
    abd0:	f0 81       	ld	r31, Z
    abd2:	e0 2d       	mov	r30, r0
    abd4:	c8 01       	movw	r24, r16
    abd6:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    abd8:	e9 81       	ldd	r30, Y+1	; 0x01
    abda:	fa 81       	ldd	r31, Y+2	; 0x02
    abdc:	31 96       	adiw	r30, 0x01	; 1
    abde:	fa 83       	std	Y+2, r31	; 0x02
    abe0:	e9 83       	std	Y+1, r30	; 0x01
    abe2:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    abe4:	61 11       	cpse	r22, r1
    abe6:	f0 cf       	rjmp	.-32     	; 0xabc8 <_Z12processMCodei+0x25e2>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    abe8:	ef ef       	ldi	r30, 0xFF	; 255
    abea:	ff e0       	ldi	r31, 0x0F	; 15
    abec:	64 91       	lpm	r22, Z
	while(ch)
    abee:	66 23       	and	r22, r22
    abf0:	a1 f0       	breq	.+40     	; 0xac1a <_Z12processMCodei+0x2634>
    abf2:	fa 83       	std	Y+2, r31	; 0x02
    abf4:	e9 83       	std	Y+1, r30	; 0x01
    abf6:	08 e0       	ldi	r16, 0x08	; 8
    abf8:	1a e0       	ldi	r17, 0x0A	; 10
    abfa:	d8 01       	movw	r26, r16
    abfc:	ed 91       	ld	r30, X+
    abfe:	fc 91       	ld	r31, X
    ac00:	01 90       	ld	r0, Z+
    ac02:	f0 81       	ld	r31, Z
    ac04:	e0 2d       	mov	r30, r0
    ac06:	c8 01       	movw	r24, r16
    ac08:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ac0a:	e9 81       	ldd	r30, Y+1	; 0x01
    ac0c:	fa 81       	ldd	r31, Y+2	; 0x02
    ac0e:	31 96       	adiw	r30, 0x01	; 1
    ac10:	fa 83       	std	Y+2, r31	; 0x02
    ac12:	e9 83       	std	Y+1, r30	; 0x01
    ac14:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ac16:	61 11       	cpse	r22, r1
    ac18:	f0 cf       	rjmp	.-32     	; 0xabfa <_Z12processMCodei+0x2614>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ac1a:	ec ef       	ldi	r30, 0xFC	; 252
    ac1c:	ff e0       	ldi	r31, 0x0F	; 15
    ac1e:	64 91       	lpm	r22, Z
	while(ch)
    ac20:	66 23       	and	r22, r22
    ac22:	a1 f0       	breq	.+40     	; 0xac4c <_Z12processMCodei+0x2666>
    ac24:	fa 83       	std	Y+2, r31	; 0x02
    ac26:	e9 83       	std	Y+1, r30	; 0x01
    ac28:	08 e0       	ldi	r16, 0x08	; 8
    ac2a:	1a e0       	ldi	r17, 0x0A	; 10
    ac2c:	d8 01       	movw	r26, r16
    ac2e:	ed 91       	ld	r30, X+
    ac30:	fc 91       	ld	r31, X
    ac32:	01 90       	ld	r0, Z+
    ac34:	f0 81       	ld	r31, Z
    ac36:	e0 2d       	mov	r30, r0
    ac38:	c8 01       	movw	r24, r16
    ac3a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ac3c:	e9 81       	ldd	r30, Y+1	; 0x01
    ac3e:	fa 81       	ldd	r31, Y+2	; 0x02
    ac40:	31 96       	adiw	r30, 0x01	; 1
    ac42:	fa 83       	std	Y+2, r31	; 0x02
    ac44:	e9 83       	std	Y+1, r30	; 0x01
    ac46:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ac48:	61 11       	cpse	r22, r1
    ac4a:	f0 cf       	rjmp	.-32     	; 0xac2c <_Z12processMCodei+0x2646>
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM("M33");
		SERIAL_PGMLN(MSG_TERMINATE);
    ac4c:	88 e0       	ldi	r24, 0x08	; 8
    ac4e:	9a e0       	ldi	r25, 0x0A	; 10
    ac50:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		SERIAL_PORT.flush();
    ac54:	88 e0       	ldi	r24, 0x08	; 8
    ac56:	9a e0       	ldi	r25, 0x0A	; 10
    ac58:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    ac5c:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
    ac60:	2b e3       	ldi	r18, 0x3B	; 59
    ac62:	33 e1       	ldi	r19, 0x13	; 19
    ac64:	0b e7       	ldi	r16, 0x7B	; 123
    ac66:	13 e1       	ldi	r17, 0x13	; 19
    ac68:	3a 83       	std	Y+2, r19	; 0x02
    ac6a:	29 83       	std	Y+1, r18	; 0x01
	}
	  break;
	  
	  case 35: //M35 - Clear all digital pins
		for(int i = 0; i < 32; i++) {
			 if(pdigitals[i]) {
    ac6c:	a9 81       	ldd	r26, Y+1	; 0x01
    ac6e:	ba 81       	ldd	r27, Y+2	; 0x02
    ac70:	ed 91       	ld	r30, X+
    ac72:	fc 91       	ld	r31, X
    ac74:	30 97       	sbiw	r30, 0x00	; 0
    ac76:	69 f0       	breq	.+26     	; 0xac92 <_Z12processMCodei+0x26ac>
				unassignPin(pdigitals[i]->pin);
    ac78:	80 81       	ld	r24, Z
    ac7a:	0e 94 80 1c 	call	0x3900	; 0x3900 <_Z11unassignPinh>
				delete pdigitals[i];
    ac7e:	e9 81       	ldd	r30, Y+1	; 0x01
    ac80:	fa 81       	ldd	r31, Y+2	; 0x02
    ac82:	80 81       	ld	r24, Z
    ac84:	91 81       	ldd	r25, Z+1	; 0x01
    ac86:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
				pdigitals[i] = 0;
    ac8a:	a9 81       	ldd	r26, Y+1	; 0x01
    ac8c:	ba 81       	ldd	r27, Y+2	; 0x02
    ac8e:	1d 92       	st	X+, r1
    ac90:	1c 92       	st	X, r1
    ac92:	e9 81       	ldd	r30, Y+1	; 0x01
    ac94:	fa 81       	ldd	r31, Y+2	; 0x02
    ac96:	32 96       	adiw	r30, 0x02	; 2
    ac98:	fa 83       	std	Y+2, r31	; 0x02
    ac9a:	e9 83       	std	Y+1, r30	; 0x01
	  } // code_seen = 'P'
	}
	  break;
	  
	  case 35: //M35 - Clear all digital pins
		for(int i = 0; i < 32; i++) {
    ac9c:	e0 17       	cp	r30, r16
    ac9e:	f1 07       	cpc	r31, r17
    aca0:	29 f7       	brne	.-54     	; 0xac6c <_Z12processMCodei+0x2686>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    aca2:	ea ef       	ldi	r30, 0xFA	; 250
    aca4:	ff e0       	ldi	r31, 0x0F	; 15
    aca6:	64 91       	lpm	r22, Z
	while(ch)
    aca8:	66 23       	and	r22, r22
    acaa:	a1 f0       	breq	.+40     	; 0xacd4 <_Z12processMCodei+0x26ee>
    acac:	fa 83       	std	Y+2, r31	; 0x02
    acae:	e9 83       	std	Y+1, r30	; 0x01
    acb0:	08 e0       	ldi	r16, 0x08	; 8
    acb2:	1a e0       	ldi	r17, 0x0A	; 10
    acb4:	d8 01       	movw	r26, r16
    acb6:	ed 91       	ld	r30, X+
    acb8:	fc 91       	ld	r31, X
    acba:	01 90       	ld	r0, Z+
    acbc:	f0 81       	ld	r31, Z
    acbe:	e0 2d       	mov	r30, r0
    acc0:	c8 01       	movw	r24, r16
    acc2:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    acc4:	e9 81       	ldd	r30, Y+1	; 0x01
    acc6:	fa 81       	ldd	r31, Y+2	; 0x02
    acc8:	31 96       	adiw	r30, 0x01	; 1
    acca:	fa 83       	std	Y+2, r31	; 0x02
    accc:	e9 83       	std	Y+1, r30	; 0x01
    acce:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    acd0:	61 11       	cpse	r22, r1
    acd2:	f0 cf       	rjmp	.-32     	; 0xacb4 <_Z12processMCodei+0x26ce>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    acd4:	e6 ef       	ldi	r30, 0xF6	; 246
    acd6:	ff e0       	ldi	r31, 0x0F	; 15
    acd8:	64 91       	lpm	r22, Z
	while(ch)
    acda:	66 23       	and	r22, r22
    acdc:	a1 f0       	breq	.+40     	; 0xad06 <_Z12processMCodei+0x2720>
    acde:	fa 83       	std	Y+2, r31	; 0x02
    ace0:	e9 83       	std	Y+1, r30	; 0x01
    ace2:	08 e0       	ldi	r16, 0x08	; 8
    ace4:	1a e0       	ldi	r17, 0x0A	; 10
    ace6:	d8 01       	movw	r26, r16
    ace8:	ed 91       	ld	r30, X+
    acea:	fc 91       	ld	r31, X
    acec:	01 90       	ld	r0, Z+
    acee:	f0 81       	ld	r31, Z
    acf0:	e0 2d       	mov	r30, r0
    acf2:	c8 01       	movw	r24, r16
    acf4:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    acf6:	e9 81       	ldd	r30, Y+1	; 0x01
    acf8:	fa 81       	ldd	r31, Y+2	; 0x02
    acfa:	31 96       	adiw	r30, 0x01	; 1
    acfc:	fa 83       	std	Y+2, r31	; 0x02
    acfe:	e9 83       	std	Y+1, r30	; 0x01
    ad00:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ad02:	61 11       	cpse	r22, r1
    ad04:	f0 cf       	rjmp	.-32     	; 0xace6 <_Z12processMCodei+0x2700>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ad06:	e3 ef       	ldi	r30, 0xF3	; 243
    ad08:	ff e0       	ldi	r31, 0x0F	; 15
    ad0a:	64 91       	lpm	r22, Z
	while(ch)
    ad0c:	66 23       	and	r22, r22
    ad0e:	a1 f0       	breq	.+40     	; 0xad38 <_Z12processMCodei+0x2752>
    ad10:	fa 83       	std	Y+2, r31	; 0x02
    ad12:	e9 83       	std	Y+1, r30	; 0x01
    ad14:	08 e0       	ldi	r16, 0x08	; 8
    ad16:	1a e0       	ldi	r17, 0x0A	; 10
    ad18:	d8 01       	movw	r26, r16
    ad1a:	ed 91       	ld	r30, X+
    ad1c:	fc 91       	ld	r31, X
    ad1e:	01 90       	ld	r0, Z+
    ad20:	f0 81       	ld	r31, Z
    ad22:	e0 2d       	mov	r30, r0
    ad24:	c8 01       	movw	r24, r16
    ad26:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ad28:	e9 81       	ldd	r30, Y+1	; 0x01
    ad2a:	fa 81       	ldd	r31, Y+2	; 0x02
    ad2c:	31 96       	adiw	r30, 0x01	; 1
    ad2e:	fa 83       	std	Y+2, r31	; 0x02
    ad30:	e9 83       	std	Y+1, r30	; 0x01
    ad32:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ad34:	61 11       	cpse	r22, r1
    ad36:	f0 cf       	rjmp	.-32     	; 0xad18 <_Z12processMCodei+0x2732>
				pdigitals[i] = 0;
			 }
		}
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM("M35");
		SERIAL_PGMLN(MSG_TERMINATE);
    ad38:	88 e0       	ldi	r24, 0x08	; 8
    ad3a:	9a e0       	ldi	r25, 0x0A	; 10
    ad3c:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		SERIAL_PORT.flush();
    ad40:	88 e0       	ldi	r24, 0x08	; 8
    ad42:	9a e0       	ldi	r25, 0x0A	; 10
    ad44:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
	  break;
    ad48:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
    ad4c:	2b eb       	ldi	r18, 0xBB	; 187
    ad4e:	33 e1       	ldi	r19, 0x13	; 19
    ad50:	0b ed       	ldi	r16, 0xDB	; 219
    ad52:	13 e1       	ldi	r17, 0x13	; 19
    ad54:	3a 83       	std	Y+2, r19	; 0x02
    ad56:	29 83       	std	Y+1, r18	; 0x01
		  
	  case 36: //M36 - Clear all analog pins
		  	 for(int i = 0; i < 16; i++) {
			  	  if(panalogs[i]) {
    ad58:	a9 81       	ldd	r26, Y+1	; 0x01
    ad5a:	ba 81       	ldd	r27, Y+2	; 0x02
    ad5c:	ed 91       	ld	r30, X+
    ad5e:	fc 91       	ld	r31, X
    ad60:	30 97       	sbiw	r30, 0x00	; 0
    ad62:	a1 f0       	breq	.+40     	; 0xad8c <_Z12processMCodei+0x27a6>
					unassignPin(panalogs[i]->pin);
    ad64:	a0 81       	ld	r26, Z
    ad66:	b1 81       	ldd	r27, Z+1	; 0x01
    ad68:	16 97       	sbiw	r26, 0x06	; 6
    ad6a:	8d 91       	ld	r24, X+
    ad6c:	9c 91       	ld	r25, X
    ad6e:	e8 0f       	add	r30, r24
    ad70:	f9 1f       	adc	r31, r25
    ad72:	80 81       	ld	r24, Z
    ad74:	0e 94 80 1c 	call	0x3900	; 0x3900 <_Z11unassignPinh>
				  	delete panalogs[i];
    ad78:	e9 81       	ldd	r30, Y+1	; 0x01
    ad7a:	fa 81       	ldd	r31, Y+2	; 0x02
    ad7c:	80 81       	ld	r24, Z
    ad7e:	91 81       	ldd	r25, Z+1	; 0x01
    ad80:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
					panalogs[i] = 0;
    ad84:	a9 81       	ldd	r26, Y+1	; 0x01
    ad86:	ba 81       	ldd	r27, Y+2	; 0x02
    ad88:	1d 92       	st	X+, r1
    ad8a:	1c 92       	st	X, r1
    ad8c:	e9 81       	ldd	r30, Y+1	; 0x01
    ad8e:	fa 81       	ldd	r31, Y+2	; 0x02
    ad90:	32 96       	adiw	r30, 0x02	; 2
    ad92:	fa 83       	std	Y+2, r31	; 0x02
    ad94:	e9 83       	std	Y+1, r30	; 0x01
		SERIAL_PGMLN(MSG_TERMINATE);
		SERIAL_PORT.flush();
	  break;
		  
	  case 36: //M36 - Clear all analog pins
		  	 for(int i = 0; i < 16; i++) {
    ad96:	e0 17       	cp	r30, r16
    ad98:	f1 07       	cpc	r31, r17
    ad9a:	f1 f6       	brne	.-68     	; 0xad58 <_Z12processMCodei+0x2772>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ad9c:	e1 ef       	ldi	r30, 0xF1	; 241
    ad9e:	ff e0       	ldi	r31, 0x0F	; 15
    ada0:	64 91       	lpm	r22, Z
	while(ch)
    ada2:	66 23       	and	r22, r22
    ada4:	a1 f0       	breq	.+40     	; 0xadce <_Z12processMCodei+0x27e8>
    ada6:	fa 83       	std	Y+2, r31	; 0x02
    ada8:	e9 83       	std	Y+1, r30	; 0x01
    adaa:	08 e0       	ldi	r16, 0x08	; 8
    adac:	1a e0       	ldi	r17, 0x0A	; 10
    adae:	d8 01       	movw	r26, r16
    adb0:	ed 91       	ld	r30, X+
    adb2:	fc 91       	ld	r31, X
    adb4:	01 90       	ld	r0, Z+
    adb6:	f0 81       	ld	r31, Z
    adb8:	e0 2d       	mov	r30, r0
    adba:	c8 01       	movw	r24, r16
    adbc:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    adbe:	e9 81       	ldd	r30, Y+1	; 0x01
    adc0:	fa 81       	ldd	r31, Y+2	; 0x02
    adc2:	31 96       	adiw	r30, 0x01	; 1
    adc4:	fa 83       	std	Y+2, r31	; 0x02
    adc6:	e9 83       	std	Y+1, r30	; 0x01
    adc8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    adca:	61 11       	cpse	r22, r1
    adcc:	f0 cf       	rjmp	.-32     	; 0xadae <_Z12processMCodei+0x27c8>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    adce:	ed ee       	ldi	r30, 0xED	; 237
    add0:	ff e0       	ldi	r31, 0x0F	; 15
    add2:	64 91       	lpm	r22, Z
	while(ch)
    add4:	66 23       	and	r22, r22
    add6:	a1 f0       	breq	.+40     	; 0xae00 <_Z12processMCodei+0x281a>
    add8:	fa 83       	std	Y+2, r31	; 0x02
    adda:	e9 83       	std	Y+1, r30	; 0x01
    addc:	08 e0       	ldi	r16, 0x08	; 8
    adde:	1a e0       	ldi	r17, 0x0A	; 10
    ade0:	d8 01       	movw	r26, r16
    ade2:	ed 91       	ld	r30, X+
    ade4:	fc 91       	ld	r31, X
    ade6:	01 90       	ld	r0, Z+
    ade8:	f0 81       	ld	r31, Z
    adea:	e0 2d       	mov	r30, r0
    adec:	c8 01       	movw	r24, r16
    adee:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    adf0:	e9 81       	ldd	r30, Y+1	; 0x01
    adf2:	fa 81       	ldd	r31, Y+2	; 0x02
    adf4:	31 96       	adiw	r30, 0x01	; 1
    adf6:	fa 83       	std	Y+2, r31	; 0x02
    adf8:	e9 83       	std	Y+1, r30	; 0x01
    adfa:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    adfc:	61 11       	cpse	r22, r1
    adfe:	f0 cf       	rjmp	.-32     	; 0xade0 <_Z12processMCodei+0x27fa>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ae00:	ea ee       	ldi	r30, 0xEA	; 234
    ae02:	ff e0       	ldi	r31, 0x0F	; 15
    ae04:	64 91       	lpm	r22, Z
	while(ch)
    ae06:	66 23       	and	r22, r22
    ae08:	a1 f0       	breq	.+40     	; 0xae32 <_Z12processMCodei+0x284c>
    ae0a:	fa 83       	std	Y+2, r31	; 0x02
    ae0c:	e9 83       	std	Y+1, r30	; 0x01
    ae0e:	08 e0       	ldi	r16, 0x08	; 8
    ae10:	1a e0       	ldi	r17, 0x0A	; 10
    ae12:	d8 01       	movw	r26, r16
    ae14:	ed 91       	ld	r30, X+
    ae16:	fc 91       	ld	r31, X
    ae18:	01 90       	ld	r0, Z+
    ae1a:	f0 81       	ld	r31, Z
    ae1c:	e0 2d       	mov	r30, r0
    ae1e:	c8 01       	movw	r24, r16
    ae20:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ae22:	e9 81       	ldd	r30, Y+1	; 0x01
    ae24:	fa 81       	ldd	r31, Y+2	; 0x02
    ae26:	31 96       	adiw	r30, 0x01	; 1
    ae28:	fa 83       	std	Y+2, r31	; 0x02
    ae2a:	e9 83       	std	Y+1, r30	; 0x01
    ae2c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ae2e:	61 11       	cpse	r22, r1
    ae30:	f0 cf       	rjmp	.-32     	; 0xae12 <_Z12processMCodei+0x282c>
					panalogs[i] = 0;
			  	  }
		  	 }
			 SERIAL_PGM(MSG_BEGIN);
			 SERIAL_PGM("M36");
			 SERIAL_PGMLN(MSG_TERMINATE);
    ae32:	88 e0       	ldi	r24, 0x08	; 8
    ae34:	9a e0       	ldi	r25, 0x0A	; 10
    ae36:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
			 SERIAL_PORT.flush();
    ae3a:	88 e0       	ldi	r24, 0x08	; 8
    ae3c:	9a e0       	ldi	r25, 0x0A	; 10
    ae3e:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
	  break;
    ae42:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
    ae46:	23 e2       	ldi	r18, 0x23	; 35
    ae48:	33 e1       	ldi	r19, 0x13	; 19
    ae4a:	0b e3       	ldi	r16, 0x3B	; 59
    ae4c:	13 e1       	ldi	r17, 0x13	; 19
    ae4e:	3a 83       	std	Y+2, r19	; 0x02
    ae50:	29 83       	std	Y+1, r18	; 0x01
	  
	  case 37: //M37 - Clear all PWM pins, ALL MOTOR AND PWM DISABLED, perhaps not cleanly
		for(int i = 0; i < 12; i++) {
		  if(ppwms[i]) {
    ae52:	a9 81       	ldd	r26, Y+1	; 0x01
    ae54:	ba 81       	ldd	r27, Y+2	; 0x02
    ae56:	ed 91       	ld	r30, X+
    ae58:	fc 91       	ld	r31, X
    ae5a:	30 97       	sbiw	r30, 0x00	; 0
    ae5c:	69 f0       	breq	.+26     	; 0xae78 <_Z12processMCodei+0x2892>
			  unassignPin(ppwms[i]->pin);
    ae5e:	80 81       	ld	r24, Z
    ae60:	0e 94 80 1c 	call	0x3900	; 0x3900 <_Z11unassignPinh>
			  delete ppwms[i];
    ae64:	e9 81       	ldd	r30, Y+1	; 0x01
    ae66:	fa 81       	ldd	r31, Y+2	; 0x02
    ae68:	80 81       	ld	r24, Z
    ae6a:	91 81       	ldd	r25, Z+1	; 0x01
    ae6c:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
			  ppwms[i] = 0;
    ae70:	a9 81       	ldd	r26, Y+1	; 0x01
    ae72:	ba 81       	ldd	r27, Y+2	; 0x02
    ae74:	1d 92       	st	X+, r1
    ae76:	1c 92       	st	X, r1
    ae78:	e9 81       	ldd	r30, Y+1	; 0x01
    ae7a:	fa 81       	ldd	r31, Y+2	; 0x02
    ae7c:	32 96       	adiw	r30, 0x02	; 2
    ae7e:	fa 83       	std	Y+2, r31	; 0x02
    ae80:	e9 83       	std	Y+1, r30	; 0x01
			 SERIAL_PGMLN(MSG_TERMINATE);
			 SERIAL_PORT.flush();
	  break;
	  
	  case 37: //M37 - Clear all PWM pins, ALL MOTOR AND PWM DISABLED, perhaps not cleanly
		for(int i = 0; i < 12; i++) {
    ae82:	e0 17       	cp	r30, r16
    ae84:	f1 07       	cpc	r31, r17
    ae86:	29 f7       	brne	.-54     	; 0xae52 <_Z12processMCodei+0x286c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ae88:	e8 ee       	ldi	r30, 0xE8	; 232
    ae8a:	ff e0       	ldi	r31, 0x0F	; 15
    ae8c:	64 91       	lpm	r22, Z
	while(ch)
    ae8e:	66 23       	and	r22, r22
    ae90:	a1 f0       	breq	.+40     	; 0xaeba <_Z12processMCodei+0x28d4>
    ae92:	fa 83       	std	Y+2, r31	; 0x02
    ae94:	e9 83       	std	Y+1, r30	; 0x01
    ae96:	08 e0       	ldi	r16, 0x08	; 8
    ae98:	1a e0       	ldi	r17, 0x0A	; 10
    ae9a:	d8 01       	movw	r26, r16
    ae9c:	ed 91       	ld	r30, X+
    ae9e:	fc 91       	ld	r31, X
    aea0:	01 90       	ld	r0, Z+
    aea2:	f0 81       	ld	r31, Z
    aea4:	e0 2d       	mov	r30, r0
    aea6:	c8 01       	movw	r24, r16
    aea8:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    aeaa:	e9 81       	ldd	r30, Y+1	; 0x01
    aeac:	fa 81       	ldd	r31, Y+2	; 0x02
    aeae:	31 96       	adiw	r30, 0x01	; 1
    aeb0:	fa 83       	std	Y+2, r31	; 0x02
    aeb2:	e9 83       	std	Y+1, r30	; 0x01
    aeb4:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    aeb6:	61 11       	cpse	r22, r1
    aeb8:	f0 cf       	rjmp	.-32     	; 0xae9a <_Z12processMCodei+0x28b4>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    aeba:	e4 ee       	ldi	r30, 0xE4	; 228
    aebc:	ff e0       	ldi	r31, 0x0F	; 15
    aebe:	64 91       	lpm	r22, Z
	while(ch)
    aec0:	66 23       	and	r22, r22
    aec2:	a1 f0       	breq	.+40     	; 0xaeec <_Z12processMCodei+0x2906>
    aec4:	fa 83       	std	Y+2, r31	; 0x02
    aec6:	e9 83       	std	Y+1, r30	; 0x01
    aec8:	08 e0       	ldi	r16, 0x08	; 8
    aeca:	1a e0       	ldi	r17, 0x0A	; 10
    aecc:	d8 01       	movw	r26, r16
    aece:	ed 91       	ld	r30, X+
    aed0:	fc 91       	ld	r31, X
    aed2:	01 90       	ld	r0, Z+
    aed4:	f0 81       	ld	r31, Z
    aed6:	e0 2d       	mov	r30, r0
    aed8:	c8 01       	movw	r24, r16
    aeda:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    aedc:	e9 81       	ldd	r30, Y+1	; 0x01
    aede:	fa 81       	ldd	r31, Y+2	; 0x02
    aee0:	31 96       	adiw	r30, 0x01	; 1
    aee2:	fa 83       	std	Y+2, r31	; 0x02
    aee4:	e9 83       	std	Y+1, r30	; 0x01
    aee6:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    aee8:	61 11       	cpse	r22, r1
    aeea:	f0 cf       	rjmp	.-32     	; 0xaecc <_Z12processMCodei+0x28e6>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    aeec:	e1 ee       	ldi	r30, 0xE1	; 225
    aeee:	ff e0       	ldi	r31, 0x0F	; 15
    aef0:	64 91       	lpm	r22, Z
	while(ch)
    aef2:	66 23       	and	r22, r22
    aef4:	a1 f0       	breq	.+40     	; 0xaf1e <_Z12processMCodei+0x2938>
    aef6:	fa 83       	std	Y+2, r31	; 0x02
    aef8:	e9 83       	std	Y+1, r30	; 0x01
    aefa:	08 e0       	ldi	r16, 0x08	; 8
    aefc:	1a e0       	ldi	r17, 0x0A	; 10
    aefe:	d8 01       	movw	r26, r16
    af00:	ed 91       	ld	r30, X+
    af02:	fc 91       	ld	r31, X
    af04:	01 90       	ld	r0, Z+
    af06:	f0 81       	ld	r31, Z
    af08:	e0 2d       	mov	r30, r0
    af0a:	c8 01       	movw	r24, r16
    af0c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    af0e:	e9 81       	ldd	r30, Y+1	; 0x01
    af10:	fa 81       	ldd	r31, Y+2	; 0x02
    af12:	31 96       	adiw	r30, 0x01	; 1
    af14:	fa 83       	std	Y+2, r31	; 0x02
    af16:	e9 83       	std	Y+1, r30	; 0x01
    af18:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    af1a:	61 11       	cpse	r22, r1
    af1c:	f0 cf       	rjmp	.-32     	; 0xaefe <_Z12processMCodei+0x2918>
			  ppwms[i] = 0;
		  }
		}
	  	SERIAL_PGM(MSG_BEGIN);
	  	SERIAL_PGM("M37");
	  	SERIAL_PGMLN(MSG_TERMINATE);
    af1e:	88 e0       	ldi	r24, 0x08	; 8
    af20:	9a e0       	ldi	r25, 0x0A	; 10
    af22:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
	  	SERIAL_PORT.flush();
    af26:	88 e0       	ldi	r24, 0x08	; 8
    af28:	9a e0       	ldi	r25, 0x0A	; 10
    af2a:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
	  break;
    af2e:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
	  
	  case 38: //M38  P<pin> - Remove PWM pin, MOTOR AND PWM DISABLED, perhaps not cleanly
	  	  pin_number = -1;
    af32:	8f ef       	ldi	r24, 0xFF	; 255
    af34:	9f ef       	ldi	r25, 0xFF	; 255
    af36:	90 93 1d 13 	sts	0x131D, r25	; 0x80131d <pin_number+0x1>
    af3a:	80 93 1c 13 	sts	0x131C, r24	; 0x80131c <pin_number>
	  	  if (code_seen('P')) {
    af3e:	80 e5       	ldi	r24, 0x50	; 80
    af40:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    af44:	88 23       	and	r24, r24
    af46:	11 f4       	brne	.+4      	; 0xaf4c <_Z12processMCodei+0x2966>
    af48:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		  	  pin_number = code_value();
    af4c:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    af50:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    af54:	86 2f       	mov	r24, r22
    af56:	60 93 1c 13 	sts	0x131C, r22	; 0x80131c <pin_number>
    af5a:	70 93 1d 13 	sts	0x131D, r23	; 0x80131d <pin_number+0x1>
		  	  if(unassignPin(pin_number) ) {
    af5e:	0e 94 80 1c 	call	0x3900	; 0x3900 <_Z11unassignPinh>
    af62:	88 23       	and	r24, r24
    af64:	11 f4       	brne	.+4      	; 0xaf6a <_Z12processMCodei+0x2984>
    af66:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
    af6a:	23 e2       	ldi	r18, 0x23	; 35
    af6c:	33 e1       	ldi	r19, 0x13	; 19
    af6e:	3a 83       	std	Y+2, r19	; 0x02
    af70:	29 83       	std	Y+1, r18	; 0x01
    af72:	0b e3       	ldi	r16, 0x3B	; 59
    af74:	13 e1       	ldi	r17, 0x13	; 19
    af76:	e9 80       	ldd	r14, Y+1	; 0x01
    af78:	fa 80       	ldd	r15, Y+2	; 0x02
			  	  for(int i = 0; i < 12; i++) {
				  	  if(ppwms[i] && ppwms[i]->pin == pin_number) {
    af7a:	d7 01       	movw	r26, r14
    af7c:	8d 91       	ld	r24, X+
    af7e:	9c 91       	ld	r25, X
    af80:	00 97       	sbiw	r24, 0x00	; 0
    af82:	79 f0       	breq	.+30     	; 0xafa2 <_Z12processMCodei+0x29bc>
    af84:	fc 01       	movw	r30, r24
    af86:	20 81       	ld	r18, Z
    af88:	30 e0       	ldi	r19, 0x00	; 0
    af8a:	40 91 1c 13 	lds	r20, 0x131C	; 0x80131c <pin_number>
    af8e:	50 91 1d 13 	lds	r21, 0x131D	; 0x80131d <pin_number+0x1>
    af92:	24 17       	cp	r18, r20
    af94:	35 07       	cpc	r19, r21
    af96:	29 f4       	brne	.+10     	; 0xafa2 <_Z12processMCodei+0x29bc>
					  	  delete ppwms[i];
    af98:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
						  ppwms[i] = 0;
    af9c:	d7 01       	movw	r26, r14
    af9e:	1d 92       	st	X+, r1
    afa0:	1c 92       	st	X, r1
    afa2:	e9 81       	ldd	r30, Y+1	; 0x01
    afa4:	fa 81       	ldd	r31, Y+2	; 0x02
    afa6:	32 96       	adiw	r30, 0x02	; 2
    afa8:	fa 83       	std	Y+2, r31	; 0x02
    afaa:	e9 83       	std	Y+1, r30	; 0x01
	  case 38: //M38  P<pin> - Remove PWM pin, MOTOR AND PWM DISABLED, perhaps not cleanly
	  	  pin_number = -1;
	  	  if (code_seen('P')) {
		  	  pin_number = code_value();
		  	  if(unassignPin(pin_number) ) {
			  	  for(int i = 0; i < 12; i++) {
    afac:	e0 17       	cp	r30, r16
    afae:	f1 07       	cpc	r31, r17
    afb0:	11 f7       	brne	.-60     	; 0xaf76 <_Z12processMCodei+0x2990>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    afb2:	ef ed       	ldi	r30, 0xDF	; 223
    afb4:	ff e0       	ldi	r31, 0x0F	; 15
    afb6:	64 91       	lpm	r22, Z
	while(ch)
    afb8:	66 23       	and	r22, r22
    afba:	a1 f0       	breq	.+40     	; 0xafe4 <_Z12processMCodei+0x29fe>
    afbc:	fa 83       	std	Y+2, r31	; 0x02
    afbe:	e9 83       	std	Y+1, r30	; 0x01
    afc0:	08 e0       	ldi	r16, 0x08	; 8
    afc2:	1a e0       	ldi	r17, 0x0A	; 10
    afc4:	d8 01       	movw	r26, r16
    afc6:	ed 91       	ld	r30, X+
    afc8:	fc 91       	ld	r31, X
    afca:	01 90       	ld	r0, Z+
    afcc:	f0 81       	ld	r31, Z
    afce:	e0 2d       	mov	r30, r0
    afd0:	c8 01       	movw	r24, r16
    afd2:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    afd4:	e9 81       	ldd	r30, Y+1	; 0x01
    afd6:	fa 81       	ldd	r31, Y+2	; 0x02
    afd8:	31 96       	adiw	r30, 0x01	; 1
    afda:	fa 83       	std	Y+2, r31	; 0x02
    afdc:	e9 83       	std	Y+1, r30	; 0x01
    afde:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    afe0:	61 11       	cpse	r22, r1
    afe2:	f0 cf       	rjmp	.-32     	; 0xafc4 <_Z12processMCodei+0x29de>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    afe4:	eb ed       	ldi	r30, 0xDB	; 219
    afe6:	ff e0       	ldi	r31, 0x0F	; 15
    afe8:	64 91       	lpm	r22, Z
	while(ch)
    afea:	66 23       	and	r22, r22
    afec:	a1 f0       	breq	.+40     	; 0xb016 <_Z12processMCodei+0x2a30>
    afee:	fa 83       	std	Y+2, r31	; 0x02
    aff0:	e9 83       	std	Y+1, r30	; 0x01
    aff2:	08 e0       	ldi	r16, 0x08	; 8
    aff4:	1a e0       	ldi	r17, 0x0A	; 10
    aff6:	d8 01       	movw	r26, r16
    aff8:	ed 91       	ld	r30, X+
    affa:	fc 91       	ld	r31, X
    affc:	01 90       	ld	r0, Z+
    affe:	f0 81       	ld	r31, Z
    b000:	e0 2d       	mov	r30, r0
    b002:	c8 01       	movw	r24, r16
    b004:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    b006:	e9 81       	ldd	r30, Y+1	; 0x01
    b008:	fa 81       	ldd	r31, Y+2	; 0x02
    b00a:	31 96       	adiw	r30, 0x01	; 1
    b00c:	fa 83       	std	Y+2, r31	; 0x02
    b00e:	e9 83       	std	Y+1, r30	; 0x01
    b010:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    b012:	61 11       	cpse	r22, r1
    b014:	f0 cf       	rjmp	.-32     	; 0xaff6 <_Z12processMCodei+0x2a10>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    b016:	e8 ed       	ldi	r30, 0xD8	; 216
    b018:	ff e0       	ldi	r31, 0x0F	; 15
    b01a:	64 91       	lpm	r22, Z
	while(ch)
    b01c:	66 23       	and	r22, r22
    b01e:	a1 f0       	breq	.+40     	; 0xb048 <_Z12processMCodei+0x2a62>
    b020:	fa 83       	std	Y+2, r31	; 0x02
    b022:	e9 83       	std	Y+1, r30	; 0x01
    b024:	08 e0       	ldi	r16, 0x08	; 8
    b026:	1a e0       	ldi	r17, 0x0A	; 10
    b028:	d8 01       	movw	r26, r16
    b02a:	ed 91       	ld	r30, X+
    b02c:	fc 91       	ld	r31, X
    b02e:	01 90       	ld	r0, Z+
    b030:	f0 81       	ld	r31, Z
    b032:	e0 2d       	mov	r30, r0
    b034:	c8 01       	movw	r24, r16
    b036:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    b038:	e9 81       	ldd	r30, Y+1	; 0x01
    b03a:	fa 81       	ldd	r31, Y+2	; 0x02
    b03c:	31 96       	adiw	r30, 0x01	; 1
    b03e:	fa 83       	std	Y+2, r31	; 0x02
    b040:	e9 83       	std	Y+1, r30	; 0x01
    b042:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    b044:	61 11       	cpse	r22, r1
    b046:	f0 cf       	rjmp	.-32     	; 0xb028 <_Z12processMCodei+0x2a42>
						  ppwms[i] = 0;
				  	  } // pwms == pin_number
			  	  } // i iterate pwm array
				SERIAL_PGM(MSG_BEGIN);
				SERIAL_PGM("M38");
				SERIAL_PGMLN(MSG_TERMINATE);
    b048:	88 e0       	ldi	r24, 0x08	; 8
    b04a:	9a e0       	ldi	r25, 0x0A	; 10
    b04c:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
				SERIAL_PORT.flush();
    b050:	88 e0       	ldi	r24, 0x08	; 8
    b052:	9a e0       	ldi	r25, 0x0A	; 10
    b054:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    b058:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		  	  } // unassign pin
	  	  } // code P
	  break;
	  
	  case 39: //M39 P<pin> - Remove Persistent Analog pin 
	  	  pin_number = -1;
    b05c:	8f ef       	ldi	r24, 0xFF	; 255
    b05e:	9f ef       	ldi	r25, 0xFF	; 255
    b060:	90 93 1d 13 	sts	0x131D, r25	; 0x80131d <pin_number+0x1>
    b064:	80 93 1c 13 	sts	0x131C, r24	; 0x80131c <pin_number>
	  	  if (code_seen('P')) {
    b068:	80 e5       	ldi	r24, 0x50	; 80
    b06a:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    b06e:	88 23       	and	r24, r24
    b070:	11 f4       	brne	.+4      	; 0xb076 <_Z12processMCodei+0x2a90>
    b072:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		  	  pin_number = code_value();
    b076:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    b07a:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    b07e:	86 2f       	mov	r24, r22
    b080:	60 93 1c 13 	sts	0x131C, r22	; 0x80131c <pin_number>
    b084:	70 93 1d 13 	sts	0x131D, r23	; 0x80131d <pin_number+0x1>
		  	  if(unassignPin(pin_number) ) {
    b088:	0e 94 80 1c 	call	0x3900	; 0x3900 <_Z11unassignPinh>
    b08c:	88 23       	and	r24, r24
    b08e:	11 f4       	brne	.+4      	; 0xb094 <_Z12processMCodei+0x2aae>
    b090:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			  	  for(int i = 0; i < 16; i++) {
				  	  if(panalogs[i] && panalogs[i]->pin == pin_number) {
    b094:	40 91 1c 13 	lds	r20, 0x131C	; 0x80131c <pin_number>
    b098:	50 91 1d 13 	lds	r21, 0x131D	; 0x80131d <pin_number+0x1>
    b09c:	ab eb       	ldi	r26, 0xBB	; 187
    b09e:	b3 e1       	ldi	r27, 0x13	; 19
    b0a0:	00 e0       	ldi	r16, 0x00	; 0
    b0a2:	10 e0       	ldi	r17, 0x00	; 0
    b0a4:	8d 91       	ld	r24, X+
    b0a6:	9d 91       	ld	r25, X+
    b0a8:	00 97       	sbiw	r24, 0x00	; 0
    b0aa:	c9 f0       	breq	.+50     	; 0xb0de <_Z12processMCodei+0x2af8>
    b0ac:	fc 01       	movw	r30, r24
    b0ae:	20 81       	ld	r18, Z
    b0b0:	31 81       	ldd	r19, Z+1	; 0x01
    b0b2:	f9 01       	movw	r30, r18
    b0b4:	36 97       	sbiw	r30, 0x06	; 6
    b0b6:	01 90       	ld	r0, Z+
    b0b8:	f0 81       	ld	r31, Z
    b0ba:	e0 2d       	mov	r30, r0
    b0bc:	e8 0f       	add	r30, r24
    b0be:	f9 1f       	adc	r31, r25
    b0c0:	20 81       	ld	r18, Z
    b0c2:	30 e0       	ldi	r19, 0x00	; 0
    b0c4:	24 17       	cp	r18, r20
    b0c6:	35 07       	cpc	r19, r21
    b0c8:	51 f4       	brne	.+20     	; 0xb0de <_Z12processMCodei+0x2af8>
					  	delete panalogs[i];
    b0ca:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
						panalogs[i] = 0;
    b0ce:	f8 01       	movw	r30, r16
    b0d0:	ee 0f       	add	r30, r30
    b0d2:	ff 1f       	adc	r31, r31
    b0d4:	e5 54       	subi	r30, 0x45	; 69
    b0d6:	fc 4e       	sbci	r31, 0xEC	; 236
    b0d8:	11 82       	std	Z+1, r1	; 0x01
    b0da:	10 82       	st	Z, r1
					    break;
    b0dc:	05 c0       	rjmp	.+10     	; 0xb0e8 <_Z12processMCodei+0x2b02>
	  case 39: //M39 P<pin> - Remove Persistent Analog pin 
	  	  pin_number = -1;
	  	  if (code_seen('P')) {
		  	  pin_number = code_value();
		  	  if(unassignPin(pin_number) ) {
			  	  for(int i = 0; i < 16; i++) {
    b0de:	0f 5f       	subi	r16, 0xFF	; 255
    b0e0:	1f 4f       	sbci	r17, 0xFF	; 255
    b0e2:	00 31       	cpi	r16, 0x10	; 16
    b0e4:	11 05       	cpc	r17, r1
    b0e6:	f1 f6       	brne	.-68     	; 0xb0a4 <_Z12processMCodei+0x2abe>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    b0e8:	e6 ed       	ldi	r30, 0xD6	; 214
    b0ea:	ff e0       	ldi	r31, 0x0F	; 15
    b0ec:	64 91       	lpm	r22, Z
	while(ch)
    b0ee:	66 23       	and	r22, r22
    b0f0:	a1 f0       	breq	.+40     	; 0xb11a <_Z12processMCodei+0x2b34>
    b0f2:	fa 83       	std	Y+2, r31	; 0x02
    b0f4:	e9 83       	std	Y+1, r30	; 0x01
    b0f6:	08 e0       	ldi	r16, 0x08	; 8
    b0f8:	1a e0       	ldi	r17, 0x0A	; 10
    b0fa:	d8 01       	movw	r26, r16
    b0fc:	ed 91       	ld	r30, X+
    b0fe:	fc 91       	ld	r31, X
    b100:	01 90       	ld	r0, Z+
    b102:	f0 81       	ld	r31, Z
    b104:	e0 2d       	mov	r30, r0
    b106:	c8 01       	movw	r24, r16
    b108:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    b10a:	e9 81       	ldd	r30, Y+1	; 0x01
    b10c:	fa 81       	ldd	r31, Y+2	; 0x02
    b10e:	31 96       	adiw	r30, 0x01	; 1
    b110:	fa 83       	std	Y+2, r31	; 0x02
    b112:	e9 83       	std	Y+1, r30	; 0x01
    b114:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    b116:	61 11       	cpse	r22, r1
    b118:	f0 cf       	rjmp	.-32     	; 0xb0fa <_Z12processMCodei+0x2b14>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    b11a:	e2 ed       	ldi	r30, 0xD2	; 210
    b11c:	ff e0       	ldi	r31, 0x0F	; 15
    b11e:	64 91       	lpm	r22, Z
	while(ch)
    b120:	66 23       	and	r22, r22
    b122:	a1 f0       	breq	.+40     	; 0xb14c <_Z12processMCodei+0x2b66>
    b124:	fa 83       	std	Y+2, r31	; 0x02
    b126:	e9 83       	std	Y+1, r30	; 0x01
    b128:	08 e0       	ldi	r16, 0x08	; 8
    b12a:	1a e0       	ldi	r17, 0x0A	; 10
    b12c:	d8 01       	movw	r26, r16
    b12e:	ed 91       	ld	r30, X+
    b130:	fc 91       	ld	r31, X
    b132:	01 90       	ld	r0, Z+
    b134:	f0 81       	ld	r31, Z
    b136:	e0 2d       	mov	r30, r0
    b138:	c8 01       	movw	r24, r16
    b13a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    b13c:	e9 81       	ldd	r30, Y+1	; 0x01
    b13e:	fa 81       	ldd	r31, Y+2	; 0x02
    b140:	31 96       	adiw	r30, 0x01	; 1
    b142:	fa 83       	std	Y+2, r31	; 0x02
    b144:	e9 83       	std	Y+1, r30	; 0x01
    b146:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    b148:	61 11       	cpse	r22, r1
    b14a:	f0 cf       	rjmp	.-32     	; 0xb12c <_Z12processMCodei+0x2b46>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    b14c:	ef ec       	ldi	r30, 0xCF	; 207
    b14e:	ff e0       	ldi	r31, 0x0F	; 15
    b150:	64 91       	lpm	r22, Z
	while(ch)
    b152:	66 23       	and	r22, r22
    b154:	a1 f0       	breq	.+40     	; 0xb17e <_Z12processMCodei+0x2b98>
    b156:	fa 83       	std	Y+2, r31	; 0x02
    b158:	e9 83       	std	Y+1, r30	; 0x01
    b15a:	08 e0       	ldi	r16, 0x08	; 8
    b15c:	1a e0       	ldi	r17, 0x0A	; 10
    b15e:	d8 01       	movw	r26, r16
    b160:	ed 91       	ld	r30, X+
    b162:	fc 91       	ld	r31, X
    b164:	01 90       	ld	r0, Z+
    b166:	f0 81       	ld	r31, Z
    b168:	e0 2d       	mov	r30, r0
    b16a:	c8 01       	movw	r24, r16
    b16c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    b16e:	e9 81       	ldd	r30, Y+1	; 0x01
    b170:	fa 81       	ldd	r31, Y+2	; 0x02
    b172:	31 96       	adiw	r30, 0x01	; 1
    b174:	fa 83       	std	Y+2, r31	; 0x02
    b176:	e9 83       	std	Y+1, r30	; 0x01
    b178:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    b17a:	61 11       	cpse	r22, r1
    b17c:	f0 cf       	rjmp	.-32     	; 0xb15e <_Z12processMCodei+0x2b78>
					    break;
				  	  }
			  	  }
				SERIAL_PGM(MSG_BEGIN);
				SERIAL_PGM("M39");
				SERIAL_PGMLN(MSG_TERMINATE);
    b17e:	88 e0       	ldi	r24, 0x08	; 8
    b180:	9a e0       	ldi	r25, 0x0A	; 10
    b182:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
				SERIAL_PORT.flush();
    b186:	88 e0       	ldi	r24, 0x08	; 8
    b188:	9a e0       	ldi	r25, 0x0A	; 10
    b18a:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    b18e:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		  	  }
	  	  }
	  break;
			
	  case 40: //M40 P<pin> - Remove persistent digital pin 
	       pin_number = -1;
    b192:	8f ef       	ldi	r24, 0xFF	; 255
    b194:	9f ef       	ldi	r25, 0xFF	; 255
    b196:	90 93 1d 13 	sts	0x131D, r25	; 0x80131d <pin_number+0x1>
    b19a:	80 93 1c 13 	sts	0x131C, r24	; 0x80131c <pin_number>
	       if (code_seen('P')) {
    b19e:	80 e5       	ldi	r24, 0x50	; 80
    b1a0:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    b1a4:	88 23       	and	r24, r24
    b1a6:	11 f4       	brne	.+4      	; 0xb1ac <_Z12processMCodei+0x2bc6>
    b1a8:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		       pin_number = code_value();
    b1ac:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    b1b0:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    b1b4:	86 2f       	mov	r24, r22
    b1b6:	60 93 1c 13 	sts	0x131C, r22	; 0x80131c <pin_number>
    b1ba:	70 93 1d 13 	sts	0x131D, r23	; 0x80131d <pin_number+0x1>
		       if(unassignPin(pin_number) ) {
    b1be:	0e 94 80 1c 	call	0x3900	; 0x3900 <_Z11unassignPinh>
    b1c2:	88 23       	and	r24, r24
    b1c4:	11 f4       	brne	.+4      	; 0xb1ca <_Z12processMCodei+0x2be4>
    b1c6:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			       for(int i = 0; i < 32; i++) {
				       if(pdigitals[i] && pdigitals[i]->pin == pin_number) {
    b1ca:	80 91 1c 13 	lds	r24, 0x131C	; 0x80131c <pin_number>
    b1ce:	90 91 1d 13 	lds	r25, 0x131D	; 0x80131d <pin_number+0x1>
    b1d2:	ab e3       	ldi	r26, 0x3B	; 59
    b1d4:	b3 e1       	ldi	r27, 0x13	; 19
    b1d6:	1a 82       	std	Y+2, r1	; 0x02
    b1d8:	19 82       	std	Y+1, r1	; 0x01
    b1da:	ed 91       	ld	r30, X+
    b1dc:	fd 91       	ld	r31, X+
    b1de:	30 97       	sbiw	r30, 0x00	; 0
    b1e0:	89 f0       	breq	.+34     	; 0xb204 <_Z12processMCodei+0x2c1e>
    b1e2:	20 81       	ld	r18, Z
    b1e4:	30 e0       	ldi	r19, 0x00	; 0
    b1e6:	28 17       	cp	r18, r24
    b1e8:	39 07       	cpc	r19, r25
    b1ea:	61 f4       	brne	.+24     	; 0xb204 <_Z12processMCodei+0x2c1e>
					       delete pdigitals[i];
    b1ec:	cf 01       	movw	r24, r30
    b1ee:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
						   pdigitals[i] = 0;
    b1f2:	e9 81       	ldd	r30, Y+1	; 0x01
    b1f4:	fa 81       	ldd	r31, Y+2	; 0x02
    b1f6:	ee 0f       	add	r30, r30
    b1f8:	ff 1f       	adc	r31, r31
    b1fa:	e5 5c       	subi	r30, 0xC5	; 197
    b1fc:	fc 4e       	sbci	r31, 0xEC	; 236
    b1fe:	11 82       	std	Z+1, r1	; 0x01
    b200:	10 82       	st	Z, r1
					       break;
    b202:	09 c0       	rjmp	.+18     	; 0xb216 <_Z12processMCodei+0x2c30>
	  case 40: //M40 P<pin> - Remove persistent digital pin 
	       pin_number = -1;
	       if (code_seen('P')) {
		       pin_number = code_value();
		       if(unassignPin(pin_number) ) {
			       for(int i = 0; i < 32; i++) {
    b204:	29 81       	ldd	r18, Y+1	; 0x01
    b206:	3a 81       	ldd	r19, Y+2	; 0x02
    b208:	2f 5f       	subi	r18, 0xFF	; 255
    b20a:	3f 4f       	sbci	r19, 0xFF	; 255
    b20c:	3a 83       	std	Y+2, r19	; 0x02
    b20e:	29 83       	std	Y+1, r18	; 0x01
    b210:	20 32       	cpi	r18, 0x20	; 32
    b212:	31 05       	cpc	r19, r1
    b214:	11 f7       	brne	.-60     	; 0xb1da <_Z12processMCodei+0x2bf4>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    b216:	ed ec       	ldi	r30, 0xCD	; 205
    b218:	ff e0       	ldi	r31, 0x0F	; 15
    b21a:	64 91       	lpm	r22, Z
	while(ch)
    b21c:	66 23       	and	r22, r22
    b21e:	a1 f0       	breq	.+40     	; 0xb248 <_Z12processMCodei+0x2c62>
    b220:	fa 83       	std	Y+2, r31	; 0x02
    b222:	e9 83       	std	Y+1, r30	; 0x01
    b224:	08 e0       	ldi	r16, 0x08	; 8
    b226:	1a e0       	ldi	r17, 0x0A	; 10
    b228:	d8 01       	movw	r26, r16
    b22a:	ed 91       	ld	r30, X+
    b22c:	fc 91       	ld	r31, X
    b22e:	01 90       	ld	r0, Z+
    b230:	f0 81       	ld	r31, Z
    b232:	e0 2d       	mov	r30, r0
    b234:	c8 01       	movw	r24, r16
    b236:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    b238:	e9 81       	ldd	r30, Y+1	; 0x01
    b23a:	fa 81       	ldd	r31, Y+2	; 0x02
    b23c:	31 96       	adiw	r30, 0x01	; 1
    b23e:	fa 83       	std	Y+2, r31	; 0x02
    b240:	e9 83       	std	Y+1, r30	; 0x01
    b242:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    b244:	61 11       	cpse	r22, r1
    b246:	f0 cf       	rjmp	.-32     	; 0xb228 <_Z12processMCodei+0x2c42>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    b248:	e9 ec       	ldi	r30, 0xC9	; 201
    b24a:	ff e0       	ldi	r31, 0x0F	; 15
    b24c:	64 91       	lpm	r22, Z
	while(ch)
    b24e:	66 23       	and	r22, r22
    b250:	a1 f0       	breq	.+40     	; 0xb27a <_Z12processMCodei+0x2c94>
    b252:	fa 83       	std	Y+2, r31	; 0x02
    b254:	e9 83       	std	Y+1, r30	; 0x01
    b256:	08 e0       	ldi	r16, 0x08	; 8
    b258:	1a e0       	ldi	r17, 0x0A	; 10
    b25a:	d8 01       	movw	r26, r16
    b25c:	ed 91       	ld	r30, X+
    b25e:	fc 91       	ld	r31, X
    b260:	01 90       	ld	r0, Z+
    b262:	f0 81       	ld	r31, Z
    b264:	e0 2d       	mov	r30, r0
    b266:	c8 01       	movw	r24, r16
    b268:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    b26a:	e9 81       	ldd	r30, Y+1	; 0x01
    b26c:	fa 81       	ldd	r31, Y+2	; 0x02
    b26e:	31 96       	adiw	r30, 0x01	; 1
    b270:	fa 83       	std	Y+2, r31	; 0x02
    b272:	e9 83       	std	Y+1, r30	; 0x01
    b274:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    b276:	61 11       	cpse	r22, r1
    b278:	f0 cf       	rjmp	.-32     	; 0xb25a <_Z12processMCodei+0x2c74>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    b27a:	e6 ec       	ldi	r30, 0xC6	; 198
    b27c:	ff e0       	ldi	r31, 0x0F	; 15
    b27e:	64 91       	lpm	r22, Z
	while(ch)
    b280:	66 23       	and	r22, r22
    b282:	a1 f0       	breq	.+40     	; 0xb2ac <_Z12processMCodei+0x2cc6>
    b284:	fa 83       	std	Y+2, r31	; 0x02
    b286:	e9 83       	std	Y+1, r30	; 0x01
    b288:	08 e0       	ldi	r16, 0x08	; 8
    b28a:	1a e0       	ldi	r17, 0x0A	; 10
    b28c:	d8 01       	movw	r26, r16
    b28e:	ed 91       	ld	r30, X+
    b290:	fc 91       	ld	r31, X
    b292:	01 90       	ld	r0, Z+
    b294:	f0 81       	ld	r31, Z
    b296:	e0 2d       	mov	r30, r0
    b298:	c8 01       	movw	r24, r16
    b29a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    b29c:	e9 81       	ldd	r30, Y+1	; 0x01
    b29e:	fa 81       	ldd	r31, Y+2	; 0x02
    b2a0:	31 96       	adiw	r30, 0x01	; 1
    b2a2:	fa 83       	std	Y+2, r31	; 0x02
    b2a4:	e9 83       	std	Y+1, r30	; 0x01
    b2a6:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    b2a8:	61 11       	cpse	r22, r1
    b2aa:	f0 cf       	rjmp	.-32     	; 0xb28c <_Z12processMCodei+0x2ca6>
					       break;
				       }
			       }
				   	SERIAL_PGM(MSG_BEGIN);
				   	SERIAL_PGM("M40");
				   	SERIAL_PGMLN(MSG_TERMINATE);
    b2ac:	88 e0       	ldi	r24, 0x08	; 8
    b2ae:	9a e0       	ldi	r25, 0x0A	; 10
    b2b0:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
				   	SERIAL_PORT.flush();
    b2b4:	88 e0       	ldi	r24, 0x08	; 8
    b2b6:	9a e0       	ldi	r25, 0x0A	; 10
    b2b8:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    b2bc:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			   }
		   }
	  break;
		
	  case 41: //M41 - Create persistent digital pin, Write digital pin HIGH P<pin> (this gives you a 5v source on pin)
	     pin_number = -1;
    b2c0:	8f ef       	ldi	r24, 0xFF	; 255
    b2c2:	9f ef       	ldi	r25, 0xFF	; 255
    b2c4:	90 93 1d 13 	sts	0x131D, r25	; 0x80131d <pin_number+0x1>
    b2c8:	80 93 1c 13 	sts	0x131C, r24	; 0x80131c <pin_number>
	     if (code_seen('P')) {
    b2cc:	80 e5       	ldi	r24, 0x50	; 80
    b2ce:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    b2d2:	88 23       	and	r24, r24
    b2d4:	11 f4       	brne	.+4      	; 0xb2da <_Z12processMCodei+0x2cf4>
    b2d6:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		     pin_number = code_value();
    b2da:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    b2de:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    b2e2:	86 2f       	mov	r24, r22
    b2e4:	60 93 1c 13 	sts	0x131C, r22	; 0x80131c <pin_number>
    b2e8:	70 93 1d 13 	sts	0x131D, r23	; 0x80131d <pin_number+0x1>
		     if( assignPin(pin_number) ) {
    b2ec:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_Z9assignPinh>
    b2f0:	88 23       	and	r24, r24
    b2f2:	09 f4       	brne	.+2      	; 0xb2f6 <_Z12processMCodei+0x2d10>
    b2f4:	8f c0       	rjmp	.+286    	; 0xb414 <_Z12processMCodei+0x2e2e>
			     dpin = new Digital(pin_number);
    b2f6:	82 e0       	ldi	r24, 0x02	; 2
    b2f8:	90 e0       	ldi	r25, 0x00	; 0
    b2fa:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    b2fe:	20 91 1c 13 	lds	r18, 0x131C	; 0x80131c <pin_number>

class Digital {
	public:
	uint8_t pin;
	uint8_t mode = INPUT; // default
	Digital(uint8_t spin) {
    b302:	dc 01       	movw	r26, r24
    b304:	11 96       	adiw	r26, 0x01	; 1
    b306:	1c 92       	st	X, r1
    b308:	11 97       	sbiw	r26, 0x01	; 1
		this->pin = spin;
    b30a:	2c 93       	st	X, r18
    b30c:	90 93 6d 14 	sts	0x146D, r25	; 0x80146d <dpin+0x1>
    b310:	80 93 6c 14 	sts	0x146C, r24	; 0x80146c <dpin>
				 dpin->setPin(pin_number);
			     dpin->pinMode(OUTPUT);
    b314:	61 e0       	ldi	r22, 0x01	; 1
    b316:	0e 94 d6 39 	call	0x73ac	; 0x73ac <_ZN7Digital7pinModeEh>
			     dpin->digitalWrite(HIGH);
    b31a:	61 e0       	ldi	r22, 0x01	; 1
    b31c:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <dpin>
    b320:	90 91 6d 14 	lds	r25, 0x146D	; 0x80146d <dpin+0x1>
    b324:	0e 94 32 3a 	call	0x7464	; 0x7464 <_ZN7Digital12digitalWriteEh>
			     for(int i = 0; i < 32; i++) {
				     if(!pdigitals[i]) {
    b328:	80 91 3b 13 	lds	r24, 0x133B	; 0x80133b <pdigitals>
    b32c:	90 91 3c 13 	lds	r25, 0x133C	; 0x80133c <pdigitals+0x1>
    b330:	89 2b       	or	r24, r25
    b332:	49 f0       	breq	.+18     	; 0xb346 <_Z12processMCodei+0x2d60>
    b334:	ed e3       	ldi	r30, 0x3D	; 61
    b336:	f3 e1       	ldi	r31, 0x13	; 19
		     if( assignPin(pin_number) ) {
			     dpin = new Digital(pin_number);
				 dpin->setPin(pin_number);
			     dpin->pinMode(OUTPUT);
			     dpin->digitalWrite(HIGH);
			     for(int i = 0; i < 32; i++) {
    b338:	81 e0       	ldi	r24, 0x01	; 1
    b33a:	90 e0       	ldi	r25, 0x00	; 0
				     if(!pdigitals[i]) {
    b33c:	21 91       	ld	r18, Z+
    b33e:	31 91       	ld	r19, Z+
    b340:	23 2b       	or	r18, r19
    b342:	79 f4       	brne	.+30     	; 0xb362 <_Z12processMCodei+0x2d7c>
    b344:	02 c0       	rjmp	.+4      	; 0xb34a <_Z12processMCodei+0x2d64>
		     if( assignPin(pin_number) ) {
			     dpin = new Digital(pin_number);
				 dpin->setPin(pin_number);
			     dpin->pinMode(OUTPUT);
			     dpin->digitalWrite(HIGH);
			     for(int i = 0; i < 32; i++) {
    b346:	80 e0       	ldi	r24, 0x00	; 0
    b348:	90 e0       	ldi	r25, 0x00	; 0
				     if(!pdigitals[i]) {
					     pdigitals[i] = dpin;
    b34a:	88 0f       	add	r24, r24
    b34c:	99 1f       	adc	r25, r25
    b34e:	fc 01       	movw	r30, r24
    b350:	e5 5c       	subi	r30, 0xC5	; 197
    b352:	fc 4e       	sbci	r31, 0xEC	; 236
    b354:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <dpin>
    b358:	90 91 6d 14 	lds	r25, 0x146D	; 0x80146d <dpin+0x1>
    b35c:	91 83       	std	Z+1, r25	; 0x01
    b35e:	80 83       	st	Z, r24
					     break;
    b360:	04 c0       	rjmp	.+8      	; 0xb36a <_Z12processMCodei+0x2d84>
		     if( assignPin(pin_number) ) {
			     dpin = new Digital(pin_number);
				 dpin->setPin(pin_number);
			     dpin->pinMode(OUTPUT);
			     dpin->digitalWrite(HIGH);
			     for(int i = 0; i < 32; i++) {
    b362:	01 96       	adiw	r24, 0x01	; 1
    b364:	80 32       	cpi	r24, 0x20	; 32
    b366:	91 05       	cpc	r25, r1
    b368:	49 f7       	brne	.-46     	; 0xb33c <_Z12processMCodei+0x2d56>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    b36a:	e4 ec       	ldi	r30, 0xC4	; 196
    b36c:	ff e0       	ldi	r31, 0x0F	; 15
    b36e:	64 91       	lpm	r22, Z
	while(ch)
    b370:	66 23       	and	r22, r22
    b372:	a1 f0       	breq	.+40     	; 0xb39c <_Z12processMCodei+0x2db6>
    b374:	fa 83       	std	Y+2, r31	; 0x02
    b376:	e9 83       	std	Y+1, r30	; 0x01
    b378:	08 e0       	ldi	r16, 0x08	; 8
    b37a:	1a e0       	ldi	r17, 0x0A	; 10
    b37c:	d8 01       	movw	r26, r16
    b37e:	ed 91       	ld	r30, X+
    b380:	fc 91       	ld	r31, X
    b382:	01 90       	ld	r0, Z+
    b384:	f0 81       	ld	r31, Z
    b386:	e0 2d       	mov	r30, r0
    b388:	c8 01       	movw	r24, r16
    b38a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    b38c:	e9 81       	ldd	r30, Y+1	; 0x01
    b38e:	fa 81       	ldd	r31, Y+2	; 0x02
    b390:	31 96       	adiw	r30, 0x01	; 1
    b392:	fa 83       	std	Y+2, r31	; 0x02
    b394:	e9 83       	std	Y+1, r30	; 0x01
    b396:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    b398:	61 11       	cpse	r22, r1
    b39a:	f0 cf       	rjmp	.-32     	; 0xb37c <_Z12processMCodei+0x2d96>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    b39c:	e0 ec       	ldi	r30, 0xC0	; 192
    b39e:	ff e0       	ldi	r31, 0x0F	; 15
    b3a0:	64 91       	lpm	r22, Z
	while(ch)
    b3a2:	66 23       	and	r22, r22
    b3a4:	a1 f0       	breq	.+40     	; 0xb3ce <_Z12processMCodei+0x2de8>
    b3a6:	fa 83       	std	Y+2, r31	; 0x02
    b3a8:	e9 83       	std	Y+1, r30	; 0x01
    b3aa:	08 e0       	ldi	r16, 0x08	; 8
    b3ac:	1a e0       	ldi	r17, 0x0A	; 10
    b3ae:	d8 01       	movw	r26, r16
    b3b0:	ed 91       	ld	r30, X+
    b3b2:	fc 91       	ld	r31, X
    b3b4:	01 90       	ld	r0, Z+
    b3b6:	f0 81       	ld	r31, Z
    b3b8:	e0 2d       	mov	r30, r0
    b3ba:	c8 01       	movw	r24, r16
    b3bc:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    b3be:	e9 81       	ldd	r30, Y+1	; 0x01
    b3c0:	fa 81       	ldd	r31, Y+2	; 0x02
    b3c2:	31 96       	adiw	r30, 0x01	; 1
    b3c4:	fa 83       	std	Y+2, r31	; 0x02
    b3c6:	e9 83       	std	Y+1, r30	; 0x01
    b3c8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    b3ca:	61 11       	cpse	r22, r1
    b3cc:	f0 cf       	rjmp	.-32     	; 0xb3ae <_Z12processMCodei+0x2dc8>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    b3ce:	ed eb       	ldi	r30, 0xBD	; 189
    b3d0:	ff e0       	ldi	r31, 0x0F	; 15
    b3d2:	64 91       	lpm	r22, Z
	while(ch)
    b3d4:	66 23       	and	r22, r22
    b3d6:	a1 f0       	breq	.+40     	; 0xb400 <_Z12processMCodei+0x2e1a>
    b3d8:	fa 83       	std	Y+2, r31	; 0x02
    b3da:	e9 83       	std	Y+1, r30	; 0x01
    b3dc:	08 e0       	ldi	r16, 0x08	; 8
    b3de:	1a e0       	ldi	r17, 0x0A	; 10
    b3e0:	d8 01       	movw	r26, r16
    b3e2:	ed 91       	ld	r30, X+
    b3e4:	fc 91       	ld	r31, X
    b3e6:	01 90       	ld	r0, Z+
    b3e8:	f0 81       	ld	r31, Z
    b3ea:	e0 2d       	mov	r30, r0
    b3ec:	c8 01       	movw	r24, r16
    b3ee:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    b3f0:	e9 81       	ldd	r30, Y+1	; 0x01
    b3f2:	fa 81       	ldd	r31, Y+2	; 0x02
    b3f4:	31 96       	adiw	r30, 0x01	; 1
    b3f6:	fa 83       	std	Y+2, r31	; 0x02
    b3f8:	e9 83       	std	Y+1, r30	; 0x01
    b3fa:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    b3fc:	61 11       	cpse	r22, r1
    b3fe:	f0 cf       	rjmp	.-32     	; 0xb3e0 <_Z12processMCodei+0x2dfa>
					     break;
				     }
			     }
				 SERIAL_PGM(MSG_BEGIN);
				 SERIAL_PGM("M41");
				 SERIAL_PGMLN(MSG_TERMINATE);
    b400:	88 e0       	ldi	r24, 0x08	; 8
    b402:	9a e0       	ldi	r25, 0x0A	; 10
    b404:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
				 SERIAL_PORT.flush();
    b408:	88 e0       	ldi	r24, 0x08	; 8
    b40a:	9a e0       	ldi	r25, 0x0A	; 10
    b40c:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    b410:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			 } else {
			     for(int i = 0; i < 32; i++) {
				     if(pdigitals[i] && pdigitals[i]->pin == pin_number) {
    b414:	40 91 1c 13 	lds	r20, 0x131C	; 0x80131c <pin_number>
    b418:	50 91 1d 13 	lds	r21, 0x131D	; 0x80131d <pin_number+0x1>
    b41c:	ab e3       	ldi	r26, 0x3B	; 59
    b41e:	b3 e1       	ldi	r27, 0x13	; 19
    b420:	20 e0       	ldi	r18, 0x00	; 0
    b422:	30 e0       	ldi	r19, 0x00	; 0
    b424:	ed 91       	ld	r30, X+
    b426:	fd 91       	ld	r31, X+
    b428:	30 97       	sbiw	r30, 0x00	; 0
    b42a:	09 f4       	brne	.+2      	; 0xb42e <_Z12processMCodei+0x2e48>
    b42c:	cd c0       	rjmp	.+410    	; 0xb5c8 <_Z12processMCodei+0x2fe2>
    b42e:	80 81       	ld	r24, Z
    b430:	90 e0       	ldi	r25, 0x00	; 0
    b432:	84 17       	cp	r24, r20
    b434:	95 07       	cpc	r25, r21
    b436:	09 f0       	breq	.+2      	; 0xb43a <_Z12processMCodei+0x2e54>
    b438:	c7 c0       	rjmp	.+398    	; 0xb5c8 <_Z12processMCodei+0x2fe2>
						 pdigitals[i]->setPin(pin_number);
						 pdigitals[i]->pinMode(OUTPUT);
    b43a:	f9 01       	movw	r30, r18
    b43c:	ee 0f       	add	r30, r30
    b43e:	ff 1f       	adc	r31, r31
    b440:	e5 5c       	subi	r30, 0xC5	; 197
    b442:	fc 4e       	sbci	r31, 0xEC	; 236
    b444:	01 90       	ld	r0, Z+
    b446:	f0 81       	ld	r31, Z
    b448:	e0 2d       	mov	r30, r0
	}
	
void setPin(uint8_t spin) { this->pin = spin; }
	
void pinMode(uint8_t pmode) {
	this->mode = pmode;
    b44a:	81 e0       	ldi	r24, 0x01	; 1
    b44c:	81 83       	std	Z+1, r24	; 0x01
	uint8_t bit = digitalPinToBitMask(this->pin);
    b44e:	80 81       	ld	r24, Z
    b450:	90 e0       	ldi	r25, 0x00	; 0
    b452:	fc 01       	movw	r30, r24
    b454:	ef 52       	subi	r30, 0x2F	; 47
    b456:	fd 4e       	sbci	r31, 0xED	; 237
    b458:	44 91       	lpm	r20, Z
	uint8_t port = digitalPinToPort(this->pin);
    b45a:	fc 01       	movw	r30, r24
    b45c:	e9 5e       	subi	r30, 0xE9	; 233
    b45e:	fc 4e       	sbci	r31, 0xEC	; 236
    b460:	84 91       	lpm	r24, Z
	volatile uint16_t *reg, *out;

	if (port == NOT_A_PIN) return;
    b462:	88 23       	and	r24, r24
    b464:	b9 f0       	breq	.+46     	; 0xb494 <_Z12processMCodei+0x2eae>

	reg = portModeRegister(port);
    b466:	90 e0       	ldi	r25, 0x00	; 0
    b468:	88 0f       	add	r24, r24
    b46a:	99 1f       	adc	r25, r25
    b46c:	fc 01       	movw	r30, r24
    b46e:	ef 56       	subi	r30, 0x6F	; 111
    b470:	fc 4e       	sbci	r31, 0xEC	; 236
    b472:	a5 91       	lpm	r26, Z+
    b474:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    b476:	89 58       	subi	r24, 0x89	; 137
    b478:	9c 4e       	sbci	r25, 0xEC	; 236
    b47a:	fc 01       	movw	r30, r24
    b47c:	85 91       	lpm	r24, Z+
    b47e:	94 91       	lpm	r25, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    b480:	5f b7       	in	r21, 0x3f	; 63
                cli();
    b482:	f8 94       	cli
		*reg |= bit;
    b484:	8d 91       	ld	r24, X+
    b486:	9c 91       	ld	r25, X
    b488:	11 97       	sbiw	r26, 0x01	; 1
    b48a:	84 2b       	or	r24, r20
    b48c:	11 96       	adiw	r26, 0x01	; 1
    b48e:	9c 93       	st	X, r25
    b490:	8e 93       	st	-X, r24
		SREG = oldSREG;
    b492:	5f bf       	out	0x3f, r21	; 63
					     pdigitals[i]->digitalWrite(HIGH);
    b494:	f9 01       	movw	r30, r18
    b496:	ee 0f       	add	r30, r30
    b498:	ff 1f       	adc	r31, r31
    b49a:	e5 5c       	subi	r30, 0xC5	; 197
    b49c:	fc 4e       	sbci	r31, 0xEC	; 236
	}
}

void digitalWrite(uint8_t val)
{
	uint8_t timer = digitalPinToTimer(this->pin);
    b49e:	01 90       	ld	r0, Z+
    b4a0:	f0 81       	ld	r31, Z
    b4a2:	e0 2d       	mov	r30, r0
    b4a4:	80 81       	ld	r24, Z
    b4a6:	90 e0       	ldi	r25, 0x00	; 0
    b4a8:	fc 01       	movw	r30, r24
    b4aa:	e5 57       	subi	r30, 0x75	; 117
    b4ac:	fd 4e       	sbci	r31, 0xED	; 237
    b4ae:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(this->pin);
    b4b0:	fc 01       	movw	r30, r24
    b4b2:	ef 52       	subi	r30, 0x2F	; 47
    b4b4:	fd 4e       	sbci	r31, 0xED	; 237
    b4b6:	34 91       	lpm	r19, Z
    b4b8:	3b 83       	std	Y+3, r19	; 0x03
	uint8_t port = digitalPinToPort(this->pin);
    b4ba:	fc 01       	movw	r30, r24
    b4bc:	e9 5e       	subi	r30, 0xE9	; 233
    b4be:	fc 4e       	sbci	r31, 0xEC	; 236
    b4c0:	44 91       	lpm	r20, Z
    b4c2:	49 83       	std	Y+1, r20	; 0x01
	volatile uint16_t *out;

	if (port == NOT_A_PIN) return;
    b4c4:	44 23       	and	r20, r20
    b4c6:	09 f4       	brne	.+2      	; 0xb4ca <_Z12processMCodei+0x2ee4>
    b4c8:	85 c0       	rjmp	.+266    	; 0xb5d4 <_Z12processMCodei+0x2fee>

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    b4ca:	22 23       	and	r18, r18
    b4cc:	09 f4       	brne	.+2      	; 0xb4d0 <_Z12processMCodei+0x2eea>
    b4ce:	67 c0       	rjmp	.+206    	; 0xb59e <_Z12processMCodei+0x2fb8>

// If we detect the pin is on a timer, we may need to defuse PWM output, 
// we need to turn pin off before doing a digital write.
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    b4d0:	82 2f       	mov	r24, r18
    b4d2:	90 e0       	ldi	r25, 0x00	; 0
    b4d4:	fc 01       	movw	r30, r24
    b4d6:	31 97       	sbiw	r30, 0x01	; 1
    b4d8:	e0 31       	cpi	r30, 0x10	; 16
    b4da:	f1 05       	cpc	r31, r1
    b4dc:	08 f0       	brcs	.+2      	; 0xb4e0 <_Z12processMCodei+0x2efa>
    b4de:	5f c0       	rjmp	.+190    	; 0xb59e <_Z12processMCodei+0x2fb8>
    b4e0:	88 27       	eor	r24, r24
    b4e2:	ed 58       	subi	r30, 0x8D	; 141
    b4e4:	fe 4f       	sbci	r31, 0xFE	; 254
    b4e6:	8f 4f       	sbci	r24, 0xFF	; 255
    b4e8:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
	{
		case TIMER0A: Timer0.stopChannel(CHANNEL_A); break;
    b4ec:	60 e0       	ldi	r22, 0x00	; 0
    b4ee:	84 e7       	ldi	r24, 0x74	; 116
    b4f0:	97 e1       	ldi	r25, 0x17	; 23
    b4f2:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b4f6:	53 c0       	rjmp	.+166    	; 0xb59e <_Z12processMCodei+0x2fb8>
		case TIMER0B: Timer0.stopChannel(CHANNEL_B); break;
    b4f8:	61 e0       	ldi	r22, 0x01	; 1
    b4fa:	84 e7       	ldi	r24, 0x74	; 116
    b4fc:	97 e1       	ldi	r25, 0x17	; 23
    b4fe:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b502:	4d c0       	rjmp	.+154    	; 0xb59e <_Z12processMCodei+0x2fb8>
	
		case TIMER1A: Timer1.stopChannel(CHANNEL_A); break;
    b504:	60 e0       	ldi	r22, 0x00	; 0
    b506:	85 e4       	ldi	r24, 0x45	; 69
    b508:	97 e1       	ldi	r25, 0x17	; 23
    b50a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b50e:	47 c0       	rjmp	.+142    	; 0xb59e <_Z12processMCodei+0x2fb8>
		case TIMER1B: Timer1.stopChannel(CHANNEL_B); break;
    b510:	61 e0       	ldi	r22, 0x01	; 1
    b512:	85 e4       	ldi	r24, 0x45	; 69
    b514:	97 e1       	ldi	r25, 0x17	; 23
    b516:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b51a:	41 c0       	rjmp	.+130    	; 0xb59e <_Z12processMCodei+0x2fb8>
		
		case TIMER2A: Timer2.stopChannel(CHANNEL_A); break;
    b51c:	60 e0       	ldi	r22, 0x00	; 0
    b51e:	86 e1       	ldi	r24, 0x16	; 22
    b520:	97 e1       	ldi	r25, 0x17	; 23
    b522:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b526:	3b c0       	rjmp	.+118    	; 0xb59e <_Z12processMCodei+0x2fb8>
		case TIMER2B: Timer2.stopChannel(CHANNEL_B); break;
    b528:	61 e0       	ldi	r22, 0x01	; 1
    b52a:	86 e1       	ldi	r24, 0x16	; 22
    b52c:	97 e1       	ldi	r25, 0x17	; 23
    b52e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b532:	35 c0       	rjmp	.+106    	; 0xb59e <_Z12processMCodei+0x2fb8>
	
		case TIMER3A: Timer3.stopChannel(CHANNEL_A); break;
    b534:	60 e0       	ldi	r22, 0x00	; 0
    b536:	87 ee       	ldi	r24, 0xE7	; 231
    b538:	96 e1       	ldi	r25, 0x16	; 22
    b53a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b53e:	2f c0       	rjmp	.+94     	; 0xb59e <_Z12processMCodei+0x2fb8>
		case TIMER3B: Timer3.stopChannel(CHANNEL_B); break; 
    b540:	61 e0       	ldi	r22, 0x01	; 1
    b542:	87 ee       	ldi	r24, 0xE7	; 231
    b544:	96 e1       	ldi	r25, 0x16	; 22
    b546:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b54a:	29 c0       	rjmp	.+82     	; 0xb59e <_Z12processMCodei+0x2fb8>
		case TIMER3C: Timer3.stopChannel(CHANNEL_C); break;
    b54c:	62 e0       	ldi	r22, 0x02	; 2
    b54e:	87 ee       	ldi	r24, 0xE7	; 231
    b550:	96 e1       	ldi	r25, 0x16	; 22
    b552:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b556:	23 c0       	rjmp	.+70     	; 0xb59e <_Z12processMCodei+0x2fb8>
		
		case TIMER4A: Timer4.stopChannel(CHANNEL_A); break;
    b558:	60 e0       	ldi	r22, 0x00	; 0
    b55a:	88 eb       	ldi	r24, 0xB8	; 184
    b55c:	96 e1       	ldi	r25, 0x16	; 22
    b55e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b562:	1d c0       	rjmp	.+58     	; 0xb59e <_Z12processMCodei+0x2fb8>
		case TIMER4B: Timer4.stopChannel(CHANNEL_B); break; 
    b564:	61 e0       	ldi	r22, 0x01	; 1
    b566:	88 eb       	ldi	r24, 0xB8	; 184
    b568:	96 e1       	ldi	r25, 0x16	; 22
    b56a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b56e:	17 c0       	rjmp	.+46     	; 0xb59e <_Z12processMCodei+0x2fb8>
		case TIMER4C: Timer4.stopChannel(CHANNEL_C); break;
    b570:	62 e0       	ldi	r22, 0x02	; 2
    b572:	88 eb       	ldi	r24, 0xB8	; 184
    b574:	96 e1       	ldi	r25, 0x16	; 22
    b576:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b57a:	11 c0       	rjmp	.+34     	; 0xb59e <_Z12processMCodei+0x2fb8>
		
		case TIMER5A: Timer5.stopChannel(CHANNEL_A); break;
    b57c:	60 e0       	ldi	r22, 0x00	; 0
    b57e:	89 e8       	ldi	r24, 0x89	; 137
    b580:	96 e1       	ldi	r25, 0x16	; 22
    b582:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b586:	0b c0       	rjmp	.+22     	; 0xb59e <_Z12processMCodei+0x2fb8>
		case TIMER5B: Timer5.stopChannel(CHANNEL_B); break; 
    b588:	61 e0       	ldi	r22, 0x01	; 1
    b58a:	89 e8       	ldi	r24, 0x89	; 137
    b58c:	96 e1       	ldi	r25, 0x16	; 22
    b58e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b592:	05 c0       	rjmp	.+10     	; 0xb59e <_Z12processMCodei+0x2fb8>
		case TIMER5C: Timer5.stopChannel(CHANNEL_C); break;
    b594:	62 e0       	ldi	r22, 0x02	; 2
    b596:	89 e8       	ldi	r24, 0x89	; 137
    b598:	96 e1       	ldi	r25, 0x16	; 22
    b59a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
	if (port == NOT_A_PIN) return;

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    b59e:	59 81       	ldd	r21, Y+1	; 0x01
    b5a0:	e5 2f       	mov	r30, r21
    b5a2:	f0 e0       	ldi	r31, 0x00	; 0
    b5a4:	ee 0f       	add	r30, r30
    b5a6:	ff 1f       	adc	r31, r31
    b5a8:	e9 58       	subi	r30, 0x89	; 137
    b5aa:	fc 4e       	sbci	r31, 0xEC	; 236
    b5ac:	a5 91       	lpm	r26, Z+
    b5ae:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    b5b0:	2f b7       	in	r18, 0x3f	; 63
	cli();
    b5b2:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
    b5b4:	8d 91       	ld	r24, X+
    b5b6:	9c 91       	ld	r25, X
    b5b8:	11 97       	sbiw	r26, 0x01	; 1
    b5ba:	6b 81       	ldd	r22, Y+3	; 0x03
    b5bc:	86 2b       	or	r24, r22
    b5be:	11 96       	adiw	r26, 0x01	; 1
    b5c0:	9c 93       	st	X, r25
    b5c2:	8e 93       	st	-X, r24
	}

	SREG = oldSREG;
    b5c4:	2f bf       	out	0x3f, r18	; 63
    b5c6:	06 c0       	rjmp	.+12     	; 0xb5d4 <_Z12processMCodei+0x2fee>
				 SERIAL_PGM(MSG_BEGIN);
				 SERIAL_PGM("M41");
				 SERIAL_PGMLN(MSG_TERMINATE);
				 SERIAL_PORT.flush();
			 } else {
			     for(int i = 0; i < 32; i++) {
    b5c8:	2f 5f       	subi	r18, 0xFF	; 255
    b5ca:	3f 4f       	sbci	r19, 0xFF	; 255
    b5cc:	20 32       	cpi	r18, 0x20	; 32
    b5ce:	31 05       	cpc	r19, r1
    b5d0:	09 f0       	breq	.+2      	; 0xb5d4 <_Z12processMCodei+0x2fee>
    b5d2:	28 cf       	rjmp	.-432    	; 0xb424 <_Z12processMCodei+0x2e3e>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    b5d4:	eb eb       	ldi	r30, 0xBB	; 187
    b5d6:	ff e0       	ldi	r31, 0x0F	; 15
    b5d8:	64 91       	lpm	r22, Z
	while(ch)
    b5da:	66 23       	and	r22, r22
    b5dc:	a1 f0       	breq	.+40     	; 0xb606 <_Z12processMCodei+0x3020>
    b5de:	fa 83       	std	Y+2, r31	; 0x02
    b5e0:	e9 83       	std	Y+1, r30	; 0x01
    b5e2:	08 e0       	ldi	r16, 0x08	; 8
    b5e4:	1a e0       	ldi	r17, 0x0A	; 10
    b5e6:	d8 01       	movw	r26, r16
    b5e8:	ed 91       	ld	r30, X+
    b5ea:	fc 91       	ld	r31, X
    b5ec:	01 90       	ld	r0, Z+
    b5ee:	f0 81       	ld	r31, Z
    b5f0:	e0 2d       	mov	r30, r0
    b5f2:	c8 01       	movw	r24, r16
    b5f4:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    b5f6:	e9 81       	ldd	r30, Y+1	; 0x01
    b5f8:	fa 81       	ldd	r31, Y+2	; 0x02
    b5fa:	31 96       	adiw	r30, 0x01	; 1
    b5fc:	fa 83       	std	Y+2, r31	; 0x02
    b5fe:	e9 83       	std	Y+1, r30	; 0x01
    b600:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    b602:	61 11       	cpse	r22, r1
    b604:	f0 cf       	rjmp	.-32     	; 0xb5e6 <_Z12processMCodei+0x3000>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    b606:	e7 eb       	ldi	r30, 0xB7	; 183
    b608:	ff e0       	ldi	r31, 0x0F	; 15
    b60a:	64 91       	lpm	r22, Z
	while(ch)
    b60c:	66 23       	and	r22, r22
    b60e:	a1 f0       	breq	.+40     	; 0xb638 <_Z12processMCodei+0x3052>
    b610:	fa 83       	std	Y+2, r31	; 0x02
    b612:	e9 83       	std	Y+1, r30	; 0x01
    b614:	08 e0       	ldi	r16, 0x08	; 8
    b616:	1a e0       	ldi	r17, 0x0A	; 10
    b618:	d8 01       	movw	r26, r16
    b61a:	ed 91       	ld	r30, X+
    b61c:	fc 91       	ld	r31, X
    b61e:	01 90       	ld	r0, Z+
    b620:	f0 81       	ld	r31, Z
    b622:	e0 2d       	mov	r30, r0
    b624:	c8 01       	movw	r24, r16
    b626:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    b628:	e9 81       	ldd	r30, Y+1	; 0x01
    b62a:	fa 81       	ldd	r31, Y+2	; 0x02
    b62c:	31 96       	adiw	r30, 0x01	; 1
    b62e:	fa 83       	std	Y+2, r31	; 0x02
    b630:	e9 83       	std	Y+1, r30	; 0x01
    b632:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    b634:	61 11       	cpse	r22, r1
    b636:	f0 cf       	rjmp	.-32     	; 0xb618 <_Z12processMCodei+0x3032>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    b638:	e4 eb       	ldi	r30, 0xB4	; 180
    b63a:	ff e0       	ldi	r31, 0x0F	; 15
    b63c:	64 91       	lpm	r22, Z
	while(ch)
    b63e:	66 23       	and	r22, r22
    b640:	a1 f0       	breq	.+40     	; 0xb66a <_Z12processMCodei+0x3084>
    b642:	fa 83       	std	Y+2, r31	; 0x02
    b644:	e9 83       	std	Y+1, r30	; 0x01
    b646:	08 e0       	ldi	r16, 0x08	; 8
    b648:	1a e0       	ldi	r17, 0x0A	; 10
    b64a:	d8 01       	movw	r26, r16
    b64c:	ed 91       	ld	r30, X+
    b64e:	fc 91       	ld	r31, X
    b650:	01 90       	ld	r0, Z+
    b652:	f0 81       	ld	r31, Z
    b654:	e0 2d       	mov	r30, r0
    b656:	c8 01       	movw	r24, r16
    b658:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    b65a:	e9 81       	ldd	r30, Y+1	; 0x01
    b65c:	fa 81       	ldd	r31, Y+2	; 0x02
    b65e:	31 96       	adiw	r30, 0x01	; 1
    b660:	fa 83       	std	Y+2, r31	; 0x02
    b662:	e9 83       	std	Y+1, r30	; 0x01
    b664:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    b666:	61 11       	cpse	r22, r1
    b668:	f0 cf       	rjmp	.-32     	; 0xb64a <_Z12processMCodei+0x3064>
					     break;
				     }
			     }
				 SERIAL_PGM(MSG_BEGIN);
				 SERIAL_PGM("M41");
				 SERIAL_PGMLN(MSG_TERMINATE);
    b66a:	88 e0       	ldi	r24, 0x08	; 8
    b66c:	9a e0       	ldi	r25, 0x0A	; 10
    b66e:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
				 SERIAL_PORT.flush();
    b672:	88 e0       	ldi	r24, 0x08	; 8
    b674:	9a e0       	ldi	r25, 0x0A	; 10
    b676:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    b67a:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		     }
	     }
	break;
	     
    case 42: //M42 - Create persistent digital pin, Write digital pin LOW P<pin> (This gives you a grounded pin)
	  pin_number = -1;
    b67e:	8f ef       	ldi	r24, 0xFF	; 255
    b680:	9f ef       	ldi	r25, 0xFF	; 255
    b682:	90 93 1d 13 	sts	0x131D, r25	; 0x80131d <pin_number+0x1>
    b686:	80 93 1c 13 	sts	0x131C, r24	; 0x80131c <pin_number>
	  if (code_seen('P')) {
    b68a:	80 e5       	ldi	r24, 0x50	; 80
    b68c:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    b690:	88 23       	and	r24, r24
    b692:	11 f4       	brne	.+4      	; 0xb698 <_Z12processMCodei+0x30b2>
    b694:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
        pin_number = code_value();
    b698:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    b69c:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    b6a0:	86 2f       	mov	r24, r22
    b6a2:	60 93 1c 13 	sts	0x131C, r22	; 0x80131c <pin_number>
    b6a6:	70 93 1d 13 	sts	0x131D, r23	; 0x80131d <pin_number+0x1>
		if( assignPin(pin_number) ) {
    b6aa:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_Z9assignPinh>
    b6ae:	88 23       	and	r24, r24
    b6b0:	09 f4       	brne	.+2      	; 0xb6b4 <_Z12processMCodei+0x30ce>
    b6b2:	8f c0       	rjmp	.+286    	; 0xb7d2 <_Z12processMCodei+0x31ec>
			dpin = new Digital(pin_number);
    b6b4:	82 e0       	ldi	r24, 0x02	; 2
    b6b6:	90 e0       	ldi	r25, 0x00	; 0
    b6b8:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    b6bc:	20 91 1c 13 	lds	r18, 0x131C	; 0x80131c <pin_number>

class Digital {
	public:
	uint8_t pin;
	uint8_t mode = INPUT; // default
	Digital(uint8_t spin) {
    b6c0:	dc 01       	movw	r26, r24
    b6c2:	11 96       	adiw	r26, 0x01	; 1
    b6c4:	1c 92       	st	X, r1
    b6c6:	11 97       	sbiw	r26, 0x01	; 1
		this->pin = spin;
    b6c8:	2c 93       	st	X, r18
    b6ca:	90 93 6d 14 	sts	0x146D, r25	; 0x80146d <dpin+0x1>
    b6ce:	80 93 6c 14 	sts	0x146C, r24	; 0x80146c <dpin>
			dpin->pinMode(OUTPUT);
    b6d2:	61 e0       	ldi	r22, 0x01	; 1
    b6d4:	0e 94 d6 39 	call	0x73ac	; 0x73ac <_ZN7Digital7pinModeEh>
			dpin->digitalWrite(LOW);
    b6d8:	60 e0       	ldi	r22, 0x00	; 0
    b6da:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <dpin>
    b6de:	90 91 6d 14 	lds	r25, 0x146D	; 0x80146d <dpin+0x1>
    b6e2:	0e 94 32 3a 	call	0x7464	; 0x7464 <_ZN7Digital12digitalWriteEh>
			for(int i = 0; i < 32; i++) {
				if(!pdigitals[i]) {
    b6e6:	80 91 3b 13 	lds	r24, 0x133B	; 0x80133b <pdigitals>
    b6ea:	90 91 3c 13 	lds	r25, 0x133C	; 0x80133c <pdigitals+0x1>
    b6ee:	89 2b       	or	r24, r25
    b6f0:	49 f0       	breq	.+18     	; 0xb704 <_Z12processMCodei+0x311e>
    b6f2:	ed e3       	ldi	r30, 0x3D	; 61
    b6f4:	f3 e1       	ldi	r31, 0x13	; 19
        pin_number = code_value();
		if( assignPin(pin_number) ) {
			dpin = new Digital(pin_number);
			dpin->pinMode(OUTPUT);
			dpin->digitalWrite(LOW);
			for(int i = 0; i < 32; i++) {
    b6f6:	81 e0       	ldi	r24, 0x01	; 1
    b6f8:	90 e0       	ldi	r25, 0x00	; 0
				if(!pdigitals[i]) {
    b6fa:	21 91       	ld	r18, Z+
    b6fc:	31 91       	ld	r19, Z+
    b6fe:	23 2b       	or	r18, r19
    b700:	79 f4       	brne	.+30     	; 0xb720 <_Z12processMCodei+0x313a>
    b702:	02 c0       	rjmp	.+4      	; 0xb708 <_Z12processMCodei+0x3122>
        pin_number = code_value();
		if( assignPin(pin_number) ) {
			dpin = new Digital(pin_number);
			dpin->pinMode(OUTPUT);
			dpin->digitalWrite(LOW);
			for(int i = 0; i < 32; i++) {
    b704:	80 e0       	ldi	r24, 0x00	; 0
    b706:	90 e0       	ldi	r25, 0x00	; 0
				if(!pdigitals[i]) {
					pdigitals[i] = dpin;
    b708:	88 0f       	add	r24, r24
    b70a:	99 1f       	adc	r25, r25
    b70c:	fc 01       	movw	r30, r24
    b70e:	e5 5c       	subi	r30, 0xC5	; 197
    b710:	fc 4e       	sbci	r31, 0xEC	; 236
    b712:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <dpin>
    b716:	90 91 6d 14 	lds	r25, 0x146D	; 0x80146d <dpin+0x1>
    b71a:	91 83       	std	Z+1, r25	; 0x01
    b71c:	80 83       	st	Z, r24
					break;
    b71e:	04 c0       	rjmp	.+8      	; 0xb728 <_Z12processMCodei+0x3142>
        pin_number = code_value();
		if( assignPin(pin_number) ) {
			dpin = new Digital(pin_number);
			dpin->pinMode(OUTPUT);
			dpin->digitalWrite(LOW);
			for(int i = 0; i < 32; i++) {
    b720:	01 96       	adiw	r24, 0x01	; 1
    b722:	80 32       	cpi	r24, 0x20	; 32
    b724:	91 05       	cpc	r25, r1
    b726:	49 f7       	brne	.-46     	; 0xb6fa <_Z12processMCodei+0x3114>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    b728:	e2 eb       	ldi	r30, 0xB2	; 178
    b72a:	ff e0       	ldi	r31, 0x0F	; 15
    b72c:	64 91       	lpm	r22, Z
	while(ch)
    b72e:	66 23       	and	r22, r22
    b730:	a1 f0       	breq	.+40     	; 0xb75a <_Z12processMCodei+0x3174>
    b732:	fa 83       	std	Y+2, r31	; 0x02
    b734:	e9 83       	std	Y+1, r30	; 0x01
    b736:	08 e0       	ldi	r16, 0x08	; 8
    b738:	1a e0       	ldi	r17, 0x0A	; 10
    b73a:	d8 01       	movw	r26, r16
    b73c:	ed 91       	ld	r30, X+
    b73e:	fc 91       	ld	r31, X
    b740:	01 90       	ld	r0, Z+
    b742:	f0 81       	ld	r31, Z
    b744:	e0 2d       	mov	r30, r0
    b746:	c8 01       	movw	r24, r16
    b748:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    b74a:	e9 81       	ldd	r30, Y+1	; 0x01
    b74c:	fa 81       	ldd	r31, Y+2	; 0x02
    b74e:	31 96       	adiw	r30, 0x01	; 1
    b750:	fa 83       	std	Y+2, r31	; 0x02
    b752:	e9 83       	std	Y+1, r30	; 0x01
    b754:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    b756:	61 11       	cpse	r22, r1
    b758:	f0 cf       	rjmp	.-32     	; 0xb73a <_Z12processMCodei+0x3154>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    b75a:	ee ea       	ldi	r30, 0xAE	; 174
    b75c:	ff e0       	ldi	r31, 0x0F	; 15
    b75e:	64 91       	lpm	r22, Z
	while(ch)
    b760:	66 23       	and	r22, r22
    b762:	a1 f0       	breq	.+40     	; 0xb78c <_Z12processMCodei+0x31a6>
    b764:	fa 83       	std	Y+2, r31	; 0x02
    b766:	e9 83       	std	Y+1, r30	; 0x01
    b768:	08 e0       	ldi	r16, 0x08	; 8
    b76a:	1a e0       	ldi	r17, 0x0A	; 10
    b76c:	d8 01       	movw	r26, r16
    b76e:	ed 91       	ld	r30, X+
    b770:	fc 91       	ld	r31, X
    b772:	01 90       	ld	r0, Z+
    b774:	f0 81       	ld	r31, Z
    b776:	e0 2d       	mov	r30, r0
    b778:	c8 01       	movw	r24, r16
    b77a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    b77c:	e9 81       	ldd	r30, Y+1	; 0x01
    b77e:	fa 81       	ldd	r31, Y+2	; 0x02
    b780:	31 96       	adiw	r30, 0x01	; 1
    b782:	fa 83       	std	Y+2, r31	; 0x02
    b784:	e9 83       	std	Y+1, r30	; 0x01
    b786:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    b788:	61 11       	cpse	r22, r1
    b78a:	f0 cf       	rjmp	.-32     	; 0xb76c <_Z12processMCodei+0x3186>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    b78c:	eb ea       	ldi	r30, 0xAB	; 171
    b78e:	ff e0       	ldi	r31, 0x0F	; 15
    b790:	64 91       	lpm	r22, Z
	while(ch)
    b792:	66 23       	and	r22, r22
    b794:	a1 f0       	breq	.+40     	; 0xb7be <_Z12processMCodei+0x31d8>
    b796:	fa 83       	std	Y+2, r31	; 0x02
    b798:	e9 83       	std	Y+1, r30	; 0x01
    b79a:	08 e0       	ldi	r16, 0x08	; 8
    b79c:	1a e0       	ldi	r17, 0x0A	; 10
    b79e:	d8 01       	movw	r26, r16
    b7a0:	ed 91       	ld	r30, X+
    b7a2:	fc 91       	ld	r31, X
    b7a4:	01 90       	ld	r0, Z+
    b7a6:	f0 81       	ld	r31, Z
    b7a8:	e0 2d       	mov	r30, r0
    b7aa:	c8 01       	movw	r24, r16
    b7ac:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    b7ae:	e9 81       	ldd	r30, Y+1	; 0x01
    b7b0:	fa 81       	ldd	r31, Y+2	; 0x02
    b7b2:	31 96       	adiw	r30, 0x01	; 1
    b7b4:	fa 83       	std	Y+2, r31	; 0x02
    b7b6:	e9 83       	std	Y+1, r30	; 0x01
    b7b8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    b7ba:	61 11       	cpse	r22, r1
    b7bc:	f0 cf       	rjmp	.-32     	; 0xb79e <_Z12processMCodei+0x31b8>
					break;
				}
			}
			SERIAL_PGM(MSG_BEGIN);
			SERIAL_PGM("M42");
			SERIAL_PGMLN(MSG_TERMINATE);
    b7be:	88 e0       	ldi	r24, 0x08	; 8
    b7c0:	9a e0       	ldi	r25, 0x0A	; 10
    b7c2:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
			SERIAL_PORT.flush();
    b7c6:	88 e0       	ldi	r24, 0x08	; 8
    b7c8:	9a e0       	ldi	r25, 0x0A	; 10
    b7ca:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    b7ce:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		} else {
			for(int i = 0; i < 32; i++) {
				if(pdigitals[i] && pdigitals[i]->pin == pin_number) {
    b7d2:	40 91 1c 13 	lds	r20, 0x131C	; 0x80131c <pin_number>
    b7d6:	50 91 1d 13 	lds	r21, 0x131D	; 0x80131d <pin_number+0x1>
    b7da:	ab e3       	ldi	r26, 0x3B	; 59
    b7dc:	b3 e1       	ldi	r27, 0x13	; 19
    b7de:	20 e0       	ldi	r18, 0x00	; 0
    b7e0:	30 e0       	ldi	r19, 0x00	; 0
    b7e2:	ed 91       	ld	r30, X+
    b7e4:	fd 91       	ld	r31, X+
    b7e6:	30 97       	sbiw	r30, 0x00	; 0
    b7e8:	09 f4       	brne	.+2      	; 0xb7ec <_Z12processMCodei+0x3206>
    b7ea:	d2 c0       	rjmp	.+420    	; 0xb990 <_Z12processMCodei+0x33aa>
    b7ec:	80 81       	ld	r24, Z
    b7ee:	90 e0       	ldi	r25, 0x00	; 0
    b7f0:	84 17       	cp	r24, r20
    b7f2:	95 07       	cpc	r25, r21
    b7f4:	09 f0       	breq	.+2      	; 0xb7f8 <_Z12processMCodei+0x3212>
    b7f6:	cc c0       	rjmp	.+408    	; 0xb990 <_Z12processMCodei+0x33aa>
					pdigitals[i]->setPin(pin_number);
					pdigitals[i]->pinMode(OUTPUT);
    b7f8:	f9 01       	movw	r30, r18
    b7fa:	ee 0f       	add	r30, r30
    b7fc:	ff 1f       	adc	r31, r31
    b7fe:	e5 5c       	subi	r30, 0xC5	; 197
    b800:	fc 4e       	sbci	r31, 0xEC	; 236
    b802:	01 90       	ld	r0, Z+
    b804:	f0 81       	ld	r31, Z
    b806:	e0 2d       	mov	r30, r0
	}
	
void setPin(uint8_t spin) { this->pin = spin; }
	
void pinMode(uint8_t pmode) {
	this->mode = pmode;
    b808:	81 e0       	ldi	r24, 0x01	; 1
    b80a:	81 83       	std	Z+1, r24	; 0x01
	uint8_t bit = digitalPinToBitMask(this->pin);
    b80c:	80 81       	ld	r24, Z
    b80e:	90 e0       	ldi	r25, 0x00	; 0
    b810:	fc 01       	movw	r30, r24
    b812:	ef 52       	subi	r30, 0x2F	; 47
    b814:	fd 4e       	sbci	r31, 0xED	; 237
    b816:	44 91       	lpm	r20, Z
	uint8_t port = digitalPinToPort(this->pin);
    b818:	fc 01       	movw	r30, r24
    b81a:	e9 5e       	subi	r30, 0xE9	; 233
    b81c:	fc 4e       	sbci	r31, 0xEC	; 236
    b81e:	84 91       	lpm	r24, Z
	volatile uint16_t *reg, *out;

	if (port == NOT_A_PIN) return;
    b820:	88 23       	and	r24, r24
    b822:	b9 f0       	breq	.+46     	; 0xb852 <_Z12processMCodei+0x326c>

	reg = portModeRegister(port);
    b824:	90 e0       	ldi	r25, 0x00	; 0
    b826:	88 0f       	add	r24, r24
    b828:	99 1f       	adc	r25, r25
    b82a:	fc 01       	movw	r30, r24
    b82c:	ef 56       	subi	r30, 0x6F	; 111
    b82e:	fc 4e       	sbci	r31, 0xEC	; 236
    b830:	a5 91       	lpm	r26, Z+
    b832:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    b834:	89 58       	subi	r24, 0x89	; 137
    b836:	9c 4e       	sbci	r25, 0xEC	; 236
    b838:	fc 01       	movw	r30, r24
    b83a:	85 91       	lpm	r24, Z+
    b83c:	94 91       	lpm	r25, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    b83e:	5f b7       	in	r21, 0x3f	; 63
                cli();
    b840:	f8 94       	cli
		*reg |= bit;
    b842:	8d 91       	ld	r24, X+
    b844:	9c 91       	ld	r25, X
    b846:	11 97       	sbiw	r26, 0x01	; 1
    b848:	84 2b       	or	r24, r20
    b84a:	11 96       	adiw	r26, 0x01	; 1
    b84c:	9c 93       	st	X, r25
    b84e:	8e 93       	st	-X, r24
		SREG = oldSREG;
    b850:	5f bf       	out	0x3f, r21	; 63
					pdigitals[i]->digitalWrite(LOW);
    b852:	f9 01       	movw	r30, r18
    b854:	ee 0f       	add	r30, r30
    b856:	ff 1f       	adc	r31, r31
    b858:	e5 5c       	subi	r30, 0xC5	; 197
    b85a:	fc 4e       	sbci	r31, 0xEC	; 236
	}
}

void digitalWrite(uint8_t val)
{
	uint8_t timer = digitalPinToTimer(this->pin);
    b85c:	01 90       	ld	r0, Z+
    b85e:	f0 81       	ld	r31, Z
    b860:	e0 2d       	mov	r30, r0
    b862:	80 81       	ld	r24, Z
    b864:	90 e0       	ldi	r25, 0x00	; 0
    b866:	fc 01       	movw	r30, r24
    b868:	e5 57       	subi	r30, 0x75	; 117
    b86a:	fd 4e       	sbci	r31, 0xED	; 237
    b86c:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(this->pin);
    b86e:	fc 01       	movw	r30, r24
    b870:	ef 52       	subi	r30, 0x2F	; 47
    b872:	fd 4e       	sbci	r31, 0xED	; 237
    b874:	34 91       	lpm	r19, Z
    b876:	3b 83       	std	Y+3, r19	; 0x03
	uint8_t port = digitalPinToPort(this->pin);
    b878:	fc 01       	movw	r30, r24
    b87a:	e9 5e       	subi	r30, 0xE9	; 233
    b87c:	fc 4e       	sbci	r31, 0xEC	; 236
    b87e:	44 91       	lpm	r20, Z
    b880:	49 83       	std	Y+1, r20	; 0x01
	volatile uint16_t *out;

	if (port == NOT_A_PIN) return;
    b882:	44 23       	and	r20, r20
    b884:	09 f4       	brne	.+2      	; 0xb888 <_Z12processMCodei+0x32a2>
    b886:	8a c0       	rjmp	.+276    	; 0xb99c <_Z12processMCodei+0x33b6>

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    b888:	22 23       	and	r18, r18
    b88a:	09 f4       	brne	.+2      	; 0xb88e <_Z12processMCodei+0x32a8>
    b88c:	67 c0       	rjmp	.+206    	; 0xb95c <_Z12processMCodei+0x3376>

// If we detect the pin is on a timer, we may need to defuse PWM output, 
// we need to turn pin off before doing a digital write.
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    b88e:	82 2f       	mov	r24, r18
    b890:	90 e0       	ldi	r25, 0x00	; 0
    b892:	fc 01       	movw	r30, r24
    b894:	31 97       	sbiw	r30, 0x01	; 1
    b896:	e0 31       	cpi	r30, 0x10	; 16
    b898:	f1 05       	cpc	r31, r1
    b89a:	08 f0       	brcs	.+2      	; 0xb89e <_Z12processMCodei+0x32b8>
    b89c:	5f c0       	rjmp	.+190    	; 0xb95c <_Z12processMCodei+0x3376>
    b89e:	88 27       	eor	r24, r24
    b8a0:	ed 57       	subi	r30, 0x7D	; 125
    b8a2:	fe 4f       	sbci	r31, 0xFE	; 254
    b8a4:	8f 4f       	sbci	r24, 0xFF	; 255
    b8a6:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
	{
		case TIMER0A: Timer0.stopChannel(CHANNEL_A); break;
    b8aa:	60 e0       	ldi	r22, 0x00	; 0
    b8ac:	84 e7       	ldi	r24, 0x74	; 116
    b8ae:	97 e1       	ldi	r25, 0x17	; 23
    b8b0:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b8b4:	53 c0       	rjmp	.+166    	; 0xb95c <_Z12processMCodei+0x3376>
		case TIMER0B: Timer0.stopChannel(CHANNEL_B); break;
    b8b6:	61 e0       	ldi	r22, 0x01	; 1
    b8b8:	84 e7       	ldi	r24, 0x74	; 116
    b8ba:	97 e1       	ldi	r25, 0x17	; 23
    b8bc:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b8c0:	4d c0       	rjmp	.+154    	; 0xb95c <_Z12processMCodei+0x3376>
	
		case TIMER1A: Timer1.stopChannel(CHANNEL_A); break;
    b8c2:	60 e0       	ldi	r22, 0x00	; 0
    b8c4:	85 e4       	ldi	r24, 0x45	; 69
    b8c6:	97 e1       	ldi	r25, 0x17	; 23
    b8c8:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b8cc:	47 c0       	rjmp	.+142    	; 0xb95c <_Z12processMCodei+0x3376>
		case TIMER1B: Timer1.stopChannel(CHANNEL_B); break;
    b8ce:	61 e0       	ldi	r22, 0x01	; 1
    b8d0:	85 e4       	ldi	r24, 0x45	; 69
    b8d2:	97 e1       	ldi	r25, 0x17	; 23
    b8d4:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b8d8:	41 c0       	rjmp	.+130    	; 0xb95c <_Z12processMCodei+0x3376>
		
		case TIMER2A: Timer2.stopChannel(CHANNEL_A); break;
    b8da:	60 e0       	ldi	r22, 0x00	; 0
    b8dc:	86 e1       	ldi	r24, 0x16	; 22
    b8de:	97 e1       	ldi	r25, 0x17	; 23
    b8e0:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b8e4:	3b c0       	rjmp	.+118    	; 0xb95c <_Z12processMCodei+0x3376>
		case TIMER2B: Timer2.stopChannel(CHANNEL_B); break;
    b8e6:	61 e0       	ldi	r22, 0x01	; 1
    b8e8:	86 e1       	ldi	r24, 0x16	; 22
    b8ea:	97 e1       	ldi	r25, 0x17	; 23
    b8ec:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b8f0:	35 c0       	rjmp	.+106    	; 0xb95c <_Z12processMCodei+0x3376>
	
		case TIMER3A: Timer3.stopChannel(CHANNEL_A); break;
    b8f2:	60 e0       	ldi	r22, 0x00	; 0
    b8f4:	87 ee       	ldi	r24, 0xE7	; 231
    b8f6:	96 e1       	ldi	r25, 0x16	; 22
    b8f8:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b8fc:	2f c0       	rjmp	.+94     	; 0xb95c <_Z12processMCodei+0x3376>
		case TIMER3B: Timer3.stopChannel(CHANNEL_B); break; 
    b8fe:	61 e0       	ldi	r22, 0x01	; 1
    b900:	87 ee       	ldi	r24, 0xE7	; 231
    b902:	96 e1       	ldi	r25, 0x16	; 22
    b904:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b908:	29 c0       	rjmp	.+82     	; 0xb95c <_Z12processMCodei+0x3376>
		case TIMER3C: Timer3.stopChannel(CHANNEL_C); break;
    b90a:	62 e0       	ldi	r22, 0x02	; 2
    b90c:	87 ee       	ldi	r24, 0xE7	; 231
    b90e:	96 e1       	ldi	r25, 0x16	; 22
    b910:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b914:	23 c0       	rjmp	.+70     	; 0xb95c <_Z12processMCodei+0x3376>
		
		case TIMER4A: Timer4.stopChannel(CHANNEL_A); break;
    b916:	60 e0       	ldi	r22, 0x00	; 0
    b918:	88 eb       	ldi	r24, 0xB8	; 184
    b91a:	96 e1       	ldi	r25, 0x16	; 22
    b91c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b920:	1d c0       	rjmp	.+58     	; 0xb95c <_Z12processMCodei+0x3376>
		case TIMER4B: Timer4.stopChannel(CHANNEL_B); break; 
    b922:	61 e0       	ldi	r22, 0x01	; 1
    b924:	88 eb       	ldi	r24, 0xB8	; 184
    b926:	96 e1       	ldi	r25, 0x16	; 22
    b928:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b92c:	17 c0       	rjmp	.+46     	; 0xb95c <_Z12processMCodei+0x3376>
		case TIMER4C: Timer4.stopChannel(CHANNEL_C); break;
    b92e:	62 e0       	ldi	r22, 0x02	; 2
    b930:	88 eb       	ldi	r24, 0xB8	; 184
    b932:	96 e1       	ldi	r25, 0x16	; 22
    b934:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b938:	11 c0       	rjmp	.+34     	; 0xb95c <_Z12processMCodei+0x3376>
		
		case TIMER5A: Timer5.stopChannel(CHANNEL_A); break;
    b93a:	60 e0       	ldi	r22, 0x00	; 0
    b93c:	89 e8       	ldi	r24, 0x89	; 137
    b93e:	96 e1       	ldi	r25, 0x16	; 22
    b940:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b944:	0b c0       	rjmp	.+22     	; 0xb95c <_Z12processMCodei+0x3376>
		case TIMER5B: Timer5.stopChannel(CHANNEL_B); break; 
    b946:	61 e0       	ldi	r22, 0x01	; 1
    b948:	89 e8       	ldi	r24, 0x89	; 137
    b94a:	96 e1       	ldi	r25, 0x16	; 22
    b94c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    b950:	05 c0       	rjmp	.+10     	; 0xb95c <_Z12processMCodei+0x3376>
		case TIMER5C: Timer5.stopChannel(CHANNEL_C); break;
    b952:	62 e0       	ldi	r22, 0x02	; 2
    b954:	89 e8       	ldi	r24, 0x89	; 137
    b956:	96 e1       	ldi	r25, 0x16	; 22
    b958:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
	if (port == NOT_A_PIN) return;

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    b95c:	59 81       	ldd	r21, Y+1	; 0x01
    b95e:	e5 2f       	mov	r30, r21
    b960:	f0 e0       	ldi	r31, 0x00	; 0
    b962:	ee 0f       	add	r30, r30
    b964:	ff 1f       	adc	r31, r31
    b966:	e9 58       	subi	r30, 0x89	; 137
    b968:	fc 4e       	sbci	r31, 0xEC	; 236
    b96a:	a5 91       	lpm	r26, Z+
    b96c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    b96e:	4f b7       	in	r20, 0x3f	; 63
	cli();
    b970:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    b972:	2d 91       	ld	r18, X+
    b974:	3c 91       	ld	r19, X
    b976:	11 97       	sbiw	r26, 0x01	; 1
    b978:	6b 81       	ldd	r22, Y+3	; 0x03
    b97a:	86 2f       	mov	r24, r22
    b97c:	90 e0       	ldi	r25, 0x00	; 0
    b97e:	80 95       	com	r24
    b980:	90 95       	com	r25
    b982:	82 23       	and	r24, r18
    b984:	93 23       	and	r25, r19
    b986:	11 96       	adiw	r26, 0x01	; 1
    b988:	9c 93       	st	X, r25
    b98a:	8e 93       	st	-X, r24
	} else {
		*out |= bit;
	}

	SREG = oldSREG;
    b98c:	4f bf       	out	0x3f, r20	; 63
    b98e:	06 c0       	rjmp	.+12     	; 0xb99c <_Z12processMCodei+0x33b6>
			SERIAL_PGM(MSG_BEGIN);
			SERIAL_PGM("M42");
			SERIAL_PGMLN(MSG_TERMINATE);
			SERIAL_PORT.flush();
		} else {
			for(int i = 0; i < 32; i++) {
    b990:	2f 5f       	subi	r18, 0xFF	; 255
    b992:	3f 4f       	sbci	r19, 0xFF	; 255
    b994:	20 32       	cpi	r18, 0x20	; 32
    b996:	31 05       	cpc	r19, r1
    b998:	09 f0       	breq	.+2      	; 0xb99c <_Z12processMCodei+0x33b6>
    b99a:	23 cf       	rjmp	.-442    	; 0xb7e2 <_Z12processMCodei+0x31fc>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    b99c:	e9 ea       	ldi	r30, 0xA9	; 169
    b99e:	ff e0       	ldi	r31, 0x0F	; 15
    b9a0:	64 91       	lpm	r22, Z
	while(ch)
    b9a2:	66 23       	and	r22, r22
    b9a4:	a1 f0       	breq	.+40     	; 0xb9ce <_Z12processMCodei+0x33e8>
    b9a6:	fa 83       	std	Y+2, r31	; 0x02
    b9a8:	e9 83       	std	Y+1, r30	; 0x01
    b9aa:	08 e0       	ldi	r16, 0x08	; 8
    b9ac:	1a e0       	ldi	r17, 0x0A	; 10
    b9ae:	d8 01       	movw	r26, r16
    b9b0:	ed 91       	ld	r30, X+
    b9b2:	fc 91       	ld	r31, X
    b9b4:	01 90       	ld	r0, Z+
    b9b6:	f0 81       	ld	r31, Z
    b9b8:	e0 2d       	mov	r30, r0
    b9ba:	c8 01       	movw	r24, r16
    b9bc:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    b9be:	e9 81       	ldd	r30, Y+1	; 0x01
    b9c0:	fa 81       	ldd	r31, Y+2	; 0x02
    b9c2:	31 96       	adiw	r30, 0x01	; 1
    b9c4:	fa 83       	std	Y+2, r31	; 0x02
    b9c6:	e9 83       	std	Y+1, r30	; 0x01
    b9c8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    b9ca:	61 11       	cpse	r22, r1
    b9cc:	f0 cf       	rjmp	.-32     	; 0xb9ae <_Z12processMCodei+0x33c8>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    b9ce:	e5 ea       	ldi	r30, 0xA5	; 165
    b9d0:	ff e0       	ldi	r31, 0x0F	; 15
    b9d2:	64 91       	lpm	r22, Z
	while(ch)
    b9d4:	66 23       	and	r22, r22
    b9d6:	a1 f0       	breq	.+40     	; 0xba00 <_Z12processMCodei+0x341a>
    b9d8:	fa 83       	std	Y+2, r31	; 0x02
    b9da:	e9 83       	std	Y+1, r30	; 0x01
    b9dc:	08 e0       	ldi	r16, 0x08	; 8
    b9de:	1a e0       	ldi	r17, 0x0A	; 10
    b9e0:	d8 01       	movw	r26, r16
    b9e2:	ed 91       	ld	r30, X+
    b9e4:	fc 91       	ld	r31, X
    b9e6:	01 90       	ld	r0, Z+
    b9e8:	f0 81       	ld	r31, Z
    b9ea:	e0 2d       	mov	r30, r0
    b9ec:	c8 01       	movw	r24, r16
    b9ee:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    b9f0:	e9 81       	ldd	r30, Y+1	; 0x01
    b9f2:	fa 81       	ldd	r31, Y+2	; 0x02
    b9f4:	31 96       	adiw	r30, 0x01	; 1
    b9f6:	fa 83       	std	Y+2, r31	; 0x02
    b9f8:	e9 83       	std	Y+1, r30	; 0x01
    b9fa:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    b9fc:	61 11       	cpse	r22, r1
    b9fe:	f0 cf       	rjmp	.-32     	; 0xb9e0 <_Z12processMCodei+0x33fa>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ba00:	e2 ea       	ldi	r30, 0xA2	; 162
    ba02:	ff e0       	ldi	r31, 0x0F	; 15
    ba04:	64 91       	lpm	r22, Z
	while(ch)
    ba06:	66 23       	and	r22, r22
    ba08:	a1 f0       	breq	.+40     	; 0xba32 <_Z12processMCodei+0x344c>
    ba0a:	fa 83       	std	Y+2, r31	; 0x02
    ba0c:	e9 83       	std	Y+1, r30	; 0x01
    ba0e:	08 e0       	ldi	r16, 0x08	; 8
    ba10:	1a e0       	ldi	r17, 0x0A	; 10
    ba12:	d8 01       	movw	r26, r16
    ba14:	ed 91       	ld	r30, X+
    ba16:	fc 91       	ld	r31, X
    ba18:	01 90       	ld	r0, Z+
    ba1a:	f0 81       	ld	r31, Z
    ba1c:	e0 2d       	mov	r30, r0
    ba1e:	c8 01       	movw	r24, r16
    ba20:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ba22:	e9 81       	ldd	r30, Y+1	; 0x01
    ba24:	fa 81       	ldd	r31, Y+2	; 0x02
    ba26:	31 96       	adiw	r30, 0x01	; 1
    ba28:	fa 83       	std	Y+2, r31	; 0x02
    ba2a:	e9 83       	std	Y+1, r30	; 0x01
    ba2c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ba2e:	61 11       	cpse	r22, r1
    ba30:	f0 cf       	rjmp	.-32     	; 0xba12 <_Z12processMCodei+0x342c>
					break;
				}
			}
			SERIAL_PGM(MSG_BEGIN);
			SERIAL_PGM("M42");
			SERIAL_PGMLN(MSG_TERMINATE);
    ba32:	88 e0       	ldi	r24, 0x08	; 8
    ba34:	9a e0       	ldi	r25, 0x0A	; 10
    ba36:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
			SERIAL_PORT.flush();
    ba3a:	88 e0       	ldi	r24, 0x08	; 8
    ba3c:	9a e0       	ldi	r25, 0x0A	; 10
    ba3e:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    ba42:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
	  }
     break;
	 
	
	case 44: // M44 P<pin> [U] - -Read digital pin with optional pullup
        pin_number = -1;
    ba46:	8f ef       	ldi	r24, 0xFF	; 255
    ba48:	9f ef       	ldi	r25, 0xFF	; 255
    ba4a:	90 93 1d 13 	sts	0x131D, r25	; 0x80131d <pin_number+0x1>
    ba4e:	80 93 1c 13 	sts	0x131C, r24	; 0x80131c <pin_number>
        if (code_seen('P')) {
    ba52:	80 e5       	ldi	r24, 0x50	; 80
    ba54:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    ba58:	88 23       	and	r24, r24
    ba5a:	41 f0       	breq	.+16     	; 0xba6c <_Z12processMCodei+0x3486>
          pin_number = code_value();
    ba5c:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    ba60:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    ba64:	70 93 1d 13 	sts	0x131D, r23	; 0x80131d <pin_number+0x1>
    ba68:	60 93 1c 13 	sts	0x131C, r22	; 0x80131c <pin_number>
		}
    	if( assignPin(pin_number) ) {
    ba6c:	80 91 1c 13 	lds	r24, 0x131C	; 0x80131c <pin_number>
    ba70:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_Z9assignPinh>
    ba74:	88 23       	and	r24, r24
    ba76:	11 f4       	brne	.+4      	; 0xba7c <_Z12processMCodei+0x3496>
    ba78:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			dpin = new Digital(pin_number);
    ba7c:	82 e0       	ldi	r24, 0x02	; 2
    ba7e:	90 e0       	ldi	r25, 0x00	; 0
    ba80:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    ba84:	20 91 1c 13 	lds	r18, 0x131C	; 0x80131c <pin_number>

class Digital {
	public:
	uint8_t pin;
	uint8_t mode = INPUT; // default
	Digital(uint8_t spin) {
    ba88:	dc 01       	movw	r26, r24
    ba8a:	11 96       	adiw	r26, 0x01	; 1
    ba8c:	1c 92       	st	X, r1
    ba8e:	11 97       	sbiw	r26, 0x01	; 1
		this->pin = spin;
    ba90:	2c 93       	st	X, r18
    ba92:	90 93 6d 14 	sts	0x146D, r25	; 0x80146d <dpin+0x1>
    ba96:	80 93 6c 14 	sts	0x146C, r24	; 0x80146c <dpin>
			if(code_seen('U')) {
    ba9a:	85 e5       	ldi	r24, 0x55	; 85
    ba9c:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    baa0:	88 23       	and	r24, r24
    baa2:	39 f0       	breq	.+14     	; 0xbab2 <_Z12processMCodei+0x34cc>
				dpin->pinMode(INPUT_PULLUP);
    baa4:	62 e0       	ldi	r22, 0x02	; 2
    baa6:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <dpin>
    baaa:	90 91 6d 14 	lds	r25, 0x146D	; 0x80146d <dpin+0x1>
    baae:	0e 94 d6 39 	call	0x73ac	; 0x73ac <_ZN7Digital7pinModeEh>
	SREG = oldSREG;
}

int digitalRead()
{
	uint8_t timer = digitalPinToTimer(this->pin);
    bab2:	e0 91 6c 14 	lds	r30, 0x146C	; 0x80146c <dpin>
    bab6:	f0 91 6d 14 	lds	r31, 0x146D	; 0x80146d <dpin+0x1>
    baba:	80 81       	ld	r24, Z
    babc:	90 e0       	ldi	r25, 0x00	; 0
    babe:	fc 01       	movw	r30, r24
    bac0:	e5 57       	subi	r30, 0x75	; 117
    bac2:	fd 4e       	sbci	r31, 0xED	; 237
    bac4:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(this->pin);
    bac6:	fc 01       	movw	r30, r24
    bac8:	ef 52       	subi	r30, 0x2F	; 47
    baca:	fd 4e       	sbci	r31, 0xED	; 237
    bacc:	b4 91       	lpm	r27, Z
    bace:	bb 83       	std	Y+3, r27	; 0x03
	uint8_t port = digitalPinToPort(this->pin);
    bad0:	fc 01       	movw	r30, r24
    bad2:	e9 5e       	subi	r30, 0xE9	; 233
    bad4:	fc 4e       	sbci	r31, 0xEC	; 236
    bad6:	34 91       	lpm	r19, Z
    bad8:	39 83       	std	Y+1, r19	; 0x01

	if (port == NOT_A_PIN) return LOW;
    bada:	33 23       	and	r19, r19
    badc:	09 f4       	brne	.+2      	; 0xbae0 <_Z12processMCodei+0x34fa>
    bade:	83 c0       	rjmp	.+262    	; 0xbbe6 <_Z12processMCodei+0x3600>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    bae0:	22 23       	and	r18, r18
    bae2:	09 f4       	brne	.+2      	; 0xbae6 <_Z12processMCodei+0x3500>
    bae4:	67 c0       	rjmp	.+206    	; 0xbbb4 <_Z12processMCodei+0x35ce>

// If we detect the pin is on a timer, we may need to defuse PWM output, 
// we need to turn pin off before doing a digital write.
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    bae6:	82 2f       	mov	r24, r18
    bae8:	90 e0       	ldi	r25, 0x00	; 0
    baea:	fc 01       	movw	r30, r24
    baec:	31 97       	sbiw	r30, 0x01	; 1
    baee:	e0 31       	cpi	r30, 0x10	; 16
    baf0:	f1 05       	cpc	r31, r1
    baf2:	08 f0       	brcs	.+2      	; 0xbaf6 <_Z12processMCodei+0x3510>
    baf4:	5f c0       	rjmp	.+190    	; 0xbbb4 <_Z12processMCodei+0x35ce>
    baf6:	88 27       	eor	r24, r24
    baf8:	ed 56       	subi	r30, 0x6D	; 109
    bafa:	fe 4f       	sbci	r31, 0xFE	; 254
    bafc:	8f 4f       	sbci	r24, 0xFF	; 255
    bafe:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
	{
		case TIMER0A: Timer0.stopChannel(CHANNEL_A); break;
    bb02:	60 e0       	ldi	r22, 0x00	; 0
    bb04:	84 e7       	ldi	r24, 0x74	; 116
    bb06:	97 e1       	ldi	r25, 0x17	; 23
    bb08:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    bb0c:	53 c0       	rjmp	.+166    	; 0xbbb4 <_Z12processMCodei+0x35ce>
		case TIMER0B: Timer0.stopChannel(CHANNEL_B); break;
    bb0e:	61 e0       	ldi	r22, 0x01	; 1
    bb10:	84 e7       	ldi	r24, 0x74	; 116
    bb12:	97 e1       	ldi	r25, 0x17	; 23
    bb14:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    bb18:	4d c0       	rjmp	.+154    	; 0xbbb4 <_Z12processMCodei+0x35ce>
	
		case TIMER1A: Timer1.stopChannel(CHANNEL_A); break;
    bb1a:	60 e0       	ldi	r22, 0x00	; 0
    bb1c:	85 e4       	ldi	r24, 0x45	; 69
    bb1e:	97 e1       	ldi	r25, 0x17	; 23
    bb20:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    bb24:	47 c0       	rjmp	.+142    	; 0xbbb4 <_Z12processMCodei+0x35ce>
		case TIMER1B: Timer1.stopChannel(CHANNEL_B); break;
    bb26:	61 e0       	ldi	r22, 0x01	; 1
    bb28:	85 e4       	ldi	r24, 0x45	; 69
    bb2a:	97 e1       	ldi	r25, 0x17	; 23
    bb2c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    bb30:	41 c0       	rjmp	.+130    	; 0xbbb4 <_Z12processMCodei+0x35ce>
		
		case TIMER2A: Timer2.stopChannel(CHANNEL_A); break;
    bb32:	60 e0       	ldi	r22, 0x00	; 0
    bb34:	86 e1       	ldi	r24, 0x16	; 22
    bb36:	97 e1       	ldi	r25, 0x17	; 23
    bb38:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    bb3c:	3b c0       	rjmp	.+118    	; 0xbbb4 <_Z12processMCodei+0x35ce>
		case TIMER2B: Timer2.stopChannel(CHANNEL_B); break;
    bb3e:	61 e0       	ldi	r22, 0x01	; 1
    bb40:	86 e1       	ldi	r24, 0x16	; 22
    bb42:	97 e1       	ldi	r25, 0x17	; 23
    bb44:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    bb48:	35 c0       	rjmp	.+106    	; 0xbbb4 <_Z12processMCodei+0x35ce>
	
		case TIMER3A: Timer3.stopChannel(CHANNEL_A); break;
    bb4a:	60 e0       	ldi	r22, 0x00	; 0
    bb4c:	87 ee       	ldi	r24, 0xE7	; 231
    bb4e:	96 e1       	ldi	r25, 0x16	; 22
    bb50:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    bb54:	2f c0       	rjmp	.+94     	; 0xbbb4 <_Z12processMCodei+0x35ce>
		case TIMER3B: Timer3.stopChannel(CHANNEL_B); break; 
    bb56:	61 e0       	ldi	r22, 0x01	; 1
    bb58:	87 ee       	ldi	r24, 0xE7	; 231
    bb5a:	96 e1       	ldi	r25, 0x16	; 22
    bb5c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    bb60:	29 c0       	rjmp	.+82     	; 0xbbb4 <_Z12processMCodei+0x35ce>
		case TIMER3C: Timer3.stopChannel(CHANNEL_C); break;
    bb62:	62 e0       	ldi	r22, 0x02	; 2
    bb64:	87 ee       	ldi	r24, 0xE7	; 231
    bb66:	96 e1       	ldi	r25, 0x16	; 22
    bb68:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    bb6c:	23 c0       	rjmp	.+70     	; 0xbbb4 <_Z12processMCodei+0x35ce>
		
		case TIMER4A: Timer4.stopChannel(CHANNEL_A); break;
    bb6e:	60 e0       	ldi	r22, 0x00	; 0
    bb70:	88 eb       	ldi	r24, 0xB8	; 184
    bb72:	96 e1       	ldi	r25, 0x16	; 22
    bb74:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    bb78:	1d c0       	rjmp	.+58     	; 0xbbb4 <_Z12processMCodei+0x35ce>
		case TIMER4B: Timer4.stopChannel(CHANNEL_B); break; 
    bb7a:	61 e0       	ldi	r22, 0x01	; 1
    bb7c:	88 eb       	ldi	r24, 0xB8	; 184
    bb7e:	96 e1       	ldi	r25, 0x16	; 22
    bb80:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    bb84:	17 c0       	rjmp	.+46     	; 0xbbb4 <_Z12processMCodei+0x35ce>
		case TIMER4C: Timer4.stopChannel(CHANNEL_C); break;
    bb86:	62 e0       	ldi	r22, 0x02	; 2
    bb88:	88 eb       	ldi	r24, 0xB8	; 184
    bb8a:	96 e1       	ldi	r25, 0x16	; 22
    bb8c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    bb90:	11 c0       	rjmp	.+34     	; 0xbbb4 <_Z12processMCodei+0x35ce>
		
		case TIMER5A: Timer5.stopChannel(CHANNEL_A); break;
    bb92:	60 e0       	ldi	r22, 0x00	; 0
    bb94:	89 e8       	ldi	r24, 0x89	; 137
    bb96:	96 e1       	ldi	r25, 0x16	; 22
    bb98:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    bb9c:	0b c0       	rjmp	.+22     	; 0xbbb4 <_Z12processMCodei+0x35ce>
		case TIMER5B: Timer5.stopChannel(CHANNEL_B); break; 
    bb9e:	61 e0       	ldi	r22, 0x01	; 1
    bba0:	89 e8       	ldi	r24, 0x89	; 137
    bba2:	96 e1       	ldi	r25, 0x16	; 22
    bba4:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
    bba8:	05 c0       	rjmp	.+10     	; 0xbbb4 <_Z12processMCodei+0x35ce>
		case TIMER5C: Timer5.stopChannel(CHANNEL_C); break;
    bbaa:	62 e0       	ldi	r22, 0x02	; 2
    bbac:	89 e8       	ldi	r24, 0x89	; 137
    bbae:	96 e1       	ldi	r25, 0x16	; 22
    bbb0:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    bbb4:	49 81       	ldd	r20, Y+1	; 0x01
    bbb6:	e4 2f       	mov	r30, r20
    bbb8:	f0 e0       	ldi	r31, 0x00	; 0
    bbba:	ee 0f       	add	r30, r30
    bbbc:	ff 1f       	adc	r31, r31
    bbbe:	e3 5a       	subi	r30, 0xA3	; 163
    bbc0:	fc 4e       	sbci	r31, 0xEC	; 236
    bbc2:	a5 91       	lpm	r26, Z+
    bbc4:	b4 91       	lpm	r27, Z
    bbc6:	8d 91       	ld	r24, X+
    bbc8:	9c 91       	ld	r25, X
{
	uint8_t timer = digitalPinToTimer(this->pin);
	uint8_t bit = digitalPinToBitMask(this->pin);
	uint8_t port = digitalPinToPort(this->pin);

	if (port == NOT_A_PIN) return LOW;
    bbca:	5b 81       	ldd	r21, Y+3	; 0x03
    bbcc:	25 2f       	mov	r18, r21
    bbce:	30 e0       	ldi	r19, 0x00	; 0
    bbd0:	82 23       	and	r24, r18
    bbd2:	93 23       	and	r25, r19
    bbd4:	61 e0       	ldi	r22, 0x01	; 1
    bbd6:	6b 83       	std	Y+3, r22	; 0x03
    bbd8:	19 82       	std	Y+1, r1	; 0x01
    bbda:	89 2b       	or	r24, r25
    bbdc:	09 f4       	brne	.+2      	; 0xbbe0 <_Z12processMCodei+0x35fa>
    bbde:	1b 82       	std	Y+3, r1	; 0x03
    bbe0:	eb 80       	ldd	r14, Y+3	; 0x03
    bbe2:	f9 80       	ldd	r15, Y+1	; 0x01
    bbe4:	02 c0       	rjmp	.+4      	; 0xbbea <_Z12processMCodei+0x3604>
    bbe6:	e1 2c       	mov	r14, r1
    bbe8:	f1 2c       	mov	r15, r1
			}
			int res = dpin->digitalRead();
			unassignPin(pin_number); // reset it since this is a one-shot
    bbea:	80 91 1c 13 	lds	r24, 0x131C	; 0x80131c <pin_number>
    bbee:	0e 94 80 1c 	call	0x3900	; 0x3900 <_Z11unassignPinh>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    bbf2:	e0 ea       	ldi	r30, 0xA0	; 160
    bbf4:	ff e0       	ldi	r31, 0x0F	; 15
    bbf6:	64 91       	lpm	r22, Z
	while(ch)
    bbf8:	66 23       	and	r22, r22
    bbfa:	89 f0       	breq	.+34     	; 0xbc1e <_Z12processMCodei+0x3638>
    bbfc:	8f 01       	movw	r16, r30
    bbfe:	a8 e0       	ldi	r26, 0x08	; 8
    bc00:	ba e0       	ldi	r27, 0x0A	; 10
    bc02:	ed 91       	ld	r30, X+
    bc04:	fc 91       	ld	r31, X
    bc06:	11 97       	sbiw	r26, 0x01	; 1
    bc08:	01 90       	ld	r0, Z+
    bc0a:	f0 81       	ld	r31, Z
    bc0c:	e0 2d       	mov	r30, r0
    bc0e:	cd 01       	movw	r24, r26
    bc10:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    bc12:	0f 5f       	subi	r16, 0xFF	; 255
    bc14:	1f 4f       	sbci	r17, 0xFF	; 255
    bc16:	f8 01       	movw	r30, r16
    bc18:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    bc1a:	61 11       	cpse	r22, r1
    bc1c:	f0 cf       	rjmp	.-32     	; 0xbbfe <_Z12processMCodei+0x3618>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    bc1e:	e5 e9       	ldi	r30, 0x95	; 149
    bc20:	ff e0       	ldi	r31, 0x0F	; 15
    bc22:	64 91       	lpm	r22, Z
	while(ch)
    bc24:	66 23       	and	r22, r22
    bc26:	89 f0       	breq	.+34     	; 0xbc4a <_Z12processMCodei+0x3664>
    bc28:	8f 01       	movw	r16, r30
    bc2a:	a8 e0       	ldi	r26, 0x08	; 8
    bc2c:	ba e0       	ldi	r27, 0x0A	; 10
    bc2e:	ed 91       	ld	r30, X+
    bc30:	fc 91       	ld	r31, X
    bc32:	11 97       	sbiw	r26, 0x01	; 1
    bc34:	01 90       	ld	r0, Z+
    bc36:	f0 81       	ld	r31, Z
    bc38:	e0 2d       	mov	r30, r0
    bc3a:	cd 01       	movw	r24, r26
    bc3c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    bc3e:	0f 5f       	subi	r16, 0xFF	; 255
    bc40:	1f 4f       	sbci	r17, 0xFF	; 255
    bc42:	f8 01       	movw	r30, r16
    bc44:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    bc46:	61 11       	cpse	r22, r1
    bc48:	f0 cf       	rjmp	.-32     	; 0xbc2a <_Z12processMCodei+0x3644>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    bc4a:	e3 e9       	ldi	r30, 0x93	; 147
    bc4c:	ff e0       	ldi	r31, 0x0F	; 15
    bc4e:	64 91       	lpm	r22, Z
	while(ch)
    bc50:	66 23       	and	r22, r22
    bc52:	89 f0       	breq	.+34     	; 0xbc76 <_Z12processMCodei+0x3690>
    bc54:	8f 01       	movw	r16, r30
    bc56:	a8 e0       	ldi	r26, 0x08	; 8
    bc58:	ba e0       	ldi	r27, 0x0A	; 10
    bc5a:	ed 91       	ld	r30, X+
    bc5c:	fc 91       	ld	r31, X
    bc5e:	11 97       	sbiw	r26, 0x01	; 1
    bc60:	01 90       	ld	r0, Z+
    bc62:	f0 81       	ld	r31, Z
    bc64:	e0 2d       	mov	r30, r0
    bc66:	cd 01       	movw	r24, r26
    bc68:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    bc6a:	0f 5f       	subi	r16, 0xFF	; 255
    bc6c:	1f 4f       	sbci	r17, 0xFF	; 255
    bc6e:	f8 01       	movw	r30, r16
    bc70:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    bc72:	61 11       	cpse	r22, r1
    bc74:	f0 cf       	rjmp	.-32     	; 0xbc56 <_Z12processMCodei+0x3670>
			SERIAL_PGM(MSG_BEGIN);
			SERIAL_PGM(digitalPinHdr);
			SERIAL_PGMLN(MSG_DELIMIT);
    bc76:	88 e0       	ldi	r24, 0x08	; 8
    bc78:	9a e0       	ldi	r25, 0x0A	; 10
    bc7a:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    bc7e:	e0 e9       	ldi	r30, 0x90	; 144
    bc80:	ff e0       	ldi	r31, 0x0F	; 15
    bc82:	64 91       	lpm	r22, Z
	while(ch)
    bc84:	66 23       	and	r22, r22
    bc86:	89 f0       	breq	.+34     	; 0xbcaa <_Z12processMCodei+0x36c4>
    bc88:	8f 01       	movw	r16, r30
    bc8a:	a8 e0       	ldi	r26, 0x08	; 8
    bc8c:	ba e0       	ldi	r27, 0x0A	; 10
    bc8e:	ed 91       	ld	r30, X+
    bc90:	fc 91       	ld	r31, X
    bc92:	11 97       	sbiw	r26, 0x01	; 1
    bc94:	01 90       	ld	r0, Z+
    bc96:	f0 81       	ld	r31, Z
    bc98:	e0 2d       	mov	r30, r0
    bc9a:	cd 01       	movw	r24, r26
    bc9c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    bc9e:	0f 5f       	subi	r16, 0xFF	; 255
    bca0:	1f 4f       	sbci	r17, 0xFF	; 255
    bca2:	f8 01       	movw	r30, r16
    bca4:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    bca6:	61 11       	cpse	r22, r1
    bca8:	f0 cf       	rjmp	.-32     	; 0xbc8a <_Z12processMCodei+0x36a4>
			SERIAL_PGM("1 ");
			SERIAL_PORT.println(pin_number);
    bcaa:	60 91 1c 13 	lds	r22, 0x131C	; 0x80131c <pin_number>
    bcae:	70 91 1d 13 	lds	r23, 0x131D	; 0x80131d <pin_number+0x1>
    bcb2:	4a e0       	ldi	r20, 0x0A	; 10
    bcb4:	50 e0       	ldi	r21, 0x00	; 0
    bcb6:	88 e0       	ldi	r24, 0x08	; 8
    bcb8:	9a e0       	ldi	r25, 0x0A	; 10
    bcba:	0e 94 ab 8a 	call	0x11556	; 0x11556 <_ZN5Print7printlnEii>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    bcbe:	ed e8       	ldi	r30, 0x8D	; 141
    bcc0:	ff e0       	ldi	r31, 0x0F	; 15
    bcc2:	64 91       	lpm	r22, Z
	while(ch)
    bcc4:	66 23       	and	r22, r22
    bcc6:	89 f0       	breq	.+34     	; 0xbcea <_Z12processMCodei+0x3704>
    bcc8:	8f 01       	movw	r16, r30
    bcca:	a8 e0       	ldi	r26, 0x08	; 8
    bccc:	ba e0       	ldi	r27, 0x0A	; 10
    bcce:	ed 91       	ld	r30, X+
    bcd0:	fc 91       	ld	r31, X
    bcd2:	11 97       	sbiw	r26, 0x01	; 1
    bcd4:	01 90       	ld	r0, Z+
    bcd6:	f0 81       	ld	r31, Z
    bcd8:	e0 2d       	mov	r30, r0
    bcda:	cd 01       	movw	r24, r26
    bcdc:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    bcde:	0f 5f       	subi	r16, 0xFF	; 255
    bce0:	1f 4f       	sbci	r17, 0xFF	; 255
    bce2:	f8 01       	movw	r30, r16
    bce4:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    bce6:	61 11       	cpse	r22, r1
    bce8:	f0 cf       	rjmp	.-32     	; 0xbcca <_Z12processMCodei+0x36e4>
			SERIAL_PGM("2 ");
			SERIAL_PORT.println(res);
    bcea:	4a e0       	ldi	r20, 0x0A	; 10
    bcec:	50 e0       	ldi	r21, 0x00	; 0
    bcee:	6e 2d       	mov	r22, r14
    bcf0:	7f 2d       	mov	r23, r15
    bcf2:	88 e0       	ldi	r24, 0x08	; 8
    bcf4:	9a e0       	ldi	r25, 0x0A	; 10
    bcf6:	0e 94 ab 8a 	call	0x11556	; 0x11556 <_ZN5Print7printlnEii>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    bcfa:	eb e8       	ldi	r30, 0x8B	; 139
    bcfc:	ff e0       	ldi	r31, 0x0F	; 15
    bcfe:	64 91       	lpm	r22, Z
	while(ch)
    bd00:	66 23       	and	r22, r22
    bd02:	a1 f0       	breq	.+40     	; 0xbd2c <_Z12processMCodei+0x3746>
    bd04:	fa 83       	std	Y+2, r31	; 0x02
    bd06:	e9 83       	std	Y+1, r30	; 0x01
    bd08:	08 e0       	ldi	r16, 0x08	; 8
    bd0a:	1a e0       	ldi	r17, 0x0A	; 10
    bd0c:	d8 01       	movw	r26, r16
    bd0e:	ed 91       	ld	r30, X+
    bd10:	fc 91       	ld	r31, X
    bd12:	01 90       	ld	r0, Z+
    bd14:	f0 81       	ld	r31, Z
    bd16:	e0 2d       	mov	r30, r0
    bd18:	c8 01       	movw	r24, r16
    bd1a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    bd1c:	e9 81       	ldd	r30, Y+1	; 0x01
    bd1e:	fa 81       	ldd	r31, Y+2	; 0x02
    bd20:	31 96       	adiw	r30, 0x01	; 1
    bd22:	fa 83       	std	Y+2, r31	; 0x02
    bd24:	e9 83       	std	Y+1, r30	; 0x01
    bd26:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    bd28:	61 11       	cpse	r22, r1
    bd2a:	f0 cf       	rjmp	.-32     	; 0xbd0c <_Z12processMCodei+0x3726>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    bd2c:	e0 e8       	ldi	r30, 0x80	; 128
    bd2e:	ff e0       	ldi	r31, 0x0F	; 15
    bd30:	64 91       	lpm	r22, Z
	while(ch)
    bd32:	66 23       	and	r22, r22
    bd34:	a1 f0       	breq	.+40     	; 0xbd5e <_Z12processMCodei+0x3778>
    bd36:	fa 83       	std	Y+2, r31	; 0x02
    bd38:	e9 83       	std	Y+1, r30	; 0x01
    bd3a:	08 e0       	ldi	r16, 0x08	; 8
    bd3c:	1a e0       	ldi	r17, 0x0A	; 10
    bd3e:	d8 01       	movw	r26, r16
    bd40:	ed 91       	ld	r30, X+
    bd42:	fc 91       	ld	r31, X
    bd44:	01 90       	ld	r0, Z+
    bd46:	f0 81       	ld	r31, Z
    bd48:	e0 2d       	mov	r30, r0
    bd4a:	c8 01       	movw	r24, r16
    bd4c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    bd4e:	e9 81       	ldd	r30, Y+1	; 0x01
    bd50:	fa 81       	ldd	r31, Y+2	; 0x02
    bd52:	31 96       	adiw	r30, 0x01	; 1
    bd54:	fa 83       	std	Y+2, r31	; 0x02
    bd56:	e9 83       	std	Y+1, r30	; 0x01
    bd58:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    bd5a:	61 11       	cpse	r22, r1
    bd5c:	f0 cf       	rjmp	.-32     	; 0xbd3e <_Z12processMCodei+0x3758>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    bd5e:	ed e7       	ldi	r30, 0x7D	; 125
    bd60:	ff e0       	ldi	r31, 0x0F	; 15
    bd62:	64 91       	lpm	r22, Z
	while(ch)
    bd64:	66 23       	and	r22, r22
    bd66:	a1 f0       	breq	.+40     	; 0xbd90 <_Z12processMCodei+0x37aa>
    bd68:	fa 83       	std	Y+2, r31	; 0x02
    bd6a:	e9 83       	std	Y+1, r30	; 0x01
    bd6c:	08 e0       	ldi	r16, 0x08	; 8
    bd6e:	1a e0       	ldi	r17, 0x0A	; 10
    bd70:	d8 01       	movw	r26, r16
    bd72:	ed 91       	ld	r30, X+
    bd74:	fc 91       	ld	r31, X
    bd76:	01 90       	ld	r0, Z+
    bd78:	f0 81       	ld	r31, Z
    bd7a:	e0 2d       	mov	r30, r0
    bd7c:	c8 01       	movw	r24, r16
    bd7e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    bd80:	e9 81       	ldd	r30, Y+1	; 0x01
    bd82:	fa 81       	ldd	r31, Y+2	; 0x02
    bd84:	31 96       	adiw	r30, 0x01	; 1
    bd86:	fa 83       	std	Y+2, r31	; 0x02
    bd88:	e9 83       	std	Y+1, r30	; 0x01
    bd8a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    bd8c:	61 11       	cpse	r22, r1
    bd8e:	f0 cf       	rjmp	.-32     	; 0xbd70 <_Z12processMCodei+0x378a>
			SERIAL_PGM(MSG_BEGIN);
			SERIAL_PGM(digitalPinHdr);
			SERIAL_PGMLN(MSG_TERMINATE);
    bd90:	88 e0       	ldi	r24, 0x08	; 8
    bd92:	9a e0       	ldi	r25, 0x0A	; 10
    bd94:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
			SERIAL_PORT.flush();
    bd98:	88 e0       	ldi	r24, 0x08	; 8
    bd9a:	9a e0       	ldi	r25, 0x0A	; 10
    bd9c:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
			delete dpin;
    bda0:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <dpin>
    bda4:	90 91 6d 14 	lds	r25, 0x146D	; 0x80146d <dpin+0x1>
    bda8:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
    bdac:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		
	 // PWM value between 0 and 255, default timer mode is 2; clear on match, default resolution is 8 bits, default prescale is 1
	 // Prescale: 1,2,4,6,7,8,9 = none, 8, 64, 256, 1024, external falling, external rising
	 // Use M445 to disable pin permanently or use timer more 0 to stop pulse without removing pin assignment
     case 45: // M45 - set up PWM P<pin> S<power val 0-255> [T<timer mode 0-3>] [R<resolution 8,9,10 bits>] [X<prescale 0-7>]
	  pin_number = -1;
    bdb0:	8f ef       	ldi	r24, 0xFF	; 255
    bdb2:	9f ef       	ldi	r25, 0xFF	; 255
    bdb4:	90 93 1d 13 	sts	0x131D, r25	; 0x80131d <pin_number+0x1>
    bdb8:	80 93 1c 13 	sts	0x131C, r24	; 0x80131c <pin_number>
	  if(code_seen('P') ) {
    bdbc:	80 e5       	ldi	r24, 0x50	; 80
    bdbe:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    bdc2:	88 23       	and	r24, r24
    bdc4:	11 f4       	brne	.+4      	; 0xbdca <_Z12processMCodei+0x37e4>
    bdc6:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
          pin_number = code_value();
    bdca:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    bdce:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    bdd2:	70 93 1d 13 	sts	0x131D, r23	; 0x80131d <pin_number+0x1>
    bdd6:	60 93 1c 13 	sts	0x131C, r22	; 0x80131c <pin_number>
	  } else {
		 break;
	  }
      if (code_seen('S')) {
    bdda:	83 e5       	ldi	r24, 0x53	; 83
    bddc:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    bde0:	88 23       	and	r24, r24
    bde2:	11 f4       	brne	.+4      	; 0xbde8 <_Z12processMCodei+0x3802>
    bde4:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
        int pin_status = code_value();
    bde8:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    bdec:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    bdf0:	8b 01       	movw	r16, r22
		int timer_mode = 2;
		timer_res = 8;
    bdf2:	88 e0       	ldi	r24, 0x08	; 8
    bdf4:	90 e0       	ldi	r25, 0x00	; 0
    bdf6:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <timer_res+0x1>
    bdfa:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <timer_res>
		timer_pre = 1;
    bdfe:	81 e0       	ldi	r24, 0x01	; 1
    be00:	90 e0       	ldi	r25, 0x00	; 0
    be02:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <timer_pre+0x1>
    be06:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <timer_pre>
		
		if( pin_status < 0 || pin_status > 255) {
    be0a:	0f 3f       	cpi	r16, 0xFF	; 255
    be0c:	11 05       	cpc	r17, r1
    be0e:	09 f0       	breq	.+2      	; 0xbe12 <_Z12processMCodei+0x382c>
    be10:	10 f4       	brcc	.+4      	; 0xbe16 <_Z12processMCodei+0x3830>
    be12:	0c 94 02 7f 	jmp	0xfe04	; 0xfe04 <__DATA_REGION_LENGTH__+0x4>
			pin_status = 0;
    be16:	00 e0       	ldi	r16, 0x00	; 0
    be18:	10 e0       	ldi	r17, 0x00	; 0
    be1a:	0c 94 02 7f 	jmp	0xfe04	; 0xfe04 <__DATA_REGION_LENGTH__+0x4>
		}
		// this is a semi-permanent pin assignment so dont add if its already assigned
		if( assignPin(pin_number) ) {
			// timer mode 0-3: 0 stop, 1 toggle on compare match, 2 clear on match, 3 set on match (see HardwareTimer)
			if( code_seen('T') ) {
    be1e:	84 e5       	ldi	r24, 0x54	; 84
    be20:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    be24:	88 23       	and	r24, r24
    be26:	59 f0       	breq	.+22     	; 0xbe3e <_Z12processMCodei+0x3858>
				timer_mode = code_value();
    be28:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    be2c:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    be30:	7b 01       	movw	r14, r22
				if( timer_mode < 0 || timer_mode > 3 ) {
    be32:	64 30       	cpi	r22, 0x04	; 4
    be34:	71 05       	cpc	r23, r1
    be36:	38 f0       	brcs	.+14     	; 0xbe46 <_Z12processMCodei+0x3860>
					timer_mode = 0;
    be38:	e1 2c       	mov	r14, r1
    be3a:	f1 2c       	mov	r15, r1
    be3c:	04 c0       	rjmp	.+8      	; 0xbe46 <_Z12processMCodei+0x3860>
	  } else {
		 break;
	  }
      if (code_seen('S')) {
        int pin_status = code_value();
		int timer_mode = 2;
    be3e:	68 94       	set
    be40:	ee 24       	eor	r14, r14
    be42:	e1 f8       	bld	r14, 1
    be44:	f1 2c       	mov	r15, r1
				if( timer_mode < 0 || timer_mode > 3 ) {
					timer_mode = 0;
				}
			}
			// timer bit resolution 8,9, or 10 bits
			if( code_seen('R')) {
    be46:	82 e5       	ldi	r24, 0x52	; 82
    be48:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    be4c:	88 23       	and	r24, r24
    be4e:	99 f0       	breq	.+38     	; 0xbe76 <_Z12processMCodei+0x3890>
				timer_res = code_value();
    be50:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    be54:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    be58:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <timer_res+0x1>
    be5c:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <timer_res>
				if( timer_res < 8 || timer_res > 10 ) {
    be60:	68 50       	subi	r22, 0x08	; 8
    be62:	71 09       	sbc	r23, r1
    be64:	63 30       	cpi	r22, 0x03	; 3
    be66:	71 05       	cpc	r23, r1
    be68:	30 f0       	brcs	.+12     	; 0xbe76 <_Z12processMCodei+0x3890>
					timer_res = 8;
    be6a:	88 e0       	ldi	r24, 0x08	; 8
    be6c:	90 e0       	ldi	r25, 0x00	; 0
    be6e:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <timer_res+0x1>
    be72:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <timer_res>
				}
			}
			// X - prescale 0-7 for power of 2
			if( code_seen('X') ) {
    be76:	88 e5       	ldi	r24, 0x58	; 88
    be78:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    be7c:	88 23       	and	r24, r24
    be7e:	79 f0       	breq	.+30     	; 0xbe9e <_Z12processMCodei+0x38b8>
				timer_pre = code_value();
    be80:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    be84:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    be88:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <timer_pre+0x1>
    be8c:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <timer_pre>
				if( timer_pre < 0 || timer_pre > 7 ) {
    be90:	68 30       	cpi	r22, 0x08	; 8
    be92:	71 05       	cpc	r23, r1
    be94:	20 f0       	brcs	.+8      	; 0xbe9e <_Z12processMCodei+0x38b8>
					timer_pre = 0;
    be96:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <timer_pre+0x1>
    be9a:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <timer_pre>
				}
			}
			for(int i = 0; i < 12; i++) {
				if(ppwms[i] == NULL) {
    be9e:	80 91 23 13 	lds	r24, 0x1323	; 0x801323 <ppwms>
    bea2:	90 91 24 13 	lds	r25, 0x1324	; 0x801324 <ppwms+0x1>
    bea6:	89 2b       	or	r24, r25
    bea8:	61 f0       	breq	.+24     	; 0xbec2 <_Z12processMCodei+0x38dc>
    beaa:	e5 e2       	ldi	r30, 0x25	; 37
    beac:	f3 e1       	ldi	r31, 0x13	; 19
				timer_pre = code_value();
				if( timer_pre < 0 || timer_pre > 7 ) {
					timer_pre = 0;
				}
			}
			for(int i = 0; i < 12; i++) {
    beae:	21 e0       	ldi	r18, 0x01	; 1
    beb0:	30 e0       	ldi	r19, 0x00	; 0
    beb2:	3a 83       	std	Y+2, r19	; 0x02
    beb4:	29 83       	std	Y+1, r18	; 0x01
				if(ppwms[i] == NULL) {
    beb6:	81 91       	ld	r24, Z+
    beb8:	91 91       	ld	r25, Z+
    beba:	89 2b       	or	r24, r25
    bebc:	09 f0       	breq	.+2      	; 0xbec0 <_Z12processMCodei+0x38da>
    bebe:	94 c0       	rjmp	.+296    	; 0xbfe8 <_Z12processMCodei+0x3a02>
    bec0:	02 c0       	rjmp	.+4      	; 0xbec6 <_Z12processMCodei+0x38e0>
				timer_pre = code_value();
				if( timer_pre < 0 || timer_pre > 7 ) {
					timer_pre = 0;
				}
			}
			for(int i = 0; i < 12; i++) {
    bec2:	1a 82       	std	Y+2, r1	; 0x02
    bec4:	19 82       	std	Y+1, r1	; 0x01
				if(ppwms[i] == NULL) {
					ppin = new PWM(pin_number);
    bec6:	87 e0       	ldi	r24, 0x07	; 7
    bec8:	90 e0       	ldi	r25, 0x00	; 0
    beca:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    bece:	6c 01       	movw	r12, r24
    bed0:	0f 2e       	mov	r0, r31
    bed2:	fc e1       	ldi	r31, 0x1C	; 28
    bed4:	af 2e       	mov	r10, r31
    bed6:	f3 e1       	ldi	r31, 0x13	; 19
    bed8:	bf 2e       	mov	r11, r31
    beda:	f0 2d       	mov	r31, r0
    bedc:	d5 01       	movw	r26, r10
    bede:	6c 91       	ld	r22, X
    bee0:	0e 94 64 a3 	call	0x146c8	; 0x146c8 <_ZN3PWMC1Eh>
    bee4:	d0 92 6b 14 	sts	0x146B, r13	; 0x80146b <ppin+0x1>
    bee8:	c0 92 6a 14 	sts	0x146A, r12	; 0x80146a <ppin>
					ppin->init(pin_number);
    beec:	f5 01       	movw	r30, r10
    beee:	60 81       	ld	r22, Z
    bef0:	c6 01       	movw	r24, r12
    bef2:	0e 94 6d a3 	call	0x146da	; 0x146da <_ZN3PWM4initEh>
					ppin->setPWMPrescale(timer_pre);
    bef6:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <timer_pre>
    befa:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <ppin>
    befe:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <ppin+0x1>
    bf02:	0e 94 76 a2 	call	0x144ec	; 0x144ec <_ZN3PWM14setPWMPrescaleEh>
					ppin->setPWMResolution(timer_res);
    bf06:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <timer_res>
    bf0a:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <ppin>
    bf0e:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <ppin+0x1>
    bf12:	0e 94 54 a2 	call	0x144a8	; 0x144a8 <_ZN3PWM16setPWMResolutionEh>
					ppin->pwmWrite(pin_status,timer_mode); // default is 2, clear on match. to turn off, use 0
    bf16:	4e 2d       	mov	r20, r14
    bf18:	b8 01       	movw	r22, r16
    bf1a:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <ppin>
    bf1e:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <ppin+0x1>
    bf22:	0e 94 12 a3 	call	0x14624	; 0x14624 <_ZN3PWM8pwmWriteEjh>
					ppwms[i] = ppin;
    bf26:	e9 81       	ldd	r30, Y+1	; 0x01
    bf28:	fa 81       	ldd	r31, Y+2	; 0x02
    bf2a:	ee 0f       	add	r30, r30
    bf2c:	ff 1f       	adc	r31, r31
    bf2e:	ed 5d       	subi	r30, 0xDD	; 221
    bf30:	fc 4e       	sbci	r31, 0xEC	; 236
    bf32:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <ppin>
    bf36:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <ppin+0x1>
    bf3a:	91 83       	std	Z+1, r25	; 0x01
    bf3c:	80 83       	st	Z, r24
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    bf3e:	eb e7       	ldi	r30, 0x7B	; 123
    bf40:	ff e0       	ldi	r31, 0x0F	; 15
    bf42:	64 91       	lpm	r22, Z
	while(ch)
    bf44:	66 23       	and	r22, r22
    bf46:	a1 f0       	breq	.+40     	; 0xbf70 <_Z12processMCodei+0x398a>
    bf48:	fa 83       	std	Y+2, r31	; 0x02
    bf4a:	e9 83       	std	Y+1, r30	; 0x01
    bf4c:	08 e0       	ldi	r16, 0x08	; 8
    bf4e:	1a e0       	ldi	r17, 0x0A	; 10
    bf50:	d8 01       	movw	r26, r16
    bf52:	ed 91       	ld	r30, X+
    bf54:	fc 91       	ld	r31, X
    bf56:	01 90       	ld	r0, Z+
    bf58:	f0 81       	ld	r31, Z
    bf5a:	e0 2d       	mov	r30, r0
    bf5c:	c8 01       	movw	r24, r16
    bf5e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    bf60:	e9 81       	ldd	r30, Y+1	; 0x01
    bf62:	fa 81       	ldd	r31, Y+2	; 0x02
    bf64:	31 96       	adiw	r30, 0x01	; 1
    bf66:	fa 83       	std	Y+2, r31	; 0x02
    bf68:	e9 83       	std	Y+1, r30	; 0x01
    bf6a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    bf6c:	61 11       	cpse	r22, r1
    bf6e:	f0 cf       	rjmp	.-32     	; 0xbf50 <_Z12processMCodei+0x396a>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    bf70:	e7 e7       	ldi	r30, 0x77	; 119
    bf72:	ff e0       	ldi	r31, 0x0F	; 15
    bf74:	64 91       	lpm	r22, Z
	while(ch)
    bf76:	66 23       	and	r22, r22
    bf78:	a1 f0       	breq	.+40     	; 0xbfa2 <_Z12processMCodei+0x39bc>
    bf7a:	fa 83       	std	Y+2, r31	; 0x02
    bf7c:	e9 83       	std	Y+1, r30	; 0x01
    bf7e:	08 e0       	ldi	r16, 0x08	; 8
    bf80:	1a e0       	ldi	r17, 0x0A	; 10
    bf82:	d8 01       	movw	r26, r16
    bf84:	ed 91       	ld	r30, X+
    bf86:	fc 91       	ld	r31, X
    bf88:	01 90       	ld	r0, Z+
    bf8a:	f0 81       	ld	r31, Z
    bf8c:	e0 2d       	mov	r30, r0
    bf8e:	c8 01       	movw	r24, r16
    bf90:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    bf92:	e9 81       	ldd	r30, Y+1	; 0x01
    bf94:	fa 81       	ldd	r31, Y+2	; 0x02
    bf96:	31 96       	adiw	r30, 0x01	; 1
    bf98:	fa 83       	std	Y+2, r31	; 0x02
    bf9a:	e9 83       	std	Y+1, r30	; 0x01
    bf9c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    bf9e:	61 11       	cpse	r22, r1
    bfa0:	f0 cf       	rjmp	.-32     	; 0xbf82 <_Z12processMCodei+0x399c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    bfa2:	e4 e7       	ldi	r30, 0x74	; 116
    bfa4:	ff e0       	ldi	r31, 0x0F	; 15
    bfa6:	64 91       	lpm	r22, Z
	while(ch)
    bfa8:	66 23       	and	r22, r22
    bfaa:	a1 f0       	breq	.+40     	; 0xbfd4 <_Z12processMCodei+0x39ee>
    bfac:	fa 83       	std	Y+2, r31	; 0x02
    bfae:	e9 83       	std	Y+1, r30	; 0x01
    bfb0:	08 e0       	ldi	r16, 0x08	; 8
    bfb2:	1a e0       	ldi	r17, 0x0A	; 10
    bfb4:	d8 01       	movw	r26, r16
    bfb6:	ed 91       	ld	r30, X+
    bfb8:	fc 91       	ld	r31, X
    bfba:	01 90       	ld	r0, Z+
    bfbc:	f0 81       	ld	r31, Z
    bfbe:	e0 2d       	mov	r30, r0
    bfc0:	c8 01       	movw	r24, r16
    bfc2:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    bfc4:	e9 81       	ldd	r30, Y+1	; 0x01
    bfc6:	fa 81       	ldd	r31, Y+2	; 0x02
    bfc8:	31 96       	adiw	r30, 0x01	; 1
    bfca:	fa 83       	std	Y+2, r31	; 0x02
    bfcc:	e9 83       	std	Y+1, r30	; 0x01
    bfce:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    bfd0:	61 11       	cpse	r22, r1
    bfd2:	f0 cf       	rjmp	.-32     	; 0xbfb4 <_Z12processMCodei+0x39ce>
					SERIAL_PGM(MSG_BEGIN);
					SERIAL_PGM("M45");
					SERIAL_PGMLN(MSG_TERMINATE);
    bfd4:	88 e0       	ldi	r24, 0x08	; 8
    bfd6:	9a e0       	ldi	r25, 0x0A	; 10
    bfd8:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
					SERIAL_PORT.flush();
    bfdc:	88 e0       	ldi	r24, 0x08	; 8
    bfde:	9a e0       	ldi	r25, 0x0A	; 10
    bfe0:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
					break;
    bfe4:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
				timer_pre = code_value();
				if( timer_pre < 0 || timer_pre > 7 ) {
					timer_pre = 0;
				}
			}
			for(int i = 0; i < 12; i++) {
    bfe8:	29 81       	ldd	r18, Y+1	; 0x01
    bfea:	3a 81       	ldd	r19, Y+2	; 0x02
    bfec:	2f 5f       	subi	r18, 0xFF	; 255
    bfee:	3f 4f       	sbci	r19, 0xFF	; 255
    bff0:	3a 83       	std	Y+2, r19	; 0x02
    bff2:	29 83       	std	Y+1, r18	; 0x01
    bff4:	2c 30       	cpi	r18, 0x0C	; 12
    bff6:	31 05       	cpc	r19, r1
    bff8:	09 f0       	breq	.+2      	; 0xbffc <_Z12processMCodei+0x3a16>
    bffa:	5d cf       	rjmp	.-326    	; 0xbeb6 <_Z12processMCodei+0x38d0>
    bffc:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
					break;
				}
			}
		 } else { // reassign pin with new mode and value
			 for(int i = 0; i < 12; i++) {
				 if(ppwms[i] && ppwms[i]->pin == pin_number) {
    c000:	a1 91       	ld	r26, Z+
    c002:	b1 91       	ld	r27, Z+
    c004:	10 97       	sbiw	r26, 0x00	; 0
    c006:	09 f4       	brne	.+2      	; 0xc00a <_Z12processMCodei+0x3a24>
    c008:	78 c0       	rjmp	.+240    	; 0xc0fa <_Z12processMCodei+0x3b14>
    c00a:	8c 91       	ld	r24, X
    c00c:	90 e0       	ldi	r25, 0x00	; 0
    c00e:	82 17       	cp	r24, r18
    c010:	93 07       	cpc	r25, r19
    c012:	09 f0       	breq	.+2      	; 0xc016 <_Z12processMCodei+0x3a30>
    c014:	72 c0       	rjmp	.+228    	; 0xc0fa <_Z12processMCodei+0x3b14>
					 // timer mode 0-3: 0 stop, 1 toggle on compare match, 2 clear on match, 3 set on match (see HardwareTimer)
					 if( code_seen('T') ) {
    c016:	84 e5       	ldi	r24, 0x54	; 84
    c018:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    c01c:	88 23       	and	r24, r24
    c01e:	59 f0       	breq	.+22     	; 0xc036 <_Z12processMCodei+0x3a50>
						 timer_mode = code_value();
    c020:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    c024:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    c028:	ab 01       	movw	r20, r22
						 if( timer_mode < 0 || timer_mode > 3 ) {
    c02a:	64 30       	cpi	r22, 0x04	; 4
    c02c:	71 05       	cpc	r23, r1
    c02e:	28 f0       	brcs	.+10     	; 0xc03a <_Z12processMCodei+0x3a54>
							timer_mode = 2; // mess up the code get clear on match default
    c030:	42 e0       	ldi	r20, 0x02	; 2
    c032:	50 e0       	ldi	r21, 0x00	; 0
    c034:	02 c0       	rjmp	.+4      	; 0xc03a <_Z12processMCodei+0x3a54>
	  } else {
		 break;
	  }
      if (code_seen('S')) {
        int pin_status = code_value();
		int timer_mode = 2;
    c036:	42 e0       	ldi	r20, 0x02	; 2
    c038:	50 e0       	ldi	r21, 0x00	; 0
						 if( timer_mode < 0 || timer_mode > 3 ) {
							timer_mode = 2; // mess up the code get clear on match default
						 }
					 }
					 //ppwms[i]->init();
					 ppwms[i]->pwmWrite(pin_status, timer_mode);
    c03a:	e9 81       	ldd	r30, Y+1	; 0x01
    c03c:	fa 81       	ldd	r31, Y+2	; 0x02
    c03e:	ee 0f       	add	r30, r30
    c040:	ff 1f       	adc	r31, r31
    c042:	ed 5d       	subi	r30, 0xDD	; 221
    c044:	fc 4e       	sbci	r31, 0xEC	; 236
    c046:	b8 01       	movw	r22, r16
    c048:	80 81       	ld	r24, Z
    c04a:	91 81       	ldd	r25, Z+1	; 0x01
    c04c:	0e 94 12 a3 	call	0x14624	; 0x14624 <_ZN3PWM8pwmWriteEjh>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c050:	e2 e7       	ldi	r30, 0x72	; 114
    c052:	ff e0       	ldi	r31, 0x0F	; 15
    c054:	64 91       	lpm	r22, Z
	while(ch)
    c056:	66 23       	and	r22, r22
    c058:	a1 f0       	breq	.+40     	; 0xc082 <_Z12processMCodei+0x3a9c>
    c05a:	fa 83       	std	Y+2, r31	; 0x02
    c05c:	e9 83       	std	Y+1, r30	; 0x01
    c05e:	08 e0       	ldi	r16, 0x08	; 8
    c060:	1a e0       	ldi	r17, 0x0A	; 10
    c062:	d8 01       	movw	r26, r16
    c064:	ed 91       	ld	r30, X+
    c066:	fc 91       	ld	r31, X
    c068:	01 90       	ld	r0, Z+
    c06a:	f0 81       	ld	r31, Z
    c06c:	e0 2d       	mov	r30, r0
    c06e:	c8 01       	movw	r24, r16
    c070:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c072:	e9 81       	ldd	r30, Y+1	; 0x01
    c074:	fa 81       	ldd	r31, Y+2	; 0x02
    c076:	31 96       	adiw	r30, 0x01	; 1
    c078:	fa 83       	std	Y+2, r31	; 0x02
    c07a:	e9 83       	std	Y+1, r30	; 0x01
    c07c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c07e:	61 11       	cpse	r22, r1
    c080:	f0 cf       	rjmp	.-32     	; 0xc062 <_Z12processMCodei+0x3a7c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c082:	ee e6       	ldi	r30, 0x6E	; 110
    c084:	ff e0       	ldi	r31, 0x0F	; 15
    c086:	64 91       	lpm	r22, Z
	while(ch)
    c088:	66 23       	and	r22, r22
    c08a:	a1 f0       	breq	.+40     	; 0xc0b4 <_Z12processMCodei+0x3ace>
    c08c:	fa 83       	std	Y+2, r31	; 0x02
    c08e:	e9 83       	std	Y+1, r30	; 0x01
    c090:	08 e0       	ldi	r16, 0x08	; 8
    c092:	1a e0       	ldi	r17, 0x0A	; 10
    c094:	d8 01       	movw	r26, r16
    c096:	ed 91       	ld	r30, X+
    c098:	fc 91       	ld	r31, X
    c09a:	01 90       	ld	r0, Z+
    c09c:	f0 81       	ld	r31, Z
    c09e:	e0 2d       	mov	r30, r0
    c0a0:	c8 01       	movw	r24, r16
    c0a2:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c0a4:	e9 81       	ldd	r30, Y+1	; 0x01
    c0a6:	fa 81       	ldd	r31, Y+2	; 0x02
    c0a8:	31 96       	adiw	r30, 0x01	; 1
    c0aa:	fa 83       	std	Y+2, r31	; 0x02
    c0ac:	e9 83       	std	Y+1, r30	; 0x01
    c0ae:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c0b0:	61 11       	cpse	r22, r1
    c0b2:	f0 cf       	rjmp	.-32     	; 0xc094 <_Z12processMCodei+0x3aae>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c0b4:	eb e6       	ldi	r30, 0x6B	; 107
    c0b6:	ff e0       	ldi	r31, 0x0F	; 15
    c0b8:	64 91       	lpm	r22, Z
	while(ch)
    c0ba:	66 23       	and	r22, r22
    c0bc:	a1 f0       	breq	.+40     	; 0xc0e6 <_Z12processMCodei+0x3b00>
    c0be:	fa 83       	std	Y+2, r31	; 0x02
    c0c0:	e9 83       	std	Y+1, r30	; 0x01
    c0c2:	08 e0       	ldi	r16, 0x08	; 8
    c0c4:	1a e0       	ldi	r17, 0x0A	; 10
    c0c6:	d8 01       	movw	r26, r16
    c0c8:	ed 91       	ld	r30, X+
    c0ca:	fc 91       	ld	r31, X
    c0cc:	01 90       	ld	r0, Z+
    c0ce:	f0 81       	ld	r31, Z
    c0d0:	e0 2d       	mov	r30, r0
    c0d2:	c8 01       	movw	r24, r16
    c0d4:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c0d6:	e9 81       	ldd	r30, Y+1	; 0x01
    c0d8:	fa 81       	ldd	r31, Y+2	; 0x02
    c0da:	31 96       	adiw	r30, 0x01	; 1
    c0dc:	fa 83       	std	Y+2, r31	; 0x02
    c0de:	e9 83       	std	Y+1, r30	; 0x01
    c0e0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c0e2:	61 11       	cpse	r22, r1
    c0e4:	f0 cf       	rjmp	.-32     	; 0xc0c6 <_Z12processMCodei+0x3ae0>
					 SERIAL_PGM(MSG_BEGIN);
					 SERIAL_PGM("M45");
					 SERIAL_PGMLN(MSG_TERMINATE);
    c0e6:	88 e0       	ldi	r24, 0x08	; 8
    c0e8:	9a e0       	ldi	r25, 0x0A	; 10
    c0ea:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
					 SERIAL_PORT.flush();
    c0ee:	88 e0       	ldi	r24, 0x08	; 8
    c0f0:	9a e0       	ldi	r25, 0x0A	; 10
    c0f2:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
					 break;
    c0f6:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
					SERIAL_PORT.flush();
					break;
				}
			}
		 } else { // reassign pin with new mode and value
			 for(int i = 0; i < 12; i++) {
    c0fa:	49 81       	ldd	r20, Y+1	; 0x01
    c0fc:	5a 81       	ldd	r21, Y+2	; 0x02
    c0fe:	4f 5f       	subi	r20, 0xFF	; 255
    c100:	5f 4f       	sbci	r21, 0xFF	; 255
    c102:	5a 83       	std	Y+2, r21	; 0x02
    c104:	49 83       	std	Y+1, r20	; 0x01
    c106:	4c 30       	cpi	r20, 0x0C	; 12
    c108:	51 05       	cpc	r21, r1
    c10a:	09 f0       	breq	.+2      	; 0xc10e <_Z12processMCodei+0x3b28>
    c10c:	79 cf       	rjmp	.-270    	; 0xc000 <_Z12processMCodei+0x3a1a>
    c10e:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		 }
      }
	  break;
	  
	  case 46: // M46 -Read analog pin P<pin>
        pin_number = -1;
    c112:	8f ef       	ldi	r24, 0xFF	; 255
    c114:	9f ef       	ldi	r25, 0xFF	; 255
    c116:	90 93 1d 13 	sts	0x131D, r25	; 0x80131d <pin_number+0x1>
    c11a:	80 93 1c 13 	sts	0x131C, r24	; 0x80131c <pin_number>
        if (code_seen('P')) {
    c11e:	80 e5       	ldi	r24, 0x50	; 80
    c120:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    c124:	88 23       	and	r24, r24
    c126:	11 f4       	brne	.+4      	; 0xc12c <_Z12processMCodei+0x3b46>
    c128:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
          pin_number = code_value();
    c12c:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    c130:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    c134:	86 2f       	mov	r24, r22
    c136:	60 93 1c 13 	sts	0x131C, r22	; 0x80131c <pin_number>
    c13a:	70 93 1d 13 	sts	0x131D, r23	; 0x80131d <pin_number+0x1>
			if( assignPin(pin_number) ) {
    c13e:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_Z9assignPinh>
    c142:	88 23       	and	r24, r24
    c144:	11 f4       	brne	.+4      	; 0xc14a <_Z12processMCodei+0x3b64>
    c146:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
				apin = new Analog(pin_number);
    c14a:	86 e0       	ldi	r24, 0x06	; 6
    c14c:	90 e0       	ldi	r25, 0x00	; 0
    c14e:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    c152:	fc 01       	movw	r30, r24
    c154:	80 91 1c 13 	lds	r24, 0x131C	; 0x80131c <pin_number>

class Digital {
	public:
	uint8_t pin;
	uint8_t mode = INPUT; // default
	Digital(uint8_t spin) {
    c158:	15 82       	std	Z+5, r1	; 0x05
		this->pin = spin;
    c15a:	84 83       	std	Z+4, r24	; 0x04

class Analog : public virtual Digital {
	private:
	uint8_t analog_channel = 0;
	public:
		Analog(uint8_t spin) : Digital(spin) { 	sbi(ADCSRA, ADEN); }
    c15c:	86 ec       	ldi	r24, 0xC6	; 198
    c15e:	99 e0       	ldi	r25, 0x09	; 9
    c160:	91 83       	std	Z+1, r25	; 0x01
    c162:	80 83       	st	Z, r24
    c164:	12 82       	std	Z+2, r1	; 0x02
    c166:	81 e0       	ldi	r24, 0x01	; 1
    c168:	83 83       	std	Z+3, r24	; 0x03
    c16a:	aa e7       	ldi	r26, 0x7A	; 122
    c16c:	b0 e0       	ldi	r27, 0x00	; 0
    c16e:	8c 91       	ld	r24, X
    c170:	80 68       	ori	r24, 0x80	; 128
    c172:	8c 93       	st	X, r24
    c174:	f0 93 6f 14 	sts	0x146F, r31	; 0x80146f <apin+0x1>
    c178:	e0 93 6e 14 	sts	0x146E, r30	; 0x80146e <apin>
* Compute the analog channel from the given pin, but maintain the pin number as its digital designation.
*/
int analogRead()
{
	uint8_t low, high;
	if (pin >= 54 && pin <= 69) 
    c17c:	a0 81       	ld	r26, Z
    c17e:	b1 81       	ldd	r27, Z+1	; 0x01
    c180:	16 97       	sbiw	r26, 0x06	; 6
    c182:	0d 90       	ld	r0, X+
    c184:	bc 91       	ld	r27, X
    c186:	a0 2d       	mov	r26, r0
    c188:	ae 0f       	add	r26, r30
    c18a:	bf 1f       	adc	r27, r31
    c18c:	9c 91       	ld	r25, X
    c18e:	96 53       	subi	r25, 0x36	; 54
    c190:	90 31       	cpi	r25, 0x10	; 16
    c192:	08 f0       	brcs	.+2      	; 0xc196 <_Z12processMCodei+0x3bb0>
    c194:	54 c0       	rjmp	.+168    	; 0xc23e <_Z12processMCodei+0x3c58>
		analog_channel = pin - 54; // allow for pin numbers
    c196:	92 83       	std	Z+2, r25	; 0x02
	else
		return -1; // can analog read a digital pin

	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((analog_channel >> 3) & 0x01) << MUX5);
    c198:	ab e7       	ldi	r26, 0x7B	; 123
    c19a:	b0 e0       	ldi	r27, 0x00	; 0
    c19c:	8c 91       	ld	r24, X
    c19e:	87 7f       	andi	r24, 0xF7	; 247
    c1a0:	98 70       	andi	r25, 0x08	; 8
    c1a2:	98 2b       	or	r25, r24
    c1a4:	9c 93       	st	X, r25
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
	ADMUX = (analog_reference << 6) | (analog_channel & 0x07);
    c1a6:	83 81       	ldd	r24, Z+3	; 0x03
    c1a8:	50 e4       	ldi	r21, 0x40	; 64
    c1aa:	85 9f       	mul	r24, r21
    c1ac:	c0 01       	movw	r24, r0
    c1ae:	11 24       	eor	r1, r1
    c1b0:	92 81       	ldd	r25, Z+2	; 0x02
    c1b2:	97 70       	andi	r25, 0x07	; 7
    c1b4:	89 2b       	or	r24, r25
    c1b6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>

	// without a delay, we seem to read from the wrong channel
	//_delay_ms(1);

	// start the conversion
	sbi(ADCSRA, ADSC);
    c1ba:	ea e7       	ldi	r30, 0x7A	; 122
    c1bc:	f0 e0       	ldi	r31, 0x00	; 0
    c1be:	80 81       	ld	r24, Z
    c1c0:	80 64       	ori	r24, 0x40	; 64
    c1c2:	80 83       	st	Z, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    c1c4:	80 81       	ld	r24, Z
    c1c6:	86 fd       	sbrc	r24, 6
    c1c8:	fd cf       	rjmp	.-6      	; 0xc1c4 <_Z12processMCodei+0x3bde>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    c1ca:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	high = ADCH;
    c1ce:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
				int res = apin->analogRead();
				res = apin->analogRead(); // de-jitter
    c1d2:	e0 91 6e 14 	lds	r30, 0x146E	; 0x80146e <apin>
    c1d6:	f0 91 6f 14 	lds	r31, 0x146F	; 0x80146f <apin+0x1>
* Compute the analog channel from the given pin, but maintain the pin number as its digital designation.
*/
int analogRead()
{
	uint8_t low, high;
	if (pin >= 54 && pin <= 69) 
    c1da:	a0 81       	ld	r26, Z
    c1dc:	b1 81       	ldd	r27, Z+1	; 0x01
    c1de:	16 97       	sbiw	r26, 0x06	; 6
    c1e0:	0d 90       	ld	r0, X+
    c1e2:	bc 91       	ld	r27, X
    c1e4:	a0 2d       	mov	r26, r0
    c1e6:	ae 0f       	add	r26, r30
    c1e8:	bf 1f       	adc	r27, r31
    c1ea:	8c 91       	ld	r24, X
    c1ec:	86 53       	subi	r24, 0x36	; 54
    c1ee:	80 31       	cpi	r24, 0x10	; 16
    c1f0:	58 f5       	brcc	.+86     	; 0xc248 <_Z12processMCodei+0x3c62>
		analog_channel = pin - 54; // allow for pin numbers
    c1f2:	82 83       	std	Z+2, r24	; 0x02
	else
		return -1; // can analog read a digital pin

	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((analog_channel >> 3) & 0x01) << MUX5);
    c1f4:	ab e7       	ldi	r26, 0x7B	; 123
    c1f6:	b0 e0       	ldi	r27, 0x00	; 0
    c1f8:	9c 91       	ld	r25, X
    c1fa:	97 7f       	andi	r25, 0xF7	; 247
    c1fc:	88 70       	andi	r24, 0x08	; 8
    c1fe:	89 2b       	or	r24, r25
    c200:	8c 93       	st	X, r24
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
	ADMUX = (analog_reference << 6) | (analog_channel & 0x07);
    c202:	83 81       	ldd	r24, Z+3	; 0x03
    c204:	60 e4       	ldi	r22, 0x40	; 64
    c206:	86 9f       	mul	r24, r22
    c208:	c0 01       	movw	r24, r0
    c20a:	11 24       	eor	r1, r1
    c20c:	92 81       	ldd	r25, Z+2	; 0x02
    c20e:	97 70       	andi	r25, 0x07	; 7
    c210:	89 2b       	or	r24, r25
    c212:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>

	// without a delay, we seem to read from the wrong channel
	//_delay_ms(1);

	// start the conversion
	sbi(ADCSRA, ADSC);
    c216:	ea e7       	ldi	r30, 0x7A	; 122
    c218:	f0 e0       	ldi	r31, 0x00	; 0
    c21a:	80 81       	ld	r24, Z
    c21c:	80 64       	ori	r24, 0x40	; 64
    c21e:	80 83       	st	Z, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    c220:	80 81       	ld	r24, Z
    c222:	86 fd       	sbrc	r24, 6
    c224:	fd cf       	rjmp	.-6      	; 0xc220 <_Z12processMCodei+0x3c3a>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    c226:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    c22a:	89 83       	std	Y+1, r24	; 0x01
	high = ADCH;
    c22c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>

	// combine the two bytes
	return (high << 8) | low;
    c230:	b9 81       	ldd	r27, Y+1	; 0x01
    c232:	ab 2f       	mov	r26, r27
    c234:	b0 e0       	ldi	r27, 0x00	; 0
    c236:	b8 2b       	or	r27, r24
    c238:	ba 83       	std	Y+2, r27	; 0x02
    c23a:	a9 83       	std	Y+1, r26	; 0x01
    c23c:	09 c0       	rjmp	.+18     	; 0xc250 <_Z12processMCodei+0x3c6a>
{
	uint8_t low, high;
	if (pin >= 54 && pin <= 69) 
		analog_channel = pin - 54; // allow for pin numbers
	else
		return -1; // can analog read a digital pin
    c23e:	ef ef       	ldi	r30, 0xFF	; 255
    c240:	ff ef       	ldi	r31, 0xFF	; 255
    c242:	fa 83       	std	Y+2, r31	; 0x02
    c244:	e9 83       	std	Y+1, r30	; 0x01
    c246:	04 c0       	rjmp	.+8      	; 0xc250 <_Z12processMCodei+0x3c6a>
    c248:	2f ef       	ldi	r18, 0xFF	; 255
    c24a:	3f ef       	ldi	r19, 0xFF	; 255
    c24c:	3a 83       	std	Y+2, r19	; 0x02
    c24e:	29 83       	std	Y+1, r18	; 0x01
				unassignPin(pin_number);
    c250:	80 91 1c 13 	lds	r24, 0x131C	; 0x80131c <pin_number>
    c254:	0e 94 80 1c 	call	0x3900	; 0x3900 <_Z11unassignPinh>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c258:	e9 e6       	ldi	r30, 0x69	; 105
    c25a:	ff e0       	ldi	r31, 0x0F	; 15
    c25c:	64 91       	lpm	r22, Z
	while(ch)
    c25e:	66 23       	and	r22, r22
    c260:	a9 f0       	breq	.+42     	; 0xc28c <_Z12processMCodei+0x3ca6>
    c262:	8f 01       	movw	r16, r30
    c264:	0f 2e       	mov	r0, r31
    c266:	f8 e0       	ldi	r31, 0x08	; 8
    c268:	ef 2e       	mov	r14, r31
    c26a:	fa e0       	ldi	r31, 0x0A	; 10
    c26c:	ff 2e       	mov	r15, r31
    c26e:	f0 2d       	mov	r31, r0
    c270:	d7 01       	movw	r26, r14
    c272:	ed 91       	ld	r30, X+
    c274:	fc 91       	ld	r31, X
    c276:	01 90       	ld	r0, Z+
    c278:	f0 81       	ld	r31, Z
    c27a:	e0 2d       	mov	r30, r0
    c27c:	c7 01       	movw	r24, r14
    c27e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c280:	0f 5f       	subi	r16, 0xFF	; 255
    c282:	1f 4f       	sbci	r17, 0xFF	; 255
    c284:	f8 01       	movw	r30, r16
    c286:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c288:	61 11       	cpse	r22, r1
    c28a:	f2 cf       	rjmp	.-28     	; 0xc270 <_Z12processMCodei+0x3c8a>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c28c:	ef e5       	ldi	r30, 0x5F	; 95
    c28e:	ff e0       	ldi	r31, 0x0F	; 15
    c290:	64 91       	lpm	r22, Z
	while(ch)
    c292:	66 23       	and	r22, r22
    c294:	a9 f0       	breq	.+42     	; 0xc2c0 <_Z12processMCodei+0x3cda>
    c296:	8f 01       	movw	r16, r30
    c298:	0f 2e       	mov	r0, r31
    c29a:	f8 e0       	ldi	r31, 0x08	; 8
    c29c:	ef 2e       	mov	r14, r31
    c29e:	fa e0       	ldi	r31, 0x0A	; 10
    c2a0:	ff 2e       	mov	r15, r31
    c2a2:	f0 2d       	mov	r31, r0
    c2a4:	d7 01       	movw	r26, r14
    c2a6:	ed 91       	ld	r30, X+
    c2a8:	fc 91       	ld	r31, X
    c2aa:	01 90       	ld	r0, Z+
    c2ac:	f0 81       	ld	r31, Z
    c2ae:	e0 2d       	mov	r30, r0
    c2b0:	c7 01       	movw	r24, r14
    c2b2:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c2b4:	0f 5f       	subi	r16, 0xFF	; 255
    c2b6:	1f 4f       	sbci	r17, 0xFF	; 255
    c2b8:	f8 01       	movw	r30, r16
    c2ba:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c2bc:	61 11       	cpse	r22, r1
    c2be:	f2 cf       	rjmp	.-28     	; 0xc2a4 <_Z12processMCodei+0x3cbe>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c2c0:	ed e5       	ldi	r30, 0x5D	; 93
    c2c2:	ff e0       	ldi	r31, 0x0F	; 15
    c2c4:	64 91       	lpm	r22, Z
	while(ch)
    c2c6:	66 23       	and	r22, r22
    c2c8:	a9 f0       	breq	.+42     	; 0xc2f4 <_Z12processMCodei+0x3d0e>
    c2ca:	8f 01       	movw	r16, r30
    c2cc:	0f 2e       	mov	r0, r31
    c2ce:	f8 e0       	ldi	r31, 0x08	; 8
    c2d0:	ef 2e       	mov	r14, r31
    c2d2:	fa e0       	ldi	r31, 0x0A	; 10
    c2d4:	ff 2e       	mov	r15, r31
    c2d6:	f0 2d       	mov	r31, r0
    c2d8:	d7 01       	movw	r26, r14
    c2da:	ed 91       	ld	r30, X+
    c2dc:	fc 91       	ld	r31, X
    c2de:	01 90       	ld	r0, Z+
    c2e0:	f0 81       	ld	r31, Z
    c2e2:	e0 2d       	mov	r30, r0
    c2e4:	c7 01       	movw	r24, r14
    c2e6:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c2e8:	0f 5f       	subi	r16, 0xFF	; 255
    c2ea:	1f 4f       	sbci	r17, 0xFF	; 255
    c2ec:	f8 01       	movw	r30, r16
    c2ee:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c2f0:	61 11       	cpse	r22, r1
    c2f2:	f2 cf       	rjmp	.-28     	; 0xc2d8 <_Z12processMCodei+0x3cf2>
				SERIAL_PGM(MSG_BEGIN);
				SERIAL_PGM(analogPinHdr);
				SERIAL_PGMLN(MSG_DELIMIT);
    c2f4:	88 e0       	ldi	r24, 0x08	; 8
    c2f6:	9a e0       	ldi	r25, 0x0A	; 10
    c2f8:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c2fc:	ea e5       	ldi	r30, 0x5A	; 90
    c2fe:	ff e0       	ldi	r31, 0x0F	; 15
    c300:	64 91       	lpm	r22, Z
	while(ch)
    c302:	66 23       	and	r22, r22
    c304:	a9 f0       	breq	.+42     	; 0xc330 <_Z12processMCodei+0x3d4a>
    c306:	8f 01       	movw	r16, r30
    c308:	0f 2e       	mov	r0, r31
    c30a:	f8 e0       	ldi	r31, 0x08	; 8
    c30c:	ef 2e       	mov	r14, r31
    c30e:	fa e0       	ldi	r31, 0x0A	; 10
    c310:	ff 2e       	mov	r15, r31
    c312:	f0 2d       	mov	r31, r0
    c314:	d7 01       	movw	r26, r14
    c316:	ed 91       	ld	r30, X+
    c318:	fc 91       	ld	r31, X
    c31a:	01 90       	ld	r0, Z+
    c31c:	f0 81       	ld	r31, Z
    c31e:	e0 2d       	mov	r30, r0
    c320:	c7 01       	movw	r24, r14
    c322:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c324:	0f 5f       	subi	r16, 0xFF	; 255
    c326:	1f 4f       	sbci	r17, 0xFF	; 255
    c328:	f8 01       	movw	r30, r16
    c32a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c32c:	61 11       	cpse	r22, r1
    c32e:	f2 cf       	rjmp	.-28     	; 0xc314 <_Z12processMCodei+0x3d2e>
				SERIAL_PGM("1 ");
				SERIAL_PORT.println(pin_number);
    c330:	60 91 1c 13 	lds	r22, 0x131C	; 0x80131c <pin_number>
    c334:	70 91 1d 13 	lds	r23, 0x131D	; 0x80131d <pin_number+0x1>
    c338:	4a e0       	ldi	r20, 0x0A	; 10
    c33a:	50 e0       	ldi	r21, 0x00	; 0
    c33c:	88 e0       	ldi	r24, 0x08	; 8
    c33e:	9a e0       	ldi	r25, 0x0A	; 10
    c340:	0e 94 ab 8a 	call	0x11556	; 0x11556 <_ZN5Print7printlnEii>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c344:	e7 e5       	ldi	r30, 0x57	; 87
    c346:	ff e0       	ldi	r31, 0x0F	; 15
    c348:	64 91       	lpm	r22, Z
	while(ch)
    c34a:	66 23       	and	r22, r22
    c34c:	a9 f0       	breq	.+42     	; 0xc378 <_Z12processMCodei+0x3d92>
    c34e:	8f 01       	movw	r16, r30
    c350:	0f 2e       	mov	r0, r31
    c352:	f8 e0       	ldi	r31, 0x08	; 8
    c354:	ef 2e       	mov	r14, r31
    c356:	fa e0       	ldi	r31, 0x0A	; 10
    c358:	ff 2e       	mov	r15, r31
    c35a:	f0 2d       	mov	r31, r0
    c35c:	d7 01       	movw	r26, r14
    c35e:	ed 91       	ld	r30, X+
    c360:	fc 91       	ld	r31, X
    c362:	01 90       	ld	r0, Z+
    c364:	f0 81       	ld	r31, Z
    c366:	e0 2d       	mov	r30, r0
    c368:	c7 01       	movw	r24, r14
    c36a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c36c:	0f 5f       	subi	r16, 0xFF	; 255
    c36e:	1f 4f       	sbci	r17, 0xFF	; 255
    c370:	f8 01       	movw	r30, r16
    c372:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c374:	61 11       	cpse	r22, r1
    c376:	f2 cf       	rjmp	.-28     	; 0xc35c <_Z12processMCodei+0x3d76>
				SERIAL_PGM("2 ");
				SERIAL_PORT.println(res);
    c378:	4a e0       	ldi	r20, 0x0A	; 10
    c37a:	50 e0       	ldi	r21, 0x00	; 0
    c37c:	69 81       	ldd	r22, Y+1	; 0x01
    c37e:	7a 81       	ldd	r23, Y+2	; 0x02
    c380:	88 e0       	ldi	r24, 0x08	; 8
    c382:	9a e0       	ldi	r25, 0x0A	; 10
    c384:	0e 94 ab 8a 	call	0x11556	; 0x11556 <_ZN5Print7printlnEii>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c388:	e5 e5       	ldi	r30, 0x55	; 85
    c38a:	ff e0       	ldi	r31, 0x0F	; 15
    c38c:	64 91       	lpm	r22, Z
	while(ch)
    c38e:	66 23       	and	r22, r22
    c390:	a1 f0       	breq	.+40     	; 0xc3ba <_Z12processMCodei+0x3dd4>
    c392:	fa 83       	std	Y+2, r31	; 0x02
    c394:	e9 83       	std	Y+1, r30	; 0x01
    c396:	08 e0       	ldi	r16, 0x08	; 8
    c398:	1a e0       	ldi	r17, 0x0A	; 10
    c39a:	d8 01       	movw	r26, r16
    c39c:	ed 91       	ld	r30, X+
    c39e:	fc 91       	ld	r31, X
    c3a0:	01 90       	ld	r0, Z+
    c3a2:	f0 81       	ld	r31, Z
    c3a4:	e0 2d       	mov	r30, r0
    c3a6:	c8 01       	movw	r24, r16
    c3a8:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c3aa:	e9 81       	ldd	r30, Y+1	; 0x01
    c3ac:	fa 81       	ldd	r31, Y+2	; 0x02
    c3ae:	31 96       	adiw	r30, 0x01	; 1
    c3b0:	fa 83       	std	Y+2, r31	; 0x02
    c3b2:	e9 83       	std	Y+1, r30	; 0x01
    c3b4:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c3b6:	61 11       	cpse	r22, r1
    c3b8:	f0 cf       	rjmp	.-32     	; 0xc39a <_Z12processMCodei+0x3db4>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c3ba:	eb e4       	ldi	r30, 0x4B	; 75
    c3bc:	ff e0       	ldi	r31, 0x0F	; 15
    c3be:	64 91       	lpm	r22, Z
	while(ch)
    c3c0:	66 23       	and	r22, r22
    c3c2:	a1 f0       	breq	.+40     	; 0xc3ec <_Z12processMCodei+0x3e06>
    c3c4:	fa 83       	std	Y+2, r31	; 0x02
    c3c6:	e9 83       	std	Y+1, r30	; 0x01
    c3c8:	08 e0       	ldi	r16, 0x08	; 8
    c3ca:	1a e0       	ldi	r17, 0x0A	; 10
    c3cc:	d8 01       	movw	r26, r16
    c3ce:	ed 91       	ld	r30, X+
    c3d0:	fc 91       	ld	r31, X
    c3d2:	01 90       	ld	r0, Z+
    c3d4:	f0 81       	ld	r31, Z
    c3d6:	e0 2d       	mov	r30, r0
    c3d8:	c8 01       	movw	r24, r16
    c3da:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c3dc:	e9 81       	ldd	r30, Y+1	; 0x01
    c3de:	fa 81       	ldd	r31, Y+2	; 0x02
    c3e0:	31 96       	adiw	r30, 0x01	; 1
    c3e2:	fa 83       	std	Y+2, r31	; 0x02
    c3e4:	e9 83       	std	Y+1, r30	; 0x01
    c3e6:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c3e8:	61 11       	cpse	r22, r1
    c3ea:	f0 cf       	rjmp	.-32     	; 0xc3cc <_Z12processMCodei+0x3de6>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c3ec:	e8 e4       	ldi	r30, 0x48	; 72
    c3ee:	ff e0       	ldi	r31, 0x0F	; 15
    c3f0:	64 91       	lpm	r22, Z
	while(ch)
    c3f2:	66 23       	and	r22, r22
    c3f4:	a1 f0       	breq	.+40     	; 0xc41e <_Z12processMCodei+0x3e38>
    c3f6:	fa 83       	std	Y+2, r31	; 0x02
    c3f8:	e9 83       	std	Y+1, r30	; 0x01
    c3fa:	08 e0       	ldi	r16, 0x08	; 8
    c3fc:	1a e0       	ldi	r17, 0x0A	; 10
    c3fe:	d8 01       	movw	r26, r16
    c400:	ed 91       	ld	r30, X+
    c402:	fc 91       	ld	r31, X
    c404:	01 90       	ld	r0, Z+
    c406:	f0 81       	ld	r31, Z
    c408:	e0 2d       	mov	r30, r0
    c40a:	c8 01       	movw	r24, r16
    c40c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c40e:	e9 81       	ldd	r30, Y+1	; 0x01
    c410:	fa 81       	ldd	r31, Y+2	; 0x02
    c412:	31 96       	adiw	r30, 0x01	; 1
    c414:	fa 83       	std	Y+2, r31	; 0x02
    c416:	e9 83       	std	Y+1, r30	; 0x01
    c418:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c41a:	61 11       	cpse	r22, r1
    c41c:	f0 cf       	rjmp	.-32     	; 0xc3fe <_Z12processMCodei+0x3e18>
				SERIAL_PGM(MSG_BEGIN);
				SERIAL_PGM(analogPinHdr);
				SERIAL_PGMLN(MSG_TERMINATE);
    c41e:	88 e0       	ldi	r24, 0x08	; 8
    c420:	9a e0       	ldi	r25, 0x0A	; 10
    c422:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
				SERIAL_PORT.flush();
    c426:	88 e0       	ldi	r24, 0x08	; 8
    c428:	9a e0       	ldi	r25, 0x0A	; 10
    c42a:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
				delete apin;
    c42e:	80 91 6e 14 	lds	r24, 0x146E	; 0x80146e <apin>
    c432:	90 91 6f 14 	lds	r25, 0x146F	; 0x80146f <apin+0x1>
    c436:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
    c43a:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			}
		}
     break;
	 
	 case 47: // M47 -Read analog pin P<pin> T<threshold> compare to battery threshold, if below, print battery message
	   pin_number = -1;
    c43e:	8f ef       	ldi	r24, 0xFF	; 255
    c440:	9f ef       	ldi	r25, 0xFF	; 255
    c442:	90 93 1d 13 	sts	0x131D, r25	; 0x80131d <pin_number+0x1>
    c446:	80 93 1c 13 	sts	0x131C, r24	; 0x80131c <pin_number>
	   if (code_seen('P')) {
    c44a:	80 e5       	ldi	r24, 0x50	; 80
    c44c:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    c450:	88 23       	and	r24, r24
    c452:	11 f4       	brne	.+4      	; 0xc458 <_Z12processMCodei+0x3e72>
    c454:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		   pin_number = code_value();
    c458:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    c45c:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    c460:	70 93 1d 13 	sts	0x131D, r23	; 0x80131d <pin_number+0x1>
    c464:	60 93 1c 13 	sts	0x131C, r22	; 0x80131c <pin_number>
		   digitarg = code_seen('T') ? code_value() : 0;
    c468:	84 e5       	ldi	r24, 0x54	; 84
    c46a:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    c46e:	88 23       	and	r24, r24
    c470:	29 f0       	breq	.+10     	; 0xc47c <_Z12processMCodei+0x3e96>
    c472:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    c476:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    c47a:	02 c0       	rjmp	.+4      	; 0xc480 <_Z12processMCodei+0x3e9a>
    c47c:	60 e0       	ldi	r22, 0x00	; 0
    c47e:	70 e0       	ldi	r23, 0x00	; 0
    c480:	70 93 21 13 	sts	0x1321, r23	; 0x801321 <digitarg+0x1>
    c484:	60 93 20 13 	sts	0x1320, r22	; 0x801320 <digitarg>
		   if( assignPin(pin_number) ) {
    c488:	80 91 1c 13 	lds	r24, 0x131C	; 0x80131c <pin_number>
    c48c:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_Z9assignPinh>
    c490:	88 23       	and	r24, r24
    c492:	11 f4       	brne	.+4      	; 0xc498 <_Z12processMCodei+0x3eb2>
    c494:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			   apin = new Analog(pin_number);
    c498:	86 e0       	ldi	r24, 0x06	; 6
    c49a:	90 e0       	ldi	r25, 0x00	; 0
    c49c:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    c4a0:	fc 01       	movw	r30, r24
    c4a2:	80 91 1c 13 	lds	r24, 0x131C	; 0x80131c <pin_number>

class Digital {
	public:
	uint8_t pin;
	uint8_t mode = INPUT; // default
	Digital(uint8_t spin) {
    c4a6:	15 82       	std	Z+5, r1	; 0x05
		this->pin = spin;
    c4a8:	84 83       	std	Z+4, r24	; 0x04

class Analog : public virtual Digital {
	private:
	uint8_t analog_channel = 0;
	public:
		Analog(uint8_t spin) : Digital(spin) { 	sbi(ADCSRA, ADEN); }
    c4aa:	86 ec       	ldi	r24, 0xC6	; 198
    c4ac:	99 e0       	ldi	r25, 0x09	; 9
    c4ae:	91 83       	std	Z+1, r25	; 0x01
    c4b0:	80 83       	st	Z, r24
    c4b2:	12 82       	std	Z+2, r1	; 0x02
    c4b4:	81 e0       	ldi	r24, 0x01	; 1
    c4b6:	83 83       	std	Z+3, r24	; 0x03
    c4b8:	aa e7       	ldi	r26, 0x7A	; 122
    c4ba:	b0 e0       	ldi	r27, 0x00	; 0
    c4bc:	8c 91       	ld	r24, X
    c4be:	80 68       	ori	r24, 0x80	; 128
    c4c0:	8c 93       	st	X, r24
    c4c2:	f0 93 6f 14 	sts	0x146F, r31	; 0x80146f <apin+0x1>
    c4c6:	e0 93 6e 14 	sts	0x146E, r30	; 0x80146e <apin>
* Compute the analog channel from the given pin, but maintain the pin number as its digital designation.
*/
int analogRead()
{
	uint8_t low, high;
	if (pin >= 54 && pin <= 69) 
    c4ca:	a0 81       	ld	r26, Z
    c4cc:	b1 81       	ldd	r27, Z+1	; 0x01
    c4ce:	16 97       	sbiw	r26, 0x06	; 6
    c4d0:	0d 90       	ld	r0, X+
    c4d2:	bc 91       	ld	r27, X
    c4d4:	a0 2d       	mov	r26, r0
    c4d6:	ae 0f       	add	r26, r30
    c4d8:	bf 1f       	adc	r27, r31
    c4da:	9c 91       	ld	r25, X
    c4dc:	96 53       	subi	r25, 0x36	; 54
    c4de:	90 31       	cpi	r25, 0x10	; 16
    c4e0:	08 f0       	brcs	.+2      	; 0xc4e4 <_Z12processMCodei+0x3efe>
    c4e2:	53 c0       	rjmp	.+166    	; 0xc58a <_Z12processMCodei+0x3fa4>
		analog_channel = pin - 54; // allow for pin numbers
    c4e4:	92 83       	std	Z+2, r25	; 0x02
	else
		return -1; // can analog read a digital pin

	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((analog_channel >> 3) & 0x01) << MUX5);
    c4e6:	ab e7       	ldi	r26, 0x7B	; 123
    c4e8:	b0 e0       	ldi	r27, 0x00	; 0
    c4ea:	8c 91       	ld	r24, X
    c4ec:	87 7f       	andi	r24, 0xF7	; 247
    c4ee:	98 70       	andi	r25, 0x08	; 8
    c4f0:	98 2b       	or	r25, r24
    c4f2:	9c 93       	st	X, r25
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
	ADMUX = (analog_reference << 6) | (analog_channel & 0x07);
    c4f4:	83 81       	ldd	r24, Z+3	; 0x03
    c4f6:	20 e4       	ldi	r18, 0x40	; 64
    c4f8:	82 9f       	mul	r24, r18
    c4fa:	c0 01       	movw	r24, r0
    c4fc:	11 24       	eor	r1, r1
    c4fe:	92 81       	ldd	r25, Z+2	; 0x02
    c500:	97 70       	andi	r25, 0x07	; 7
    c502:	89 2b       	or	r24, r25
    c504:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>

	// without a delay, we seem to read from the wrong channel
	//_delay_ms(1);

	// start the conversion
	sbi(ADCSRA, ADSC);
    c508:	ea e7       	ldi	r30, 0x7A	; 122
    c50a:	f0 e0       	ldi	r31, 0x00	; 0
    c50c:	80 81       	ld	r24, Z
    c50e:	80 64       	ori	r24, 0x40	; 64
    c510:	80 83       	st	Z, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    c512:	80 81       	ld	r24, Z
    c514:	86 fd       	sbrc	r24, 6
    c516:	fd cf       	rjmp	.-6      	; 0xc512 <_Z12processMCodei+0x3f2c>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    c518:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	high = ADCH;
    c51c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
			   int res = apin->analogRead();
			   res = apin->analogRead(); // de-jitter
    c520:	e0 91 6e 14 	lds	r30, 0x146E	; 0x80146e <apin>
    c524:	f0 91 6f 14 	lds	r31, 0x146F	; 0x80146f <apin+0x1>
* Compute the analog channel from the given pin, but maintain the pin number as its digital designation.
*/
int analogRead()
{
	uint8_t low, high;
	if (pin >= 54 && pin <= 69) 
    c528:	a0 81       	ld	r26, Z
    c52a:	b1 81       	ldd	r27, Z+1	; 0x01
    c52c:	16 97       	sbiw	r26, 0x06	; 6
    c52e:	0d 90       	ld	r0, X+
    c530:	bc 91       	ld	r27, X
    c532:	a0 2d       	mov	r26, r0
    c534:	ae 0f       	add	r26, r30
    c536:	bf 1f       	adc	r27, r31
    c538:	8c 91       	ld	r24, X
    c53a:	86 53       	subi	r24, 0x36	; 54
    c53c:	80 31       	cpi	r24, 0x10	; 16
    c53e:	50 f5       	brcc	.+84     	; 0xc594 <_Z12processMCodei+0x3fae>
		analog_channel = pin - 54; // allow for pin numbers
    c540:	82 83       	std	Z+2, r24	; 0x02
	else
		return -1; // can analog read a digital pin

	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((analog_channel >> 3) & 0x01) << MUX5);
    c542:	ab e7       	ldi	r26, 0x7B	; 123
    c544:	b0 e0       	ldi	r27, 0x00	; 0
    c546:	9c 91       	ld	r25, X
    c548:	97 7f       	andi	r25, 0xF7	; 247
    c54a:	88 70       	andi	r24, 0x08	; 8
    c54c:	89 2b       	or	r24, r25
    c54e:	8c 93       	st	X, r24
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
	ADMUX = (analog_reference << 6) | (analog_channel & 0x07);
    c550:	83 81       	ldd	r24, Z+3	; 0x03
    c552:	30 e4       	ldi	r19, 0x40	; 64
    c554:	83 9f       	mul	r24, r19
    c556:	c0 01       	movw	r24, r0
    c558:	11 24       	eor	r1, r1
    c55a:	92 81       	ldd	r25, Z+2	; 0x02
    c55c:	97 70       	andi	r25, 0x07	; 7
    c55e:	89 2b       	or	r24, r25
    c560:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>

	// without a delay, we seem to read from the wrong channel
	//_delay_ms(1);

	// start the conversion
	sbi(ADCSRA, ADSC);
    c564:	ea e7       	ldi	r30, 0x7A	; 122
    c566:	f0 e0       	ldi	r31, 0x00	; 0
    c568:	80 81       	ld	r24, Z
    c56a:	80 64       	ori	r24, 0x40	; 64
    c56c:	80 83       	st	Z, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    c56e:	80 81       	ld	r24, Z
    c570:	86 fd       	sbrc	r24, 6
    c572:	fd cf       	rjmp	.-6      	; 0xc56e <_Z12processMCodei+0x3f88>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    c574:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    c578:	49 83       	std	Y+1, r20	; 0x01
	high = ADCH;
    c57a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>

	// combine the two bytes
	return (high << 8) | low;
    c57e:	a4 2f       	mov	r26, r20
    c580:	b0 e0       	ldi	r27, 0x00	; 0
    c582:	b8 2b       	or	r27, r24
    c584:	ba 83       	std	Y+2, r27	; 0x02
    c586:	a9 83       	std	Y+1, r26	; 0x01
    c588:	09 c0       	rjmp	.+18     	; 0xc59c <_Z12processMCodei+0x3fb6>
{
	uint8_t low, high;
	if (pin >= 54 && pin <= 69) 
		analog_channel = pin - 54; // allow for pin numbers
	else
		return -1; // can analog read a digital pin
    c58a:	ef ef       	ldi	r30, 0xFF	; 255
    c58c:	ff ef       	ldi	r31, 0xFF	; 255
    c58e:	fa 83       	std	Y+2, r31	; 0x02
    c590:	e9 83       	std	Y+1, r30	; 0x01
    c592:	04 c0       	rjmp	.+8      	; 0xc59c <_Z12processMCodei+0x3fb6>
    c594:	2f ef       	ldi	r18, 0xFF	; 255
    c596:	3f ef       	ldi	r19, 0xFF	; 255
    c598:	3a 83       	std	Y+2, r19	; 0x02
    c59a:	29 83       	std	Y+1, r18	; 0x01
			   unassignPin(pin_number);
    c59c:	80 91 1c 13 	lds	r24, 0x131C	; 0x80131c <pin_number>
    c5a0:	0e 94 80 1c 	call	0x3900	; 0x3900 <_Z11unassignPinh>
			   if( res < digitarg ) { // result < threshold is 0 by default
    c5a4:	80 91 20 13 	lds	r24, 0x1320	; 0x801320 <digitarg>
    c5a8:	90 91 21 13 	lds	r25, 0x1321	; 0x801321 <digitarg+0x1>
    c5ac:	49 81       	ldd	r20, Y+1	; 0x01
    c5ae:	5a 81       	ldd	r21, Y+2	; 0x02
    c5b0:	48 17       	cp	r20, r24
    c5b2:	59 07       	cpc	r21, r25
    c5b4:	24 f4       	brge	.+8      	; 0xc5be <_Z12processMCodei+0x3fd8>
				   publishBatteryVolts(res);
    c5b6:	ca 01       	movw	r24, r20
    c5b8:	0e 94 ac 3e 	call	0x7d58	; 0x7d58 <_Z19publishBatteryVoltsi>
    c5bc:	4f c0       	rjmp	.+158    	; 0xc65c <_Z12processMCodei+0x4076>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c5be:	e6 e4       	ldi	r30, 0x46	; 70
    c5c0:	ff e0       	ldi	r31, 0x0F	; 15
    c5c2:	64 91       	lpm	r22, Z
	while(ch)
    c5c4:	66 23       	and	r22, r22
    c5c6:	a1 f0       	breq	.+40     	; 0xc5f0 <_Z12processMCodei+0x400a>
    c5c8:	fa 83       	std	Y+2, r31	; 0x02
    c5ca:	e9 83       	std	Y+1, r30	; 0x01
    c5cc:	08 e0       	ldi	r16, 0x08	; 8
    c5ce:	1a e0       	ldi	r17, 0x0A	; 10
    c5d0:	d8 01       	movw	r26, r16
    c5d2:	ed 91       	ld	r30, X+
    c5d4:	fc 91       	ld	r31, X
    c5d6:	01 90       	ld	r0, Z+
    c5d8:	f0 81       	ld	r31, Z
    c5da:	e0 2d       	mov	r30, r0
    c5dc:	c8 01       	movw	r24, r16
    c5de:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c5e0:	e9 81       	ldd	r30, Y+1	; 0x01
    c5e2:	fa 81       	ldd	r31, Y+2	; 0x02
    c5e4:	31 96       	adiw	r30, 0x01	; 1
    c5e6:	fa 83       	std	Y+2, r31	; 0x02
    c5e8:	e9 83       	std	Y+1, r30	; 0x01
    c5ea:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c5ec:	61 11       	cpse	r22, r1
    c5ee:	f0 cf       	rjmp	.-32     	; 0xc5d0 <_Z12processMCodei+0x3fea>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c5f0:	e2 e4       	ldi	r30, 0x42	; 66
    c5f2:	ff e0       	ldi	r31, 0x0F	; 15
    c5f4:	64 91       	lpm	r22, Z
	while(ch)
    c5f6:	66 23       	and	r22, r22
    c5f8:	a1 f0       	breq	.+40     	; 0xc622 <_Z12processMCodei+0x403c>
    c5fa:	fa 83       	std	Y+2, r31	; 0x02
    c5fc:	e9 83       	std	Y+1, r30	; 0x01
    c5fe:	08 e0       	ldi	r16, 0x08	; 8
    c600:	1a e0       	ldi	r17, 0x0A	; 10
    c602:	d8 01       	movw	r26, r16
    c604:	ed 91       	ld	r30, X+
    c606:	fc 91       	ld	r31, X
    c608:	01 90       	ld	r0, Z+
    c60a:	f0 81       	ld	r31, Z
    c60c:	e0 2d       	mov	r30, r0
    c60e:	c8 01       	movw	r24, r16
    c610:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c612:	e9 81       	ldd	r30, Y+1	; 0x01
    c614:	fa 81       	ldd	r31, Y+2	; 0x02
    c616:	31 96       	adiw	r30, 0x01	; 1
    c618:	fa 83       	std	Y+2, r31	; 0x02
    c61a:	e9 83       	std	Y+1, r30	; 0x01
    c61c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c61e:	61 11       	cpse	r22, r1
    c620:	f0 cf       	rjmp	.-32     	; 0xc602 <_Z12processMCodei+0x401c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c622:	ef e3       	ldi	r30, 0x3F	; 63
    c624:	ff e0       	ldi	r31, 0x0F	; 15
    c626:	64 91       	lpm	r22, Z
	while(ch)
    c628:	66 23       	and	r22, r22
    c62a:	a1 f0       	breq	.+40     	; 0xc654 <_Z12processMCodei+0x406e>
    c62c:	fa 83       	std	Y+2, r31	; 0x02
    c62e:	e9 83       	std	Y+1, r30	; 0x01
    c630:	08 e0       	ldi	r16, 0x08	; 8
    c632:	1a e0       	ldi	r17, 0x0A	; 10
    c634:	d8 01       	movw	r26, r16
    c636:	ed 91       	ld	r30, X+
    c638:	fc 91       	ld	r31, X
    c63a:	01 90       	ld	r0, Z+
    c63c:	f0 81       	ld	r31, Z
    c63e:	e0 2d       	mov	r30, r0
    c640:	c8 01       	movw	r24, r16
    c642:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c644:	e9 81       	ldd	r30, Y+1	; 0x01
    c646:	fa 81       	ldd	r31, Y+2	; 0x02
    c648:	31 96       	adiw	r30, 0x01	; 1
    c64a:	fa 83       	std	Y+2, r31	; 0x02
    c64c:	e9 83       	std	Y+1, r30	; 0x01
    c64e:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c650:	61 11       	cpse	r22, r1
    c652:	f0 cf       	rjmp	.-32     	; 0xc634 <_Z12processMCodei+0x404e>
			   } else {
				   SERIAL_PGM(MSG_BEGIN);
				   SERIAL_PGM("M47");
				   SERIAL_PGMLN(MSG_TERMINATE);
    c654:	88 e0       	ldi	r24, 0x08	; 8
    c656:	9a e0       	ldi	r25, 0x0A	; 10
    c658:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
			   }
			   SERIAL_PORT.flush();
    c65c:	88 e0       	ldi	r24, 0x08	; 8
    c65e:	9a e0       	ldi	r25, 0x0A	; 10
    c660:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
			   delete apin;
    c664:	80 91 6e 14 	lds	r24, 0x146E	; 0x80146e <apin>
    c668:	90 91 6f 14 	lds	r25, 0x146F	; 0x80146f <apin+0x1>
    c66c:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
    c670:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c674:	ed e3       	ldi	r30, 0x3D	; 61
    c676:	ff e0       	ldi	r31, 0x0F	; 15
    c678:	64 91       	lpm	r22, Z
	while(ch)
    c67a:	66 23       	and	r22, r22
    c67c:	a1 f0       	breq	.+40     	; 0xc6a6 <_Z12processMCodei+0x40c0>
    c67e:	fa 83       	std	Y+2, r31	; 0x02
    c680:	e9 83       	std	Y+1, r30	; 0x01
    c682:	08 e0       	ldi	r16, 0x08	; 8
    c684:	1a e0       	ldi	r17, 0x0A	; 10
    c686:	d8 01       	movw	r26, r16
    c688:	ed 91       	ld	r30, X+
    c68a:	fc 91       	ld	r31, X
    c68c:	01 90       	ld	r0, Z+
    c68e:	f0 81       	ld	r31, Z
    c690:	e0 2d       	mov	r30, r0
    c692:	c8 01       	movw	r24, r16
    c694:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c696:	e9 81       	ldd	r30, Y+1	; 0x01
    c698:	fa 81       	ldd	r31, Y+2	; 0x02
    c69a:	31 96       	adiw	r30, 0x01	; 1
    c69c:	fa 83       	std	Y+2, r31	; 0x02
    c69e:	e9 83       	std	Y+1, r30	; 0x01
    c6a0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c6a2:	61 11       	cpse	r22, r1
    c6a4:	f0 cf       	rjmp	.-32     	; 0xc686 <_Z12processMCodei+0x40a0>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c6a6:	e9 e3       	ldi	r30, 0x39	; 57
    c6a8:	ff e0       	ldi	r31, 0x0F	; 15
    c6aa:	64 91       	lpm	r22, Z
	while(ch)
    c6ac:	66 23       	and	r22, r22
    c6ae:	a1 f0       	breq	.+40     	; 0xc6d8 <_Z12processMCodei+0x40f2>
    c6b0:	fa 83       	std	Y+2, r31	; 0x02
    c6b2:	e9 83       	std	Y+1, r30	; 0x01
    c6b4:	08 e0       	ldi	r16, 0x08	; 8
    c6b6:	1a e0       	ldi	r17, 0x0A	; 10
    c6b8:	d8 01       	movw	r26, r16
    c6ba:	ed 91       	ld	r30, X+
    c6bc:	fc 91       	ld	r31, X
    c6be:	01 90       	ld	r0, Z+
    c6c0:	f0 81       	ld	r31, Z
    c6c2:	e0 2d       	mov	r30, r0
    c6c4:	c8 01       	movw	r24, r16
    c6c6:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c6c8:	e9 81       	ldd	r30, Y+1	; 0x01
    c6ca:	fa 81       	ldd	r31, Y+2	; 0x02
    c6cc:	31 96       	adiw	r30, 0x01	; 1
    c6ce:	fa 83       	std	Y+2, r31	; 0x02
    c6d0:	e9 83       	std	Y+1, r30	; 0x01
    c6d2:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c6d4:	61 11       	cpse	r22, r1
    c6d6:	f0 cf       	rjmp	.-32     	; 0xc6b8 <_Z12processMCodei+0x40d2>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c6d8:	e6 e3       	ldi	r30, 0x36	; 54
    c6da:	ff e0       	ldi	r31, 0x0F	; 15
    c6dc:	64 91       	lpm	r22, Z
	while(ch)
    c6de:	66 23       	and	r22, r22
    c6e0:	a1 f0       	breq	.+40     	; 0xc70a <_Z12processMCodei+0x4124>
    c6e2:	fa 83       	std	Y+2, r31	; 0x02
    c6e4:	e9 83       	std	Y+1, r30	; 0x01
    c6e6:	08 e0       	ldi	r16, 0x08	; 8
    c6e8:	1a e0       	ldi	r17, 0x0A	; 10
    c6ea:	d8 01       	movw	r26, r16
    c6ec:	ed 91       	ld	r30, X+
    c6ee:	fc 91       	ld	r31, X
    c6f0:	01 90       	ld	r0, Z+
    c6f2:	f0 81       	ld	r31, Z
    c6f4:	e0 2d       	mov	r30, r0
    c6f6:	c8 01       	movw	r24, r16
    c6f8:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c6fa:	e9 81       	ldd	r30, Y+1	; 0x01
    c6fc:	fa 81       	ldd	r31, Y+2	; 0x02
    c6fe:	31 96       	adiw	r30, 0x01	; 1
    c700:	fa 83       	std	Y+2, r31	; 0x02
    c702:	e9 83       	std	Y+1, r30	; 0x01
    c704:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c706:	61 11       	cpse	r22, r1
    c708:	f0 cf       	rjmp	.-32     	; 0xc6ea <_Z12processMCodei+0x4104>
            WRITE(SUICIDE_PIN, HIGH);
        #endif
      #endif
	  	SERIAL_PGM(MSG_BEGIN);
	  	SERIAL_PGM("M80");
	  	SERIAL_PGMLN(MSG_TERMINATE);
    c70a:	88 e0       	ldi	r24, 0x08	; 8
    c70c:	9a e0       	ldi	r25, 0x0A	; 10
    c70e:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
	  	SERIAL_PORT.flush();
    c712:	88 e0       	ldi	r24, 0x08	; 8
    c714:	9a e0       	ldi	r25, 0x0A	; 10
    c716:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
	  break;
    c71a:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>

     case 81: // M81 [Z<slot>] X - Turn off Power Z shut down motorcontroller in slot, X shut down PWM, slot -1 do all
	  int scode;
	  if( code_seen('Z')) {
    c71e:	8a e5       	ldi	r24, 0x5A	; 90
    c720:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    c724:	88 23       	and	r24, r24
    c726:	09 f4       	brne	.+2      	; 0xc72a <_Z12processMCodei+0x4144>
    c728:	b0 c0       	rjmp	.+352    	; 0xc88a <_Z12processMCodei+0x42a4>
		scode = code_value();
    c72a:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    c72e:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    c732:	6b 01       	movw	r12, r22
    c734:	7c 01       	movw	r14, r24
		if(scode == -1) {
    c736:	6f 3f       	cpi	r22, 0xFF	; 255
    c738:	7f 4f       	sbci	r23, 0xFF	; 255
    c73a:	09 f0       	breq	.+2      	; 0xc73e <_Z12processMCodei+0x4158>
    c73c:	5b c0       	rjmp	.+182    	; 0xc7f4 <_Z12processMCodei+0x420e>
			if(code_seen('X')) {
    c73e:	88 e5       	ldi	r24, 0x58	; 88
    c740:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    c744:	88 23       	and	r24, r24
    c746:	59 f1       	breq	.+86     	; 0xc79e <_Z12processMCodei+0x41b8>
    c748:	23 ee       	ldi	r18, 0xE3	; 227
    c74a:	32 e1       	ldi	r19, 0x12	; 18
    c74c:	3a 83       	std	Y+2, r19	; 0x02
    c74e:	29 83       	std	Y+1, r18	; 0x01
    c750:	07 ef       	ldi	r16, 0xF7	; 247
    c752:	12 e1       	ldi	r17, 0x12	; 18
    c754:	e9 80       	ldd	r14, Y+1	; 0x01
    c756:	fa 80       	ldd	r15, Y+2	; 0x02
				for(int k = 0; k < 10; k++) {
					if(pwmControl[k]) {
    c758:	d7 01       	movw	r26, r14
    c75a:	8d 91       	ld	r24, X+
    c75c:	9c 91       	ld	r25, X
    c75e:	00 97       	sbiw	r24, 0x00	; 0
    c760:	a9 f0       	breq	.+42     	; 0xc78c <_Z12processMCodei+0x41a6>
						if(pwmControl[k]->isConnected()) {
    c762:	dc 01       	movw	r26, r24
    c764:	ed 91       	ld	r30, X+
    c766:	fc 91       	ld	r31, X
    c768:	00 84       	ldd	r0, Z+8	; 0x08
    c76a:	f1 85       	ldd	r31, Z+9	; 0x09
    c76c:	e0 2d       	mov	r30, r0
    c76e:	19 95       	eicall
    c770:	89 2b       	or	r24, r25
    c772:	61 f0       	breq	.+24     	; 0xc78c <_Z12processMCodei+0x41a6>
							pwmControl[k]->commandEmergencyStop(81);
    c774:	f7 01       	movw	r30, r14
    c776:	80 81       	ld	r24, Z
    c778:	91 81       	ldd	r25, Z+1	; 0x01
    c77a:	dc 01       	movw	r26, r24
    c77c:	ed 91       	ld	r30, X+
    c77e:	fc 91       	ld	r31, X
    c780:	06 80       	ldd	r0, Z+6	; 0x06
    c782:	f7 81       	ldd	r31, Z+7	; 0x07
    c784:	e0 2d       	mov	r30, r0
    c786:	61 e5       	ldi	r22, 0x51	; 81
    c788:	70 e0       	ldi	r23, 0x00	; 0
    c78a:	19 95       	eicall
    c78c:	e9 81       	ldd	r30, Y+1	; 0x01
    c78e:	fa 81       	ldd	r31, Y+2	; 0x02
    c790:	32 96       	adiw	r30, 0x02	; 2
    c792:	fa 83       	std	Y+2, r31	; 0x02
    c794:	e9 83       	std	Y+1, r30	; 0x01
	  int scode;
	  if( code_seen('Z')) {
		scode = code_value();
		if(scode == -1) {
			if(code_seen('X')) {
				for(int k = 0; k < 10; k++) {
    c796:	0e 17       	cp	r16, r30
    c798:	1f 07       	cpc	r17, r31
    c79a:	e1 f6       	brne	.-72     	; 0xc754 <_Z12processMCodei+0x416e>
    c79c:	76 c0       	rjmp	.+236    	; 0xc88a <_Z12processMCodei+0x42a4>
    c79e:	27 ef       	ldi	r18, 0xF7	; 247
    c7a0:	32 e1       	ldi	r19, 0x12	; 18
    c7a2:	3a 83       	std	Y+2, r19	; 0x02
    c7a4:	29 83       	std	Y+1, r18	; 0x01
    c7a6:	0b e0       	ldi	r16, 0x0B	; 11
    c7a8:	13 e1       	ldi	r17, 0x13	; 19
    c7aa:	e9 80       	ldd	r14, Y+1	; 0x01
    c7ac:	fa 80       	ldd	r15, Y+2	; 0x02
						}
					}
				}
			} else {
				for(int k = 0; k < 10; k++) {
					if(motorControl[k]) {
    c7ae:	d7 01       	movw	r26, r14
    c7b0:	8d 91       	ld	r24, X+
    c7b2:	9c 91       	ld	r25, X
    c7b4:	00 97       	sbiw	r24, 0x00	; 0
    c7b6:	a9 f0       	breq	.+42     	; 0xc7e2 <_Z12processMCodei+0x41fc>
						if(motorControl[k]->isConnected()) {
    c7b8:	dc 01       	movw	r26, r24
    c7ba:	ed 91       	ld	r30, X+
    c7bc:	fc 91       	ld	r31, X
    c7be:	00 84       	ldd	r0, Z+8	; 0x08
    c7c0:	f1 85       	ldd	r31, Z+9	; 0x09
    c7c2:	e0 2d       	mov	r30, r0
    c7c4:	19 95       	eicall
    c7c6:	89 2b       	or	r24, r25
    c7c8:	61 f0       	breq	.+24     	; 0xc7e2 <_Z12processMCodei+0x41fc>
							motorControl[k]->commandEmergencyStop(81);
    c7ca:	f7 01       	movw	r30, r14
    c7cc:	80 81       	ld	r24, Z
    c7ce:	91 81       	ldd	r25, Z+1	; 0x01
    c7d0:	dc 01       	movw	r26, r24
    c7d2:	ed 91       	ld	r30, X+
    c7d4:	fc 91       	ld	r31, X
    c7d6:	06 80       	ldd	r0, Z+6	; 0x06
    c7d8:	f7 81       	ldd	r31, Z+7	; 0x07
    c7da:	e0 2d       	mov	r30, r0
    c7dc:	61 e5       	ldi	r22, 0x51	; 81
    c7de:	70 e0       	ldi	r23, 0x00	; 0
    c7e0:	19 95       	eicall
    c7e2:	e9 81       	ldd	r30, Y+1	; 0x01
    c7e4:	fa 81       	ldd	r31, Y+2	; 0x02
    c7e6:	32 96       	adiw	r30, 0x02	; 2
    c7e8:	fa 83       	std	Y+2, r31	; 0x02
    c7ea:	e9 83       	std	Y+1, r30	; 0x01
							pwmControl[k]->commandEmergencyStop(81);
						}
					}
				}
			} else {
				for(int k = 0; k < 10; k++) {
    c7ec:	e0 17       	cp	r30, r16
    c7ee:	f1 07       	cpc	r31, r17
    c7f0:	e1 f6       	brne	.-72     	; 0xc7aa <_Z12processMCodei+0x41c4>
    c7f2:	4b c0       	rjmp	.+150    	; 0xc88a <_Z12processMCodei+0x42a4>
					}
				}
			}
		} else {
			motorController = scode; // slot seen
			if(code_seen('X')) {
    c7f4:	88 e5       	ldi	r24, 0x58	; 88
    c7f6:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    c7fa:	88 23       	and	r24, r24
    c7fc:	19 f1       	breq	.+70     	; 0xc844 <_Z12processMCodei+0x425e>
				if(pwmControl[motorController]) {
    c7fe:	f6 01       	movw	r30, r12
    c800:	ee 0f       	add	r30, r30
    c802:	ff 1f       	adc	r31, r31
    c804:	ed 51       	subi	r30, 0x1D	; 29
    c806:	fd 4e       	sbci	r31, 0xED	; 237
    c808:	80 81       	ld	r24, Z
    c80a:	91 81       	ldd	r25, Z+1	; 0x01
    c80c:	00 97       	sbiw	r24, 0x00	; 0
    c80e:	e9 f1       	breq	.+122    	; 0xc88a <_Z12processMCodei+0x42a4>
					if(pwmControl[motorController]->isConnected()) {
    c810:	dc 01       	movw	r26, r24
    c812:	ed 91       	ld	r30, X+
    c814:	fc 91       	ld	r31, X
    c816:	00 84       	ldd	r0, Z+8	; 0x08
    c818:	f1 85       	ldd	r31, Z+9	; 0x09
    c81a:	e0 2d       	mov	r30, r0
    c81c:	19 95       	eicall
    c81e:	89 2b       	or	r24, r25
    c820:	a1 f1       	breq	.+104    	; 0xc88a <_Z12processMCodei+0x42a4>
						pwmControl[motorController]->commandEmergencyStop(81);
    c822:	f6 01       	movw	r30, r12
    c824:	ee 0f       	add	r30, r30
    c826:	ff 1f       	adc	r31, r31
    c828:	ed 51       	subi	r30, 0x1D	; 29
    c82a:	fd 4e       	sbci	r31, 0xED	; 237
    c82c:	80 81       	ld	r24, Z
    c82e:	91 81       	ldd	r25, Z+1	; 0x01
    c830:	dc 01       	movw	r26, r24
    c832:	ed 91       	ld	r30, X+
    c834:	fc 91       	ld	r31, X
    c836:	06 80       	ldd	r0, Z+6	; 0x06
    c838:	f7 81       	ldd	r31, Z+7	; 0x07
    c83a:	e0 2d       	mov	r30, r0
    c83c:	61 e5       	ldi	r22, 0x51	; 81
    c83e:	70 e0       	ldi	r23, 0x00	; 0
    c840:	19 95       	eicall
    c842:	23 c0       	rjmp	.+70     	; 0xc88a <_Z12processMCodei+0x42a4>
					}
				}
			} else {			
				if(motorControl[motorController]) {
    c844:	f6 01       	movw	r30, r12
    c846:	ee 0f       	add	r30, r30
    c848:	ff 1f       	adc	r31, r31
    c84a:	e9 50       	subi	r30, 0x09	; 9
    c84c:	fd 4e       	sbci	r31, 0xED	; 237
    c84e:	80 81       	ld	r24, Z
    c850:	91 81       	ldd	r25, Z+1	; 0x01
    c852:	00 97       	sbiw	r24, 0x00	; 0
    c854:	d1 f0       	breq	.+52     	; 0xc88a <_Z12processMCodei+0x42a4>
					if( motorControl[motorController]->isConnected()) {
    c856:	dc 01       	movw	r26, r24
    c858:	ed 91       	ld	r30, X+
    c85a:	fc 91       	ld	r31, X
    c85c:	00 84       	ldd	r0, Z+8	; 0x08
    c85e:	f1 85       	ldd	r31, Z+9	; 0x09
    c860:	e0 2d       	mov	r30, r0
    c862:	19 95       	eicall
    c864:	89 2b       	or	r24, r25
    c866:	89 f0       	breq	.+34     	; 0xc88a <_Z12processMCodei+0x42a4>
						motorControl[motorController]->commandEmergencyStop(81);
    c868:	b6 01       	movw	r22, r12
    c86a:	66 0f       	add	r22, r22
    c86c:	77 1f       	adc	r23, r23
    c86e:	fb 01       	movw	r30, r22
    c870:	e9 50       	subi	r30, 0x09	; 9
    c872:	fd 4e       	sbci	r31, 0xED	; 237
    c874:	80 81       	ld	r24, Z
    c876:	91 81       	ldd	r25, Z+1	; 0x01
    c878:	dc 01       	movw	r26, r24
    c87a:	ed 91       	ld	r30, X+
    c87c:	fc 91       	ld	r31, X
    c87e:	06 80       	ldd	r0, Z+6	; 0x06
    c880:	f7 81       	ldd	r31, Z+7	; 0x07
    c882:	e0 2d       	mov	r30, r0
    c884:	61 e5       	ldi	r22, 0x51	; 81
    c886:	70 e0       	ldi	r23, 0x00	; 0
    c888:	19 95       	eicall
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    c88a:	bf ef       	ldi	r27, 0xFF	; 255
    c88c:	e3 ed       	ldi	r30, 0xD3	; 211
    c88e:	f0 e3       	ldi	r31, 0x30	; 48
    c890:	b1 50       	subi	r27, 0x01	; 1
    c892:	e0 40       	sbci	r30, 0x00	; 0
    c894:	f0 40       	sbci	r31, 0x00	; 0
    c896:	e1 f7       	brne	.-8      	; 0xc890 <_Z12processMCodei+0x42aa>
    c898:	00 c0       	rjmp	.+0      	; 0xc89a <_Z12processMCodei+0x42b4>
    c89a:	00 00       	nop
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c89c:	e4 e3       	ldi	r30, 0x34	; 52
    c89e:	ff e0       	ldi	r31, 0x0F	; 15
    c8a0:	64 91       	lpm	r22, Z
	while(ch)
    c8a2:	66 23       	and	r22, r22
    c8a4:	a1 f0       	breq	.+40     	; 0xc8ce <_Z12processMCodei+0x42e8>
    c8a6:	fa 83       	std	Y+2, r31	; 0x02
    c8a8:	e9 83       	std	Y+1, r30	; 0x01
    c8aa:	08 e0       	ldi	r16, 0x08	; 8
    c8ac:	1a e0       	ldi	r17, 0x0A	; 10
    c8ae:	d8 01       	movw	r26, r16
    c8b0:	ed 91       	ld	r30, X+
    c8b2:	fc 91       	ld	r31, X
    c8b4:	01 90       	ld	r0, Z+
    c8b6:	f0 81       	ld	r31, Z
    c8b8:	e0 2d       	mov	r30, r0
    c8ba:	c8 01       	movw	r24, r16
    c8bc:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c8be:	e9 81       	ldd	r30, Y+1	; 0x01
    c8c0:	fa 81       	ldd	r31, Y+2	; 0x02
    c8c2:	31 96       	adiw	r30, 0x01	; 1
    c8c4:	fa 83       	std	Y+2, r31	; 0x02
    c8c6:	e9 83       	std	Y+1, r30	; 0x01
    c8c8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c8ca:	61 11       	cpse	r22, r1
    c8cc:	f0 cf       	rjmp	.-32     	; 0xc8ae <_Z12processMCodei+0x42c8>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c8ce:	e0 e3       	ldi	r30, 0x30	; 48
    c8d0:	ff e0       	ldi	r31, 0x0F	; 15
    c8d2:	64 91       	lpm	r22, Z
	while(ch)
    c8d4:	66 23       	and	r22, r22
    c8d6:	a1 f0       	breq	.+40     	; 0xc900 <_Z12processMCodei+0x431a>
    c8d8:	fa 83       	std	Y+2, r31	; 0x02
    c8da:	e9 83       	std	Y+1, r30	; 0x01
    c8dc:	08 e0       	ldi	r16, 0x08	; 8
    c8de:	1a e0       	ldi	r17, 0x0A	; 10
    c8e0:	d8 01       	movw	r26, r16
    c8e2:	ed 91       	ld	r30, X+
    c8e4:	fc 91       	ld	r31, X
    c8e6:	01 90       	ld	r0, Z+
    c8e8:	f0 81       	ld	r31, Z
    c8ea:	e0 2d       	mov	r30, r0
    c8ec:	c8 01       	movw	r24, r16
    c8ee:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c8f0:	e9 81       	ldd	r30, Y+1	; 0x01
    c8f2:	fa 81       	ldd	r31, Y+2	; 0x02
    c8f4:	31 96       	adiw	r30, 0x01	; 1
    c8f6:	fa 83       	std	Y+2, r31	; 0x02
    c8f8:	e9 83       	std	Y+1, r30	; 0x01
    c8fa:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c8fc:	61 11       	cpse	r22, r1
    c8fe:	f0 cf       	rjmp	.-32     	; 0xc8e0 <_Z12processMCodei+0x42fa>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c900:	ed e2       	ldi	r30, 0x2D	; 45
    c902:	ff e0       	ldi	r31, 0x0F	; 15
    c904:	64 91       	lpm	r22, Z
	while(ch)
    c906:	66 23       	and	r22, r22
    c908:	a1 f0       	breq	.+40     	; 0xc932 <_Z12processMCodei+0x434c>
    c90a:	fa 83       	std	Y+2, r31	; 0x02
    c90c:	e9 83       	std	Y+1, r30	; 0x01
    c90e:	08 e0       	ldi	r16, 0x08	; 8
    c910:	1a e0       	ldi	r17, 0x0A	; 10
    c912:	d8 01       	movw	r26, r16
    c914:	ed 91       	ld	r30, X+
    c916:	fc 91       	ld	r31, X
    c918:	01 90       	ld	r0, Z+
    c91a:	f0 81       	ld	r31, Z
    c91c:	e0 2d       	mov	r30, r0
    c91e:	c8 01       	movw	r24, r16
    c920:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c922:	e9 81       	ldd	r30, Y+1	; 0x01
    c924:	fa 81       	ldd	r31, Y+2	; 0x02
    c926:	31 96       	adiw	r30, 0x01	; 1
    c928:	fa 83       	std	Y+2, r31	; 0x02
    c92a:	e9 83       	std	Y+1, r30	; 0x01
    c92c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c92e:	61 11       	cpse	r22, r1
    c930:	f0 cf       	rjmp	.-32     	; 0xc912 <_Z12processMCodei+0x432c>
        WRITE(PS_ON_PIN, PS_ON_ASLEEP);
      #endif
	    _delay_ms(1000); // Wait 1 sec before switch off
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM("M81");
		SERIAL_PGMLN(MSG_TERMINATE);
    c932:	88 e0       	ldi	r24, 0x08	; 8
    c934:	9a e0       	ldi	r25, 0x0A	; 10
    c936:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		SERIAL_PORT.flush();
    c93a:	88 e0       	ldi	r24, 0x08	; 8
    c93c:	9a e0       	ldi	r25, 0x0A	; 10
    c93e:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
	  break;
    c942:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c946:	eb e2       	ldi	r30, 0x2B	; 43
    c948:	ff e0       	ldi	r31, 0x0F	; 15
    c94a:	64 91       	lpm	r22, Z
	while(ch)
    c94c:	66 23       	and	r22, r22
    c94e:	a1 f0       	breq	.+40     	; 0xc978 <_Z12processMCodei+0x4392>
    c950:	fa 83       	std	Y+2, r31	; 0x02
    c952:	e9 83       	std	Y+1, r30	; 0x01
    c954:	08 e0       	ldi	r16, 0x08	; 8
    c956:	1a e0       	ldi	r17, 0x0A	; 10
    c958:	d8 01       	movw	r26, r16
    c95a:	ed 91       	ld	r30, X+
    c95c:	fc 91       	ld	r31, X
    c95e:	01 90       	ld	r0, Z+
    c960:	f0 81       	ld	r31, Z
    c962:	e0 2d       	mov	r30, r0
    c964:	c8 01       	movw	r24, r16
    c966:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c968:	e9 81       	ldd	r30, Y+1	; 0x01
    c96a:	fa 81       	ldd	r31, Y+2	; 0x02
    c96c:	31 96       	adiw	r30, 0x01	; 1
    c96e:	fa 83       	std	Y+2, r31	; 0x02
    c970:	e9 83       	std	Y+1, r30	; 0x01
    c972:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c974:	61 11       	cpse	r22, r1
    c976:	f0 cf       	rjmp	.-32     	; 0xc958 <_Z12processMCodei+0x4372>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c978:	e8 e0       	ldi	r30, 0x08	; 8
    c97a:	ff e0       	ldi	r31, 0x0F	; 15
    c97c:	64 91       	lpm	r22, Z
	while(ch)
    c97e:	66 23       	and	r22, r22
    c980:	a1 f0       	breq	.+40     	; 0xc9aa <_Z12processMCodei+0x43c4>
    c982:	fa 83       	std	Y+2, r31	; 0x02
    c984:	e9 83       	std	Y+1, r30	; 0x01
    c986:	08 e0       	ldi	r16, 0x08	; 8
    c988:	1a e0       	ldi	r17, 0x0A	; 10
    c98a:	d8 01       	movw	r26, r16
    c98c:	ed 91       	ld	r30, X+
    c98e:	fc 91       	ld	r31, X
    c990:	01 90       	ld	r0, Z+
    c992:	f0 81       	ld	r31, Z
    c994:	e0 2d       	mov	r30, r0
    c996:	c8 01       	movw	r24, r16
    c998:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c99a:	e9 81       	ldd	r30, Y+1	; 0x01
    c99c:	fa 81       	ldd	r31, Y+2	; 0x02
    c99e:	31 96       	adiw	r30, 0x01	; 1
    c9a0:	fa 83       	std	Y+2, r31	; 0x02
    c9a2:	e9 83       	std	Y+1, r30	; 0x01
    c9a4:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c9a6:	61 11       	cpse	r22, r1
    c9a8:	f0 cf       	rjmp	.-32     	; 0xc98a <_Z12processMCodei+0x43a4>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c9aa:	e6 e0       	ldi	r30, 0x06	; 6
    c9ac:	ff e0       	ldi	r31, 0x0F	; 15
    c9ae:	64 91       	lpm	r22, Z
	while(ch)
    c9b0:	66 23       	and	r22, r22
    c9b2:	a1 f0       	breq	.+40     	; 0xc9dc <_Z12processMCodei+0x43f6>
    c9b4:	fa 83       	std	Y+2, r31	; 0x02
    c9b6:	e9 83       	std	Y+1, r30	; 0x01
    c9b8:	08 e0       	ldi	r16, 0x08	; 8
    c9ba:	1a e0       	ldi	r17, 0x0A	; 10
    c9bc:	d8 01       	movw	r26, r16
    c9be:	ed 91       	ld	r30, X+
    c9c0:	fc 91       	ld	r31, X
    c9c2:	01 90       	ld	r0, Z+
    c9c4:	f0 81       	ld	r31, Z
    c9c6:	e0 2d       	mov	r30, r0
    c9c8:	c8 01       	movw	r24, r16
    c9ca:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    c9cc:	e9 81       	ldd	r30, Y+1	; 0x01
    c9ce:	fa 81       	ldd	r31, Y+2	; 0x02
    c9d0:	31 96       	adiw	r30, 0x01	; 1
    c9d2:	fa 83       	std	Y+2, r31	; 0x02
    c9d4:	e9 83       	std	Y+1, r30	; 0x01
    c9d6:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    c9d8:	61 11       	cpse	r22, r1
    c9da:	f0 cf       	rjmp	.-32     	; 0xc9bc <_Z12processMCodei+0x43d6>

	  
    case 115: // M115
	  SERIAL_PGM(MSG_BEGIN);
      SERIAL_PGM(MSG_M115_REPORT);
	  SERIAL_PGMLN(MSG_DELIMIT);
    c9dc:	88 e0       	ldi	r24, 0x08	; 8
    c9de:	9a e0       	ldi	r25, 0x0A	; 10
    c9e0:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    c9e4:	e5 e8       	ldi	r30, 0x85	; 133
    c9e6:	fe e0       	ldi	r31, 0x0E	; 14
    c9e8:	64 91       	lpm	r22, Z
	while(ch)
    c9ea:	66 23       	and	r22, r22
    c9ec:	a1 f0       	breq	.+40     	; 0xca16 <_Z12processMCodei+0x4430>
    c9ee:	fa 83       	std	Y+2, r31	; 0x02
    c9f0:	e9 83       	std	Y+1, r30	; 0x01
    c9f2:	08 e0       	ldi	r16, 0x08	; 8
    c9f4:	1a e0       	ldi	r17, 0x0A	; 10
    c9f6:	d8 01       	movw	r26, r16
    c9f8:	ed 91       	ld	r30, X+
    c9fa:	fc 91       	ld	r31, X
    c9fc:	01 90       	ld	r0, Z+
    c9fe:	f0 81       	ld	r31, Z
    ca00:	e0 2d       	mov	r30, r0
    ca02:	c8 01       	movw	r24, r16
    ca04:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ca06:	e9 81       	ldd	r30, Y+1	; 0x01
    ca08:	fa 81       	ldd	r31, Y+2	; 0x02
    ca0a:	31 96       	adiw	r30, 0x01	; 1
    ca0c:	fa 83       	std	Y+2, r31	; 0x02
    ca0e:	e9 83       	std	Y+1, r30	; 0x01
    ca10:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ca12:	61 11       	cpse	r22, r1
    ca14:	f0 cf       	rjmp	.-32     	; 0xc9f6 <_Z12processMCodei+0x4410>
	  SERIAL_PGMLN(MSG_115_REPORT2);
    ca16:	88 e0       	ldi	r24, 0x08	; 8
    ca18:	9a e0       	ldi	r25, 0x0A	; 10
    ca1a:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ca1e:	e3 e8       	ldi	r30, 0x83	; 131
    ca20:	fe e0       	ldi	r31, 0x0E	; 14
    ca22:	64 91       	lpm	r22, Z
	while(ch)
    ca24:	66 23       	and	r22, r22
    ca26:	a1 f0       	breq	.+40     	; 0xca50 <_Z12processMCodei+0x446a>
    ca28:	fa 83       	std	Y+2, r31	; 0x02
    ca2a:	e9 83       	std	Y+1, r30	; 0x01
    ca2c:	08 e0       	ldi	r16, 0x08	; 8
    ca2e:	1a e0       	ldi	r17, 0x0A	; 10
    ca30:	d8 01       	movw	r26, r16
    ca32:	ed 91       	ld	r30, X+
    ca34:	fc 91       	ld	r31, X
    ca36:	01 90       	ld	r0, Z+
    ca38:	f0 81       	ld	r31, Z
    ca3a:	e0 2d       	mov	r30, r0
    ca3c:	c8 01       	movw	r24, r16
    ca3e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ca40:	e9 81       	ldd	r30, Y+1	; 0x01
    ca42:	fa 81       	ldd	r31, Y+2	; 0x02
    ca44:	31 96       	adiw	r30, 0x01	; 1
    ca46:	fa 83       	std	Y+2, r31	; 0x02
    ca48:	e9 83       	std	Y+1, r30	; 0x01
    ca4a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ca4c:	61 11       	cpse	r22, r1
    ca4e:	f0 cf       	rjmp	.-32     	; 0xca30 <_Z12processMCodei+0x444a>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ca50:	e0 e6       	ldi	r30, 0x60	; 96
    ca52:	fe e0       	ldi	r31, 0x0E	; 14
    ca54:	64 91       	lpm	r22, Z
	while(ch)
    ca56:	66 23       	and	r22, r22
    ca58:	a1 f0       	breq	.+40     	; 0xca82 <_Z12processMCodei+0x449c>
    ca5a:	fa 83       	std	Y+2, r31	; 0x02
    ca5c:	e9 83       	std	Y+1, r30	; 0x01
    ca5e:	08 e0       	ldi	r16, 0x08	; 8
    ca60:	1a e0       	ldi	r17, 0x0A	; 10
    ca62:	d8 01       	movw	r26, r16
    ca64:	ed 91       	ld	r30, X+
    ca66:	fc 91       	ld	r31, X
    ca68:	01 90       	ld	r0, Z+
    ca6a:	f0 81       	ld	r31, Z
    ca6c:	e0 2d       	mov	r30, r0
    ca6e:	c8 01       	movw	r24, r16
    ca70:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ca72:	e9 81       	ldd	r30, Y+1	; 0x01
    ca74:	fa 81       	ldd	r31, Y+2	; 0x02
    ca76:	31 96       	adiw	r30, 0x01	; 1
    ca78:	fa 83       	std	Y+2, r31	; 0x02
    ca7a:	e9 83       	std	Y+1, r30	; 0x01
    ca7c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ca7e:	61 11       	cpse	r22, r1
    ca80:	f0 cf       	rjmp	.-32     	; 0xca62 <_Z12processMCodei+0x447c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ca82:	ed e5       	ldi	r30, 0x5D	; 93
    ca84:	fe e0       	ldi	r31, 0x0E	; 14
    ca86:	64 91       	lpm	r22, Z
	while(ch)
    ca88:	66 23       	and	r22, r22
    ca8a:	a1 f0       	breq	.+40     	; 0xcab4 <_Z12processMCodei+0x44ce>
    ca8c:	fa 83       	std	Y+2, r31	; 0x02
    ca8e:	e9 83       	std	Y+1, r30	; 0x01
    ca90:	08 e0       	ldi	r16, 0x08	; 8
    ca92:	1a e0       	ldi	r17, 0x0A	; 10
    ca94:	d8 01       	movw	r26, r16
    ca96:	ed 91       	ld	r30, X+
    ca98:	fc 91       	ld	r31, X
    ca9a:	01 90       	ld	r0, Z+
    ca9c:	f0 81       	ld	r31, Z
    ca9e:	e0 2d       	mov	r30, r0
    caa0:	c8 01       	movw	r24, r16
    caa2:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    caa4:	e9 81       	ldd	r30, Y+1	; 0x01
    caa6:	fa 81       	ldd	r31, Y+2	; 0x02
    caa8:	31 96       	adiw	r30, 0x01	; 1
    caaa:	fa 83       	std	Y+2, r31	; 0x02
    caac:	e9 83       	std	Y+1, r30	; 0x01
    caae:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    cab0:	61 11       	cpse	r22, r1
    cab2:	f0 cf       	rjmp	.-32     	; 0xca94 <_Z12processMCodei+0x44ae>
	  SERIAL_PGM(MSG_BEGIN);
	  SERIAL_PGM(MSG_M115_REPORT);
	  SERIAL_PGMLN(MSG_TERMINATE);
    cab4:	88 e0       	ldi	r24, 0x08	; 8
    cab6:	9a e0       	ldi	r25, 0x0A	; 10
    cab8:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
	  SERIAL_PORT.flush();
    cabc:	88 e0       	ldi	r24, 0x08	; 8
    cabe:	9a e0       	ldi	r25, 0x0A	; 10
    cac0:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
      break;
    cac4:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
	  
	
    case 300: // M300 - emit ultrasonic pulse on given pin and return duration P<pin number>
      uspin = code_seen('P') ? code_value() : 0;
    cac8:	80 e5       	ldi	r24, 0x50	; 80
    caca:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    cace:	88 23       	and	r24, r24
    cad0:	11 f4       	brne	.+4      	; 0xcad6 <_Z12processMCodei+0x44f0>
    cad2:	0c 94 13 7f 	jmp	0xfe26	; 0xfe26 <__DATA_REGION_LENGTH__+0x26>
    cad6:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    cada:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    cade:	70 93 1f 13 	sts	0x131F, r23	; 0x80131f <_ZL5uspin+0x1>
    cae2:	60 93 1e 13 	sts	0x131E, r22	; 0x80131e <_ZL5uspin>
      if (uspin > 0) {
    cae6:	16 16       	cp	r1, r22
    cae8:	17 06       	cpc	r1, r23
    caea:	14 f0       	brlt	.+4      	; 0xcaf0 <_Z12processMCodei+0x450a>
    caec:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		Ultrasonic* upin = new Ultrasonic(uspin);
    caf0:	86 e0       	ldi	r24, 0x06	; 6
    caf2:	90 e0       	ldi	r25, 0x00	; 0
    caf4:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    caf8:	7c 01       	movw	r14, r24
    cafa:	00 91 1e 13 	lds	r16, 0x131E	; 0x80131e <_ZL5uspin>
    cafe:	10 91 1f 13 	lds	r17, 0x131F	; 0x80131f <_ZL5uspin+0x1>
		unsigned long duration;
	public:
		Digital* pin;
		float getRange();
		Ultrasonic(int ipin) {
			pin = new Digital(ipin);
    cb02:	82 e0       	ldi	r24, 0x02	; 2
    cb04:	90 e0       	ldi	r25, 0x00	; 0
    cb06:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>

class Digital {
	public:
	uint8_t pin;
	uint8_t mode = INPUT; // default
	Digital(uint8_t spin) {
    cb0a:	dc 01       	movw	r26, r24
    cb0c:	11 96       	adiw	r26, 0x01	; 1
    cb0e:	1c 92       	st	X, r1
    cb10:	11 97       	sbiw	r26, 0x01	; 1
		this->pin = spin;
    cb12:	0c 93       	st	X, r16
    cb14:	f7 01       	movw	r30, r14
    cb16:	95 83       	std	Z+5, r25	; 0x05
    cb18:	84 83       	std	Z+4, r24	; 0x04
		pin_number = upin->getPin();
    cb1a:	11 27       	eor	r17, r17
    cb1c:	10 93 1d 13 	sts	0x131D, r17	; 0x80131d <pin_number+0x1>
    cb20:	00 93 1c 13 	sts	0x131C, r16	; 0x80131c <pin_number>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    cb24:	eb e5       	ldi	r30, 0x5B	; 91
    cb26:	fe e0       	ldi	r31, 0x0E	; 14
    cb28:	64 91       	lpm	r22, Z
	while(ch)
    cb2a:	66 23       	and	r22, r22
    cb2c:	89 f0       	breq	.+34     	; 0xcb50 <_Z12processMCodei+0x456a>
    cb2e:	8f 01       	movw	r16, r30
    cb30:	a8 e0       	ldi	r26, 0x08	; 8
    cb32:	ba e0       	ldi	r27, 0x0A	; 10
    cb34:	ed 91       	ld	r30, X+
    cb36:	fc 91       	ld	r31, X
    cb38:	11 97       	sbiw	r26, 0x01	; 1
    cb3a:	01 90       	ld	r0, Z+
    cb3c:	f0 81       	ld	r31, Z
    cb3e:	e0 2d       	mov	r30, r0
    cb40:	cd 01       	movw	r24, r26
    cb42:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    cb44:	0f 5f       	subi	r16, 0xFF	; 255
    cb46:	1f 4f       	sbci	r17, 0xFF	; 255
    cb48:	f8 01       	movw	r30, r16
    cb4a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    cb4c:	61 11       	cpse	r22, r1
    cb4e:	f0 cf       	rjmp	.-32     	; 0xcb30 <_Z12processMCodei+0x454a>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    cb50:	e0 e5       	ldi	r30, 0x50	; 80
    cb52:	fe e0       	ldi	r31, 0x0E	; 14
    cb54:	64 91       	lpm	r22, Z
	while(ch)
    cb56:	66 23       	and	r22, r22
    cb58:	89 f0       	breq	.+34     	; 0xcb7c <_Z12processMCodei+0x4596>
    cb5a:	8f 01       	movw	r16, r30
    cb5c:	a8 e0       	ldi	r26, 0x08	; 8
    cb5e:	ba e0       	ldi	r27, 0x0A	; 10
    cb60:	ed 91       	ld	r30, X+
    cb62:	fc 91       	ld	r31, X
    cb64:	11 97       	sbiw	r26, 0x01	; 1
    cb66:	01 90       	ld	r0, Z+
    cb68:	f0 81       	ld	r31, Z
    cb6a:	e0 2d       	mov	r30, r0
    cb6c:	cd 01       	movw	r24, r26
    cb6e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    cb70:	0f 5f       	subi	r16, 0xFF	; 255
    cb72:	1f 4f       	sbci	r17, 0xFF	; 255
    cb74:	f8 01       	movw	r30, r16
    cb76:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    cb78:	61 11       	cpse	r22, r1
    cb7a:	f0 cf       	rjmp	.-32     	; 0xcb5c <_Z12processMCodei+0x4576>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    cb7c:	ee e4       	ldi	r30, 0x4E	; 78
    cb7e:	fe e0       	ldi	r31, 0x0E	; 14
    cb80:	64 91       	lpm	r22, Z
	while(ch)
    cb82:	66 23       	and	r22, r22
    cb84:	89 f0       	breq	.+34     	; 0xcba8 <_Z12processMCodei+0x45c2>
    cb86:	8f 01       	movw	r16, r30
    cb88:	a8 e0       	ldi	r26, 0x08	; 8
    cb8a:	ba e0       	ldi	r27, 0x0A	; 10
    cb8c:	ed 91       	ld	r30, X+
    cb8e:	fc 91       	ld	r31, X
    cb90:	11 97       	sbiw	r26, 0x01	; 1
    cb92:	01 90       	ld	r0, Z+
    cb94:	f0 81       	ld	r31, Z
    cb96:	e0 2d       	mov	r30, r0
    cb98:	cd 01       	movw	r24, r26
    cb9a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    cb9c:	0f 5f       	subi	r16, 0xFF	; 255
    cb9e:	1f 4f       	sbci	r17, 0xFF	; 255
    cba0:	f8 01       	movw	r30, r16
    cba2:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    cba4:	61 11       	cpse	r22, r1
    cba6:	f0 cf       	rjmp	.-32     	; 0xcb88 <_Z12processMCodei+0x45a2>
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(sonicCntrlHdr);
		SERIAL_PGMLN(MSG_DELIMIT);
    cba8:	88 e0       	ldi	r24, 0x08	; 8
    cbaa:	9a e0       	ldi	r25, 0x0A	; 10
    cbac:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    cbb0:	eb e4       	ldi	r30, 0x4B	; 75
    cbb2:	fe e0       	ldi	r31, 0x0E	; 14
    cbb4:	64 91       	lpm	r22, Z
	while(ch)
    cbb6:	66 23       	and	r22, r22
    cbb8:	89 f0       	breq	.+34     	; 0xcbdc <_Z12processMCodei+0x45f6>
    cbba:	8f 01       	movw	r16, r30
    cbbc:	a8 e0       	ldi	r26, 0x08	; 8
    cbbe:	ba e0       	ldi	r27, 0x0A	; 10
    cbc0:	ed 91       	ld	r30, X+
    cbc2:	fc 91       	ld	r31, X
    cbc4:	11 97       	sbiw	r26, 0x01	; 1
    cbc6:	01 90       	ld	r0, Z+
    cbc8:	f0 81       	ld	r31, Z
    cbca:	e0 2d       	mov	r30, r0
    cbcc:	cd 01       	movw	r24, r26
    cbce:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    cbd0:	0f 5f       	subi	r16, 0xFF	; 255
    cbd2:	1f 4f       	sbci	r17, 0xFF	; 255
    cbd4:	f8 01       	movw	r30, r16
    cbd6:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    cbd8:	61 11       	cpse	r22, r1
    cbda:	f0 cf       	rjmp	.-32     	; 0xcbbc <_Z12processMCodei+0x45d6>
		SERIAL_PGM("1 "); // pin
		SERIAL_PORT.println(pin_number);
    cbdc:	60 91 1c 13 	lds	r22, 0x131C	; 0x80131c <pin_number>
    cbe0:	70 91 1d 13 	lds	r23, 0x131D	; 0x80131d <pin_number+0x1>
    cbe4:	4a e0       	ldi	r20, 0x0A	; 10
    cbe6:	50 e0       	ldi	r21, 0x00	; 0
    cbe8:	88 e0       	ldi	r24, 0x08	; 8
    cbea:	9a e0       	ldi	r25, 0x0A	; 10
    cbec:	0e 94 ab 8a 	call	0x11556	; 0x11556 <_ZN5Print7printlnEii>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    cbf0:	e8 e4       	ldi	r30, 0x48	; 72
    cbf2:	fe e0       	ldi	r31, 0x0E	; 14
    cbf4:	64 91       	lpm	r22, Z
	while(ch)
    cbf6:	66 23       	and	r22, r22
    cbf8:	89 f0       	breq	.+34     	; 0xcc1c <_Z12processMCodei+0x4636>
    cbfa:	8f 01       	movw	r16, r30
    cbfc:	a8 e0       	ldi	r26, 0x08	; 8
    cbfe:	ba e0       	ldi	r27, 0x0A	; 10
    cc00:	ed 91       	ld	r30, X+
    cc02:	fc 91       	ld	r31, X
    cc04:	11 97       	sbiw	r26, 0x01	; 1
    cc06:	01 90       	ld	r0, Z+
    cc08:	f0 81       	ld	r31, Z
    cc0a:	e0 2d       	mov	r30, r0
    cc0c:	cd 01       	movw	r24, r26
    cc0e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    cc10:	0f 5f       	subi	r16, 0xFF	; 255
    cc12:	1f 4f       	sbci	r17, 0xFF	; 255
    cc14:	f8 01       	movw	r30, r16
    cc16:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    cc18:	61 11       	cpse	r22, r1
    cc1a:	f0 cf       	rjmp	.-32     	; 0xcbfc <_Z12processMCodei+0x4616>
		SERIAL_PGM("2 "); // sequence
		SERIAL_PORT.println(upin->getRange()); // range
    cc1c:	c7 01       	movw	r24, r14
    cc1e:	0e 94 15 8c 	call	0x1182a	; 0x1182a <_ZN10Ultrasonic8getRangeEv>
    cc22:	ab 01       	movw	r20, r22
    cc24:	bc 01       	movw	r22, r24
    cc26:	22 e0       	ldi	r18, 0x02	; 2
    cc28:	30 e0       	ldi	r19, 0x00	; 0
    cc2a:	88 e0       	ldi	r24, 0x08	; 8
    cc2c:	9a e0       	ldi	r25, 0x0A	; 10
    cc2e:	0e 94 05 8c 	call	0x1180a	; 0x1180a <_ZN5Print7printlnEdi>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    cc32:	e6 e4       	ldi	r30, 0x46	; 70
    cc34:	fe e0       	ldi	r31, 0x0E	; 14
    cc36:	64 91       	lpm	r22, Z
	while(ch)
    cc38:	66 23       	and	r22, r22
    cc3a:	89 f0       	breq	.+34     	; 0xcc5e <_Z12processMCodei+0x4678>
    cc3c:	8f 01       	movw	r16, r30
    cc3e:	a8 e0       	ldi	r26, 0x08	; 8
    cc40:	ba e0       	ldi	r27, 0x0A	; 10
    cc42:	ed 91       	ld	r30, X+
    cc44:	fc 91       	ld	r31, X
    cc46:	11 97       	sbiw	r26, 0x01	; 1
    cc48:	01 90       	ld	r0, Z+
    cc4a:	f0 81       	ld	r31, Z
    cc4c:	e0 2d       	mov	r30, r0
    cc4e:	cd 01       	movw	r24, r26
    cc50:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    cc52:	0f 5f       	subi	r16, 0xFF	; 255
    cc54:	1f 4f       	sbci	r17, 0xFF	; 255
    cc56:	f8 01       	movw	r30, r16
    cc58:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    cc5a:	61 11       	cpse	r22, r1
    cc5c:	f0 cf       	rjmp	.-32     	; 0xcc3e <_Z12processMCodei+0x4658>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    cc5e:	eb e3       	ldi	r30, 0x3B	; 59
    cc60:	fe e0       	ldi	r31, 0x0E	; 14
    cc62:	64 91       	lpm	r22, Z
	while(ch)
    cc64:	66 23       	and	r22, r22
    cc66:	89 f0       	breq	.+34     	; 0xcc8a <_Z12processMCodei+0x46a4>
    cc68:	8f 01       	movw	r16, r30
    cc6a:	a8 e0       	ldi	r26, 0x08	; 8
    cc6c:	ba e0       	ldi	r27, 0x0A	; 10
    cc6e:	ed 91       	ld	r30, X+
    cc70:	fc 91       	ld	r31, X
    cc72:	11 97       	sbiw	r26, 0x01	; 1
    cc74:	01 90       	ld	r0, Z+
    cc76:	f0 81       	ld	r31, Z
    cc78:	e0 2d       	mov	r30, r0
    cc7a:	cd 01       	movw	r24, r26
    cc7c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    cc7e:	0f 5f       	subi	r16, 0xFF	; 255
    cc80:	1f 4f       	sbci	r17, 0xFF	; 255
    cc82:	f8 01       	movw	r30, r16
    cc84:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    cc86:	61 11       	cpse	r22, r1
    cc88:	f0 cf       	rjmp	.-32     	; 0xcc6a <_Z12processMCodei+0x4684>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    cc8a:	e8 e3       	ldi	r30, 0x38	; 56
    cc8c:	fe e0       	ldi	r31, 0x0E	; 14
    cc8e:	64 91       	lpm	r22, Z
	while(ch)
    cc90:	66 23       	and	r22, r22
    cc92:	89 f0       	breq	.+34     	; 0xccb6 <_Z12processMCodei+0x46d0>
    cc94:	8f 01       	movw	r16, r30
    cc96:	a8 e0       	ldi	r26, 0x08	; 8
    cc98:	ba e0       	ldi	r27, 0x0A	; 10
    cc9a:	ed 91       	ld	r30, X+
    cc9c:	fc 91       	ld	r31, X
    cc9e:	11 97       	sbiw	r26, 0x01	; 1
    cca0:	01 90       	ld	r0, Z+
    cca2:	f0 81       	ld	r31, Z
    cca4:	e0 2d       	mov	r30, r0
    cca6:	cd 01       	movw	r24, r26
    cca8:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ccaa:	0f 5f       	subi	r16, 0xFF	; 255
    ccac:	1f 4f       	sbci	r17, 0xFF	; 255
    ccae:	f8 01       	movw	r30, r16
    ccb0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ccb2:	61 11       	cpse	r22, r1
    ccb4:	f0 cf       	rjmp	.-32     	; 0xcc96 <_Z12processMCodei+0x46b0>
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(sonicCntrlHdr);
		SERIAL_PGMLN(MSG_TERMINATE);
    ccb6:	88 e0       	ldi	r24, 0x08	; 8
    ccb8:	9a e0       	ldi	r25, 0x0A	; 10
    ccba:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		SERIAL_PORT.flush();
    ccbe:	88 e0       	ldi	r24, 0x08	; 8
    ccc0:	9a e0       	ldi	r25, 0x0A	; 10
    ccc2:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
		delete upin;
    ccc6:	c7 01       	movw	r24, r14
    ccc8:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
    cccc:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
      }
    break;
		
    case 301: // M301 P<pin> - attach ultrasonic device to pin
		// wont assign pin 0 as its sensitive
		uspin = code_seen('P') ? code_value() : 0;
    ccd0:	80 e5       	ldi	r24, 0x50	; 80
    ccd2:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    ccd6:	88 23       	and	r24, r24
    ccd8:	11 f4       	brne	.+4      	; 0xccde <_Z12processMCodei+0x46f8>
    ccda:	0c 94 28 7f 	jmp	0xfe50	; 0xfe50 <__DATA_REGION_LENGTH__+0x50>
    ccde:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    cce2:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    cce6:	86 2f       	mov	r24, r22
    cce8:	97 2f       	mov	r25, r23
    ccea:	0c 94 2a 7f 	jmp	0xfe54	; 0xfe54 <__DATA_REGION_LENGTH__+0x54>
		// this is a permanent pin assignment so dont add if its already assigned
		if( assignPin(uspin) ) {
			for(int i = 0; i < 10; i++) {
				if(!psonics[i]) {
    ccee:	81 91       	ld	r24, Z+
    ccf0:	91 91       	ld	r25, Z+
    ccf2:	89 2b       	or	r24, r25
    ccf4:	09 f0       	breq	.+2      	; 0xccf8 <_Z12processMCodei+0x4712>
    ccf6:	73 c0       	rjmp	.+230    	; 0xcdde <_Z12processMCodei+0x47f8>
    ccf8:	02 c0       	rjmp	.+4      	; 0xccfe <_Z12processMCodei+0x4718>
    ccfa:	1a 82       	std	Y+2, r1	; 0x02
    ccfc:	19 82       	std	Y+1, r1	; 0x01
					psonics[i] = new Ultrasonic(uspin);
    ccfe:	86 e0       	ldi	r24, 0x06	; 6
    cd00:	90 e0       	ldi	r25, 0x00	; 0
    cd02:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    cd06:	8c 01       	movw	r16, r24
    cd08:	f0 90 1e 13 	lds	r15, 0x131E	; 0x80131e <_ZL5uspin>
    cd0c:	82 e0       	ldi	r24, 0x02	; 2
    cd0e:	90 e0       	ldi	r25, 0x00	; 0
    cd10:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>

class Digital {
	public:
	uint8_t pin;
	uint8_t mode = INPUT; // default
	Digital(uint8_t spin) {
    cd14:	dc 01       	movw	r26, r24
    cd16:	11 96       	adiw	r26, 0x01	; 1
    cd18:	1c 92       	st	X, r1
    cd1a:	11 97       	sbiw	r26, 0x01	; 1
		this->pin = spin;
    cd1c:	fc 92       	st	X, r15
    cd1e:	f8 01       	movw	r30, r16
    cd20:	95 83       	std	Z+5, r25	; 0x05
    cd22:	84 83       	std	Z+4, r24	; 0x04
    cd24:	e9 81       	ldd	r30, Y+1	; 0x01
    cd26:	fa 81       	ldd	r31, Y+2	; 0x02
    cd28:	ee 0f       	add	r30, r30
    cd2a:	ff 1f       	adc	r31, r31
    cd2c:	ed 5b       	subi	r30, 0xBD	; 189
    cd2e:	fb 4e       	sbci	r31, 0xEB	; 235
    cd30:	11 83       	std	Z+1, r17	; 0x01
    cd32:	00 83       	st	Z, r16
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    cd34:	e6 e3       	ldi	r30, 0x36	; 54
    cd36:	fe e0       	ldi	r31, 0x0E	; 14
    cd38:	64 91       	lpm	r22, Z
	while(ch)
    cd3a:	66 23       	and	r22, r22
    cd3c:	a1 f0       	breq	.+40     	; 0xcd66 <_Z12processMCodei+0x4780>
    cd3e:	fa 83       	std	Y+2, r31	; 0x02
    cd40:	e9 83       	std	Y+1, r30	; 0x01
    cd42:	08 e0       	ldi	r16, 0x08	; 8
    cd44:	1a e0       	ldi	r17, 0x0A	; 10
    cd46:	d8 01       	movw	r26, r16
    cd48:	ed 91       	ld	r30, X+
    cd4a:	fc 91       	ld	r31, X
    cd4c:	01 90       	ld	r0, Z+
    cd4e:	f0 81       	ld	r31, Z
    cd50:	e0 2d       	mov	r30, r0
    cd52:	c8 01       	movw	r24, r16
    cd54:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    cd56:	e9 81       	ldd	r30, Y+1	; 0x01
    cd58:	fa 81       	ldd	r31, Y+2	; 0x02
    cd5a:	31 96       	adiw	r30, 0x01	; 1
    cd5c:	fa 83       	std	Y+2, r31	; 0x02
    cd5e:	e9 83       	std	Y+1, r30	; 0x01
    cd60:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    cd62:	61 11       	cpse	r22, r1
    cd64:	f0 cf       	rjmp	.-32     	; 0xcd46 <_Z12processMCodei+0x4760>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    cd66:	e1 e3       	ldi	r30, 0x31	; 49
    cd68:	fe e0       	ldi	r31, 0x0E	; 14
    cd6a:	64 91       	lpm	r22, Z
	while(ch)
    cd6c:	66 23       	and	r22, r22
    cd6e:	a1 f0       	breq	.+40     	; 0xcd98 <_Z12processMCodei+0x47b2>
    cd70:	fa 83       	std	Y+2, r31	; 0x02
    cd72:	e9 83       	std	Y+1, r30	; 0x01
    cd74:	08 e0       	ldi	r16, 0x08	; 8
    cd76:	1a e0       	ldi	r17, 0x0A	; 10
    cd78:	d8 01       	movw	r26, r16
    cd7a:	ed 91       	ld	r30, X+
    cd7c:	fc 91       	ld	r31, X
    cd7e:	01 90       	ld	r0, Z+
    cd80:	f0 81       	ld	r31, Z
    cd82:	e0 2d       	mov	r30, r0
    cd84:	c8 01       	movw	r24, r16
    cd86:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    cd88:	e9 81       	ldd	r30, Y+1	; 0x01
    cd8a:	fa 81       	ldd	r31, Y+2	; 0x02
    cd8c:	31 96       	adiw	r30, 0x01	; 1
    cd8e:	fa 83       	std	Y+2, r31	; 0x02
    cd90:	e9 83       	std	Y+1, r30	; 0x01
    cd92:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    cd94:	61 11       	cpse	r22, r1
    cd96:	f0 cf       	rjmp	.-32     	; 0xcd78 <_Z12processMCodei+0x4792>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    cd98:	ee e2       	ldi	r30, 0x2E	; 46
    cd9a:	fe e0       	ldi	r31, 0x0E	; 14
    cd9c:	64 91       	lpm	r22, Z
	while(ch)
    cd9e:	66 23       	and	r22, r22
    cda0:	a1 f0       	breq	.+40     	; 0xcdca <_Z12processMCodei+0x47e4>
    cda2:	fa 83       	std	Y+2, r31	; 0x02
    cda4:	e9 83       	std	Y+1, r30	; 0x01
    cda6:	08 e0       	ldi	r16, 0x08	; 8
    cda8:	1a e0       	ldi	r17, 0x0A	; 10
    cdaa:	d8 01       	movw	r26, r16
    cdac:	ed 91       	ld	r30, X+
    cdae:	fc 91       	ld	r31, X
    cdb0:	01 90       	ld	r0, Z+
    cdb2:	f0 81       	ld	r31, Z
    cdb4:	e0 2d       	mov	r30, r0
    cdb6:	c8 01       	movw	r24, r16
    cdb8:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    cdba:	e9 81       	ldd	r30, Y+1	; 0x01
    cdbc:	fa 81       	ldd	r31, Y+2	; 0x02
    cdbe:	31 96       	adiw	r30, 0x01	; 1
    cdc0:	fa 83       	std	Y+2, r31	; 0x02
    cdc2:	e9 83       	std	Y+1, r30	; 0x01
    cdc4:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    cdc6:	61 11       	cpse	r22, r1
    cdc8:	f0 cf       	rjmp	.-32     	; 0xcdaa <_Z12processMCodei+0x47c4>
					SERIAL_PGM(MSG_BEGIN);
					SERIAL_PGM("M301");
					SERIAL_PGMLN(MSG_TERMINATE);
    cdca:	88 e0       	ldi	r24, 0x08	; 8
    cdcc:	9a e0       	ldi	r25, 0x0A	; 10
    cdce:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
					SERIAL_PORT.flush();
    cdd2:	88 e0       	ldi	r24, 0x08	; 8
    cdd4:	9a e0       	ldi	r25, 0x0A	; 10
    cdd6:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
					break;
    cdda:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
    case 301: // M301 P<pin> - attach ultrasonic device to pin
		// wont assign pin 0 as its sensitive
		uspin = code_seen('P') ? code_value() : 0;
		// this is a permanent pin assignment so dont add if its already assigned
		if( assignPin(uspin) ) {
			for(int i = 0; i < 10; i++) {
    cdde:	29 81       	ldd	r18, Y+1	; 0x01
    cde0:	3a 81       	ldd	r19, Y+2	; 0x02
    cde2:	2f 5f       	subi	r18, 0xFF	; 255
    cde4:	3f 4f       	sbci	r19, 0xFF	; 255
    cde6:	3a 83       	std	Y+2, r19	; 0x02
    cde8:	29 83       	std	Y+1, r18	; 0x01
    cdea:	2a 30       	cpi	r18, 0x0A	; 10
    cdec:	31 05       	cpc	r19, r1
    cdee:	09 f0       	breq	.+2      	; 0xcdf2 <_Z12processMCodei+0x480c>
    cdf0:	7e cf       	rjmp	.-260    	; 0xccee <_Z12processMCodei+0x4708>
    cdf2:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			}
		}
		break;
	
	case 302: // M302 P<pin> - remove ultrasonic pin
		uspin = code_seen('P') ? code_value() : 0;
    cdf6:	80 e5       	ldi	r24, 0x50	; 80
    cdf8:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    cdfc:	88 23       	and	r24, r24
    cdfe:	39 f0       	breq	.+14     	; 0xce0e <_Z12processMCodei+0x4828>
    ce00:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    ce04:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    ce08:	86 2f       	mov	r24, r22
    ce0a:	97 2f       	mov	r25, r23
    ce0c:	02 c0       	rjmp	.+4      	; 0xce12 <_Z12processMCodei+0x482c>
    ce0e:	80 e0       	ldi	r24, 0x00	; 0
    ce10:	90 e0       	ldi	r25, 0x00	; 0
    ce12:	80 93 1e 13 	sts	0x131E, r24	; 0x80131e <_ZL5uspin>
    ce16:	90 93 1f 13 	sts	0x131F, r25	; 0x80131f <_ZL5uspin+0x1>
		unassignPin(uspin);
    ce1a:	0e 94 80 1c 	call	0x3900	; 0x3900 <_Z11unassignPinh>
		for(int i = 0; i < 10; i++) {
				if(psonics[i] && psonics[i]->pin->pin == uspin) {
    ce1e:	40 91 1e 13 	lds	r20, 0x131E	; 0x80131e <_ZL5uspin>
    ce22:	50 91 1f 13 	lds	r21, 0x131F	; 0x80131f <_ZL5uspin+0x1>
    ce26:	63 e4       	ldi	r22, 0x43	; 67
    ce28:	74 e1       	ldi	r23, 0x14	; 20
		break;
	
	case 302: // M302 P<pin> - remove ultrasonic pin
		uspin = code_seen('P') ? code_value() : 0;
		unassignPin(uspin);
		for(int i = 0; i < 10; i++) {
    ce2a:	00 e0       	ldi	r16, 0x00	; 0
    ce2c:	10 e0       	ldi	r17, 0x00	; 0
				if(psonics[i] && psonics[i]->pin->pin == uspin) {
    ce2e:	db 01       	movw	r26, r22
    ce30:	ed 91       	ld	r30, X+
    ce32:	fd 91       	ld	r31, X+
    ce34:	bd 01       	movw	r22, r26
    ce36:	30 97       	sbiw	r30, 0x00	; 0
    ce38:	09 f4       	brne	.+2      	; 0xce3c <_Z12processMCodei+0x4856>
    ce3a:	68 c0       	rjmp	.+208    	; 0xcf0c <_Z12processMCodei+0x4926>
    ce3c:	84 81       	ldd	r24, Z+4	; 0x04
    ce3e:	95 81       	ldd	r25, Z+5	; 0x05
    ce40:	dc 01       	movw	r26, r24
    ce42:	2c 91       	ld	r18, X
    ce44:	30 e0       	ldi	r19, 0x00	; 0
    ce46:	24 17       	cp	r18, r20
    ce48:	35 07       	cpc	r19, r21
    ce4a:	09 f0       	breq	.+2      	; 0xce4e <_Z12processMCodei+0x4868>
    ce4c:	5f c0       	rjmp	.+190    	; 0xcf0c <_Z12processMCodei+0x4926>
					delete psonics[i];
    ce4e:	cf 01       	movw	r24, r30
    ce50:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
					psonics[i] = 0;
    ce54:	f8 01       	movw	r30, r16
    ce56:	ee 0f       	add	r30, r30
    ce58:	ff 1f       	adc	r31, r31
    ce5a:	ed 5b       	subi	r30, 0xBD	; 189
    ce5c:	fb 4e       	sbci	r31, 0xEB	; 235
    ce5e:	11 82       	std	Z+1, r1	; 0x01
    ce60:	10 82       	st	Z, r1
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ce62:	ec e2       	ldi	r30, 0x2C	; 44
    ce64:	fe e0       	ldi	r31, 0x0E	; 14
    ce66:	64 91       	lpm	r22, Z
	while(ch)
    ce68:	66 23       	and	r22, r22
    ce6a:	a1 f0       	breq	.+40     	; 0xce94 <_Z12processMCodei+0x48ae>
    ce6c:	fa 83       	std	Y+2, r31	; 0x02
    ce6e:	e9 83       	std	Y+1, r30	; 0x01
    ce70:	08 e0       	ldi	r16, 0x08	; 8
    ce72:	1a e0       	ldi	r17, 0x0A	; 10
    ce74:	d8 01       	movw	r26, r16
    ce76:	ed 91       	ld	r30, X+
    ce78:	fc 91       	ld	r31, X
    ce7a:	01 90       	ld	r0, Z+
    ce7c:	f0 81       	ld	r31, Z
    ce7e:	e0 2d       	mov	r30, r0
    ce80:	c8 01       	movw	r24, r16
    ce82:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ce84:	e9 81       	ldd	r30, Y+1	; 0x01
    ce86:	fa 81       	ldd	r31, Y+2	; 0x02
    ce88:	31 96       	adiw	r30, 0x01	; 1
    ce8a:	fa 83       	std	Y+2, r31	; 0x02
    ce8c:	e9 83       	std	Y+1, r30	; 0x01
    ce8e:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ce90:	61 11       	cpse	r22, r1
    ce92:	f0 cf       	rjmp	.-32     	; 0xce74 <_Z12processMCodei+0x488e>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ce94:	e7 e2       	ldi	r30, 0x27	; 39
    ce96:	fe e0       	ldi	r31, 0x0E	; 14
    ce98:	64 91       	lpm	r22, Z
	while(ch)
    ce9a:	66 23       	and	r22, r22
    ce9c:	a1 f0       	breq	.+40     	; 0xcec6 <_Z12processMCodei+0x48e0>
    ce9e:	fa 83       	std	Y+2, r31	; 0x02
    cea0:	e9 83       	std	Y+1, r30	; 0x01
    cea2:	08 e0       	ldi	r16, 0x08	; 8
    cea4:	1a e0       	ldi	r17, 0x0A	; 10
    cea6:	d8 01       	movw	r26, r16
    cea8:	ed 91       	ld	r30, X+
    ceaa:	fc 91       	ld	r31, X
    ceac:	01 90       	ld	r0, Z+
    ceae:	f0 81       	ld	r31, Z
    ceb0:	e0 2d       	mov	r30, r0
    ceb2:	c8 01       	movw	r24, r16
    ceb4:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ceb6:	e9 81       	ldd	r30, Y+1	; 0x01
    ceb8:	fa 81       	ldd	r31, Y+2	; 0x02
    ceba:	31 96       	adiw	r30, 0x01	; 1
    cebc:	fa 83       	std	Y+2, r31	; 0x02
    cebe:	e9 83       	std	Y+1, r30	; 0x01
    cec0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    cec2:	61 11       	cpse	r22, r1
    cec4:	f0 cf       	rjmp	.-32     	; 0xcea6 <_Z12processMCodei+0x48c0>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    cec6:	e4 e2       	ldi	r30, 0x24	; 36
    cec8:	fe e0       	ldi	r31, 0x0E	; 14
    ceca:	64 91       	lpm	r22, Z
	while(ch)
    cecc:	66 23       	and	r22, r22
    cece:	a1 f0       	breq	.+40     	; 0xcef8 <_Z12processMCodei+0x4912>
    ced0:	fa 83       	std	Y+2, r31	; 0x02
    ced2:	e9 83       	std	Y+1, r30	; 0x01
    ced4:	08 e0       	ldi	r16, 0x08	; 8
    ced6:	1a e0       	ldi	r17, 0x0A	; 10
    ced8:	d8 01       	movw	r26, r16
    ceda:	ed 91       	ld	r30, X+
    cedc:	fc 91       	ld	r31, X
    cede:	01 90       	ld	r0, Z+
    cee0:	f0 81       	ld	r31, Z
    cee2:	e0 2d       	mov	r30, r0
    cee4:	c8 01       	movw	r24, r16
    cee6:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    cee8:	e9 81       	ldd	r30, Y+1	; 0x01
    ceea:	fa 81       	ldd	r31, Y+2	; 0x02
    ceec:	31 96       	adiw	r30, 0x01	; 1
    ceee:	fa 83       	std	Y+2, r31	; 0x02
    cef0:	e9 83       	std	Y+1, r30	; 0x01
    cef2:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    cef4:	61 11       	cpse	r22, r1
    cef6:	f0 cf       	rjmp	.-32     	; 0xced8 <_Z12processMCodei+0x48f2>
					SERIAL_PGM(MSG_BEGIN);
					SERIAL_PGM("M302");
					SERIAL_PGMLN(MSG_TERMINATE);
    cef8:	88 e0       	ldi	r24, 0x08	; 8
    cefa:	9a e0       	ldi	r25, 0x0A	; 10
    cefc:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
					SERIAL_PORT.flush();
    cf00:	88 e0       	ldi	r24, 0x08	; 8
    cf02:	9a e0       	ldi	r25, 0x0A	; 10
    cf04:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
					break;
    cf08:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		break;
	
	case 302: // M302 P<pin> - remove ultrasonic pin
		uspin = code_seen('P') ? code_value() : 0;
		unassignPin(uspin);
		for(int i = 0; i < 10; i++) {
    cf0c:	0f 5f       	subi	r16, 0xFF	; 255
    cf0e:	1f 4f       	sbci	r17, 0xFF	; 255
    cf10:	0a 30       	cpi	r16, 0x0A	; 10
    cf12:	11 05       	cpc	r17, r1
    cf14:	09 f0       	breq	.+2      	; 0xcf18 <_Z12processMCodei+0x4932>
    cf16:	8b cf       	rjmp	.-234    	; 0xce2e <_Z12processMCodei+0x4848>
    cf18:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
    cf1c:	0b eb       	ldi	r16, 0xBB	; 187
    cf1e:	13 e1       	ldi	r17, 0x13	; 19
  */
  void processMCode(int cval) {
	  int motorController = 0; 
	  int PWMDriver = 0;
	  
    switch( cval ) {
    cf20:	1a 82       	std	Y+2, r1	; 0x02
    cf22:	19 82       	std	Y+1, r1	; 0x01
		}
      break;
	
	case 303: // M303 - Check the analog inputs for all pins defined by successive M304 directives. Generate a read and output data if in range.
		for(int i = 0 ; i < 16; i++) {
			if( panalogs[i] && panalogs[i]->mode == INPUT) {
    cf24:	d8 01       	movw	r26, r16
    cf26:	ed 91       	ld	r30, X+
    cf28:	fd 91       	ld	r31, X+
    cf2a:	8d 01       	movw	r16, r26
    cf2c:	30 97       	sbiw	r30, 0x00	; 0
    cf2e:	a9 f0       	breq	.+42     	; 0xcf5a <_Z12processMCodei+0x4974>
    cf30:	a0 81       	ld	r26, Z
    cf32:	b1 81       	ldd	r27, Z+1	; 0x01
    cf34:	16 97       	sbiw	r26, 0x06	; 6
    cf36:	0d 90       	ld	r0, X+
    cf38:	bc 91       	ld	r27, X
    cf3a:	a0 2d       	mov	r26, r0
    cf3c:	ae 0f       	add	r26, r30
    cf3e:	bf 1f       	adc	r27, r31
    cf40:	11 96       	adiw	r26, 0x01	; 1
    cf42:	8c 91       	ld	r24, X
    cf44:	81 11       	cpse	r24, r1
    cf46:	09 c0       	rjmp	.+18     	; 0xcf5a <_Z12processMCodei+0x4974>
				printAnalog(panalogs[i], i);
    cf48:	69 81       	ldd	r22, Y+1	; 0x01
    cf4a:	7a 81       	ldd	r23, Y+2	; 0x02
    cf4c:	cf 01       	movw	r24, r30
    cf4e:	0e 94 52 40 	call	0x80a4	; 0x80a4 <_Z11printAnalogP6Analogi>
				SERIAL_PORT.flush();
    cf52:	88 e0       	ldi	r24, 0x08	; 8
    cf54:	9a e0       	ldi	r25, 0x0A	; 10
    cf56:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
				}
		}
      break;
	
	case 303: // M303 - Check the analog inputs for all pins defined by successive M304 directives. Generate a read and output data if in range.
		for(int i = 0 ; i < 16; i++) {
    cf5a:	e9 81       	ldd	r30, Y+1	; 0x01
    cf5c:	fa 81       	ldd	r31, Y+2	; 0x02
    cf5e:	31 96       	adiw	r30, 0x01	; 1
    cf60:	fa 83       	std	Y+2, r31	; 0x02
    cf62:	e9 83       	std	Y+1, r30	; 0x01
    cf64:	70 97       	sbiw	r30, 0x10	; 16
    cf66:	f1 f6       	brne	.-68     	; 0xcf24 <_Z12processMCodei+0x493e>
    cf68:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		}
      break;
	  
	case 304:// M304 P<pin> [L<min>] [H<max>] [U] - toggle analog read optional INPUT_PULLUP with optional exclusion range 0-1024 via L<min> H<max>
		// if optional L and H values exclude readings in that range
		uspin = code_seen('P') ? code_value() : 0;
    cf6c:	80 e5       	ldi	r24, 0x50	; 80
    cf6e:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    cf72:	88 23       	and	r24, r24
    cf74:	11 f4       	brne	.+4      	; 0xcf7a <_Z12processMCodei+0x4994>
    cf76:	0c 94 43 7f 	jmp	0xfe86	; 0xfe86 <__DATA_REGION_LENGTH__+0x86>
    cf7a:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    cf7e:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    cf82:	86 2f       	mov	r24, r22
    cf84:	97 2f       	mov	r25, r23
    cf86:	0c 94 45 7f 	jmp	0xfe8a	; 0xfe8a <__DATA_REGION_LENGTH__+0x8a>
		// this is a permanent pin assignment so dont add if its already assigned
		if( assignPin(uspin) ) {
			for(int i = 0; i < 16; i++) {
				if(!panalogs[i]) {
    cf8a:	81 91       	ld	r24, Z+
    cf8c:	91 91       	ld	r25, Z+
    cf8e:	89 2b       	or	r24, r25
    cf90:	09 f0       	breq	.+2      	; 0xcf94 <_Z12processMCodei+0x49ae>
    cf92:	b7 c0       	rjmp	.+366    	; 0xd102 <_Z12processMCodei+0x4b1c>
    cf94:	02 c0       	rjmp	.+4      	; 0xcf9a <_Z12processMCodei+0x49b4>
    cf96:	1a 82       	std	Y+2, r1	; 0x02
    cf98:	19 82       	std	Y+1, r1	; 0x01
					analogRanges[0][i] = code_seen('L') ? code_value() : 0;
    cf9a:	8c e4       	ldi	r24, 0x4C	; 76
    cf9c:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    cfa0:	88 23       	and	r24, r24
    cfa2:	29 f0       	breq	.+10     	; 0xcfae <_Z12processMCodei+0x49c8>
    cfa4:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    cfa8:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    cfac:	02 c0       	rjmp	.+4      	; 0xcfb2 <_Z12processMCodei+0x49cc>
    cfae:	60 e0       	ldi	r22, 0x00	; 0
    cfb0:	70 e0       	ldi	r23, 0x00	; 0
    cfb2:	e9 81       	ldd	r30, Y+1	; 0x01
    cfb4:	fa 81       	ldd	r31, Y+2	; 0x02
    cfb6:	ee 0f       	add	r30, r30
    cfb8:	ff 1f       	adc	r31, r31
    cfba:	e5 52       	subi	r30, 0x25	; 37
    cfbc:	fc 4e       	sbci	r31, 0xEC	; 236
    cfbe:	71 83       	std	Z+1, r23	; 0x01
    cfc0:	60 83       	st	Z, r22
					analogRanges[1][i] = code_seen('H') ? code_value() : 0;
    cfc2:	88 e4       	ldi	r24, 0x48	; 72
    cfc4:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    cfc8:	88 23       	and	r24, r24
    cfca:	29 f0       	breq	.+10     	; 0xcfd6 <_Z12processMCodei+0x49f0>
    cfcc:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    cfd0:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    cfd4:	02 c0       	rjmp	.+4      	; 0xcfda <_Z12processMCodei+0x49f4>
    cfd6:	60 e0       	ldi	r22, 0x00	; 0
    cfd8:	70 e0       	ldi	r23, 0x00	; 0
    cfda:	e9 81       	ldd	r30, Y+1	; 0x01
    cfdc:	fa 81       	ldd	r31, Y+2	; 0x02
    cfde:	ee 0f       	add	r30, r30
    cfe0:	ff 1f       	adc	r31, r31
    cfe2:	e5 50       	subi	r30, 0x05	; 5
    cfe4:	fc 4e       	sbci	r31, 0xEC	; 236
    cfe6:	71 83       	std	Z+1, r23	; 0x01
    cfe8:	60 83       	st	Z, r22
					panalogs[i] = new Analog(uspin);
    cfea:	86 e0       	ldi	r24, 0x06	; 6
    cfec:	90 e0       	ldi	r25, 0x00	; 0
    cfee:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    cff2:	fc 01       	movw	r30, r24
    cff4:	80 91 1e 13 	lds	r24, 0x131E	; 0x80131e <_ZL5uspin>

class Digital {
	public:
	uint8_t pin;
	uint8_t mode = INPUT; // default
	Digital(uint8_t spin) {
    cff8:	15 82       	std	Z+5, r1	; 0x05
		this->pin = spin;
    cffa:	84 83       	std	Z+4, r24	; 0x04

class Analog : public virtual Digital {
	private:
	uint8_t analog_channel = 0;
	public:
		Analog(uint8_t spin) : Digital(spin) { 	sbi(ADCSRA, ADEN); }
    cffc:	86 ec       	ldi	r24, 0xC6	; 198
    cffe:	99 e0       	ldi	r25, 0x09	; 9
    d000:	91 83       	std	Z+1, r25	; 0x01
    d002:	80 83       	st	Z, r24
    d004:	12 82       	std	Z+2, r1	; 0x02
    d006:	81 e0       	ldi	r24, 0x01	; 1
    d008:	83 83       	std	Z+3, r24	; 0x03
    d00a:	aa e7       	ldi	r26, 0x7A	; 122
    d00c:	b0 e0       	ldi	r27, 0x00	; 0
    d00e:	8c 91       	ld	r24, X
    d010:	80 68       	ori	r24, 0x80	; 128
    d012:	8c 93       	st	X, r24
    d014:	a9 81       	ldd	r26, Y+1	; 0x01
    d016:	ba 81       	ldd	r27, Y+2	; 0x02
    d018:	aa 0f       	add	r26, r26
    d01a:	bb 1f       	adc	r27, r27
    d01c:	a5 54       	subi	r26, 0x45	; 69
    d01e:	bc 4e       	sbci	r27, 0xEC	; 236
    d020:	ed 93       	st	X+, r30
    d022:	fc 93       	st	X, r31
					if(code_seen('U'))  {
    d024:	85 e5       	ldi	r24, 0x55	; 85
    d026:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    d02a:	88 23       	and	r24, r24
    d02c:	11 f4       	brne	.+4      	; 0xd032 <_Z12processMCodei+0x4a4c>
    d02e:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
						panalogs[i]->pinMode(INPUT_PULLUP);
    d032:	e9 81       	ldd	r30, Y+1	; 0x01
    d034:	fa 81       	ldd	r31, Y+2	; 0x02
    d036:	ee 0f       	add	r30, r30
    d038:	ff 1f       	adc	r31, r31
    d03a:	e5 54       	subi	r30, 0x45	; 69
    d03c:	fc 4e       	sbci	r31, 0xEC	; 236
    d03e:	a0 81       	ld	r26, Z
    d040:	b1 81       	ldd	r27, Z+1	; 0x01
    d042:	ed 91       	ld	r30, X+
    d044:	fc 91       	ld	r31, X
    d046:	11 97       	sbiw	r26, 0x01	; 1
    d048:	36 97       	sbiw	r30, 0x06	; 6
    d04a:	80 81       	ld	r24, Z
    d04c:	91 81       	ldd	r25, Z+1	; 0x01
    d04e:	62 e0       	ldi	r22, 0x02	; 2
    d050:	8a 0f       	add	r24, r26
    d052:	9b 1f       	adc	r25, r27
    d054:	0e 94 d6 39 	call	0x73ac	; 0x73ac <_ZN7Digital7pinModeEh>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d058:	e2 e2       	ldi	r30, 0x22	; 34
    d05a:	fe e0       	ldi	r31, 0x0E	; 14
    d05c:	64 91       	lpm	r22, Z
	while(ch)
    d05e:	66 23       	and	r22, r22
    d060:	a1 f0       	breq	.+40     	; 0xd08a <_Z12processMCodei+0x4aa4>
    d062:	fa 83       	std	Y+2, r31	; 0x02
    d064:	e9 83       	std	Y+1, r30	; 0x01
    d066:	08 e0       	ldi	r16, 0x08	; 8
    d068:	1a e0       	ldi	r17, 0x0A	; 10
    d06a:	d8 01       	movw	r26, r16
    d06c:	ed 91       	ld	r30, X+
    d06e:	fc 91       	ld	r31, X
    d070:	01 90       	ld	r0, Z+
    d072:	f0 81       	ld	r31, Z
    d074:	e0 2d       	mov	r30, r0
    d076:	c8 01       	movw	r24, r16
    d078:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d07a:	e9 81       	ldd	r30, Y+1	; 0x01
    d07c:	fa 81       	ldd	r31, Y+2	; 0x02
    d07e:	31 96       	adiw	r30, 0x01	; 1
    d080:	fa 83       	std	Y+2, r31	; 0x02
    d082:	e9 83       	std	Y+1, r30	; 0x01
    d084:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d086:	61 11       	cpse	r22, r1
    d088:	f0 cf       	rjmp	.-32     	; 0xd06a <_Z12processMCodei+0x4a84>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d08a:	ed e1       	ldi	r30, 0x1D	; 29
    d08c:	fe e0       	ldi	r31, 0x0E	; 14
    d08e:	64 91       	lpm	r22, Z
	while(ch)
    d090:	66 23       	and	r22, r22
    d092:	a1 f0       	breq	.+40     	; 0xd0bc <_Z12processMCodei+0x4ad6>
    d094:	fa 83       	std	Y+2, r31	; 0x02
    d096:	e9 83       	std	Y+1, r30	; 0x01
    d098:	08 e0       	ldi	r16, 0x08	; 8
    d09a:	1a e0       	ldi	r17, 0x0A	; 10
    d09c:	d8 01       	movw	r26, r16
    d09e:	ed 91       	ld	r30, X+
    d0a0:	fc 91       	ld	r31, X
    d0a2:	01 90       	ld	r0, Z+
    d0a4:	f0 81       	ld	r31, Z
    d0a6:	e0 2d       	mov	r30, r0
    d0a8:	c8 01       	movw	r24, r16
    d0aa:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d0ac:	e9 81       	ldd	r30, Y+1	; 0x01
    d0ae:	fa 81       	ldd	r31, Y+2	; 0x02
    d0b0:	31 96       	adiw	r30, 0x01	; 1
    d0b2:	fa 83       	std	Y+2, r31	; 0x02
    d0b4:	e9 83       	std	Y+1, r30	; 0x01
    d0b6:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d0b8:	61 11       	cpse	r22, r1
    d0ba:	f0 cf       	rjmp	.-32     	; 0xd09c <_Z12processMCodei+0x4ab6>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d0bc:	ea e1       	ldi	r30, 0x1A	; 26
    d0be:	fe e0       	ldi	r31, 0x0E	; 14
    d0c0:	64 91       	lpm	r22, Z
	while(ch)
    d0c2:	66 23       	and	r22, r22
    d0c4:	a1 f0       	breq	.+40     	; 0xd0ee <_Z12processMCodei+0x4b08>
    d0c6:	fa 83       	std	Y+2, r31	; 0x02
    d0c8:	e9 83       	std	Y+1, r30	; 0x01
    d0ca:	08 e0       	ldi	r16, 0x08	; 8
    d0cc:	1a e0       	ldi	r17, 0x0A	; 10
    d0ce:	d8 01       	movw	r26, r16
    d0d0:	ed 91       	ld	r30, X+
    d0d2:	fc 91       	ld	r31, X
    d0d4:	01 90       	ld	r0, Z+
    d0d6:	f0 81       	ld	r31, Z
    d0d8:	e0 2d       	mov	r30, r0
    d0da:	c8 01       	movw	r24, r16
    d0dc:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d0de:	e9 81       	ldd	r30, Y+1	; 0x01
    d0e0:	fa 81       	ldd	r31, Y+2	; 0x02
    d0e2:	31 96       	adiw	r30, 0x01	; 1
    d0e4:	fa 83       	std	Y+2, r31	; 0x02
    d0e6:	e9 83       	std	Y+1, r30	; 0x01
    d0e8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d0ea:	61 11       	cpse	r22, r1
    d0ec:	f0 cf       	rjmp	.-32     	; 0xd0ce <_Z12processMCodei+0x4ae8>
						SERIAL_PGM(MSG_BEGIN);
						SERIAL_PGM("M304");
						SERIAL_PGMLN(MSG_TERMINATE);
    d0ee:	88 e0       	ldi	r24, 0x08	; 8
    d0f0:	9a e0       	ldi	r25, 0x0A	; 10
    d0f2:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
						SERIAL_PORT.flush();
    d0f6:	88 e0       	ldi	r24, 0x08	; 8
    d0f8:	9a e0       	ldi	r25, 0x0A	; 10
    d0fa:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    d0fe:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
	case 304:// M304 P<pin> [L<min>] [H<max>] [U] - toggle analog read optional INPUT_PULLUP with optional exclusion range 0-1024 via L<min> H<max>
		// if optional L and H values exclude readings in that range
		uspin = code_seen('P') ? code_value() : 0;
		// this is a permanent pin assignment so dont add if its already assigned
		if( assignPin(uspin) ) {
			for(int i = 0; i < 16; i++) {
    d102:	29 81       	ldd	r18, Y+1	; 0x01
    d104:	3a 81       	ldd	r19, Y+2	; 0x02
    d106:	2f 5f       	subi	r18, 0xFF	; 255
    d108:	3f 4f       	sbci	r19, 0xFF	; 255
    d10a:	3a 83       	std	Y+2, r19	; 0x02
    d10c:	29 83       	std	Y+1, r18	; 0x01
    d10e:	20 31       	cpi	r18, 0x10	; 16
    d110:	31 05       	cpc	r19, r1
    d112:	09 f0       	breq	.+2      	; 0xd116 <_Z12processMCodei+0x4b30>
    d114:	3a cf       	rjmp	.-396    	; 0xcf8a <_Z12processMCodei+0x49a4>
    d116:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
					break;
				}
			}
		} else { // reassign values for assigned pin
			for(int i = 0; i < 16; i++) {
				if(panalogs[i] && panalogs[i]->pin == uspin) {
    d11a:	d9 01       	movw	r26, r18
    d11c:	ed 91       	ld	r30, X+
    d11e:	fd 91       	ld	r31, X+
    d120:	9d 01       	movw	r18, r26
    d122:	30 97       	sbiw	r30, 0x00	; 0
    d124:	09 f4       	brne	.+2      	; 0xd128 <_Z12processMCodei+0x4b42>
    d126:	8a c0       	rjmp	.+276    	; 0xd23c <_Z12processMCodei+0x4c56>
    d128:	a0 81       	ld	r26, Z
    d12a:	b1 81       	ldd	r27, Z+1	; 0x01
    d12c:	16 97       	sbiw	r26, 0x06	; 6
    d12e:	8d 91       	ld	r24, X+
    d130:	9c 91       	ld	r25, X
    d132:	e8 0f       	add	r30, r24
    d134:	f9 1f       	adc	r31, r25
    d136:	80 81       	ld	r24, Z
    d138:	90 e0       	ldi	r25, 0x00	; 0
    d13a:	84 17       	cp	r24, r20
    d13c:	95 07       	cpc	r25, r21
    d13e:	09 f0       	breq	.+2      	; 0xd142 <_Z12processMCodei+0x4b5c>
    d140:	7d c0       	rjmp	.+250    	; 0xd23c <_Z12processMCodei+0x4c56>
					analogRanges[0][i] = code_seen('L') ? code_value() : 0;
    d142:	8c e4       	ldi	r24, 0x4C	; 76
    d144:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    d148:	88 23       	and	r24, r24
    d14a:	29 f0       	breq	.+10     	; 0xd156 <_Z12processMCodei+0x4b70>
    d14c:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    d150:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    d154:	02 c0       	rjmp	.+4      	; 0xd15a <_Z12processMCodei+0x4b74>
    d156:	60 e0       	ldi	r22, 0x00	; 0
    d158:	70 e0       	ldi	r23, 0x00	; 0
    d15a:	e9 81       	ldd	r30, Y+1	; 0x01
    d15c:	fa 81       	ldd	r31, Y+2	; 0x02
    d15e:	ee 0f       	add	r30, r30
    d160:	ff 1f       	adc	r31, r31
    d162:	e5 52       	subi	r30, 0x25	; 37
    d164:	fc 4e       	sbci	r31, 0xEC	; 236
    d166:	71 83       	std	Z+1, r23	; 0x01
    d168:	60 83       	st	Z, r22
					analogRanges[1][i] = code_seen('H') ? code_value() : 0;
    d16a:	88 e4       	ldi	r24, 0x48	; 72
    d16c:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    d170:	88 23       	and	r24, r24
    d172:	29 f0       	breq	.+10     	; 0xd17e <_Z12processMCodei+0x4b98>
    d174:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    d178:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    d17c:	02 c0       	rjmp	.+4      	; 0xd182 <_Z12processMCodei+0x4b9c>
    d17e:	60 e0       	ldi	r22, 0x00	; 0
    d180:	70 e0       	ldi	r23, 0x00	; 0
    d182:	e9 81       	ldd	r30, Y+1	; 0x01
    d184:	fa 81       	ldd	r31, Y+2	; 0x02
    d186:	ee 0f       	add	r30, r30
    d188:	ff 1f       	adc	r31, r31
    d18a:	e5 50       	subi	r30, 0x05	; 5
    d18c:	fc 4e       	sbci	r31, 0xEC	; 236
    d18e:	71 83       	std	Z+1, r23	; 0x01
    d190:	60 83       	st	Z, r22
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d192:	e8 e1       	ldi	r30, 0x18	; 24
    d194:	fe e0       	ldi	r31, 0x0E	; 14
    d196:	64 91       	lpm	r22, Z
	while(ch)
    d198:	66 23       	and	r22, r22
    d19a:	a1 f0       	breq	.+40     	; 0xd1c4 <_Z12processMCodei+0x4bde>
    d19c:	fa 83       	std	Y+2, r31	; 0x02
    d19e:	e9 83       	std	Y+1, r30	; 0x01
    d1a0:	08 e0       	ldi	r16, 0x08	; 8
    d1a2:	1a e0       	ldi	r17, 0x0A	; 10
    d1a4:	d8 01       	movw	r26, r16
    d1a6:	ed 91       	ld	r30, X+
    d1a8:	fc 91       	ld	r31, X
    d1aa:	01 90       	ld	r0, Z+
    d1ac:	f0 81       	ld	r31, Z
    d1ae:	e0 2d       	mov	r30, r0
    d1b0:	c8 01       	movw	r24, r16
    d1b2:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d1b4:	e9 81       	ldd	r30, Y+1	; 0x01
    d1b6:	fa 81       	ldd	r31, Y+2	; 0x02
    d1b8:	31 96       	adiw	r30, 0x01	; 1
    d1ba:	fa 83       	std	Y+2, r31	; 0x02
    d1bc:	e9 83       	std	Y+1, r30	; 0x01
    d1be:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d1c0:	61 11       	cpse	r22, r1
    d1c2:	f0 cf       	rjmp	.-32     	; 0xd1a4 <_Z12processMCodei+0x4bbe>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d1c4:	e3 e1       	ldi	r30, 0x13	; 19
    d1c6:	fe e0       	ldi	r31, 0x0E	; 14
    d1c8:	64 91       	lpm	r22, Z
	while(ch)
    d1ca:	66 23       	and	r22, r22
    d1cc:	a1 f0       	breq	.+40     	; 0xd1f6 <_Z12processMCodei+0x4c10>
    d1ce:	fa 83       	std	Y+2, r31	; 0x02
    d1d0:	e9 83       	std	Y+1, r30	; 0x01
    d1d2:	08 e0       	ldi	r16, 0x08	; 8
    d1d4:	1a e0       	ldi	r17, 0x0A	; 10
    d1d6:	d8 01       	movw	r26, r16
    d1d8:	ed 91       	ld	r30, X+
    d1da:	fc 91       	ld	r31, X
    d1dc:	01 90       	ld	r0, Z+
    d1de:	f0 81       	ld	r31, Z
    d1e0:	e0 2d       	mov	r30, r0
    d1e2:	c8 01       	movw	r24, r16
    d1e4:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d1e6:	e9 81       	ldd	r30, Y+1	; 0x01
    d1e8:	fa 81       	ldd	r31, Y+2	; 0x02
    d1ea:	31 96       	adiw	r30, 0x01	; 1
    d1ec:	fa 83       	std	Y+2, r31	; 0x02
    d1ee:	e9 83       	std	Y+1, r30	; 0x01
    d1f0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d1f2:	61 11       	cpse	r22, r1
    d1f4:	f0 cf       	rjmp	.-32     	; 0xd1d6 <_Z12processMCodei+0x4bf0>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d1f6:	e0 e1       	ldi	r30, 0x10	; 16
    d1f8:	fe e0       	ldi	r31, 0x0E	; 14
    d1fa:	64 91       	lpm	r22, Z
	while(ch)
    d1fc:	66 23       	and	r22, r22
    d1fe:	a1 f0       	breq	.+40     	; 0xd228 <_Z12processMCodei+0x4c42>
    d200:	fa 83       	std	Y+2, r31	; 0x02
    d202:	e9 83       	std	Y+1, r30	; 0x01
    d204:	08 e0       	ldi	r16, 0x08	; 8
    d206:	1a e0       	ldi	r17, 0x0A	; 10
    d208:	d8 01       	movw	r26, r16
    d20a:	ed 91       	ld	r30, X+
    d20c:	fc 91       	ld	r31, X
    d20e:	01 90       	ld	r0, Z+
    d210:	f0 81       	ld	r31, Z
    d212:	e0 2d       	mov	r30, r0
    d214:	c8 01       	movw	r24, r16
    d216:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d218:	e9 81       	ldd	r30, Y+1	; 0x01
    d21a:	fa 81       	ldd	r31, Y+2	; 0x02
    d21c:	31 96       	adiw	r30, 0x01	; 1
    d21e:	fa 83       	std	Y+2, r31	; 0x02
    d220:	e9 83       	std	Y+1, r30	; 0x01
    d222:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d224:	61 11       	cpse	r22, r1
    d226:	f0 cf       	rjmp	.-32     	; 0xd208 <_Z12processMCodei+0x4c22>
					SERIAL_PGM(MSG_BEGIN);
					SERIAL_PGM("M304");
					SERIAL_PGMLN(MSG_TERMINATE);
    d228:	88 e0       	ldi	r24, 0x08	; 8
    d22a:	9a e0       	ldi	r25, 0x0A	; 10
    d22c:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
					SERIAL_PORT.flush();
    d230:	88 e0       	ldi	r24, 0x08	; 8
    d232:	9a e0       	ldi	r25, 0x0A	; 10
    d234:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
					break;
    d238:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
					}
					break;
				}
			}
		} else { // reassign values for assigned pin
			for(int i = 0; i < 16; i++) {
    d23c:	89 81       	ldd	r24, Y+1	; 0x01
    d23e:	9a 81       	ldd	r25, Y+2	; 0x02
    d240:	01 96       	adiw	r24, 0x01	; 1
    d242:	9a 83       	std	Y+2, r25	; 0x02
    d244:	89 83       	std	Y+1, r24	; 0x01
    d246:	40 97       	sbiw	r24, 0x10	; 16
    d248:	09 f0       	breq	.+2      	; 0xd24c <_Z12processMCodei+0x4c66>
    d24a:	67 cf       	rjmp	.-306    	; 0xd11a <_Z12processMCodei+0x4b34>
    d24c:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
    d250:	ab e3       	ldi	r26, 0x3B	; 59
    d252:	b3 e1       	ldi	r27, 0x13	; 19
    d254:	0b e7       	ldi	r16, 0x7B	; 123
    d256:	13 e1       	ldi	r17, 0x13	; 19
    d258:	0f 2e       	mov	r0, r31
    d25a:	fb e7       	ldi	r31, 0x7B	; 123
    d25c:	ef 2e       	mov	r14, r31
    d25e:	f3 e1       	ldi	r31, 0x13	; 19
    d260:	ff 2e       	mov	r15, r31
    d262:	f0 2d       	mov	r31, r0
    d264:	ba 83       	std	Y+2, r27	; 0x02
    d266:	a9 83       	std	Y+1, r26	; 0x01
		}
      break;
	
	case 305: // M305 - Read the pins defined in M306 and output them if they are of the defined target value
		for(int i = 0 ; i < 32; i++) {
			if( pdigitals[i] && (pdigitals[i]->mode == INPUT || pdigitals[i]->mode == INPUT_PULLUP)) {
    d268:	a9 81       	ldd	r26, Y+1	; 0x01
    d26a:	ba 81       	ldd	r27, Y+2	; 0x02
    d26c:	ed 91       	ld	r30, X+
    d26e:	fd 91       	ld	r31, X+
    d270:	ba 83       	std	Y+2, r27	; 0x02
    d272:	a9 83       	std	Y+1, r26	; 0x01
    d274:	30 97       	sbiw	r30, 0x00	; 0
    d276:	69 f0       	breq	.+26     	; 0xd292 <_Z12processMCodei+0x4cac>
    d278:	91 81       	ldd	r25, Z+1	; 0x01
    d27a:	9d 7f       	andi	r25, 0xFD	; 253
    d27c:	51 f4       	brne	.+20     	; 0xd292 <_Z12processMCodei+0x4cac>
				printDigital(pdigitals[i], digitalTarget[i]);
    d27e:	d8 01       	movw	r26, r16
    d280:	6d 91       	ld	r22, X+
    d282:	7c 91       	ld	r23, X
    d284:	cf 01       	movw	r24, r30
    d286:	0e 94 91 41 	call	0x8322	; 0x8322 <_Z12printDigitalP7Digitali>
				SERIAL_PORT.flush();
    d28a:	88 e0       	ldi	r24, 0x08	; 8
    d28c:	9a e0       	ldi	r25, 0x0A	; 10
    d28e:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    d292:	0e 5f       	subi	r16, 0xFE	; 254
    d294:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		}
      break;
	
	case 305: // M305 - Read the pins defined in M306 and output them if they are of the defined target value
		for(int i = 0 ; i < 32; i++) {
    d296:	e9 81       	ldd	r30, Y+1	; 0x01
    d298:	fa 81       	ldd	r31, Y+2	; 0x02
    d29a:	ee 15       	cp	r30, r14
    d29c:	ff 05       	cpc	r31, r15
    d29e:	21 f7       	brne	.-56     	; 0xd268 <_Z12processMCodei+0x4c82>
    d2a0:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		}
      break;
	
	case 306://  M306 P<pin> T<target> [U] - toggle digital read, 0 or 1 for target value, default 0 optional INPUT_PULLUP 
		// Looks for target value, if so publish with <digitalpin> header and 1 - pin 2 - value
		uspin = code_seen('P') ? code_value() : 0;
    d2a4:	80 e5       	ldi	r24, 0x50	; 80
    d2a6:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    d2aa:	88 23       	and	r24, r24
    d2ac:	29 f0       	breq	.+10     	; 0xd2b8 <_Z12processMCodei+0x4cd2>
    d2ae:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    d2b2:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    d2b6:	02 c0       	rjmp	.+4      	; 0xd2bc <_Z12processMCodei+0x4cd6>
    d2b8:	60 e0       	ldi	r22, 0x00	; 0
    d2ba:	70 e0       	ldi	r23, 0x00	; 0
    d2bc:	70 93 1f 13 	sts	0x131F, r23	; 0x80131f <_ZL5uspin+0x1>
    d2c0:	60 93 1e 13 	sts	0x131E, r22	; 0x80131e <_ZL5uspin>
		digitarg = code_seen('T') ? code_value() : 0;
    d2c4:	84 e5       	ldi	r24, 0x54	; 84
    d2c6:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    d2ca:	88 23       	and	r24, r24
    d2cc:	11 f4       	brne	.+4      	; 0xd2d2 <_Z12processMCodei+0x4cec>
    d2ce:	0c 94 67 7f 	jmp	0xfece	; 0xfece <__DATA_REGION_LENGTH__+0xce>
    d2d2:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    d2d6:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    d2da:	0c 94 69 7f 	jmp	0xfed2	; 0xfed2 <__DATA_REGION_LENGTH__+0xd2>
		// this is a permanent pin assignment so dont add if its already assigned
		if( assignPin(uspin) ) {
			for(int i = 0; i < 32; i++) {
				if(!pdigitals[i]) {
    d2de:	81 91       	ld	r24, Z+
    d2e0:	91 91       	ld	r25, Z+
    d2e2:	89 2b       	or	r24, r25
    d2e4:	09 f0       	breq	.+2      	; 0xd2e8 <_Z12processMCodei+0x4d02>
    d2e6:	87 c0       	rjmp	.+270    	; 0xd3f6 <_Z12processMCodei+0x4e10>
    d2e8:	02 c0       	rjmp	.+4      	; 0xd2ee <_Z12processMCodei+0x4d08>
    d2ea:	1a 82       	std	Y+2, r1	; 0x02
    d2ec:	19 82       	std	Y+1, r1	; 0x01
					pdigitals[i] = new Digital(uspin);
    d2ee:	82 e0       	ldi	r24, 0x02	; 2
    d2f0:	90 e0       	ldi	r25, 0x00	; 0
    d2f2:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    d2f6:	20 91 1e 13 	lds	r18, 0x131E	; 0x80131e <_ZL5uspin>

class Digital {
	public:
	uint8_t pin;
	uint8_t mode = INPUT; // default
	Digital(uint8_t spin) {
    d2fa:	dc 01       	movw	r26, r24
    d2fc:	11 96       	adiw	r26, 0x01	; 1
    d2fe:	1c 92       	st	X, r1
    d300:	11 97       	sbiw	r26, 0x01	; 1
		this->pin = spin;
    d302:	2c 93       	st	X, r18
    d304:	e9 81       	ldd	r30, Y+1	; 0x01
    d306:	fa 81       	ldd	r31, Y+2	; 0x02
    d308:	ee 0f       	add	r30, r30
    d30a:	ff 1f       	adc	r31, r31
    d30c:	e5 5c       	subi	r30, 0xC5	; 197
    d30e:	fc 4e       	sbci	r31, 0xEC	; 236
    d310:	91 83       	std	Z+1, r25	; 0x01
    d312:	80 83       	st	Z, r24
					if(code_seen('U')) {
    d314:	85 e5       	ldi	r24, 0x55	; 85
    d316:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    d31a:	88 23       	and	r24, r24
    d31c:	59 f0       	breq	.+22     	; 0xd334 <_Z12processMCodei+0x4d4e>
						pdigitals[i]->pinMode(INPUT_PULLUP);
    d31e:	e9 81       	ldd	r30, Y+1	; 0x01
    d320:	fa 81       	ldd	r31, Y+2	; 0x02
    d322:	ee 0f       	add	r30, r30
    d324:	ff 1f       	adc	r31, r31
    d326:	e5 5c       	subi	r30, 0xC5	; 197
    d328:	fc 4e       	sbci	r31, 0xEC	; 236
    d32a:	62 e0       	ldi	r22, 0x02	; 2
    d32c:	80 81       	ld	r24, Z
    d32e:	91 81       	ldd	r25, Z+1	; 0x01
    d330:	0e 94 d6 39 	call	0x73ac	; 0x73ac <_ZN7Digital7pinModeEh>
					}
					digitalTarget[i] = digitarg;
    d334:	e9 81       	ldd	r30, Y+1	; 0x01
    d336:	fa 81       	ldd	r31, Y+2	; 0x02
    d338:	ee 0f       	add	r30, r30
    d33a:	ff 1f       	adc	r31, r31
    d33c:	e5 58       	subi	r30, 0x85	; 133
    d33e:	fc 4e       	sbci	r31, 0xEC	; 236
    d340:	80 91 20 13 	lds	r24, 0x1320	; 0x801320 <digitarg>
    d344:	90 91 21 13 	lds	r25, 0x1321	; 0x801321 <digitarg+0x1>
    d348:	91 83       	std	Z+1, r25	; 0x01
    d34a:	80 83       	st	Z, r24
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d34c:	ee e0       	ldi	r30, 0x0E	; 14
    d34e:	fe e0       	ldi	r31, 0x0E	; 14
    d350:	64 91       	lpm	r22, Z
	while(ch)
    d352:	66 23       	and	r22, r22
    d354:	a1 f0       	breq	.+40     	; 0xd37e <_Z12processMCodei+0x4d98>
    d356:	fa 83       	std	Y+2, r31	; 0x02
    d358:	e9 83       	std	Y+1, r30	; 0x01
    d35a:	08 e0       	ldi	r16, 0x08	; 8
    d35c:	1a e0       	ldi	r17, 0x0A	; 10
    d35e:	d8 01       	movw	r26, r16
    d360:	ed 91       	ld	r30, X+
    d362:	fc 91       	ld	r31, X
    d364:	01 90       	ld	r0, Z+
    d366:	f0 81       	ld	r31, Z
    d368:	e0 2d       	mov	r30, r0
    d36a:	c8 01       	movw	r24, r16
    d36c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d36e:	e9 81       	ldd	r30, Y+1	; 0x01
    d370:	fa 81       	ldd	r31, Y+2	; 0x02
    d372:	31 96       	adiw	r30, 0x01	; 1
    d374:	fa 83       	std	Y+2, r31	; 0x02
    d376:	e9 83       	std	Y+1, r30	; 0x01
    d378:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d37a:	61 11       	cpse	r22, r1
    d37c:	f0 cf       	rjmp	.-32     	; 0xd35e <_Z12processMCodei+0x4d78>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d37e:	e9 e0       	ldi	r30, 0x09	; 9
    d380:	fe e0       	ldi	r31, 0x0E	; 14
    d382:	64 91       	lpm	r22, Z
	while(ch)
    d384:	66 23       	and	r22, r22
    d386:	a1 f0       	breq	.+40     	; 0xd3b0 <_Z12processMCodei+0x4dca>
    d388:	fa 83       	std	Y+2, r31	; 0x02
    d38a:	e9 83       	std	Y+1, r30	; 0x01
    d38c:	08 e0       	ldi	r16, 0x08	; 8
    d38e:	1a e0       	ldi	r17, 0x0A	; 10
    d390:	d8 01       	movw	r26, r16
    d392:	ed 91       	ld	r30, X+
    d394:	fc 91       	ld	r31, X
    d396:	01 90       	ld	r0, Z+
    d398:	f0 81       	ld	r31, Z
    d39a:	e0 2d       	mov	r30, r0
    d39c:	c8 01       	movw	r24, r16
    d39e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d3a0:	e9 81       	ldd	r30, Y+1	; 0x01
    d3a2:	fa 81       	ldd	r31, Y+2	; 0x02
    d3a4:	31 96       	adiw	r30, 0x01	; 1
    d3a6:	fa 83       	std	Y+2, r31	; 0x02
    d3a8:	e9 83       	std	Y+1, r30	; 0x01
    d3aa:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d3ac:	61 11       	cpse	r22, r1
    d3ae:	f0 cf       	rjmp	.-32     	; 0xd390 <_Z12processMCodei+0x4daa>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d3b0:	e6 e0       	ldi	r30, 0x06	; 6
    d3b2:	fe e0       	ldi	r31, 0x0E	; 14
    d3b4:	64 91       	lpm	r22, Z
	while(ch)
    d3b6:	66 23       	and	r22, r22
    d3b8:	a1 f0       	breq	.+40     	; 0xd3e2 <_Z12processMCodei+0x4dfc>
    d3ba:	fa 83       	std	Y+2, r31	; 0x02
    d3bc:	e9 83       	std	Y+1, r30	; 0x01
    d3be:	08 e0       	ldi	r16, 0x08	; 8
    d3c0:	1a e0       	ldi	r17, 0x0A	; 10
    d3c2:	d8 01       	movw	r26, r16
    d3c4:	ed 91       	ld	r30, X+
    d3c6:	fc 91       	ld	r31, X
    d3c8:	01 90       	ld	r0, Z+
    d3ca:	f0 81       	ld	r31, Z
    d3cc:	e0 2d       	mov	r30, r0
    d3ce:	c8 01       	movw	r24, r16
    d3d0:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d3d2:	e9 81       	ldd	r30, Y+1	; 0x01
    d3d4:	fa 81       	ldd	r31, Y+2	; 0x02
    d3d6:	31 96       	adiw	r30, 0x01	; 1
    d3d8:	fa 83       	std	Y+2, r31	; 0x02
    d3da:	e9 83       	std	Y+1, r30	; 0x01
    d3dc:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d3de:	61 11       	cpse	r22, r1
    d3e0:	f0 cf       	rjmp	.-32     	; 0xd3c2 <_Z12processMCodei+0x4ddc>
					SERIAL_PGM(MSG_BEGIN);
					SERIAL_PGM("M306");
					SERIAL_PGMLN(MSG_TERMINATE);
    d3e2:	88 e0       	ldi	r24, 0x08	; 8
    d3e4:	9a e0       	ldi	r25, 0x0A	; 10
    d3e6:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
					SERIAL_PORT.flush();
    d3ea:	88 e0       	ldi	r24, 0x08	; 8
    d3ec:	9a e0       	ldi	r25, 0x0A	; 10
    d3ee:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
					break;
    d3f2:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		// Looks for target value, if so publish with <digitalpin> header and 1 - pin 2 - value
		uspin = code_seen('P') ? code_value() : 0;
		digitarg = code_seen('T') ? code_value() : 0;
		// this is a permanent pin assignment so dont add if its already assigned
		if( assignPin(uspin) ) {
			for(int i = 0; i < 32; i++) {
    d3f6:	29 81       	ldd	r18, Y+1	; 0x01
    d3f8:	3a 81       	ldd	r19, Y+2	; 0x02
    d3fa:	2f 5f       	subi	r18, 0xFF	; 255
    d3fc:	3f 4f       	sbci	r19, 0xFF	; 255
    d3fe:	3a 83       	std	Y+2, r19	; 0x02
    d400:	29 83       	std	Y+1, r18	; 0x01
    d402:	20 32       	cpi	r18, 0x20	; 32
    d404:	31 05       	cpc	r19, r1
    d406:	09 f0       	breq	.+2      	; 0xd40a <_Z12processMCodei+0x4e24>
    d408:	6a cf       	rjmp	.-300    	; 0xd2de <_Z12processMCodei+0x4cf8>
    d40a:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
					break;
				}
			}
		} else {
			for(int i = 0; i < 32; i++) {
				if(pdigitals[i] && pdigitals[i]->pin == uspin) {
    d40e:	ed 91       	ld	r30, X+
    d410:	fd 91       	ld	r31, X+
    d412:	30 97       	sbiw	r30, 0x00	; 0
    d414:	09 f4       	brne	.+2      	; 0xd418 <_Z12processMCodei+0x4e32>
    d416:	66 c0       	rjmp	.+204    	; 0xd4e4 <_Z12processMCodei+0x4efe>
    d418:	20 81       	ld	r18, Z
    d41a:	30 e0       	ldi	r19, 0x00	; 0
    d41c:	24 17       	cp	r18, r20
    d41e:	35 07       	cpc	r19, r21
    d420:	09 f0       	breq	.+2      	; 0xd424 <_Z12processMCodei+0x4e3e>
    d422:	60 c0       	rjmp	.+192    	; 0xd4e4 <_Z12processMCodei+0x4efe>
					digitalTarget[i] = digitarg;
    d424:	88 0f       	add	r24, r24
    d426:	99 1f       	adc	r25, r25
    d428:	fc 01       	movw	r30, r24
    d42a:	e5 58       	subi	r30, 0x85	; 133
    d42c:	fc 4e       	sbci	r31, 0xEC	; 236
    d42e:	80 91 20 13 	lds	r24, 0x1320	; 0x801320 <digitarg>
    d432:	90 91 21 13 	lds	r25, 0x1321	; 0x801321 <digitarg+0x1>
    d436:	91 83       	std	Z+1, r25	; 0x01
    d438:	80 83       	st	Z, r24
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d43a:	e4 e0       	ldi	r30, 0x04	; 4
    d43c:	fe e0       	ldi	r31, 0x0E	; 14
    d43e:	64 91       	lpm	r22, Z
	while(ch)
    d440:	66 23       	and	r22, r22
    d442:	a1 f0       	breq	.+40     	; 0xd46c <_Z12processMCodei+0x4e86>
    d444:	fa 83       	std	Y+2, r31	; 0x02
    d446:	e9 83       	std	Y+1, r30	; 0x01
    d448:	08 e0       	ldi	r16, 0x08	; 8
    d44a:	1a e0       	ldi	r17, 0x0A	; 10
    d44c:	d8 01       	movw	r26, r16
    d44e:	ed 91       	ld	r30, X+
    d450:	fc 91       	ld	r31, X
    d452:	01 90       	ld	r0, Z+
    d454:	f0 81       	ld	r31, Z
    d456:	e0 2d       	mov	r30, r0
    d458:	c8 01       	movw	r24, r16
    d45a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d45c:	e9 81       	ldd	r30, Y+1	; 0x01
    d45e:	fa 81       	ldd	r31, Y+2	; 0x02
    d460:	31 96       	adiw	r30, 0x01	; 1
    d462:	fa 83       	std	Y+2, r31	; 0x02
    d464:	e9 83       	std	Y+1, r30	; 0x01
    d466:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d468:	61 11       	cpse	r22, r1
    d46a:	f0 cf       	rjmp	.-32     	; 0xd44c <_Z12processMCodei+0x4e66>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d46c:	ef ef       	ldi	r30, 0xFF	; 255
    d46e:	fd e0       	ldi	r31, 0x0D	; 13
    d470:	64 91       	lpm	r22, Z
	while(ch)
    d472:	66 23       	and	r22, r22
    d474:	a1 f0       	breq	.+40     	; 0xd49e <_Z12processMCodei+0x4eb8>
    d476:	fa 83       	std	Y+2, r31	; 0x02
    d478:	e9 83       	std	Y+1, r30	; 0x01
    d47a:	08 e0       	ldi	r16, 0x08	; 8
    d47c:	1a e0       	ldi	r17, 0x0A	; 10
    d47e:	d8 01       	movw	r26, r16
    d480:	ed 91       	ld	r30, X+
    d482:	fc 91       	ld	r31, X
    d484:	01 90       	ld	r0, Z+
    d486:	f0 81       	ld	r31, Z
    d488:	e0 2d       	mov	r30, r0
    d48a:	c8 01       	movw	r24, r16
    d48c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d48e:	e9 81       	ldd	r30, Y+1	; 0x01
    d490:	fa 81       	ldd	r31, Y+2	; 0x02
    d492:	31 96       	adiw	r30, 0x01	; 1
    d494:	fa 83       	std	Y+2, r31	; 0x02
    d496:	e9 83       	std	Y+1, r30	; 0x01
    d498:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d49a:	61 11       	cpse	r22, r1
    d49c:	f0 cf       	rjmp	.-32     	; 0xd47e <_Z12processMCodei+0x4e98>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d49e:	ec ef       	ldi	r30, 0xFC	; 252
    d4a0:	fd e0       	ldi	r31, 0x0D	; 13
    d4a2:	64 91       	lpm	r22, Z
	while(ch)
    d4a4:	66 23       	and	r22, r22
    d4a6:	a1 f0       	breq	.+40     	; 0xd4d0 <_Z12processMCodei+0x4eea>
    d4a8:	fa 83       	std	Y+2, r31	; 0x02
    d4aa:	e9 83       	std	Y+1, r30	; 0x01
    d4ac:	08 e0       	ldi	r16, 0x08	; 8
    d4ae:	1a e0       	ldi	r17, 0x0A	; 10
    d4b0:	d8 01       	movw	r26, r16
    d4b2:	ed 91       	ld	r30, X+
    d4b4:	fc 91       	ld	r31, X
    d4b6:	01 90       	ld	r0, Z+
    d4b8:	f0 81       	ld	r31, Z
    d4ba:	e0 2d       	mov	r30, r0
    d4bc:	c8 01       	movw	r24, r16
    d4be:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d4c0:	e9 81       	ldd	r30, Y+1	; 0x01
    d4c2:	fa 81       	ldd	r31, Y+2	; 0x02
    d4c4:	31 96       	adiw	r30, 0x01	; 1
    d4c6:	fa 83       	std	Y+2, r31	; 0x02
    d4c8:	e9 83       	std	Y+1, r30	; 0x01
    d4ca:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d4cc:	61 11       	cpse	r22, r1
    d4ce:	f0 cf       	rjmp	.-32     	; 0xd4b0 <_Z12processMCodei+0x4eca>
					SERIAL_PGM(MSG_BEGIN);
					SERIAL_PGM("M306");
					SERIAL_PGMLN(MSG_TERMINATE);
    d4d0:	88 e0       	ldi	r24, 0x08	; 8
    d4d2:	9a e0       	ldi	r25, 0x0A	; 10
    d4d4:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
					SERIAL_PORT.flush();
    d4d8:	88 e0       	ldi	r24, 0x08	; 8
    d4da:	9a e0       	ldi	r25, 0x0A	; 10
    d4dc:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
					break;
    d4e0:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
					SERIAL_PORT.flush();
					break;
				}
			}
		} else {
			for(int i = 0; i < 32; i++) {
    d4e4:	01 96       	adiw	r24, 0x01	; 1
    d4e6:	80 32       	cpi	r24, 0x20	; 32
    d4e8:	91 05       	cpc	r25, r1
    d4ea:	09 f0       	breq	.+2      	; 0xd4ee <_Z12processMCodei+0x4f08>
    d4ec:	90 cf       	rjmp	.-224    	; 0xd40e <_Z12processMCodei+0x4e28>
    d4ee:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
			}
		}
		break;
		
	case 445: // M445 P<pin> - Turn off pulsed write pin - disable PWM
      if(code_seen('P')) {
    d4f2:	80 e5       	ldi	r24, 0x50	; 80
    d4f4:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    d4f8:	88 23       	and	r24, r24
    d4fa:	11 f4       	brne	.+4      	; 0xd500 <_Z12processMCodei+0x4f1a>
    d4fc:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
        pin_number = code_value();
    d500:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    d504:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    d508:	86 2f       	mov	r24, r22
    d50a:	60 93 1c 13 	sts	0x131C, r22	; 0x80131c <pin_number>
    d50e:	70 93 1d 13 	sts	0x131D, r23	; 0x80131d <pin_number+0x1>
		unassignPin(pin_number);
    d512:	0e 94 80 1c 	call	0x3900	; 0x3900 <_Z11unassignPinh>
		for(int i = 0; i < 12; i++) {
			if(ppwms[i] && ppwms[i]->pin == pin_number) {
    d516:	40 91 1c 13 	lds	r20, 0x131C	; 0x80131c <pin_number>
    d51a:	50 91 1d 13 	lds	r21, 0x131D	; 0x80131d <pin_number+0x1>
    d51e:	e3 e2       	ldi	r30, 0x23	; 35
    d520:	f3 e1       	ldi	r31, 0x13	; 19
		
	case 445: // M445 P<pin> - Turn off pulsed write pin - disable PWM
      if(code_seen('P')) {
        pin_number = code_value();
		unassignPin(pin_number);
		for(int i = 0; i < 12; i++) {
    d522:	1a 82       	std	Y+2, r1	; 0x02
    d524:	19 82       	std	Y+1, r1	; 0x01
			if(ppwms[i] && ppwms[i]->pin == pin_number) {
    d526:	81 91       	ld	r24, Z+
    d528:	91 91       	ld	r25, Z+
    d52a:	00 97       	sbiw	r24, 0x00	; 0
    d52c:	09 f4       	brne	.+2      	; 0xd530 <_Z12processMCodei+0x4f4a>
    d52e:	71 c0       	rjmp	.+226    	; 0xd612 <_Z12processMCodei+0x502c>
    d530:	dc 01       	movw	r26, r24
    d532:	2c 91       	ld	r18, X
    d534:	30 e0       	ldi	r19, 0x00	; 0
    d536:	24 17       	cp	r18, r20
    d538:	35 07       	cpc	r19, r21
    d53a:	09 f0       	breq	.+2      	; 0xd53e <_Z12processMCodei+0x4f58>
    d53c:	6a c0       	rjmp	.+212    	; 0xd612 <_Z12processMCodei+0x502c>
				ppwms[i]->pwmWrite(0,0); // default is 2, clear on match. to turn off, use 0 
    d53e:	40 e0       	ldi	r20, 0x00	; 0
    d540:	60 e0       	ldi	r22, 0x00	; 0
    d542:	70 e0       	ldi	r23, 0x00	; 0
    d544:	0e 94 12 a3 	call	0x14624	; 0x14624 <_ZN3PWM8pwmWriteEjh>
				delete ppwms[i];
    d548:	e9 81       	ldd	r30, Y+1	; 0x01
    d54a:	fa 81       	ldd	r31, Y+2	; 0x02
    d54c:	ee 0f       	add	r30, r30
    d54e:	ff 1f       	adc	r31, r31
    d550:	ed 5d       	subi	r30, 0xDD	; 221
    d552:	fc 4e       	sbci	r31, 0xEC	; 236
    d554:	fa 83       	std	Y+2, r31	; 0x02
    d556:	e9 83       	std	Y+1, r30	; 0x01
    d558:	80 81       	ld	r24, Z
    d55a:	91 81       	ldd	r25, Z+1	; 0x01
    d55c:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
				ppwms[i] = 0;
    d560:	a9 81       	ldd	r26, Y+1	; 0x01
    d562:	ba 81       	ldd	r27, Y+2	; 0x02
    d564:	1d 92       	st	X+, r1
    d566:	1c 92       	st	X, r1
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d568:	ea ef       	ldi	r30, 0xFA	; 250
    d56a:	fd e0       	ldi	r31, 0x0D	; 13
    d56c:	64 91       	lpm	r22, Z
	while(ch)
    d56e:	66 23       	and	r22, r22
    d570:	a1 f0       	breq	.+40     	; 0xd59a <_Z12processMCodei+0x4fb4>
    d572:	fa 83       	std	Y+2, r31	; 0x02
    d574:	e9 83       	std	Y+1, r30	; 0x01
    d576:	08 e0       	ldi	r16, 0x08	; 8
    d578:	1a e0       	ldi	r17, 0x0A	; 10
    d57a:	d8 01       	movw	r26, r16
    d57c:	ed 91       	ld	r30, X+
    d57e:	fc 91       	ld	r31, X
    d580:	01 90       	ld	r0, Z+
    d582:	f0 81       	ld	r31, Z
    d584:	e0 2d       	mov	r30, r0
    d586:	c8 01       	movw	r24, r16
    d588:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d58a:	e9 81       	ldd	r30, Y+1	; 0x01
    d58c:	fa 81       	ldd	r31, Y+2	; 0x02
    d58e:	31 96       	adiw	r30, 0x01	; 1
    d590:	fa 83       	std	Y+2, r31	; 0x02
    d592:	e9 83       	std	Y+1, r30	; 0x01
    d594:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d596:	61 11       	cpse	r22, r1
    d598:	f0 cf       	rjmp	.-32     	; 0xd57a <_Z12processMCodei+0x4f94>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d59a:	e5 ef       	ldi	r30, 0xF5	; 245
    d59c:	fd e0       	ldi	r31, 0x0D	; 13
    d59e:	64 91       	lpm	r22, Z
	while(ch)
    d5a0:	66 23       	and	r22, r22
    d5a2:	a1 f0       	breq	.+40     	; 0xd5cc <_Z12processMCodei+0x4fe6>
    d5a4:	fa 83       	std	Y+2, r31	; 0x02
    d5a6:	e9 83       	std	Y+1, r30	; 0x01
    d5a8:	08 e0       	ldi	r16, 0x08	; 8
    d5aa:	1a e0       	ldi	r17, 0x0A	; 10
    d5ac:	d8 01       	movw	r26, r16
    d5ae:	ed 91       	ld	r30, X+
    d5b0:	fc 91       	ld	r31, X
    d5b2:	01 90       	ld	r0, Z+
    d5b4:	f0 81       	ld	r31, Z
    d5b6:	e0 2d       	mov	r30, r0
    d5b8:	c8 01       	movw	r24, r16
    d5ba:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d5bc:	e9 81       	ldd	r30, Y+1	; 0x01
    d5be:	fa 81       	ldd	r31, Y+2	; 0x02
    d5c0:	31 96       	adiw	r30, 0x01	; 1
    d5c2:	fa 83       	std	Y+2, r31	; 0x02
    d5c4:	e9 83       	std	Y+1, r30	; 0x01
    d5c6:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d5c8:	61 11       	cpse	r22, r1
    d5ca:	f0 cf       	rjmp	.-32     	; 0xd5ac <_Z12processMCodei+0x4fc6>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d5cc:	e2 ef       	ldi	r30, 0xF2	; 242
    d5ce:	fd e0       	ldi	r31, 0x0D	; 13
    d5d0:	64 91       	lpm	r22, Z
	while(ch)
    d5d2:	66 23       	and	r22, r22
    d5d4:	a1 f0       	breq	.+40     	; 0xd5fe <_Z12processMCodei+0x5018>
    d5d6:	fa 83       	std	Y+2, r31	; 0x02
    d5d8:	e9 83       	std	Y+1, r30	; 0x01
    d5da:	08 e0       	ldi	r16, 0x08	; 8
    d5dc:	1a e0       	ldi	r17, 0x0A	; 10
    d5de:	d8 01       	movw	r26, r16
    d5e0:	ed 91       	ld	r30, X+
    d5e2:	fc 91       	ld	r31, X
    d5e4:	01 90       	ld	r0, Z+
    d5e6:	f0 81       	ld	r31, Z
    d5e8:	e0 2d       	mov	r30, r0
    d5ea:	c8 01       	movw	r24, r16
    d5ec:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d5ee:	e9 81       	ldd	r30, Y+1	; 0x01
    d5f0:	fa 81       	ldd	r31, Y+2	; 0x02
    d5f2:	31 96       	adiw	r30, 0x01	; 1
    d5f4:	fa 83       	std	Y+2, r31	; 0x02
    d5f6:	e9 83       	std	Y+1, r30	; 0x01
    d5f8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d5fa:	61 11       	cpse	r22, r1
    d5fc:	f0 cf       	rjmp	.-32     	; 0xd5de <_Z12processMCodei+0x4ff8>
				SERIAL_PGM(MSG_BEGIN);
				SERIAL_PGM("M445");
				SERIAL_PGMLN(MSG_TERMINATE);
    d5fe:	88 e0       	ldi	r24, 0x08	; 8
    d600:	9a e0       	ldi	r25, 0x0A	; 10
    d602:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
				SERIAL_PORT.flush();
    d606:	88 e0       	ldi	r24, 0x08	; 8
    d608:	9a e0       	ldi	r25, 0x0A	; 10
    d60a:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
				break;
    d60e:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		
	case 445: // M445 P<pin> - Turn off pulsed write pin - disable PWM
      if(code_seen('P')) {
        pin_number = code_value();
		unassignPin(pin_number);
		for(int i = 0; i < 12; i++) {
    d612:	29 81       	ldd	r18, Y+1	; 0x01
    d614:	3a 81       	ldd	r19, Y+2	; 0x02
    d616:	2f 5f       	subi	r18, 0xFF	; 255
    d618:	3f 4f       	sbci	r19, 0xFF	; 255
    d61a:	3a 83       	std	Y+2, r19	; 0x02
    d61c:	29 83       	std	Y+1, r18	; 0x01
    d61e:	2c 30       	cpi	r18, 0x0C	; 12
    d620:	31 05       	cpc	r19, r1
    d622:	09 f0       	breq	.+2      	; 0xd626 <_Z12processMCodei+0x5040>
    d624:	80 cf       	rjmp	.-256    	; 0xd526 <_Z12processMCodei+0x4f40>
    d626:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		}
	  }
	  break;
	  
    case 500: // M500 Store settings in EEPROM
        Config_StoreSettings();
    d62a:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_Z20Config_StoreSettingsv>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d62e:	e0 ef       	ldi	r30, 0xF0	; 240
    d630:	fd e0       	ldi	r31, 0x0D	; 13
    d632:	64 91       	lpm	r22, Z
	while(ch)
    d634:	66 23       	and	r22, r22
    d636:	a1 f0       	breq	.+40     	; 0xd660 <_Z12processMCodei+0x507a>
    d638:	fa 83       	std	Y+2, r31	; 0x02
    d63a:	e9 83       	std	Y+1, r30	; 0x01
    d63c:	08 e0       	ldi	r16, 0x08	; 8
    d63e:	1a e0       	ldi	r17, 0x0A	; 10
    d640:	d8 01       	movw	r26, r16
    d642:	ed 91       	ld	r30, X+
    d644:	fc 91       	ld	r31, X
    d646:	01 90       	ld	r0, Z+
    d648:	f0 81       	ld	r31, Z
    d64a:	e0 2d       	mov	r30, r0
    d64c:	c8 01       	movw	r24, r16
    d64e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d650:	e9 81       	ldd	r30, Y+1	; 0x01
    d652:	fa 81       	ldd	r31, Y+2	; 0x02
    d654:	31 96       	adiw	r30, 0x01	; 1
    d656:	fa 83       	std	Y+2, r31	; 0x02
    d658:	e9 83       	std	Y+1, r30	; 0x01
    d65a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d65c:	61 11       	cpse	r22, r1
    d65e:	f0 cf       	rjmp	.-32     	; 0xd640 <_Z12processMCodei+0x505a>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d660:	eb ee       	ldi	r30, 0xEB	; 235
    d662:	fd e0       	ldi	r31, 0x0D	; 13
    d664:	64 91       	lpm	r22, Z
	while(ch)
    d666:	66 23       	and	r22, r22
    d668:	a1 f0       	breq	.+40     	; 0xd692 <_Z12processMCodei+0x50ac>
    d66a:	fa 83       	std	Y+2, r31	; 0x02
    d66c:	e9 83       	std	Y+1, r30	; 0x01
    d66e:	08 e0       	ldi	r16, 0x08	; 8
    d670:	1a e0       	ldi	r17, 0x0A	; 10
    d672:	d8 01       	movw	r26, r16
    d674:	ed 91       	ld	r30, X+
    d676:	fc 91       	ld	r31, X
    d678:	01 90       	ld	r0, Z+
    d67a:	f0 81       	ld	r31, Z
    d67c:	e0 2d       	mov	r30, r0
    d67e:	c8 01       	movw	r24, r16
    d680:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d682:	e9 81       	ldd	r30, Y+1	; 0x01
    d684:	fa 81       	ldd	r31, Y+2	; 0x02
    d686:	31 96       	adiw	r30, 0x01	; 1
    d688:	fa 83       	std	Y+2, r31	; 0x02
    d68a:	e9 83       	std	Y+1, r30	; 0x01
    d68c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d68e:	61 11       	cpse	r22, r1
    d690:	f0 cf       	rjmp	.-32     	; 0xd672 <_Z12processMCodei+0x508c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d692:	e8 ee       	ldi	r30, 0xE8	; 232
    d694:	fd e0       	ldi	r31, 0x0D	; 13
    d696:	64 91       	lpm	r22, Z
	while(ch)
    d698:	66 23       	and	r22, r22
    d69a:	a1 f0       	breq	.+40     	; 0xd6c4 <_Z12processMCodei+0x50de>
    d69c:	fa 83       	std	Y+2, r31	; 0x02
    d69e:	e9 83       	std	Y+1, r30	; 0x01
    d6a0:	08 e0       	ldi	r16, 0x08	; 8
    d6a2:	1a e0       	ldi	r17, 0x0A	; 10
    d6a4:	d8 01       	movw	r26, r16
    d6a6:	ed 91       	ld	r30, X+
    d6a8:	fc 91       	ld	r31, X
    d6aa:	01 90       	ld	r0, Z+
    d6ac:	f0 81       	ld	r31, Z
    d6ae:	e0 2d       	mov	r30, r0
    d6b0:	c8 01       	movw	r24, r16
    d6b2:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d6b4:	e9 81       	ldd	r30, Y+1	; 0x01
    d6b6:	fa 81       	ldd	r31, Y+2	; 0x02
    d6b8:	31 96       	adiw	r30, 0x01	; 1
    d6ba:	fa 83       	std	Y+2, r31	; 0x02
    d6bc:	e9 83       	std	Y+1, r30	; 0x01
    d6be:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d6c0:	61 11       	cpse	r22, r1
    d6c2:	f0 cf       	rjmp	.-32     	; 0xd6a4 <_Z12processMCodei+0x50be>
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM("M500");
		SERIAL_PGMLN(MSG_TERMINATE);
    d6c4:	88 e0       	ldi	r24, 0x08	; 8
    d6c6:	9a e0       	ldi	r25, 0x0A	; 10
    d6c8:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		SERIAL_PORT.flush();
    d6cc:	88 e0       	ldi	r24, 0x08	; 8
    d6ce:	9a e0       	ldi	r25, 0x0A	; 10
    d6d0:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    break;
    d6d4:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
	
    case 501: // M501 Read settings from EEPROM
        Config_RetrieveSettings();
    d6d8:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <_Z23Config_RetrieveSettingsv>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d6dc:	e6 ee       	ldi	r30, 0xE6	; 230
    d6de:	fd e0       	ldi	r31, 0x0D	; 13
    d6e0:	64 91       	lpm	r22, Z
	while(ch)
    d6e2:	66 23       	and	r22, r22
    d6e4:	a1 f0       	breq	.+40     	; 0xd70e <_Z12processMCodei+0x5128>
    d6e6:	08 e0       	ldi	r16, 0x08	; 8
    d6e8:	1a e0       	ldi	r17, 0x0A	; 10
    d6ea:	fa 83       	std	Y+2, r31	; 0x02
    d6ec:	e9 83       	std	Y+1, r30	; 0x01
    d6ee:	d8 01       	movw	r26, r16
    d6f0:	ed 91       	ld	r30, X+
    d6f2:	fc 91       	ld	r31, X
    d6f4:	01 90       	ld	r0, Z+
    d6f6:	f0 81       	ld	r31, Z
    d6f8:	e0 2d       	mov	r30, r0
    d6fa:	c8 01       	movw	r24, r16
    d6fc:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d6fe:	e9 81       	ldd	r30, Y+1	; 0x01
    d700:	fa 81       	ldd	r31, Y+2	; 0x02
    d702:	31 96       	adiw	r30, 0x01	; 1
    d704:	fa 83       	std	Y+2, r31	; 0x02
    d706:	e9 83       	std	Y+1, r30	; 0x01
    d708:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d70a:	61 11       	cpse	r22, r1
    d70c:	f0 cf       	rjmp	.-32     	; 0xd6ee <_Z12processMCodei+0x5108>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d70e:	e1 ee       	ldi	r30, 0xE1	; 225
    d710:	fd e0       	ldi	r31, 0x0D	; 13
    d712:	64 91       	lpm	r22, Z
	while(ch)
    d714:	66 23       	and	r22, r22
    d716:	a1 f0       	breq	.+40     	; 0xd740 <_Z12processMCodei+0x515a>
    d718:	08 e0       	ldi	r16, 0x08	; 8
    d71a:	1a e0       	ldi	r17, 0x0A	; 10
    d71c:	fa 83       	std	Y+2, r31	; 0x02
    d71e:	e9 83       	std	Y+1, r30	; 0x01
    d720:	d8 01       	movw	r26, r16
    d722:	ed 91       	ld	r30, X+
    d724:	fc 91       	ld	r31, X
    d726:	01 90       	ld	r0, Z+
    d728:	f0 81       	ld	r31, Z
    d72a:	e0 2d       	mov	r30, r0
    d72c:	c8 01       	movw	r24, r16
    d72e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d730:	e9 81       	ldd	r30, Y+1	; 0x01
    d732:	fa 81       	ldd	r31, Y+2	; 0x02
    d734:	31 96       	adiw	r30, 0x01	; 1
    d736:	fa 83       	std	Y+2, r31	; 0x02
    d738:	e9 83       	std	Y+1, r30	; 0x01
    d73a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d73c:	61 11       	cpse	r22, r1
    d73e:	f0 cf       	rjmp	.-32     	; 0xd720 <_Z12processMCodei+0x513a>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d740:	ee ed       	ldi	r30, 0xDE	; 222
    d742:	fd e0       	ldi	r31, 0x0D	; 13
    d744:	64 91       	lpm	r22, Z
	while(ch)
    d746:	66 23       	and	r22, r22
    d748:	a1 f0       	breq	.+40     	; 0xd772 <_Z12processMCodei+0x518c>
    d74a:	08 e0       	ldi	r16, 0x08	; 8
    d74c:	1a e0       	ldi	r17, 0x0A	; 10
    d74e:	fa 83       	std	Y+2, r31	; 0x02
    d750:	e9 83       	std	Y+1, r30	; 0x01
    d752:	d8 01       	movw	r26, r16
    d754:	ed 91       	ld	r30, X+
    d756:	fc 91       	ld	r31, X
    d758:	01 90       	ld	r0, Z+
    d75a:	f0 81       	ld	r31, Z
    d75c:	e0 2d       	mov	r30, r0
    d75e:	c8 01       	movw	r24, r16
    d760:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d762:	e9 81       	ldd	r30, Y+1	; 0x01
    d764:	fa 81       	ldd	r31, Y+2	; 0x02
    d766:	31 96       	adiw	r30, 0x01	; 1
    d768:	fa 83       	std	Y+2, r31	; 0x02
    d76a:	e9 83       	std	Y+1, r30	; 0x01
    d76c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d76e:	61 11       	cpse	r22, r1
    d770:	f0 cf       	rjmp	.-32     	; 0xd752 <_Z12processMCodei+0x516c>
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM("M501");
		SERIAL_PGMLN(MSG_TERMINATE);
    d772:	88 e0       	ldi	r24, 0x08	; 8
    d774:	9a e0       	ldi	r25, 0x0A	; 10
    d776:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		SERIAL_PORT.flush();
    d77a:	88 e0       	ldi	r24, 0x08	; 8
    d77c:	9a e0       	ldi	r25, 0x0A	; 10
    d77e:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    break;
    d782:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
	
    case 502: // M502 Revert to default settings
        Config_ResetDefault();
    d786:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <_Z19Config_ResetDefaultv>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d78a:	ec ed       	ldi	r30, 0xDC	; 220
    d78c:	fd e0       	ldi	r31, 0x0D	; 13
    d78e:	64 91       	lpm	r22, Z
	while(ch)
    d790:	66 23       	and	r22, r22
    d792:	a1 f0       	breq	.+40     	; 0xd7bc <_Z12processMCodei+0x51d6>
    d794:	fa 83       	std	Y+2, r31	; 0x02
    d796:	e9 83       	std	Y+1, r30	; 0x01
    d798:	08 e0       	ldi	r16, 0x08	; 8
    d79a:	1a e0       	ldi	r17, 0x0A	; 10
    d79c:	d8 01       	movw	r26, r16
    d79e:	ed 91       	ld	r30, X+
    d7a0:	fc 91       	ld	r31, X
    d7a2:	01 90       	ld	r0, Z+
    d7a4:	f0 81       	ld	r31, Z
    d7a6:	e0 2d       	mov	r30, r0
    d7a8:	c8 01       	movw	r24, r16
    d7aa:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d7ac:	e9 81       	ldd	r30, Y+1	; 0x01
    d7ae:	fa 81       	ldd	r31, Y+2	; 0x02
    d7b0:	31 96       	adiw	r30, 0x01	; 1
    d7b2:	fa 83       	std	Y+2, r31	; 0x02
    d7b4:	e9 83       	std	Y+1, r30	; 0x01
    d7b6:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d7b8:	61 11       	cpse	r22, r1
    d7ba:	f0 cf       	rjmp	.-32     	; 0xd79c <_Z12processMCodei+0x51b6>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d7bc:	e7 ed       	ldi	r30, 0xD7	; 215
    d7be:	fd e0       	ldi	r31, 0x0D	; 13
    d7c0:	64 91       	lpm	r22, Z
	while(ch)
    d7c2:	66 23       	and	r22, r22
    d7c4:	a1 f0       	breq	.+40     	; 0xd7ee <_Z12processMCodei+0x5208>
    d7c6:	fa 83       	std	Y+2, r31	; 0x02
    d7c8:	e9 83       	std	Y+1, r30	; 0x01
    d7ca:	08 e0       	ldi	r16, 0x08	; 8
    d7cc:	1a e0       	ldi	r17, 0x0A	; 10
    d7ce:	d8 01       	movw	r26, r16
    d7d0:	ed 91       	ld	r30, X+
    d7d2:	fc 91       	ld	r31, X
    d7d4:	01 90       	ld	r0, Z+
    d7d6:	f0 81       	ld	r31, Z
    d7d8:	e0 2d       	mov	r30, r0
    d7da:	c8 01       	movw	r24, r16
    d7dc:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d7de:	e9 81       	ldd	r30, Y+1	; 0x01
    d7e0:	fa 81       	ldd	r31, Y+2	; 0x02
    d7e2:	31 96       	adiw	r30, 0x01	; 1
    d7e4:	fa 83       	std	Y+2, r31	; 0x02
    d7e6:	e9 83       	std	Y+1, r30	; 0x01
    d7e8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d7ea:	61 11       	cpse	r22, r1
    d7ec:	f0 cf       	rjmp	.-32     	; 0xd7ce <_Z12processMCodei+0x51e8>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d7ee:	e4 ed       	ldi	r30, 0xD4	; 212
    d7f0:	fd e0       	ldi	r31, 0x0D	; 13
    d7f2:	64 91       	lpm	r22, Z
	while(ch)
    d7f4:	66 23       	and	r22, r22
    d7f6:	a1 f0       	breq	.+40     	; 0xd820 <_Z12processMCodei+0x523a>
    d7f8:	fa 83       	std	Y+2, r31	; 0x02
    d7fa:	e9 83       	std	Y+1, r30	; 0x01
    d7fc:	08 e0       	ldi	r16, 0x08	; 8
    d7fe:	1a e0       	ldi	r17, 0x0A	; 10
    d800:	d8 01       	movw	r26, r16
    d802:	ed 91       	ld	r30, X+
    d804:	fc 91       	ld	r31, X
    d806:	01 90       	ld	r0, Z+
    d808:	f0 81       	ld	r31, Z
    d80a:	e0 2d       	mov	r30, r0
    d80c:	c8 01       	movw	r24, r16
    d80e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d810:	e9 81       	ldd	r30, Y+1	; 0x01
    d812:	fa 81       	ldd	r31, Y+2	; 0x02
    d814:	31 96       	adiw	r30, 0x01	; 1
    d816:	fa 83       	std	Y+2, r31	; 0x02
    d818:	e9 83       	std	Y+1, r30	; 0x01
    d81a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d81c:	61 11       	cpse	r22, r1
    d81e:	f0 cf       	rjmp	.-32     	; 0xd800 <_Z12processMCodei+0x521a>
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM("M502");
		SERIAL_PGMLN(MSG_TERMINATE);
    d820:	88 e0       	ldi	r24, 0x08	; 8
    d822:	9a e0       	ldi	r25, 0x0A	; 10
    d824:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		SERIAL_PORT.flush();
    d828:	88 e0       	ldi	r24, 0x08	; 8
    d82a:	9a e0       	ldi	r25, 0x0A	; 10
    d82c:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    break;
    d830:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
	
    case 503: // M503 print settings currently in memory
        Config_PrintSettings();
    d834:	0e 94 0f 18 	call	0x301e	; 0x301e <_Z20Config_PrintSettingsv>
		SERIAL_PORT.flush();
    d838:	88 e0       	ldi	r24, 0x08	; 8
    d83a:	9a e0       	ldi	r25, 0x0A	; 10
    d83c:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    break;
    d840:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d844:	e2 ed       	ldi	r30, 0xD2	; 210
    d846:	fd e0       	ldi	r31, 0x0D	; 13
    d848:	64 91       	lpm	r22, Z
	while(ch)
    d84a:	66 23       	and	r22, r22
    d84c:	a1 f0       	breq	.+40     	; 0xd876 <_Z12processMCodei+0x5290>
    d84e:	08 e0       	ldi	r16, 0x08	; 8
    d850:	1a e0       	ldi	r17, 0x0A	; 10
    d852:	fa 83       	std	Y+2, r31	; 0x02
    d854:	e9 83       	std	Y+1, r30	; 0x01
    d856:	d8 01       	movw	r26, r16
    d858:	ed 91       	ld	r30, X+
    d85a:	fc 91       	ld	r31, X
    d85c:	01 90       	ld	r0, Z+
    d85e:	f0 81       	ld	r31, Z
    d860:	e0 2d       	mov	r30, r0
    d862:	c8 01       	movw	r24, r16
    d864:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d866:	e9 81       	ldd	r30, Y+1	; 0x01
    d868:	fa 81       	ldd	r31, Y+2	; 0x02
    d86a:	31 96       	adiw	r30, 0x01	; 1
    d86c:	fa 83       	std	Y+2, r31	; 0x02
    d86e:	e9 83       	std	Y+1, r30	; 0x01
    d870:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d872:	61 11       	cpse	r22, r1
    d874:	f0 cf       	rjmp	.-32     	; 0xd856 <_Z12processMCodei+0x5270>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d876:	eb ec       	ldi	r30, 0xCB	; 203
    d878:	fd e0       	ldi	r31, 0x0D	; 13
    d87a:	64 91       	lpm	r22, Z
	while(ch)
    d87c:	66 23       	and	r22, r22
    d87e:	a1 f0       	breq	.+40     	; 0xd8a8 <_Z12processMCodei+0x52c2>
    d880:	08 e0       	ldi	r16, 0x08	; 8
    d882:	1a e0       	ldi	r17, 0x0A	; 10
    d884:	fa 83       	std	Y+2, r31	; 0x02
    d886:	e9 83       	std	Y+1, r30	; 0x01
    d888:	d8 01       	movw	r26, r16
    d88a:	ed 91       	ld	r30, X+
    d88c:	fc 91       	ld	r31, X
    d88e:	01 90       	ld	r0, Z+
    d890:	f0 81       	ld	r31, Z
    d892:	e0 2d       	mov	r30, r0
    d894:	c8 01       	movw	r24, r16
    d896:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d898:	e9 81       	ldd	r30, Y+1	; 0x01
    d89a:	fa 81       	ldd	r31, Y+2	; 0x02
    d89c:	31 96       	adiw	r30, 0x01	; 1
    d89e:	fa 83       	std	Y+2, r31	; 0x02
    d8a0:	e9 83       	std	Y+1, r30	; 0x01
    d8a2:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d8a4:	61 11       	cpse	r22, r1
    d8a6:	f0 cf       	rjmp	.-32     	; 0xd888 <_Z12processMCodei+0x52a2>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d8a8:	e9 ec       	ldi	r30, 0xC9	; 201
    d8aa:	fd e0       	ldi	r31, 0x0D	; 13
    d8ac:	64 91       	lpm	r22, Z
	while(ch)
    d8ae:	66 23       	and	r22, r22
    d8b0:	a1 f0       	breq	.+40     	; 0xd8da <_Z12processMCodei+0x52f4>
    d8b2:	08 e0       	ldi	r16, 0x08	; 8
    d8b4:	1a e0       	ldi	r17, 0x0A	; 10
    d8b6:	fa 83       	std	Y+2, r31	; 0x02
    d8b8:	e9 83       	std	Y+1, r30	; 0x01
    d8ba:	d8 01       	movw	r26, r16
    d8bc:	ed 91       	ld	r30, X+
    d8be:	fc 91       	ld	r31, X
    d8c0:	01 90       	ld	r0, Z+
    d8c2:	f0 81       	ld	r31, Z
    d8c4:	e0 2d       	mov	r30, r0
    d8c6:	c8 01       	movw	r24, r16
    d8c8:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d8ca:	e9 81       	ldd	r30, Y+1	; 0x01
    d8cc:	fa 81       	ldd	r31, Y+2	; 0x02
    d8ce:	31 96       	adiw	r30, 0x01	; 1
    d8d0:	fa 83       	std	Y+2, r31	; 0x02
    d8d2:	e9 83       	std	Y+1, r30	; 0x01
    d8d4:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d8d6:	61 11       	cpse	r22, r1
    d8d8:	f0 cf       	rjmp	.-32     	; 0xd8ba <_Z12processMCodei+0x52d4>
	
	  
	case 700: // return stats
	  SERIAL_PGM(MSG_BEGIN);
	  SERIAL_PGM(MSG_STATUS);
	  SERIAL_PGMLN(MSG_DELIMIT);
    d8da:	88 e0       	ldi	r24, 0x08	; 8
    d8dc:	9a e0       	ldi	r25, 0x0A	; 10
    d8de:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
	  // Check startup - does nothing if bootloader sets MCUSR to 0
	  mcu = MCUSR;
    d8e2:	84 b7       	in	r24, 0x34	; 52
    d8e4:	80 93 70 14 	sts	0x1470, r24	; 0x801470 <mcu>
	  if(mcu & 1) {
    d8e8:	80 ff       	sbrs	r24, 0
    d8ea:	1d c0       	rjmp	.+58     	; 0xd926 <_Z12processMCodei+0x5340>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d8ec:	e1 ec       	ldi	r30, 0xC1	; 193
    d8ee:	fd e0       	ldi	r31, 0x0D	; 13
    d8f0:	64 91       	lpm	r22, Z
	while(ch)
    d8f2:	66 23       	and	r22, r22
    d8f4:	a1 f0       	breq	.+40     	; 0xd91e <_Z12processMCodei+0x5338>
    d8f6:	fa 83       	std	Y+2, r31	; 0x02
    d8f8:	e9 83       	std	Y+1, r30	; 0x01
    d8fa:	08 e0       	ldi	r16, 0x08	; 8
    d8fc:	1a e0       	ldi	r17, 0x0A	; 10
    d8fe:	d8 01       	movw	r26, r16
    d900:	ed 91       	ld	r30, X+
    d902:	fc 91       	ld	r31, X
    d904:	01 90       	ld	r0, Z+
    d906:	f0 81       	ld	r31, Z
    d908:	e0 2d       	mov	r30, r0
    d90a:	c8 01       	movw	r24, r16
    d90c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d90e:	e9 81       	ldd	r30, Y+1	; 0x01
    d910:	fa 81       	ldd	r31, Y+2	; 0x02
    d912:	31 96       	adiw	r30, 0x01	; 1
    d914:	fa 83       	std	Y+2, r31	; 0x02
    d916:	e9 83       	std	Y+1, r30	; 0x01
    d918:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d91a:	61 11       	cpse	r22, r1
    d91c:	f0 cf       	rjmp	.-32     	; 0xd8fe <_Z12processMCodei+0x5318>
		  SERIAL_PGMLN(MSG_POWERUP);
    d91e:	88 e0       	ldi	r24, 0x08	; 8
    d920:	9a e0       	ldi	r25, 0x0A	; 10
    d922:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
	  }
	  if(mcu & 2) {
    d926:	80 91 70 14 	lds	r24, 0x1470	; 0x801470 <mcu>
    d92a:	81 ff       	sbrs	r24, 1
    d92c:	1d c0       	rjmp	.+58     	; 0xd968 <_Z12processMCodei+0x5382>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d92e:	e2 eb       	ldi	r30, 0xB2	; 178
    d930:	fd e0       	ldi	r31, 0x0D	; 13
    d932:	64 91       	lpm	r22, Z
	while(ch)
    d934:	66 23       	and	r22, r22
    d936:	a1 f0       	breq	.+40     	; 0xd960 <_Z12processMCodei+0x537a>
    d938:	fa 83       	std	Y+2, r31	; 0x02
    d93a:	e9 83       	std	Y+1, r30	; 0x01
    d93c:	08 e0       	ldi	r16, 0x08	; 8
    d93e:	1a e0       	ldi	r17, 0x0A	; 10
    d940:	d8 01       	movw	r26, r16
    d942:	ed 91       	ld	r30, X+
    d944:	fc 91       	ld	r31, X
    d946:	01 90       	ld	r0, Z+
    d948:	f0 81       	ld	r31, Z
    d94a:	e0 2d       	mov	r30, r0
    d94c:	c8 01       	movw	r24, r16
    d94e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d950:	e9 81       	ldd	r30, Y+1	; 0x01
    d952:	fa 81       	ldd	r31, Y+2	; 0x02
    d954:	31 96       	adiw	r30, 0x01	; 1
    d956:	fa 83       	std	Y+2, r31	; 0x02
    d958:	e9 83       	std	Y+1, r30	; 0x01
    d95a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d95c:	61 11       	cpse	r22, r1
    d95e:	f0 cf       	rjmp	.-32     	; 0xd940 <_Z12processMCodei+0x535a>
		  SERIAL_PGMLN(MSG_EXTERNAL_RESET);
    d960:	88 e0       	ldi	r24, 0x08	; 8
    d962:	9a e0       	ldi	r25, 0x0A	; 10
    d964:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
	  }
	  if(mcu & 4) {
    d968:	80 91 70 14 	lds	r24, 0x1470	; 0x801470 <mcu>
    d96c:	82 ff       	sbrs	r24, 2
    d96e:	1d c0       	rjmp	.+58     	; 0xd9aa <_Z12processMCodei+0x53c4>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d970:	e2 ea       	ldi	r30, 0xA2	; 162
    d972:	fd e0       	ldi	r31, 0x0D	; 13
    d974:	64 91       	lpm	r22, Z
	while(ch)
    d976:	66 23       	and	r22, r22
    d978:	a1 f0       	breq	.+40     	; 0xd9a2 <_Z12processMCodei+0x53bc>
    d97a:	fa 83       	std	Y+2, r31	; 0x02
    d97c:	e9 83       	std	Y+1, r30	; 0x01
    d97e:	08 e0       	ldi	r16, 0x08	; 8
    d980:	1a e0       	ldi	r17, 0x0A	; 10
    d982:	d8 01       	movw	r26, r16
    d984:	ed 91       	ld	r30, X+
    d986:	fc 91       	ld	r31, X
    d988:	01 90       	ld	r0, Z+
    d98a:	f0 81       	ld	r31, Z
    d98c:	e0 2d       	mov	r30, r0
    d98e:	c8 01       	movw	r24, r16
    d990:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d992:	e9 81       	ldd	r30, Y+1	; 0x01
    d994:	fa 81       	ldd	r31, Y+2	; 0x02
    d996:	31 96       	adiw	r30, 0x01	; 1
    d998:	fa 83       	std	Y+2, r31	; 0x02
    d99a:	e9 83       	std	Y+1, r30	; 0x01
    d99c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d99e:	61 11       	cpse	r22, r1
    d9a0:	f0 cf       	rjmp	.-32     	; 0xd982 <_Z12processMCodei+0x539c>
		  SERIAL_PGMLN(MSG_BROWNOUT_RESET);
    d9a2:	88 e0       	ldi	r24, 0x08	; 8
    d9a4:	9a e0       	ldi	r25, 0x0A	; 10
    d9a6:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
	  }
	  if(mcu & 8) {
    d9aa:	80 91 70 14 	lds	r24, 0x1470	; 0x801470 <mcu>
    d9ae:	83 ff       	sbrs	r24, 3
    d9b0:	1d c0       	rjmp	.+58     	; 0xd9ec <_Z12processMCodei+0x5406>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d9b2:	e3 e9       	ldi	r30, 0x93	; 147
    d9b4:	fd e0       	ldi	r31, 0x0D	; 13
    d9b6:	64 91       	lpm	r22, Z
	while(ch)
    d9b8:	66 23       	and	r22, r22
    d9ba:	a1 f0       	breq	.+40     	; 0xd9e4 <_Z12processMCodei+0x53fe>
    d9bc:	fa 83       	std	Y+2, r31	; 0x02
    d9be:	e9 83       	std	Y+1, r30	; 0x01
    d9c0:	08 e0       	ldi	r16, 0x08	; 8
    d9c2:	1a e0       	ldi	r17, 0x0A	; 10
    d9c4:	d8 01       	movw	r26, r16
    d9c6:	ed 91       	ld	r30, X+
    d9c8:	fc 91       	ld	r31, X
    d9ca:	01 90       	ld	r0, Z+
    d9cc:	f0 81       	ld	r31, Z
    d9ce:	e0 2d       	mov	r30, r0
    d9d0:	c8 01       	movw	r24, r16
    d9d2:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    d9d4:	e9 81       	ldd	r30, Y+1	; 0x01
    d9d6:	fa 81       	ldd	r31, Y+2	; 0x02
    d9d8:	31 96       	adiw	r30, 0x01	; 1
    d9da:	fa 83       	std	Y+2, r31	; 0x02
    d9dc:	e9 83       	std	Y+1, r30	; 0x01
    d9de:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    d9e0:	61 11       	cpse	r22, r1
    d9e2:	f0 cf       	rjmp	.-32     	; 0xd9c4 <_Z12processMCodei+0x53de>
		  SERIAL_PGMLN(MSG_WATCHDOG_RESET);
    d9e4:	88 e0       	ldi	r24, 0x08	; 8
    d9e6:	9a e0       	ldi	r25, 0x0A	; 10
    d9e8:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
	  }
	  if(mcu & 32) {
    d9ec:	80 91 70 14 	lds	r24, 0x1470	; 0x801470 <mcu>
    d9f0:	85 ff       	sbrs	r24, 5
    d9f2:	1d c0       	rjmp	.+58     	; 0xda2e <_Z12processMCodei+0x5448>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    d9f4:	e4 e8       	ldi	r30, 0x84	; 132
    d9f6:	fd e0       	ldi	r31, 0x0D	; 13
    d9f8:	64 91       	lpm	r22, Z
	while(ch)
    d9fa:	66 23       	and	r22, r22
    d9fc:	a1 f0       	breq	.+40     	; 0xda26 <_Z12processMCodei+0x5440>
    d9fe:	fa 83       	std	Y+2, r31	; 0x02
    da00:	e9 83       	std	Y+1, r30	; 0x01
    da02:	08 e0       	ldi	r16, 0x08	; 8
    da04:	1a e0       	ldi	r17, 0x0A	; 10
    da06:	d8 01       	movw	r26, r16
    da08:	ed 91       	ld	r30, X+
    da0a:	fc 91       	ld	r31, X
    da0c:	01 90       	ld	r0, Z+
    da0e:	f0 81       	ld	r31, Z
    da10:	e0 2d       	mov	r30, r0
    da12:	c8 01       	movw	r24, r16
    da14:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    da16:	e9 81       	ldd	r30, Y+1	; 0x01
    da18:	fa 81       	ldd	r31, Y+2	; 0x02
    da1a:	31 96       	adiw	r30, 0x01	; 1
    da1c:	fa 83       	std	Y+2, r31	; 0x02
    da1e:	e9 83       	std	Y+1, r30	; 0x01
    da20:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    da22:	61 11       	cpse	r22, r1
    da24:	f0 cf       	rjmp	.-32     	; 0xda06 <_Z12processMCodei+0x5420>
		  SERIAL_PGMLN(MSG_SOFTWARE_RESET);
    da26:	88 e0       	ldi	r24, 0x08	; 8
    da28:	9a e0       	ldi	r25, 0x0A	; 10
    da2a:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
	  }
	  MCUSR=0;
    da2e:	14 be       	out	0x34, r1	; 52
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    da30:	ee e7       	ldi	r30, 0x7E	; 126
    da32:	fd e0       	ldi	r31, 0x0D	; 13
    da34:	64 91       	lpm	r22, Z
	while(ch)
    da36:	66 23       	and	r22, r22
    da38:	a1 f0       	breq	.+40     	; 0xda62 <_Z12processMCodei+0x547c>
    da3a:	08 e0       	ldi	r16, 0x08	; 8
    da3c:	1a e0       	ldi	r17, 0x0A	; 10
    da3e:	fa 83       	std	Y+2, r31	; 0x02
    da40:	e9 83       	std	Y+1, r30	; 0x01
    da42:	d8 01       	movw	r26, r16
    da44:	ed 91       	ld	r30, X+
    da46:	fc 91       	ld	r31, X
    da48:	01 90       	ld	r0, Z+
    da4a:	f0 81       	ld	r31, Z
    da4c:	e0 2d       	mov	r30, r0
    da4e:	c8 01       	movw	r24, r16
    da50:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    da52:	e9 81       	ldd	r30, Y+1	; 0x01
    da54:	fa 81       	ldd	r31, Y+2	; 0x02
    da56:	31 96       	adiw	r30, 0x01	; 1
    da58:	fa 83       	std	Y+2, r31	; 0x02
    da5a:	e9 83       	std	Y+1, r30	; 0x01
    da5c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    da5e:	61 11       	cpse	r22, r1
    da60:	f0 cf       	rjmp	.-32     	; 0xda42 <_Z12processMCodei+0x545c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    da62:	ee e6       	ldi	r30, 0x6E	; 110
    da64:	fd e0       	ldi	r31, 0x0D	; 13
    da66:	64 91       	lpm	r22, Z
	while(ch)
    da68:	66 23       	and	r22, r22
    da6a:	a1 f0       	breq	.+40     	; 0xda94 <_Z12processMCodei+0x54ae>
    da6c:	08 e0       	ldi	r16, 0x08	; 8
    da6e:	1a e0       	ldi	r17, 0x0A	; 10
    da70:	fa 83       	std	Y+2, r31	; 0x02
    da72:	e9 83       	std	Y+1, r30	; 0x01
    da74:	d8 01       	movw	r26, r16
    da76:	ed 91       	ld	r30, X+
    da78:	fc 91       	ld	r31, X
    da7a:	01 90       	ld	r0, Z+
    da7c:	f0 81       	ld	r31, Z
    da7e:	e0 2d       	mov	r30, r0
    da80:	c8 01       	movw	r24, r16
    da82:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    da84:	e9 81       	ldd	r30, Y+1	; 0x01
    da86:	fa 81       	ldd	r31, Y+2	; 0x02
    da88:	31 96       	adiw	r30, 0x01	; 1
    da8a:	fa 83       	std	Y+2, r31	; 0x02
    da8c:	e9 83       	std	Y+1, r30	; 0x01
    da8e:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    da90:	61 11       	cpse	r22, r1
    da92:	f0 cf       	rjmp	.-32     	; 0xda74 <_Z12processMCodei+0x548e>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    da94:	e9 e5       	ldi	r30, 0x59	; 89
    da96:	fd e0       	ldi	r31, 0x0D	; 13
    da98:	64 91       	lpm	r22, Z
	while(ch)
    da9a:	66 23       	and	r22, r22
    da9c:	a1 f0       	breq	.+40     	; 0xdac6 <_Z12processMCodei+0x54e0>
    da9e:	08 e0       	ldi	r16, 0x08	; 8
    daa0:	1a e0       	ldi	r17, 0x0A	; 10
    daa2:	fa 83       	std	Y+2, r31	; 0x02
    daa4:	e9 83       	std	Y+1, r30	; 0x01
    daa6:	d8 01       	movw	r26, r16
    daa8:	ed 91       	ld	r30, X+
    daaa:	fc 91       	ld	r31, X
    daac:	01 90       	ld	r0, Z+
    daae:	f0 81       	ld	r31, Z
    dab0:	e0 2d       	mov	r30, r0
    dab2:	c8 01       	movw	r24, r16
    dab4:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    dab6:	e9 81       	ldd	r30, Y+1	; 0x01
    dab8:	fa 81       	ldd	r31, Y+2	; 0x02
    daba:	31 96       	adiw	r30, 0x01	; 1
    dabc:	fa 83       	std	Y+2, r31	; 0x02
    dabe:	e9 83       	std	Y+1, r30	; 0x01
    dac0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    dac2:	61 11       	cpse	r22, r1
    dac4:	f0 cf       	rjmp	.-32     	; 0xdaa6 <_Z12processMCodei+0x54c0>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    dac6:	ed e4       	ldi	r30, 0x4D	; 77
    dac8:	fd e0       	ldi	r31, 0x0D	; 13
    daca:	64 91       	lpm	r22, Z
	while(ch)
    dacc:	66 23       	and	r22, r22
    dace:	a1 f0       	breq	.+40     	; 0xdaf8 <_Z12processMCodei+0x5512>
    dad0:	08 e0       	ldi	r16, 0x08	; 8
    dad2:	1a e0       	ldi	r17, 0x0A	; 10
    dad4:	fa 83       	std	Y+2, r31	; 0x02
    dad6:	e9 83       	std	Y+1, r30	; 0x01
    dad8:	d8 01       	movw	r26, r16
    dada:	ed 91       	ld	r30, X+
    dadc:	fc 91       	ld	r31, X
    dade:	01 90       	ld	r0, Z+
    dae0:	f0 81       	ld	r31, Z
    dae2:	e0 2d       	mov	r30, r0
    dae4:	c8 01       	movw	r24, r16
    dae6:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    dae8:	e9 81       	ldd	r30, Y+1	; 0x01
    daea:	fa 81       	ldd	r31, Y+2	; 0x02
    daec:	31 96       	adiw	r30, 0x01	; 1
    daee:	fa 83       	std	Y+2, r31	; 0x02
    daf0:	e9 83       	std	Y+1, r30	; 0x01
    daf2:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    daf4:	61 11       	cpse	r22, r1
    daf6:	f0 cf       	rjmp	.-32     	; 0xdad8 <_Z12processMCodei+0x54f2>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    daf8:	e5 e3       	ldi	r30, 0x35	; 53
    dafa:	fd e0       	ldi	r31, 0x0D	; 13
    dafc:	64 91       	lpm	r22, Z
	while(ch)
    dafe:	66 23       	and	r22, r22
    db00:	a1 f0       	breq	.+40     	; 0xdb2a <_Z12processMCodei+0x5544>
    db02:	08 e0       	ldi	r16, 0x08	; 8
    db04:	1a e0       	ldi	r17, 0x0A	; 10
    db06:	fa 83       	std	Y+2, r31	; 0x02
    db08:	e9 83       	std	Y+1, r30	; 0x01
    db0a:	d8 01       	movw	r26, r16
    db0c:	ed 91       	ld	r30, X+
    db0e:	fc 91       	ld	r31, X
    db10:	01 90       	ld	r0, Z+
    db12:	f0 81       	ld	r31, Z
    db14:	e0 2d       	mov	r30, r0
    db16:	c8 01       	movw	r24, r16
    db18:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    db1a:	e9 81       	ldd	r30, Y+1	; 0x01
    db1c:	fa 81       	ldd	r31, Y+2	; 0x02
    db1e:	31 96       	adiw	r30, 0x01	; 1
    db20:	fa 83       	std	Y+2, r31	; 0x02
    db22:	e9 83       	std	Y+1, r30	; 0x01
    db24:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    db26:	61 11       	cpse	r22, r1
    db28:	f0 cf       	rjmp	.-32     	; 0xdb0a <_Z12processMCodei+0x5524>
	  #ifdef STRING_VERSION_CONFIG_H
	  #ifdef STRING_CONFIG_H_AUTHOR
	  SERIAL_PGM(MSG_CONFIGURATION_VER);
	  SERIAL_PGM(STRING_VERSION_CONFIG_H);
	  SERIAL_PGM(MSG_AUTHOR);
	  SERIAL_PGMLN(STRING_CONFIG_H_AUTHOR);
    db2a:	88 e0       	ldi	r24, 0x08	; 8
    db2c:	9a e0       	ldi	r25, 0x0A	; 10
    db2e:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    db32:	e6 e2       	ldi	r30, 0x26	; 38
    db34:	fd e0       	ldi	r31, 0x0D	; 13
    db36:	64 91       	lpm	r22, Z
	while(ch)
    db38:	66 23       	and	r22, r22
    db3a:	a1 f0       	breq	.+40     	; 0xdb64 <_Z12processMCodei+0x557e>
    db3c:	08 e0       	ldi	r16, 0x08	; 8
    db3e:	1a e0       	ldi	r17, 0x0A	; 10
    db40:	fa 83       	std	Y+2, r31	; 0x02
    db42:	e9 83       	std	Y+1, r30	; 0x01
    db44:	d8 01       	movw	r26, r16
    db46:	ed 91       	ld	r30, X+
    db48:	fc 91       	ld	r31, X
    db4a:	01 90       	ld	r0, Z+
    db4c:	f0 81       	ld	r31, Z
    db4e:	e0 2d       	mov	r30, r0
    db50:	c8 01       	movw	r24, r16
    db52:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    db54:	e9 81       	ldd	r30, Y+1	; 0x01
    db56:	fa 81       	ldd	r31, Y+2	; 0x02
    db58:	31 96       	adiw	r30, 0x01	; 1
    db5a:	fa 83       	std	Y+2, r31	; 0x02
    db5c:	e9 83       	std	Y+1, r30	; 0x01
    db5e:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    db60:	61 11       	cpse	r22, r1
    db62:	f0 cf       	rjmp	.-32     	; 0xdb44 <_Z12processMCodei+0x555e>
	  #endif
	  #endif
	  SERIAL_PGM(MSG_FREE_MEMORY);
	  SERIAL_PORT.println(freeMemory());
    db64:	0e 94 01 3c 	call	0x7802	; 0x7802 <freeMemory>
    db68:	4a e0       	ldi	r20, 0x0A	; 10
    db6a:	50 e0       	ldi	r21, 0x00	; 0
    db6c:	bc 01       	movw	r22, r24
    db6e:	88 e0       	ldi	r24, 0x08	; 8
    db70:	9a e0       	ldi	r25, 0x0A	; 10
    db72:	0e 94 ab 8a 	call	0x11556	; 0x11556 <_ZN5Print7printlnEii>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    db76:	e4 e2       	ldi	r30, 0x24	; 36
    db78:	fd e0       	ldi	r31, 0x0D	; 13
    db7a:	64 91       	lpm	r22, Z
	while(ch)
    db7c:	66 23       	and	r22, r22
    db7e:	a1 f0       	breq	.+40     	; 0xdba8 <_Z12processMCodei+0x55c2>
    db80:	08 e0       	ldi	r16, 0x08	; 8
    db82:	1a e0       	ldi	r17, 0x0A	; 10
    db84:	fa 83       	std	Y+2, r31	; 0x02
    db86:	e9 83       	std	Y+1, r30	; 0x01
    db88:	d8 01       	movw	r26, r16
    db8a:	ed 91       	ld	r30, X+
    db8c:	fc 91       	ld	r31, X
    db8e:	01 90       	ld	r0, Z+
    db90:	f0 81       	ld	r31, Z
    db92:	e0 2d       	mov	r30, r0
    db94:	c8 01       	movw	r24, r16
    db96:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    db98:	e9 81       	ldd	r30, Y+1	; 0x01
    db9a:	fa 81       	ldd	r31, Y+2	; 0x02
    db9c:	31 96       	adiw	r30, 0x01	; 1
    db9e:	fa 83       	std	Y+2, r31	; 0x02
    dba0:	e9 83       	std	Y+1, r30	; 0x01
    dba2:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    dba4:	61 11       	cpse	r22, r1
    dba6:	f0 cf       	rjmp	.-32     	; 0xdb88 <_Z12processMCodei+0x55a2>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    dba8:	ed e1       	ldi	r30, 0x1D	; 29
    dbaa:	fd e0       	ldi	r31, 0x0D	; 13
    dbac:	64 91       	lpm	r22, Z
	while(ch)
    dbae:	66 23       	and	r22, r22
    dbb0:	a1 f0       	breq	.+40     	; 0xdbda <_Z12processMCodei+0x55f4>
    dbb2:	08 e0       	ldi	r16, 0x08	; 8
    dbb4:	1a e0       	ldi	r17, 0x0A	; 10
    dbb6:	fa 83       	std	Y+2, r31	; 0x02
    dbb8:	e9 83       	std	Y+1, r30	; 0x01
    dbba:	d8 01       	movw	r26, r16
    dbbc:	ed 91       	ld	r30, X+
    dbbe:	fc 91       	ld	r31, X
    dbc0:	01 90       	ld	r0, Z+
    dbc2:	f0 81       	ld	r31, Z
    dbc4:	e0 2d       	mov	r30, r0
    dbc6:	c8 01       	movw	r24, r16
    dbc8:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    dbca:	e9 81       	ldd	r30, Y+1	; 0x01
    dbcc:	fa 81       	ldd	r31, Y+2	; 0x02
    dbce:	31 96       	adiw	r30, 0x01	; 1
    dbd0:	fa 83       	std	Y+2, r31	; 0x02
    dbd2:	e9 83       	std	Y+1, r30	; 0x01
    dbd4:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    dbd6:	61 11       	cpse	r22, r1
    dbd8:	f0 cf       	rjmp	.-32     	; 0xdbba <_Z12processMCodei+0x55d4>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    dbda:	ea e1       	ldi	r30, 0x1A	; 26
    dbdc:	fd e0       	ldi	r31, 0x0D	; 13
    dbde:	64 91       	lpm	r22, Z
	while(ch)
    dbe0:	66 23       	and	r22, r22
    dbe2:	a1 f0       	breq	.+40     	; 0xdc0c <_Z12processMCodei+0x5626>
    dbe4:	08 e0       	ldi	r16, 0x08	; 8
    dbe6:	1a e0       	ldi	r17, 0x0A	; 10
    dbe8:	fa 83       	std	Y+2, r31	; 0x02
    dbea:	e9 83       	std	Y+1, r30	; 0x01
    dbec:	d8 01       	movw	r26, r16
    dbee:	ed 91       	ld	r30, X+
    dbf0:	fc 91       	ld	r31, X
    dbf2:	01 90       	ld	r0, Z+
    dbf4:	f0 81       	ld	r31, Z
    dbf6:	e0 2d       	mov	r30, r0
    dbf8:	c8 01       	movw	r24, r16
    dbfa:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    dbfc:	e9 81       	ldd	r30, Y+1	; 0x01
    dbfe:	fa 81       	ldd	r31, Y+2	; 0x02
    dc00:	31 96       	adiw	r30, 0x01	; 1
    dc02:	fa 83       	std	Y+2, r31	; 0x02
    dc04:	e9 83       	std	Y+1, r30	; 0x01
    dc06:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    dc08:	61 11       	cpse	r22, r1
    dc0a:	f0 cf       	rjmp	.-32     	; 0xdbec <_Z12processMCodei+0x5606>
	  SERIAL_PGM(MSG_BEGIN);
	  SERIAL_PGM(MSG_STATUS);
	  SERIAL_PGMLN(MSG_TERMINATE);
    dc0c:	88 e0       	ldi	r24, 0x08	; 8
    dc0e:	9a e0       	ldi	r25, 0x0A	; 10
    dc10:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
	  SERIAL_PORT.flush();
    dc14:	88 e0       	ldi	r24, 0x08	; 8
    dc16:	9a e0       	ldi	r25, 0x0A	; 10
    dc18:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
	  break; 
    dc1c:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    dc20:	e8 e1       	ldi	r30, 0x18	; 24
    dc22:	fd e0       	ldi	r31, 0x0D	; 13
    dc24:	64 91       	lpm	r22, Z
	while(ch)
    dc26:	66 23       	and	r22, r22
    dc28:	a1 f0       	breq	.+40     	; 0xdc52 <_Z12processMCodei+0x566c>
    dc2a:	fa 83       	std	Y+2, r31	; 0x02
    dc2c:	e9 83       	std	Y+1, r30	; 0x01
    dc2e:	08 e0       	ldi	r16, 0x08	; 8
    dc30:	1a e0       	ldi	r17, 0x0A	; 10
    dc32:	d8 01       	movw	r26, r16
    dc34:	ed 91       	ld	r30, X+
    dc36:	fc 91       	ld	r31, X
    dc38:	01 90       	ld	r0, Z+
    dc3a:	f0 81       	ld	r31, Z
    dc3c:	e0 2d       	mov	r30, r0
    dc3e:	c8 01       	movw	r24, r16
    dc40:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    dc42:	e9 81       	ldd	r30, Y+1	; 0x01
    dc44:	fa 81       	ldd	r31, Y+2	; 0x02
    dc46:	31 96       	adiw	r30, 0x01	; 1
    dc48:	fa 83       	std	Y+2, r31	; 0x02
    dc4a:	e9 83       	std	Y+1, r30	; 0x01
    dc4c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    dc4e:	61 11       	cpse	r22, r1
    dc50:	f0 cf       	rjmp	.-32     	; 0xdc32 <_Z12processMCodei+0x564c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    dc52:	e6 e0       	ldi	r30, 0x06	; 6
    dc54:	fd e0       	ldi	r31, 0x0D	; 13
    dc56:	64 91       	lpm	r22, Z
	while(ch)
    dc58:	66 23       	and	r22, r22
    dc5a:	a1 f0       	breq	.+40     	; 0xdc84 <_Z12processMCodei+0x569e>
    dc5c:	fa 83       	std	Y+2, r31	; 0x02
    dc5e:	e9 83       	std	Y+1, r30	; 0x01
    dc60:	08 e0       	ldi	r16, 0x08	; 8
    dc62:	1a e0       	ldi	r17, 0x0A	; 10
    dc64:	d8 01       	movw	r26, r16
    dc66:	ed 91       	ld	r30, X+
    dc68:	fc 91       	ld	r31, X
    dc6a:	01 90       	ld	r0, Z+
    dc6c:	f0 81       	ld	r31, Z
    dc6e:	e0 2d       	mov	r30, r0
    dc70:	c8 01       	movw	r24, r16
    dc72:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    dc74:	e9 81       	ldd	r30, Y+1	; 0x01
    dc76:	fa 81       	ldd	r31, Y+2	; 0x02
    dc78:	31 96       	adiw	r30, 0x01	; 1
    dc7a:	fa 83       	std	Y+2, r31	; 0x02
    dc7c:	e9 83       	std	Y+1, r30	; 0x01
    dc7e:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    dc80:	61 11       	cpse	r22, r1
    dc82:	f0 cf       	rjmp	.-32     	; 0xdc64 <_Z12processMCodei+0x567e>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    dc84:	e4 e0       	ldi	r30, 0x04	; 4
    dc86:	fd e0       	ldi	r31, 0x0D	; 13
    dc88:	64 91       	lpm	r22, Z
	while(ch)
    dc8a:	66 23       	and	r22, r22
    dc8c:	a1 f0       	breq	.+40     	; 0xdcb6 <_Z12processMCodei+0x56d0>
    dc8e:	fa 83       	std	Y+2, r31	; 0x02
    dc90:	e9 83       	std	Y+1, r30	; 0x01
    dc92:	08 e0       	ldi	r16, 0x08	; 8
    dc94:	1a e0       	ldi	r17, 0x0A	; 10
    dc96:	d8 01       	movw	r26, r16
    dc98:	ed 91       	ld	r30, X+
    dc9a:	fc 91       	ld	r31, X
    dc9c:	01 90       	ld	r0, Z+
    dc9e:	f0 81       	ld	r31, Z
    dca0:	e0 2d       	mov	r30, r0
    dca2:	c8 01       	movw	r24, r16
    dca4:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    dca6:	e9 81       	ldd	r30, Y+1	; 0x01
    dca8:	fa 81       	ldd	r31, Y+2	; 0x02
    dcaa:	31 96       	adiw	r30, 0x01	; 1
    dcac:	fa 83       	std	Y+2, r31	; 0x02
    dcae:	e9 83       	std	Y+1, r30	; 0x01
    dcb0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    dcb2:	61 11       	cpse	r22, r1
    dcb4:	f0 cf       	rjmp	.-32     	; 0xdc96 <_Z12processMCodei+0x56b0>
	  
	case 701: // Report digital pins in use
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(digitalPinSettingHdr);
		SERIAL_PGMLN(MSG_DELIMIT);
    dcb6:	88 e0       	ldi	r24, 0x08	; 8
    dcb8:	9a e0       	ldi	r25, 0x0A	; 10
    dcba:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    dcbe:	0f 2e       	mov	r0, r31
    dcc0:	fb e3       	ldi	r31, 0x3B	; 59
    dcc2:	cf 2e       	mov	r12, r31
    dcc4:	f3 e1       	ldi	r31, 0x13	; 19
    dcc6:	df 2e       	mov	r13, r31
    dcc8:	f0 2d       	mov	r31, r0
    dcca:	0f 2e       	mov	r0, r31
    dccc:	fb e7       	ldi	r31, 0x7B	; 123
    dcce:	af 2e       	mov	r10, r31
    dcd0:	f3 e1       	ldi	r31, 0x13	; 19
    dcd2:	bf 2e       	mov	r11, r31
    dcd4:	f0 2d       	mov	r31, r0
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    dcd6:	0f 2e       	mov	r0, r31
    dcd8:	f7 ee       	ldi	r31, 0xE7	; 231
    dcda:	8f 2e       	mov	r8, r31
    dcdc:	fc e0       	ldi	r31, 0x0C	; 12
    dcde:	9f 2e       	mov	r9, r31
    dce0:	f0 2d       	mov	r31, r0
    dce2:	28 e0       	ldi	r18, 0x08	; 8
    dce4:	3a e0       	ldi	r19, 0x0A	; 10
    dce6:	0f 2e       	mov	r0, r31
    dce8:	fd ef       	ldi	r31, 0xFD	; 253
    dcea:	6f 2e       	mov	r6, r31
    dcec:	fc e0       	ldi	r31, 0x0C	; 12
    dcee:	7f 2e       	mov	r7, r31
    dcf0:	f0 2d       	mov	r31, r0
    dcf2:	0f 2e       	mov	r0, r31
    dcf4:	f6 ed       	ldi	r31, 0xD6	; 214
    dcf6:	4f 2e       	mov	r4, r31
    dcf8:	fc e0       	ldi	r31, 0x0C	; 12
    dcfa:	5f 2e       	mov	r5, r31
    dcfc:	f0 2d       	mov	r31, r0
    dcfe:	0f 2e       	mov	r0, r31
    dd00:	ff ee       	ldi	r31, 0xEF	; 239
    dd02:	2f 2e       	mov	r2, r31
    dd04:	fc e0       	ldi	r31, 0x0C	; 12
    dd06:	3f 2e       	mov	r3, r31
    dd08:	f0 2d       	mov	r31, r0
    dd0a:	f2 2e       	mov	r15, r18
    dd0c:	e3 2e       	mov	r14, r19
		for(int i = 0; i < 32; i++) {
			if( pdigitals[i] ) {
    dd0e:	d6 01       	movw	r26, r12
    dd10:	ed 91       	ld	r30, X+
    dd12:	fc 91       	ld	r31, X
    dd14:	30 97       	sbiw	r30, 0x00	; 0
    dd16:	09 f4       	brne	.+2      	; 0xdd1a <_Z12processMCodei+0x5734>
    dd18:	7d c0       	rjmp	.+250    	; 0xde14 <_Z12processMCodei+0x582e>
				SERIAL_PORT.print(pdigitals[i]->pin);
    dd1a:	4a e0       	ldi	r20, 0x0A	; 10
    dd1c:	50 e0       	ldi	r21, 0x00	; 0
    dd1e:	60 81       	ld	r22, Z
    dd20:	88 e0       	ldi	r24, 0x08	; 8
    dd22:	9a e0       	ldi	r25, 0x0A	; 10
    dd24:	0e 94 d9 8a 	call	0x115b2	; 0x115b2 <_ZN5Print5printEhi>
				switch(pdigitals[i]->mode) {
    dd28:	d6 01       	movw	r26, r12
    dd2a:	ed 91       	ld	r30, X+
    dd2c:	fc 91       	ld	r31, X
    dd2e:	81 81       	ldd	r24, Z+1	; 0x01
    dd30:	81 30       	cpi	r24, 0x01	; 1
    dd32:	09 f4       	brne	.+2      	; 0xdd36 <_Z12processMCodei+0x5750>
    dd34:	3a c0       	rjmp	.+116    	; 0xddaa <_Z12processMCodei+0x57c4>
    dd36:	18 f0       	brcs	.+6      	; 0xdd3e <_Z12processMCodei+0x5758>
    dd38:	82 30       	cpi	r24, 0x02	; 2
    dd3a:	e1 f0       	breq	.+56     	; 0xdd74 <_Z12processMCodei+0x578e>
    dd3c:	51 c0       	rjmp	.+162    	; 0xdde0 <_Z12processMCodei+0x57fa>
    dd3e:	f3 01       	movw	r30, r6
    dd40:	64 91       	lpm	r22, Z
	while(ch)
    dd42:	66 23       	and	r22, r22
    dd44:	91 f0       	breq	.+36     	; 0xdd6a <_Z12processMCodei+0x5784>
    dd46:	0d ef       	ldi	r16, 0xFD	; 253
    dd48:	1c e0       	ldi	r17, 0x0C	; 12
    dd4a:	a8 e0       	ldi	r26, 0x08	; 8
    dd4c:	ba e0       	ldi	r27, 0x0A	; 10
    dd4e:	ed 91       	ld	r30, X+
    dd50:	fc 91       	ld	r31, X
    dd52:	01 90       	ld	r0, Z+
    dd54:	f0 81       	ld	r31, Z
    dd56:	e0 2d       	mov	r30, r0
    dd58:	8f 2d       	mov	r24, r15
    dd5a:	9e 2d       	mov	r25, r14
    dd5c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    dd5e:	0f 5f       	subi	r16, 0xFF	; 255
    dd60:	1f 4f       	sbci	r17, 0xFF	; 255
    dd62:	f8 01       	movw	r30, r16
    dd64:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    dd66:	61 11       	cpse	r22, r1
    dd68:	f0 cf       	rjmp	.-32     	; 0xdd4a <_Z12processMCodei+0x5764>
					case INPUT:
						SERIAL_PGMLN(" INPUT");
    dd6a:	88 e0       	ldi	r24, 0x08	; 8
    dd6c:	9a e0       	ldi	r25, 0x0A	; 10
    dd6e:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
						break;
    dd72:	50 c0       	rjmp	.+160    	; 0xde14 <_Z12processMCodei+0x582e>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    dd74:	f1 01       	movw	r30, r2
    dd76:	64 91       	lpm	r22, Z
	while(ch)
    dd78:	66 23       	and	r22, r22
    dd7a:	91 f0       	breq	.+36     	; 0xdda0 <_Z12processMCodei+0x57ba>
    dd7c:	0f ee       	ldi	r16, 0xEF	; 239
    dd7e:	1c e0       	ldi	r17, 0x0C	; 12
    dd80:	a8 e0       	ldi	r26, 0x08	; 8
    dd82:	ba e0       	ldi	r27, 0x0A	; 10
    dd84:	ed 91       	ld	r30, X+
    dd86:	fc 91       	ld	r31, X
    dd88:	01 90       	ld	r0, Z+
    dd8a:	f0 81       	ld	r31, Z
    dd8c:	e0 2d       	mov	r30, r0
    dd8e:	8f 2d       	mov	r24, r15
    dd90:	9e 2d       	mov	r25, r14
    dd92:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    dd94:	0f 5f       	subi	r16, 0xFF	; 255
    dd96:	1f 4f       	sbci	r17, 0xFF	; 255
    dd98:	f8 01       	movw	r30, r16
    dd9a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    dd9c:	61 11       	cpse	r22, r1
    dd9e:	f0 cf       	rjmp	.-32     	; 0xdd80 <_Z12processMCodei+0x579a>
					case INPUT_PULLUP:
						SERIAL_PGMLN(" INPUT_PULLUP");
    dda0:	88 e0       	ldi	r24, 0x08	; 8
    dda2:	9a e0       	ldi	r25, 0x0A	; 10
    dda4:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
						break;
    dda8:	35 c0       	rjmp	.+106    	; 0xde14 <_Z12processMCodei+0x582e>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ddaa:	f4 01       	movw	r30, r8
    ddac:	64 91       	lpm	r22, Z
	while(ch)
    ddae:	66 23       	and	r22, r22
    ddb0:	91 f0       	breq	.+36     	; 0xddd6 <_Z12processMCodei+0x57f0>
    ddb2:	07 ee       	ldi	r16, 0xE7	; 231
    ddb4:	1c e0       	ldi	r17, 0x0C	; 12
    ddb6:	a8 e0       	ldi	r26, 0x08	; 8
    ddb8:	ba e0       	ldi	r27, 0x0A	; 10
    ddba:	ed 91       	ld	r30, X+
    ddbc:	fc 91       	ld	r31, X
    ddbe:	01 90       	ld	r0, Z+
    ddc0:	f0 81       	ld	r31, Z
    ddc2:	e0 2d       	mov	r30, r0
    ddc4:	8f 2d       	mov	r24, r15
    ddc6:	9e 2d       	mov	r25, r14
    ddc8:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ddca:	0f 5f       	subi	r16, 0xFF	; 255
    ddcc:	1f 4f       	sbci	r17, 0xFF	; 255
    ddce:	f8 01       	movw	r30, r16
    ddd0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ddd2:	61 11       	cpse	r22, r1
    ddd4:	f0 cf       	rjmp	.-32     	; 0xddb6 <_Z12processMCodei+0x57d0>
					case OUTPUT:
						SERIAL_PGMLN(" OUTPUT");
    ddd6:	88 e0       	ldi	r24, 0x08	; 8
    ddd8:	9a e0       	ldi	r25, 0x0A	; 10
    ddda:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
						break;
    ddde:	1a c0       	rjmp	.+52     	; 0xde14 <_Z12processMCodei+0x582e>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    dde0:	f2 01       	movw	r30, r4
    dde2:	64 91       	lpm	r22, Z
	while(ch)
    dde4:	66 23       	and	r22, r22
    dde6:	91 f0       	breq	.+36     	; 0xde0c <_Z12processMCodei+0x5826>
    dde8:	06 ed       	ldi	r16, 0xD6	; 214
    ddea:	1c e0       	ldi	r17, 0x0C	; 12
    ddec:	a8 e0       	ldi	r26, 0x08	; 8
    ddee:	ba e0       	ldi	r27, 0x0A	; 10
    ddf0:	ed 91       	ld	r30, X+
    ddf2:	fc 91       	ld	r31, X
    ddf4:	01 90       	ld	r0, Z+
    ddf6:	f0 81       	ld	r31, Z
    ddf8:	e0 2d       	mov	r30, r0
    ddfa:	8f 2d       	mov	r24, r15
    ddfc:	9e 2d       	mov	r25, r14
    ddfe:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    de00:	0f 5f       	subi	r16, 0xFF	; 255
    de02:	1f 4f       	sbci	r17, 0xFF	; 255
    de04:	f8 01       	movw	r30, r16
    de06:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    de08:	61 11       	cpse	r22, r1
    de0a:	f0 cf       	rjmp	.-32     	; 0xddec <_Z12processMCodei+0x5806>
					default:
						SERIAL_PGMLN(" ERROR - UNKNOWN");
    de0c:	88 e0       	ldi	r24, 0x08	; 8
    de0e:	9a e0       	ldi	r25, 0x0A	; 10
    de10:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    de14:	f2 e0       	ldi	r31, 0x02	; 2
    de16:	cf 0e       	add	r12, r31
    de18:	d1 1c       	adc	r13, r1
	  
	case 701: // Report digital pins in use
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(digitalPinSettingHdr);
		SERIAL_PGMLN(MSG_DELIMIT);
		for(int i = 0; i < 32; i++) {
    de1a:	ac 14       	cp	r10, r12
    de1c:	bd 04       	cpc	r11, r13
    de1e:	09 f0       	breq	.+2      	; 0xde22 <_Z12processMCodei+0x583c>
    de20:	76 cf       	rjmp	.-276    	; 0xdd0e <_Z12processMCodei+0x5728>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    de22:	e4 ed       	ldi	r30, 0xD4	; 212
    de24:	fc e0       	ldi	r31, 0x0C	; 12
    de26:	64 91       	lpm	r22, Z
	while(ch)
    de28:	66 23       	and	r22, r22
    de2a:	a1 f0       	breq	.+40     	; 0xde54 <_Z12processMCodei+0x586e>
    de2c:	fa 83       	std	Y+2, r31	; 0x02
    de2e:	e9 83       	std	Y+1, r30	; 0x01
    de30:	08 e0       	ldi	r16, 0x08	; 8
    de32:	1a e0       	ldi	r17, 0x0A	; 10
    de34:	d8 01       	movw	r26, r16
    de36:	ed 91       	ld	r30, X+
    de38:	fc 91       	ld	r31, X
    de3a:	01 90       	ld	r0, Z+
    de3c:	f0 81       	ld	r31, Z
    de3e:	e0 2d       	mov	r30, r0
    de40:	c8 01       	movw	r24, r16
    de42:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    de44:	e9 81       	ldd	r30, Y+1	; 0x01
    de46:	fa 81       	ldd	r31, Y+2	; 0x02
    de48:	31 96       	adiw	r30, 0x01	; 1
    de4a:	fa 83       	std	Y+2, r31	; 0x02
    de4c:	e9 83       	std	Y+1, r30	; 0x01
    de4e:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    de50:	61 11       	cpse	r22, r1
    de52:	f0 cf       	rjmp	.-32     	; 0xde34 <_Z12processMCodei+0x584e>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    de54:	e2 ec       	ldi	r30, 0xC2	; 194
    de56:	fc e0       	ldi	r31, 0x0C	; 12
    de58:	64 91       	lpm	r22, Z
	while(ch)
    de5a:	66 23       	and	r22, r22
    de5c:	a1 f0       	breq	.+40     	; 0xde86 <_Z12processMCodei+0x58a0>
    de5e:	fa 83       	std	Y+2, r31	; 0x02
    de60:	e9 83       	std	Y+1, r30	; 0x01
    de62:	08 e0       	ldi	r16, 0x08	; 8
    de64:	1a e0       	ldi	r17, 0x0A	; 10
    de66:	d8 01       	movw	r26, r16
    de68:	ed 91       	ld	r30, X+
    de6a:	fc 91       	ld	r31, X
    de6c:	01 90       	ld	r0, Z+
    de6e:	f0 81       	ld	r31, Z
    de70:	e0 2d       	mov	r30, r0
    de72:	c8 01       	movw	r24, r16
    de74:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    de76:	e9 81       	ldd	r30, Y+1	; 0x01
    de78:	fa 81       	ldd	r31, Y+2	; 0x02
    de7a:	31 96       	adiw	r30, 0x01	; 1
    de7c:	fa 83       	std	Y+2, r31	; 0x02
    de7e:	e9 83       	std	Y+1, r30	; 0x01
    de80:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    de82:	61 11       	cpse	r22, r1
    de84:	f0 cf       	rjmp	.-32     	; 0xde66 <_Z12processMCodei+0x5880>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    de86:	ef eb       	ldi	r30, 0xBF	; 191
    de88:	fc e0       	ldi	r31, 0x0C	; 12
    de8a:	64 91       	lpm	r22, Z
	while(ch)
    de8c:	66 23       	and	r22, r22
    de8e:	a1 f0       	breq	.+40     	; 0xdeb8 <_Z12processMCodei+0x58d2>
    de90:	fa 83       	std	Y+2, r31	; 0x02
    de92:	e9 83       	std	Y+1, r30	; 0x01
    de94:	08 e0       	ldi	r16, 0x08	; 8
    de96:	1a e0       	ldi	r17, 0x0A	; 10
    de98:	d8 01       	movw	r26, r16
    de9a:	ed 91       	ld	r30, X+
    de9c:	fc 91       	ld	r31, X
    de9e:	01 90       	ld	r0, Z+
    dea0:	f0 81       	ld	r31, Z
    dea2:	e0 2d       	mov	r30, r0
    dea4:	c8 01       	movw	r24, r16
    dea6:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    dea8:	e9 81       	ldd	r30, Y+1	; 0x01
    deaa:	fa 81       	ldd	r31, Y+2	; 0x02
    deac:	31 96       	adiw	r30, 0x01	; 1
    deae:	fa 83       	std	Y+2, r31	; 0x02
    deb0:	e9 83       	std	Y+1, r30	; 0x01
    deb2:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    deb4:	61 11       	cpse	r22, r1
    deb6:	f0 cf       	rjmp	.-32     	; 0xde98 <_Z12processMCodei+0x58b2>
				}
			}
		}
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(digitalPinSettingHdr);
		SERIAL_PGMLN(MSG_TERMINATE);
    deb8:	88 e0       	ldi	r24, 0x08	; 8
    deba:	9a e0       	ldi	r25, 0x0A	; 10
    debc:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		SERIAL_PORT.flush();
    dec0:	88 e0       	ldi	r24, 0x08	; 8
    dec2:	9a e0       	ldi	r25, 0x0A	; 10
    dec4:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
		break;
    dec8:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    decc:	ed eb       	ldi	r30, 0xBD	; 189
    dece:	fc e0       	ldi	r31, 0x0C	; 12
    ded0:	64 91       	lpm	r22, Z
	while(ch)
    ded2:	66 23       	and	r22, r22
    ded4:	a1 f0       	breq	.+40     	; 0xdefe <_Z12processMCodei+0x5918>
    ded6:	08 e0       	ldi	r16, 0x08	; 8
    ded8:	1a e0       	ldi	r17, 0x0A	; 10
    deda:	fa 83       	std	Y+2, r31	; 0x02
    dedc:	e9 83       	std	Y+1, r30	; 0x01
    dede:	d8 01       	movw	r26, r16
    dee0:	ed 91       	ld	r30, X+
    dee2:	fc 91       	ld	r31, X
    dee4:	01 90       	ld	r0, Z+
    dee6:	f0 81       	ld	r31, Z
    dee8:	e0 2d       	mov	r30, r0
    deea:	c8 01       	movw	r24, r16
    deec:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    deee:	e9 81       	ldd	r30, Y+1	; 0x01
    def0:	fa 81       	ldd	r31, Y+2	; 0x02
    def2:	31 96       	adiw	r30, 0x01	; 1
    def4:	fa 83       	std	Y+2, r31	; 0x02
    def6:	e9 83       	std	Y+1, r30	; 0x01
    def8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    defa:	61 11       	cpse	r22, r1
    defc:	f0 cf       	rjmp	.-32     	; 0xdede <_Z12processMCodei+0x58f8>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    defe:	ec ea       	ldi	r30, 0xAC	; 172
    df00:	fc e0       	ldi	r31, 0x0C	; 12
    df02:	64 91       	lpm	r22, Z
	while(ch)
    df04:	66 23       	and	r22, r22
    df06:	a1 f0       	breq	.+40     	; 0xdf30 <_Z12processMCodei+0x594a>
    df08:	08 e0       	ldi	r16, 0x08	; 8
    df0a:	1a e0       	ldi	r17, 0x0A	; 10
    df0c:	fa 83       	std	Y+2, r31	; 0x02
    df0e:	e9 83       	std	Y+1, r30	; 0x01
    df10:	d8 01       	movw	r26, r16
    df12:	ed 91       	ld	r30, X+
    df14:	fc 91       	ld	r31, X
    df16:	01 90       	ld	r0, Z+
    df18:	f0 81       	ld	r31, Z
    df1a:	e0 2d       	mov	r30, r0
    df1c:	c8 01       	movw	r24, r16
    df1e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    df20:	e9 81       	ldd	r30, Y+1	; 0x01
    df22:	fa 81       	ldd	r31, Y+2	; 0x02
    df24:	31 96       	adiw	r30, 0x01	; 1
    df26:	fa 83       	std	Y+2, r31	; 0x02
    df28:	e9 83       	std	Y+1, r30	; 0x01
    df2a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    df2c:	61 11       	cpse	r22, r1
    df2e:	f0 cf       	rjmp	.-32     	; 0xdf10 <_Z12processMCodei+0x592a>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    df30:	ea ea       	ldi	r30, 0xAA	; 170
    df32:	fc e0       	ldi	r31, 0x0C	; 12
    df34:	64 91       	lpm	r22, Z
	while(ch)
    df36:	66 23       	and	r22, r22
    df38:	a1 f0       	breq	.+40     	; 0xdf62 <_Z12processMCodei+0x597c>
    df3a:	08 e0       	ldi	r16, 0x08	; 8
    df3c:	1a e0       	ldi	r17, 0x0A	; 10
    df3e:	fa 83       	std	Y+2, r31	; 0x02
    df40:	e9 83       	std	Y+1, r30	; 0x01
    df42:	d8 01       	movw	r26, r16
    df44:	ed 91       	ld	r30, X+
    df46:	fc 91       	ld	r31, X
    df48:	01 90       	ld	r0, Z+
    df4a:	f0 81       	ld	r31, Z
    df4c:	e0 2d       	mov	r30, r0
    df4e:	c8 01       	movw	r24, r16
    df50:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    df52:	e9 81       	ldd	r30, Y+1	; 0x01
    df54:	fa 81       	ldd	r31, Y+2	; 0x02
    df56:	31 96       	adiw	r30, 0x01	; 1
    df58:	fa 83       	std	Y+2, r31	; 0x02
    df5a:	e9 83       	std	Y+1, r30	; 0x01
    df5c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    df5e:	61 11       	cpse	r22, r1
    df60:	f0 cf       	rjmp	.-32     	; 0xdf42 <_Z12processMCodei+0x595c>
		
	case 702: // Report analog pins in use
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(analogPinSettingHdr);
		SERIAL_PGMLN(MSG_DELIMIT);
    df62:	88 e0       	ldi	r24, 0x08	; 8
    df64:	9a e0       	ldi	r25, 0x0A	; 10
    df66:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    df6a:	0f 2e       	mov	r0, r31
    df6c:	fb eb       	ldi	r31, 0xBB	; 187
    df6e:	cf 2e       	mov	r12, r31
    df70:	f3 e1       	ldi	r31, 0x13	; 19
    df72:	df 2e       	mov	r13, r31
    df74:	f0 2d       	mov	r31, r0
    df76:	0f 2e       	mov	r0, r31
    df78:	fb ed       	ldi	r31, 0xDB	; 219
    df7a:	af 2e       	mov	r10, r31
    df7c:	f3 e1       	ldi	r31, 0x13	; 19
    df7e:	bf 2e       	mov	r11, r31
    df80:	f0 2d       	mov	r31, r0
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    df82:	0f 2e       	mov	r0, r31
    df84:	fd e8       	ldi	r31, 0x8D	; 141
    df86:	8f 2e       	mov	r8, r31
    df88:	fc e0       	ldi	r31, 0x0C	; 12
    df8a:	9f 2e       	mov	r9, r31
    df8c:	f0 2d       	mov	r31, r0
    df8e:	28 e0       	ldi	r18, 0x08	; 8
    df90:	3a e0       	ldi	r19, 0x0A	; 10
    df92:	0f 2e       	mov	r0, r31
    df94:	f3 ea       	ldi	r31, 0xA3	; 163
    df96:	6f 2e       	mov	r6, r31
    df98:	fc e0       	ldi	r31, 0x0C	; 12
    df9a:	7f 2e       	mov	r7, r31
    df9c:	f0 2d       	mov	r31, r0
    df9e:	0f 2e       	mov	r0, r31
    dfa0:	fc e7       	ldi	r31, 0x7C	; 124
    dfa2:	4f 2e       	mov	r4, r31
    dfa4:	fc e0       	ldi	r31, 0x0C	; 12
    dfa6:	5f 2e       	mov	r5, r31
    dfa8:	f0 2d       	mov	r31, r0
    dfaa:	0f 2e       	mov	r0, r31
    dfac:	f5 e9       	ldi	r31, 0x95	; 149
    dfae:	2f 2e       	mov	r2, r31
    dfb0:	fc e0       	ldi	r31, 0x0C	; 12
    dfb2:	3f 2e       	mov	r3, r31
    dfb4:	f0 2d       	mov	r31, r0
    dfb6:	f2 2e       	mov	r15, r18
    dfb8:	e3 2e       	mov	r14, r19
		for(int i = 0; i < 16; i++) {
			if( panalogs[i]  ) {
    dfba:	d6 01       	movw	r26, r12
    dfbc:	ed 91       	ld	r30, X+
    dfbe:	fc 91       	ld	r31, X
    dfc0:	30 97       	sbiw	r30, 0x00	; 0
    dfc2:	09 f4       	brne	.+2      	; 0xdfc6 <_Z12processMCodei+0x59e0>
    dfc4:	8b c0       	rjmp	.+278    	; 0xe0dc <_Z12processMCodei+0x5af6>
				SERIAL_PORT.print(panalogs[i]->pin);
    dfc6:	a0 81       	ld	r26, Z
    dfc8:	b1 81       	ldd	r27, Z+1	; 0x01
    dfca:	16 97       	sbiw	r26, 0x06	; 6
    dfcc:	8d 91       	ld	r24, X+
    dfce:	9c 91       	ld	r25, X
    dfd0:	e8 0f       	add	r30, r24
    dfd2:	f9 1f       	adc	r31, r25
    dfd4:	4a e0       	ldi	r20, 0x0A	; 10
    dfd6:	50 e0       	ldi	r21, 0x00	; 0
    dfd8:	60 81       	ld	r22, Z
    dfda:	88 e0       	ldi	r24, 0x08	; 8
    dfdc:	9a e0       	ldi	r25, 0x0A	; 10
    dfde:	0e 94 d9 8a 	call	0x115b2	; 0x115b2 <_ZN5Print5printEhi>
				switch(panalogs[i]->mode) {
    dfe2:	d6 01       	movw	r26, r12
    dfe4:	ed 91       	ld	r30, X+
    dfe6:	fc 91       	ld	r31, X
    dfe8:	a0 81       	ld	r26, Z
    dfea:	b1 81       	ldd	r27, Z+1	; 0x01
    dfec:	16 97       	sbiw	r26, 0x06	; 6
    dfee:	8d 91       	ld	r24, X+
    dff0:	9c 91       	ld	r25, X
    dff2:	e8 0f       	add	r30, r24
    dff4:	f9 1f       	adc	r31, r25
    dff6:	81 81       	ldd	r24, Z+1	; 0x01
    dff8:	81 30       	cpi	r24, 0x01	; 1
    dffa:	09 f4       	brne	.+2      	; 0xdffe <_Z12processMCodei+0x5a18>
    dffc:	3a c0       	rjmp	.+116    	; 0xe072 <_Z12processMCodei+0x5a8c>
    dffe:	18 f0       	brcs	.+6      	; 0xe006 <_Z12processMCodei+0x5a20>
    e000:	82 30       	cpi	r24, 0x02	; 2
    e002:	e1 f0       	breq	.+56     	; 0xe03c <_Z12processMCodei+0x5a56>
    e004:	51 c0       	rjmp	.+162    	; 0xe0a8 <_Z12processMCodei+0x5ac2>
    e006:	f3 01       	movw	r30, r6
    e008:	64 91       	lpm	r22, Z
	while(ch)
    e00a:	66 23       	and	r22, r22
    e00c:	91 f0       	breq	.+36     	; 0xe032 <_Z12processMCodei+0x5a4c>
    e00e:	03 ea       	ldi	r16, 0xA3	; 163
    e010:	1c e0       	ldi	r17, 0x0C	; 12
    e012:	a8 e0       	ldi	r26, 0x08	; 8
    e014:	ba e0       	ldi	r27, 0x0A	; 10
    e016:	ed 91       	ld	r30, X+
    e018:	fc 91       	ld	r31, X
    e01a:	01 90       	ld	r0, Z+
    e01c:	f0 81       	ld	r31, Z
    e01e:	e0 2d       	mov	r30, r0
    e020:	8f 2d       	mov	r24, r15
    e022:	9e 2d       	mov	r25, r14
    e024:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e026:	0f 5f       	subi	r16, 0xFF	; 255
    e028:	1f 4f       	sbci	r17, 0xFF	; 255
    e02a:	f8 01       	movw	r30, r16
    e02c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e02e:	61 11       	cpse	r22, r1
    e030:	f0 cf       	rjmp	.-32     	; 0xe012 <_Z12processMCodei+0x5a2c>
					case INPUT:
						SERIAL_PGMLN(" INPUT");
    e032:	88 e0       	ldi	r24, 0x08	; 8
    e034:	9a e0       	ldi	r25, 0x0A	; 10
    e036:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
						break;
    e03a:	50 c0       	rjmp	.+160    	; 0xe0dc <_Z12processMCodei+0x5af6>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e03c:	f1 01       	movw	r30, r2
    e03e:	64 91       	lpm	r22, Z
	while(ch)
    e040:	66 23       	and	r22, r22
    e042:	91 f0       	breq	.+36     	; 0xe068 <_Z12processMCodei+0x5a82>
    e044:	05 e9       	ldi	r16, 0x95	; 149
    e046:	1c e0       	ldi	r17, 0x0C	; 12
    e048:	a8 e0       	ldi	r26, 0x08	; 8
    e04a:	ba e0       	ldi	r27, 0x0A	; 10
    e04c:	ed 91       	ld	r30, X+
    e04e:	fc 91       	ld	r31, X
    e050:	01 90       	ld	r0, Z+
    e052:	f0 81       	ld	r31, Z
    e054:	e0 2d       	mov	r30, r0
    e056:	8f 2d       	mov	r24, r15
    e058:	9e 2d       	mov	r25, r14
    e05a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e05c:	0f 5f       	subi	r16, 0xFF	; 255
    e05e:	1f 4f       	sbci	r17, 0xFF	; 255
    e060:	f8 01       	movw	r30, r16
    e062:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e064:	61 11       	cpse	r22, r1
    e066:	f0 cf       	rjmp	.-32     	; 0xe048 <_Z12processMCodei+0x5a62>
					case INPUT_PULLUP:
						SERIAL_PGMLN(" INPUT_PULLUP");
    e068:	88 e0       	ldi	r24, 0x08	; 8
    e06a:	9a e0       	ldi	r25, 0x0A	; 10
    e06c:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
						break;
    e070:	35 c0       	rjmp	.+106    	; 0xe0dc <_Z12processMCodei+0x5af6>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e072:	f4 01       	movw	r30, r8
    e074:	64 91       	lpm	r22, Z
	while(ch)
    e076:	66 23       	and	r22, r22
    e078:	91 f0       	breq	.+36     	; 0xe09e <_Z12processMCodei+0x5ab8>
    e07a:	0d e8       	ldi	r16, 0x8D	; 141
    e07c:	1c e0       	ldi	r17, 0x0C	; 12
    e07e:	a8 e0       	ldi	r26, 0x08	; 8
    e080:	ba e0       	ldi	r27, 0x0A	; 10
    e082:	ed 91       	ld	r30, X+
    e084:	fc 91       	ld	r31, X
    e086:	01 90       	ld	r0, Z+
    e088:	f0 81       	ld	r31, Z
    e08a:	e0 2d       	mov	r30, r0
    e08c:	8f 2d       	mov	r24, r15
    e08e:	9e 2d       	mov	r25, r14
    e090:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e092:	0f 5f       	subi	r16, 0xFF	; 255
    e094:	1f 4f       	sbci	r17, 0xFF	; 255
    e096:	f8 01       	movw	r30, r16
    e098:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e09a:	61 11       	cpse	r22, r1
    e09c:	f0 cf       	rjmp	.-32     	; 0xe07e <_Z12processMCodei+0x5a98>
					case OUTPUT:
						SERIAL_PGMLN(" OUTPUT");
    e09e:	88 e0       	ldi	r24, 0x08	; 8
    e0a0:	9a e0       	ldi	r25, 0x0A	; 10
    e0a2:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
						break;
    e0a6:	1a c0       	rjmp	.+52     	; 0xe0dc <_Z12processMCodei+0x5af6>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e0a8:	f2 01       	movw	r30, r4
    e0aa:	64 91       	lpm	r22, Z
	while(ch)
    e0ac:	66 23       	and	r22, r22
    e0ae:	91 f0       	breq	.+36     	; 0xe0d4 <_Z12processMCodei+0x5aee>
    e0b0:	0c e7       	ldi	r16, 0x7C	; 124
    e0b2:	1c e0       	ldi	r17, 0x0C	; 12
    e0b4:	a8 e0       	ldi	r26, 0x08	; 8
    e0b6:	ba e0       	ldi	r27, 0x0A	; 10
    e0b8:	ed 91       	ld	r30, X+
    e0ba:	fc 91       	ld	r31, X
    e0bc:	01 90       	ld	r0, Z+
    e0be:	f0 81       	ld	r31, Z
    e0c0:	e0 2d       	mov	r30, r0
    e0c2:	8f 2d       	mov	r24, r15
    e0c4:	9e 2d       	mov	r25, r14
    e0c6:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e0c8:	0f 5f       	subi	r16, 0xFF	; 255
    e0ca:	1f 4f       	sbci	r17, 0xFF	; 255
    e0cc:	f8 01       	movw	r30, r16
    e0ce:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e0d0:	61 11       	cpse	r22, r1
    e0d2:	f0 cf       	rjmp	.-32     	; 0xe0b4 <_Z12processMCodei+0x5ace>
					default:
						SERIAL_PGMLN(" ERROR - UNKNOWN");
    e0d4:	88 e0       	ldi	r24, 0x08	; 8
    e0d6:	9a e0       	ldi	r25, 0x0A	; 10
    e0d8:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    e0dc:	f2 e0       	ldi	r31, 0x02	; 2
    e0de:	cf 0e       	add	r12, r31
    e0e0:	d1 1c       	adc	r13, r1
		
	case 702: // Report analog pins in use
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(analogPinSettingHdr);
		SERIAL_PGMLN(MSG_DELIMIT);
		for(int i = 0; i < 16; i++) {
    e0e2:	ca 14       	cp	r12, r10
    e0e4:	db 04       	cpc	r13, r11
    e0e6:	09 f0       	breq	.+2      	; 0xe0ea <_Z12processMCodei+0x5b04>
    e0e8:	68 cf       	rjmp	.-304    	; 0xdfba <_Z12processMCodei+0x59d4>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e0ea:	ea e7       	ldi	r30, 0x7A	; 122
    e0ec:	fc e0       	ldi	r31, 0x0C	; 12
    e0ee:	64 91       	lpm	r22, Z
	while(ch)
    e0f0:	66 23       	and	r22, r22
    e0f2:	a1 f0       	breq	.+40     	; 0xe11c <_Z12processMCodei+0x5b36>
    e0f4:	08 e0       	ldi	r16, 0x08	; 8
    e0f6:	1a e0       	ldi	r17, 0x0A	; 10
    e0f8:	fa 83       	std	Y+2, r31	; 0x02
    e0fa:	e9 83       	std	Y+1, r30	; 0x01
    e0fc:	d8 01       	movw	r26, r16
    e0fe:	ed 91       	ld	r30, X+
    e100:	fc 91       	ld	r31, X
    e102:	01 90       	ld	r0, Z+
    e104:	f0 81       	ld	r31, Z
    e106:	e0 2d       	mov	r30, r0
    e108:	c8 01       	movw	r24, r16
    e10a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e10c:	e9 81       	ldd	r30, Y+1	; 0x01
    e10e:	fa 81       	ldd	r31, Y+2	; 0x02
    e110:	31 96       	adiw	r30, 0x01	; 1
    e112:	fa 83       	std	Y+2, r31	; 0x02
    e114:	e9 83       	std	Y+1, r30	; 0x01
    e116:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e118:	61 11       	cpse	r22, r1
    e11a:	f0 cf       	rjmp	.-32     	; 0xe0fc <_Z12processMCodei+0x5b16>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e11c:	e9 e6       	ldi	r30, 0x69	; 105
    e11e:	fc e0       	ldi	r31, 0x0C	; 12
    e120:	64 91       	lpm	r22, Z
	while(ch)
    e122:	66 23       	and	r22, r22
    e124:	a1 f0       	breq	.+40     	; 0xe14e <_Z12processMCodei+0x5b68>
    e126:	08 e0       	ldi	r16, 0x08	; 8
    e128:	1a e0       	ldi	r17, 0x0A	; 10
    e12a:	fa 83       	std	Y+2, r31	; 0x02
    e12c:	e9 83       	std	Y+1, r30	; 0x01
    e12e:	d8 01       	movw	r26, r16
    e130:	ed 91       	ld	r30, X+
    e132:	fc 91       	ld	r31, X
    e134:	01 90       	ld	r0, Z+
    e136:	f0 81       	ld	r31, Z
    e138:	e0 2d       	mov	r30, r0
    e13a:	c8 01       	movw	r24, r16
    e13c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e13e:	e9 81       	ldd	r30, Y+1	; 0x01
    e140:	fa 81       	ldd	r31, Y+2	; 0x02
    e142:	31 96       	adiw	r30, 0x01	; 1
    e144:	fa 83       	std	Y+2, r31	; 0x02
    e146:	e9 83       	std	Y+1, r30	; 0x01
    e148:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e14a:	61 11       	cpse	r22, r1
    e14c:	f0 cf       	rjmp	.-32     	; 0xe12e <_Z12processMCodei+0x5b48>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e14e:	e6 e6       	ldi	r30, 0x66	; 102
    e150:	fc e0       	ldi	r31, 0x0C	; 12
    e152:	64 91       	lpm	r22, Z
	while(ch)
    e154:	66 23       	and	r22, r22
    e156:	a1 f0       	breq	.+40     	; 0xe180 <_Z12processMCodei+0x5b9a>
    e158:	08 e0       	ldi	r16, 0x08	; 8
    e15a:	1a e0       	ldi	r17, 0x0A	; 10
    e15c:	fa 83       	std	Y+2, r31	; 0x02
    e15e:	e9 83       	std	Y+1, r30	; 0x01
    e160:	d8 01       	movw	r26, r16
    e162:	ed 91       	ld	r30, X+
    e164:	fc 91       	ld	r31, X
    e166:	01 90       	ld	r0, Z+
    e168:	f0 81       	ld	r31, Z
    e16a:	e0 2d       	mov	r30, r0
    e16c:	c8 01       	movw	r24, r16
    e16e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e170:	e9 81       	ldd	r30, Y+1	; 0x01
    e172:	fa 81       	ldd	r31, Y+2	; 0x02
    e174:	31 96       	adiw	r30, 0x01	; 1
    e176:	fa 83       	std	Y+2, r31	; 0x02
    e178:	e9 83       	std	Y+1, r30	; 0x01
    e17a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e17c:	61 11       	cpse	r22, r1
    e17e:	f0 cf       	rjmp	.-32     	; 0xe160 <_Z12processMCodei+0x5b7a>
				}
			}
		}
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(analogPinSettingHdr);
		SERIAL_PGMLN(MSG_TERMINATE);
    e180:	88 e0       	ldi	r24, 0x08	; 8
    e182:	9a e0       	ldi	r25, 0x0A	; 10
    e184:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		SERIAL_PORT.flush();
    e188:	88 e0       	ldi	r24, 0x08	; 8
    e18a:	9a e0       	ldi	r25, 0x0A	; 10
    e18c:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
		break;
    e190:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e194:	e4 e6       	ldi	r30, 0x64	; 100
    e196:	fc e0       	ldi	r31, 0x0C	; 12
    e198:	64 91       	lpm	r22, Z
	while(ch)
    e19a:	66 23       	and	r22, r22
    e19c:	a1 f0       	breq	.+40     	; 0xe1c6 <_Z12processMCodei+0x5be0>
    e19e:	fa 83       	std	Y+2, r31	; 0x02
    e1a0:	e9 83       	std	Y+1, r30	; 0x01
    e1a2:	08 e0       	ldi	r16, 0x08	; 8
    e1a4:	1a e0       	ldi	r17, 0x0A	; 10
    e1a6:	d8 01       	movw	r26, r16
    e1a8:	ed 91       	ld	r30, X+
    e1aa:	fc 91       	ld	r31, X
    e1ac:	01 90       	ld	r0, Z+
    e1ae:	f0 81       	ld	r31, Z
    e1b0:	e0 2d       	mov	r30, r0
    e1b2:	c8 01       	movw	r24, r16
    e1b4:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e1b6:	e9 81       	ldd	r30, Y+1	; 0x01
    e1b8:	fa 81       	ldd	r31, Y+2	; 0x02
    e1ba:	31 96       	adiw	r30, 0x01	; 1
    e1bc:	fa 83       	std	Y+2, r31	; 0x02
    e1be:	e9 83       	std	Y+1, r30	; 0x01
    e1c0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e1c2:	61 11       	cpse	r22, r1
    e1c4:	f0 cf       	rjmp	.-32     	; 0xe1a6 <_Z12processMCodei+0x5bc0>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e1c6:	ef e4       	ldi	r30, 0x4F	; 79
    e1c8:	fc e0       	ldi	r31, 0x0C	; 12
    e1ca:	64 91       	lpm	r22, Z
	while(ch)
    e1cc:	66 23       	and	r22, r22
    e1ce:	a1 f0       	breq	.+40     	; 0xe1f8 <_Z12processMCodei+0x5c12>
    e1d0:	08 e0       	ldi	r16, 0x08	; 8
    e1d2:	1a e0       	ldi	r17, 0x0A	; 10
    e1d4:	fa 83       	std	Y+2, r31	; 0x02
    e1d6:	e9 83       	std	Y+1, r30	; 0x01
    e1d8:	d8 01       	movw	r26, r16
    e1da:	ed 91       	ld	r30, X+
    e1dc:	fc 91       	ld	r31, X
    e1de:	01 90       	ld	r0, Z+
    e1e0:	f0 81       	ld	r31, Z
    e1e2:	e0 2d       	mov	r30, r0
    e1e4:	c8 01       	movw	r24, r16
    e1e6:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e1e8:	e9 81       	ldd	r30, Y+1	; 0x01
    e1ea:	fa 81       	ldd	r31, Y+2	; 0x02
    e1ec:	31 96       	adiw	r30, 0x01	; 1
    e1ee:	fa 83       	std	Y+2, r31	; 0x02
    e1f0:	e9 83       	std	Y+1, r30	; 0x01
    e1f2:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e1f4:	61 11       	cpse	r22, r1
    e1f6:	f0 cf       	rjmp	.-32     	; 0xe1d8 <_Z12processMCodei+0x5bf2>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e1f8:	ed e4       	ldi	r30, 0x4D	; 77
    e1fa:	fc e0       	ldi	r31, 0x0C	; 12
    e1fc:	64 91       	lpm	r22, Z
	while(ch)
    e1fe:	66 23       	and	r22, r22
    e200:	a1 f0       	breq	.+40     	; 0xe22a <_Z12processMCodei+0x5c44>
    e202:	08 e0       	ldi	r16, 0x08	; 8
    e204:	1a e0       	ldi	r17, 0x0A	; 10
    e206:	fa 83       	std	Y+2, r31	; 0x02
    e208:	e9 83       	std	Y+1, r30	; 0x01
    e20a:	d8 01       	movw	r26, r16
    e20c:	ed 91       	ld	r30, X+
    e20e:	fc 91       	ld	r31, X
    e210:	01 90       	ld	r0, Z+
    e212:	f0 81       	ld	r31, Z
    e214:	e0 2d       	mov	r30, r0
    e216:	c8 01       	movw	r24, r16
    e218:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e21a:	e9 81       	ldd	r30, Y+1	; 0x01
    e21c:	fa 81       	ldd	r31, Y+2	; 0x02
    e21e:	31 96       	adiw	r30, 0x01	; 1
    e220:	fa 83       	std	Y+2, r31	; 0x02
    e222:	e9 83       	std	Y+1, r30	; 0x01
    e224:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e226:	61 11       	cpse	r22, r1
    e228:	f0 cf       	rjmp	.-32     	; 0xe20a <_Z12processMCodei+0x5c24>
		
	case 703: // Report ultrasonic pins in use
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(ultrasonicPinSettingHdr);
		SERIAL_PGMLN(MSG_DELIMIT);
    e22a:	88 e0       	ldi	r24, 0x08	; 8
    e22c:	9a e0       	ldi	r25, 0x0A	; 10
    e22e:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    e232:	0f 2e       	mov	r0, r31
    e234:	f3 e4       	ldi	r31, 0x43	; 67
    e236:	ef 2e       	mov	r14, r31
    e238:	f4 e1       	ldi	r31, 0x14	; 20
    e23a:	ff 2e       	mov	r15, r31
    e23c:	f0 2d       	mov	r31, r0
    e23e:	0f 2e       	mov	r0, r31
    e240:	f7 e5       	ldi	r31, 0x57	; 87
    e242:	af 2e       	mov	r10, r31
    e244:	f4 e1       	ldi	r31, 0x14	; 20
    e246:	bf 2e       	mov	r11, r31
    e248:	f0 2d       	mov	r31, r0
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e24a:	0f 2e       	mov	r0, r31
    e24c:	f8 e4       	ldi	r31, 0x48	; 72
    e24e:	8f 2e       	mov	r8, r31
    e250:	fc e0       	ldi	r31, 0x0C	; 12
    e252:	9f 2e       	mov	r9, r31
    e254:	f0 2d       	mov	r31, r0
		for(int i = 0; i < 10; i++) {
			if( psonics[i] ) {
				SERIAL_PGM("Pin:");
				SERIAL_PORT.println(psonics[i]->getPin());
    e256:	08 e0       	ldi	r16, 0x08	; 8
    e258:	1a e0       	ldi	r17, 0x0A	; 10
    e25a:	60 2e       	mov	r6, r16
    e25c:	71 2e       	mov	r7, r17
    e25e:	67 01       	movw	r12, r14
	case 703: // Report ultrasonic pins in use
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(ultrasonicPinSettingHdr);
		SERIAL_PGMLN(MSG_DELIMIT);
		for(int i = 0; i < 10; i++) {
			if( psonics[i] ) {
    e260:	d7 01       	movw	r26, r14
    e262:	8d 91       	ld	r24, X+
    e264:	9c 91       	ld	r25, X
    e266:	89 2b       	or	r24, r25
    e268:	29 f1       	breq	.+74     	; 0xe2b4 <_Z12processMCodei+0x5cce>
    e26a:	f4 01       	movw	r30, r8
    e26c:	64 91       	lpm	r22, Z
	while(ch)
    e26e:	66 23       	and	r22, r22
    e270:	a9 f0       	breq	.+42     	; 0xe29c <_Z12processMCodei+0x5cb6>
    e272:	28 e4       	ldi	r18, 0x48	; 72
    e274:	3c e0       	ldi	r19, 0x0C	; 12
    e276:	3a 83       	std	Y+2, r19	; 0x02
    e278:	29 83       	std	Y+1, r18	; 0x01
    e27a:	d8 01       	movw	r26, r16
    e27c:	ed 91       	ld	r30, X+
    e27e:	fc 91       	ld	r31, X
    e280:	01 90       	ld	r0, Z+
    e282:	f0 81       	ld	r31, Z
    e284:	e0 2d       	mov	r30, r0
    e286:	86 2d       	mov	r24, r6
    e288:	97 2d       	mov	r25, r7
    e28a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e28c:	e9 81       	ldd	r30, Y+1	; 0x01
    e28e:	fa 81       	ldd	r31, Y+2	; 0x02
    e290:	31 96       	adiw	r30, 0x01	; 1
    e292:	fa 83       	std	Y+2, r31	; 0x02
    e294:	e9 83       	std	Y+1, r30	; 0x01
    e296:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e298:	61 11       	cpse	r22, r1
    e29a:	ef cf       	rjmp	.-34     	; 0xe27a <_Z12processMCodei+0x5c94>
		}
		uint8_t getPin(void) { return pin->pin; }
    e29c:	d6 01       	movw	r26, r12
    e29e:	ed 91       	ld	r30, X+
    e2a0:	fc 91       	ld	r31, X
    e2a2:	04 80       	ldd	r0, Z+4	; 0x04
    e2a4:	f5 81       	ldd	r31, Z+5	; 0x05
    e2a6:	e0 2d       	mov	r30, r0
				SERIAL_PGM("Pin:");
				SERIAL_PORT.println(psonics[i]->getPin());
    e2a8:	4a e0       	ldi	r20, 0x0A	; 10
    e2aa:	50 e0       	ldi	r21, 0x00	; 0
    e2ac:	60 81       	ld	r22, Z
    e2ae:	c8 01       	movw	r24, r16
    e2b0:	0e 94 e0 8a 	call	0x115c0	; 0x115c0 <_ZN5Print7printlnEhi>
    e2b4:	b2 e0       	ldi	r27, 0x02	; 2
    e2b6:	eb 0e       	add	r14, r27
    e2b8:	f1 1c       	adc	r15, r1
		
	case 703: // Report ultrasonic pins in use
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(ultrasonicPinSettingHdr);
		SERIAL_PGMLN(MSG_DELIMIT);
		for(int i = 0; i < 10; i++) {
    e2ba:	ea 14       	cp	r14, r10
    e2bc:	fb 04       	cpc	r15, r11
    e2be:	79 f6       	brne	.-98     	; 0xe25e <_Z12processMCodei+0x5c78>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e2c0:	e6 e4       	ldi	r30, 0x46	; 70
    e2c2:	fc e0       	ldi	r31, 0x0C	; 12
    e2c4:	64 91       	lpm	r22, Z
	while(ch)
    e2c6:	66 23       	and	r22, r22
    e2c8:	a1 f0       	breq	.+40     	; 0xe2f2 <_Z12processMCodei+0x5d0c>
    e2ca:	08 e0       	ldi	r16, 0x08	; 8
    e2cc:	1a e0       	ldi	r17, 0x0A	; 10
    e2ce:	fa 83       	std	Y+2, r31	; 0x02
    e2d0:	e9 83       	std	Y+1, r30	; 0x01
    e2d2:	d8 01       	movw	r26, r16
    e2d4:	ed 91       	ld	r30, X+
    e2d6:	fc 91       	ld	r31, X
    e2d8:	01 90       	ld	r0, Z+
    e2da:	f0 81       	ld	r31, Z
    e2dc:	e0 2d       	mov	r30, r0
    e2de:	c8 01       	movw	r24, r16
    e2e0:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e2e2:	e9 81       	ldd	r30, Y+1	; 0x01
    e2e4:	fa 81       	ldd	r31, Y+2	; 0x02
    e2e6:	31 96       	adiw	r30, 0x01	; 1
    e2e8:	fa 83       	std	Y+2, r31	; 0x02
    e2ea:	e9 83       	std	Y+1, r30	; 0x01
    e2ec:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e2ee:	61 11       	cpse	r22, r1
    e2f0:	f0 cf       	rjmp	.-32     	; 0xe2d2 <_Z12processMCodei+0x5cec>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e2f2:	e1 e3       	ldi	r30, 0x31	; 49
    e2f4:	fc e0       	ldi	r31, 0x0C	; 12
    e2f6:	64 91       	lpm	r22, Z
	while(ch)
    e2f8:	66 23       	and	r22, r22
    e2fa:	a1 f0       	breq	.+40     	; 0xe324 <_Z12processMCodei+0x5d3e>
    e2fc:	08 e0       	ldi	r16, 0x08	; 8
    e2fe:	1a e0       	ldi	r17, 0x0A	; 10
    e300:	fa 83       	std	Y+2, r31	; 0x02
    e302:	e9 83       	std	Y+1, r30	; 0x01
    e304:	d8 01       	movw	r26, r16
    e306:	ed 91       	ld	r30, X+
    e308:	fc 91       	ld	r31, X
    e30a:	01 90       	ld	r0, Z+
    e30c:	f0 81       	ld	r31, Z
    e30e:	e0 2d       	mov	r30, r0
    e310:	c8 01       	movw	r24, r16
    e312:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e314:	e9 81       	ldd	r30, Y+1	; 0x01
    e316:	fa 81       	ldd	r31, Y+2	; 0x02
    e318:	31 96       	adiw	r30, 0x01	; 1
    e31a:	fa 83       	std	Y+2, r31	; 0x02
    e31c:	e9 83       	std	Y+1, r30	; 0x01
    e31e:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e320:	61 11       	cpse	r22, r1
    e322:	f0 cf       	rjmp	.-32     	; 0xe304 <_Z12processMCodei+0x5d1e>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e324:	ee e2       	ldi	r30, 0x2E	; 46
    e326:	fc e0       	ldi	r31, 0x0C	; 12
    e328:	64 91       	lpm	r22, Z
	while(ch)
    e32a:	66 23       	and	r22, r22
    e32c:	a1 f0       	breq	.+40     	; 0xe356 <_Z12processMCodei+0x5d70>
    e32e:	08 e0       	ldi	r16, 0x08	; 8
    e330:	1a e0       	ldi	r17, 0x0A	; 10
    e332:	fa 83       	std	Y+2, r31	; 0x02
    e334:	e9 83       	std	Y+1, r30	; 0x01
    e336:	d8 01       	movw	r26, r16
    e338:	ed 91       	ld	r30, X+
    e33a:	fc 91       	ld	r31, X
    e33c:	01 90       	ld	r0, Z+
    e33e:	f0 81       	ld	r31, Z
    e340:	e0 2d       	mov	r30, r0
    e342:	c8 01       	movw	r24, r16
    e344:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e346:	e9 81       	ldd	r30, Y+1	; 0x01
    e348:	fa 81       	ldd	r31, Y+2	; 0x02
    e34a:	31 96       	adiw	r30, 0x01	; 1
    e34c:	fa 83       	std	Y+2, r31	; 0x02
    e34e:	e9 83       	std	Y+1, r30	; 0x01
    e350:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e352:	61 11       	cpse	r22, r1
    e354:	f0 cf       	rjmp	.-32     	; 0xe336 <_Z12processMCodei+0x5d50>
				SERIAL_PORT.println(psonics[i]->getPin());
			}
		}
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(ultrasonicPinSettingHdr);
		SERIAL_PGMLN(MSG_TERMINATE);
    e356:	88 e0       	ldi	r24, 0x08	; 8
    e358:	9a e0       	ldi	r25, 0x0A	; 10
    e35a:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		SERIAL_PORT.flush();
    e35e:	88 e0       	ldi	r24, 0x08	; 8
    e360:	9a e0       	ldi	r25, 0x0A	; 10
    e362:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
		break;
    e366:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e36a:	ec e2       	ldi	r30, 0x2C	; 44
    e36c:	fc e0       	ldi	r31, 0x0C	; 12
    e36e:	64 91       	lpm	r22, Z
	while(ch)
    e370:	66 23       	and	r22, r22
    e372:	a1 f0       	breq	.+40     	; 0xe39c <_Z12processMCodei+0x5db6>
    e374:	08 e0       	ldi	r16, 0x08	; 8
    e376:	1a e0       	ldi	r17, 0x0A	; 10
    e378:	fa 83       	std	Y+2, r31	; 0x02
    e37a:	e9 83       	std	Y+1, r30	; 0x01
    e37c:	d8 01       	movw	r26, r16
    e37e:	ed 91       	ld	r30, X+
    e380:	fc 91       	ld	r31, X
    e382:	01 90       	ld	r0, Z+
    e384:	f0 81       	ld	r31, Z
    e386:	e0 2d       	mov	r30, r0
    e388:	c8 01       	movw	r24, r16
    e38a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e38c:	e9 81       	ldd	r30, Y+1	; 0x01
    e38e:	fa 81       	ldd	r31, Y+2	; 0x02
    e390:	31 96       	adiw	r30, 0x01	; 1
    e392:	fa 83       	std	Y+2, r31	; 0x02
    e394:	e9 83       	std	Y+1, r30	; 0x01
    e396:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e398:	61 11       	cpse	r22, r1
    e39a:	f0 cf       	rjmp	.-32     	; 0xe37c <_Z12processMCodei+0x5d96>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e39c:	ee e1       	ldi	r30, 0x1E	; 30
    e39e:	fc e0       	ldi	r31, 0x0C	; 12
    e3a0:	64 91       	lpm	r22, Z
	while(ch)
    e3a2:	66 23       	and	r22, r22
    e3a4:	a1 f0       	breq	.+40     	; 0xe3ce <_Z12processMCodei+0x5de8>
    e3a6:	08 e0       	ldi	r16, 0x08	; 8
    e3a8:	1a e0       	ldi	r17, 0x0A	; 10
    e3aa:	fa 83       	std	Y+2, r31	; 0x02
    e3ac:	e9 83       	std	Y+1, r30	; 0x01
    e3ae:	d8 01       	movw	r26, r16
    e3b0:	ed 91       	ld	r30, X+
    e3b2:	fc 91       	ld	r31, X
    e3b4:	01 90       	ld	r0, Z+
    e3b6:	f0 81       	ld	r31, Z
    e3b8:	e0 2d       	mov	r30, r0
    e3ba:	c8 01       	movw	r24, r16
    e3bc:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e3be:	e9 81       	ldd	r30, Y+1	; 0x01
    e3c0:	fa 81       	ldd	r31, Y+2	; 0x02
    e3c2:	31 96       	adiw	r30, 0x01	; 1
    e3c4:	fa 83       	std	Y+2, r31	; 0x02
    e3c6:	e9 83       	std	Y+1, r30	; 0x01
    e3c8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e3ca:	61 11       	cpse	r22, r1
    e3cc:	f0 cf       	rjmp	.-32     	; 0xe3ae <_Z12processMCodei+0x5dc8>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e3ce:	ec e1       	ldi	r30, 0x1C	; 28
    e3d0:	fc e0       	ldi	r31, 0x0C	; 12
    e3d2:	64 91       	lpm	r22, Z
	while(ch)
    e3d4:	66 23       	and	r22, r22
    e3d6:	a1 f0       	breq	.+40     	; 0xe400 <_Z12processMCodei+0x5e1a>
    e3d8:	08 e0       	ldi	r16, 0x08	; 8
    e3da:	1a e0       	ldi	r17, 0x0A	; 10
    e3dc:	fa 83       	std	Y+2, r31	; 0x02
    e3de:	e9 83       	std	Y+1, r30	; 0x01
    e3e0:	d8 01       	movw	r26, r16
    e3e2:	ed 91       	ld	r30, X+
    e3e4:	fc 91       	ld	r31, X
    e3e6:	01 90       	ld	r0, Z+
    e3e8:	f0 81       	ld	r31, Z
    e3ea:	e0 2d       	mov	r30, r0
    e3ec:	c8 01       	movw	r24, r16
    e3ee:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e3f0:	e9 81       	ldd	r30, Y+1	; 0x01
    e3f2:	fa 81       	ldd	r31, Y+2	; 0x02
    e3f4:	31 96       	adiw	r30, 0x01	; 1
    e3f6:	fa 83       	std	Y+2, r31	; 0x02
    e3f8:	e9 83       	std	Y+1, r30	; 0x01
    e3fa:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e3fc:	61 11       	cpse	r22, r1
    e3fe:	f0 cf       	rjmp	.-32     	; 0xe3e0 <_Z12processMCodei+0x5dfa>
		
	case 704: // Report PWM pins in use
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(pwmPinSettingHdr);
		SERIAL_PGMLN(MSG_DELIMIT);
    e400:	88 e0       	ldi	r24, 0x08	; 8
    e402:	9a e0       	ldi	r25, 0x0A	; 10
    e404:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    e408:	0f 2e       	mov	r0, r31
    e40a:	f3 e2       	ldi	r31, 0x23	; 35
    e40c:	ef 2e       	mov	r14, r31
    e40e:	f3 e1       	ldi	r31, 0x13	; 19
    e410:	ff 2e       	mov	r15, r31
    e412:	f0 2d       	mov	r31, r0
    e414:	0f 2e       	mov	r0, r31
    e416:	fb e3       	ldi	r31, 0x3B	; 59
    e418:	cf 2e       	mov	r12, r31
    e41a:	f3 e1       	ldi	r31, 0x13	; 19
    e41c:	df 2e       	mov	r13, r31
    e41e:	f0 2d       	mov	r31, r0
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e420:	0f 2e       	mov	r0, r31
    e422:	f7 e1       	ldi	r31, 0x17	; 23
    e424:	6f 2e       	mov	r6, r31
    e426:	fc e0       	ldi	r31, 0x0C	; 12
    e428:	7f 2e       	mov	r7, r31
    e42a:	f0 2d       	mov	r31, r0
    e42c:	0f 2e       	mov	r0, r31
    e42e:	f7 e0       	ldi	r31, 0x07	; 7
    e430:	4f 2e       	mov	r4, r31
    e432:	fc e0       	ldi	r31, 0x0C	; 12
    e434:	5f 2e       	mov	r5, r31
    e436:	f0 2d       	mov	r31, r0
    e438:	0f 2e       	mov	r0, r31
    e43a:	fa ee       	ldi	r31, 0xEA	; 234
    e43c:	2f 2e       	mov	r2, r31
    e43e:	fb e0       	ldi	r31, 0x0B	; 11
    e440:	3f 2e       	mov	r3, r31
    e442:	f0 2d       	mov	r31, r0
    e444:	28 e0       	ldi	r18, 0x08	; 8
    e446:	3a e0       	ldi	r19, 0x0A	; 10
    e448:	82 2e       	mov	r8, r18
    e44a:	93 2e       	mov	r9, r19
    e44c:	57 01       	movw	r10, r14
		for(int i = 0; i < 12; i++) {
			if( ppwms[i] ) {
    e44e:	d7 01       	movw	r26, r14
    e450:	8d 91       	ld	r24, X+
    e452:	9c 91       	ld	r25, X
    e454:	89 2b       	or	r24, r25
    e456:	09 f4       	brne	.+2      	; 0xe45a <_Z12processMCodei+0x5e74>
    e458:	ac c0       	rjmp	.+344    	; 0xe5b2 <_Z12processMCodei+0x5fcc>
    e45a:	f3 01       	movw	r30, r6
    e45c:	64 91       	lpm	r22, Z
	while(ch)
    e45e:	66 23       	and	r22, r22
    e460:	91 f0       	breq	.+36     	; 0xe486 <_Z12processMCodei+0x5ea0>
    e462:	07 e1       	ldi	r16, 0x17	; 23
    e464:	1c e0       	ldi	r17, 0x0C	; 12
    e466:	a8 e0       	ldi	r26, 0x08	; 8
    e468:	ba e0       	ldi	r27, 0x0A	; 10
    e46a:	ed 91       	ld	r30, X+
    e46c:	fc 91       	ld	r31, X
    e46e:	01 90       	ld	r0, Z+
    e470:	f0 81       	ld	r31, Z
    e472:	e0 2d       	mov	r30, r0
    e474:	88 2d       	mov	r24, r8
    e476:	99 2d       	mov	r25, r9
    e478:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e47a:	0f 5f       	subi	r16, 0xFF	; 255
    e47c:	1f 4f       	sbci	r17, 0xFF	; 255
    e47e:	f8 01       	movw	r30, r16
    e480:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e482:	61 11       	cpse	r22, r1
    e484:	f0 cf       	rjmp	.-32     	; 0xe466 <_Z12processMCodei+0x5e80>
				SERIAL_PGM("Pin:");
				SERIAL_PORT.print(ppwms[i]->pin);
    e486:	d5 01       	movw	r26, r10
    e488:	ed 91       	ld	r30, X+
    e48a:	fc 91       	ld	r31, X
    e48c:	4a e0       	ldi	r20, 0x0A	; 10
    e48e:	50 e0       	ldi	r21, 0x00	; 0
    e490:	60 81       	ld	r22, Z
    e492:	88 e0       	ldi	r24, 0x08	; 8
    e494:	9a e0       	ldi	r25, 0x0A	; 10
    e496:	0e 94 d9 8a 	call	0x115b2	; 0x115b2 <_ZN5Print5printEhi>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e49a:	f2 01       	movw	r30, r4
    e49c:	64 91       	lpm	r22, Z
	while(ch)
    e49e:	66 23       	and	r22, r22
    e4a0:	91 f0       	breq	.+36     	; 0xe4c6 <_Z12processMCodei+0x5ee0>
    e4a2:	07 e0       	ldi	r16, 0x07	; 7
    e4a4:	1c e0       	ldi	r17, 0x0C	; 12
    e4a6:	a8 e0       	ldi	r26, 0x08	; 8
    e4a8:	ba e0       	ldi	r27, 0x0A	; 10
    e4aa:	ed 91       	ld	r30, X+
    e4ac:	fc 91       	ld	r31, X
    e4ae:	01 90       	ld	r0, Z+
    e4b0:	f0 81       	ld	r31, Z
    e4b2:	e0 2d       	mov	r30, r0
    e4b4:	88 2d       	mov	r24, r8
    e4b6:	99 2d       	mov	r25, r9
    e4b8:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e4ba:	0f 5f       	subi	r16, 0xFF	; 255
    e4bc:	1f 4f       	sbci	r17, 0xFF	; 255
    e4be:	f8 01       	movw	r30, r16
    e4c0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e4c2:	61 11       	cpse	r22, r1
    e4c4:	f0 cf       	rjmp	.-32     	; 0xe4a6 <_Z12processMCodei+0x5ec0>
				SERIAL_PGM(" Timer channel:");
				SERIAL_PORT.print(ppwms[i]->channel);
    e4c6:	d5 01       	movw	r26, r10
    e4c8:	ed 91       	ld	r30, X+
    e4ca:	fc 91       	ld	r31, X
    e4cc:	4a e0       	ldi	r20, 0x0A	; 10
    e4ce:	50 e0       	ldi	r21, 0x00	; 0
    e4d0:	64 81       	ldd	r22, Z+4	; 0x04
    e4d2:	88 e0       	ldi	r24, 0x08	; 8
    e4d4:	9a e0       	ldi	r25, 0x0A	; 10
    e4d6:	0e 94 d9 8a 	call	0x115b2	; 0x115b2 <_ZN5Print5printEhi>
				switch(ppwms[i]->mode) {
    e4da:	d5 01       	movw	r26, r10
    e4dc:	ed 91       	ld	r30, X+
    e4de:	fc 91       	ld	r31, X
    e4e0:	81 81       	ldd	r24, Z+1	; 0x01
    e4e2:	81 30       	cpi	r24, 0x01	; 1
    e4e4:	09 f4       	brne	.+2      	; 0xe4e8 <_Z12processMCodei+0x5f02>
    e4e6:	34 c0       	rjmp	.+104    	; 0xe550 <_Z12processMCodei+0x5f6a>
    e4e8:	18 f0       	brcs	.+6      	; 0xe4f0 <_Z12processMCodei+0x5f0a>
    e4ea:	82 30       	cpi	r24, 0x02	; 2
    e4ec:	c9 f0       	breq	.+50     	; 0xe520 <_Z12processMCodei+0x5f3a>
    e4ee:	47 c0       	rjmp	.+142    	; 0xe57e <_Z12processMCodei+0x5f98>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e4f0:	e0 e0       	ldi	r30, 0x00	; 0
    e4f2:	fc e0       	ldi	r31, 0x0C	; 12
    e4f4:	64 91       	lpm	r22, Z
	while(ch)
    e4f6:	66 23       	and	r22, r22
    e4f8:	09 f4       	brne	.+2      	; 0xe4fc <_Z12processMCodei+0x5f16>
    e4fa:	57 c0       	rjmp	.+174    	; 0xe5aa <_Z12processMCodei+0x5fc4>
    e4fc:	8f 01       	movw	r16, r30
    e4fe:	a8 e0       	ldi	r26, 0x08	; 8
    e500:	ba e0       	ldi	r27, 0x0A	; 10
    e502:	ed 91       	ld	r30, X+
    e504:	fc 91       	ld	r31, X
    e506:	01 90       	ld	r0, Z+
    e508:	f0 81       	ld	r31, Z
    e50a:	e0 2d       	mov	r30, r0
    e50c:	88 2d       	mov	r24, r8
    e50e:	99 2d       	mov	r25, r9
    e510:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e512:	0f 5f       	subi	r16, 0xFF	; 255
    e514:	1f 4f       	sbci	r17, 0xFF	; 255
    e516:	f8 01       	movw	r30, r16
    e518:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e51a:	61 11       	cpse	r22, r1
    e51c:	f0 cf       	rjmp	.-32     	; 0xe4fe <_Z12processMCodei+0x5f18>
    e51e:	45 c0       	rjmp	.+138    	; 0xe5aa <_Z12processMCodei+0x5fc4>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e520:	e2 ef       	ldi	r30, 0xF2	; 242
    e522:	fb e0       	ldi	r31, 0x0B	; 11
    e524:	64 91       	lpm	r22, Z
	while(ch)
    e526:	66 23       	and	r22, r22
    e528:	09 f4       	brne	.+2      	; 0xe52c <_Z12processMCodei+0x5f46>
    e52a:	3f c0       	rjmp	.+126    	; 0xe5aa <_Z12processMCodei+0x5fc4>
    e52c:	8f 01       	movw	r16, r30
    e52e:	a8 e0       	ldi	r26, 0x08	; 8
    e530:	ba e0       	ldi	r27, 0x0A	; 10
    e532:	ed 91       	ld	r30, X+
    e534:	fc 91       	ld	r31, X
    e536:	01 90       	ld	r0, Z+
    e538:	f0 81       	ld	r31, Z
    e53a:	e0 2d       	mov	r30, r0
    e53c:	88 2d       	mov	r24, r8
    e53e:	99 2d       	mov	r25, r9
    e540:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e542:	0f 5f       	subi	r16, 0xFF	; 255
    e544:	1f 4f       	sbci	r17, 0xFF	; 255
    e546:	f8 01       	movw	r30, r16
    e548:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e54a:	61 11       	cpse	r22, r1
    e54c:	f0 cf       	rjmp	.-32     	; 0xe52e <_Z12processMCodei+0x5f48>
    e54e:	2d c0       	rjmp	.+90     	; 0xe5aa <_Z12processMCodei+0x5fc4>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e550:	f1 01       	movw	r30, r2
    e552:	64 91       	lpm	r22, Z
	while(ch)
    e554:	66 23       	and	r22, r22
    e556:	49 f1       	breq	.+82     	; 0xe5aa <_Z12processMCodei+0x5fc4>
    e558:	0a ee       	ldi	r16, 0xEA	; 234
    e55a:	1b e0       	ldi	r17, 0x0B	; 11
    e55c:	a8 e0       	ldi	r26, 0x08	; 8
    e55e:	ba e0       	ldi	r27, 0x0A	; 10
    e560:	ed 91       	ld	r30, X+
    e562:	fc 91       	ld	r31, X
    e564:	01 90       	ld	r0, Z+
    e566:	f0 81       	ld	r31, Z
    e568:	e0 2d       	mov	r30, r0
    e56a:	88 2d       	mov	r24, r8
    e56c:	99 2d       	mov	r25, r9
    e56e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e570:	0f 5f       	subi	r16, 0xFF	; 255
    e572:	1f 4f       	sbci	r17, 0xFF	; 255
    e574:	f8 01       	movw	r30, r16
    e576:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e578:	61 11       	cpse	r22, r1
    e57a:	f0 cf       	rjmp	.-32     	; 0xe55c <_Z12processMCodei+0x5f76>
    e57c:	16 c0       	rjmp	.+44     	; 0xe5aa <_Z12processMCodei+0x5fc4>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e57e:	e9 ed       	ldi	r30, 0xD9	; 217
    e580:	fb e0       	ldi	r31, 0x0B	; 11
    e582:	64 91       	lpm	r22, Z
	while(ch)
    e584:	66 23       	and	r22, r22
    e586:	89 f0       	breq	.+34     	; 0xe5aa <_Z12processMCodei+0x5fc4>
    e588:	8f 01       	movw	r16, r30
    e58a:	a8 e0       	ldi	r26, 0x08	; 8
    e58c:	ba e0       	ldi	r27, 0x0A	; 10
    e58e:	ed 91       	ld	r30, X+
    e590:	fc 91       	ld	r31, X
    e592:	01 90       	ld	r0, Z+
    e594:	f0 81       	ld	r31, Z
    e596:	e0 2d       	mov	r30, r0
    e598:	88 2d       	mov	r24, r8
    e59a:	99 2d       	mov	r25, r9
    e59c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e59e:	0f 5f       	subi	r16, 0xFF	; 255
    e5a0:	1f 4f       	sbci	r17, 0xFF	; 255
    e5a2:	f8 01       	movw	r30, r16
    e5a4:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e5a6:	61 11       	cpse	r22, r1
    e5a8:	f0 cf       	rjmp	.-32     	; 0xe58a <_Z12processMCodei+0x5fa4>
						break;
					default:
						SERIAL_PGM(" ERROR - UNKNOWN");
						break;
				}
				SERIAL_PORT.println();
    e5aa:	88 e0       	ldi	r24, 0x08	; 8
    e5ac:	9a e0       	ldi	r25, 0x0A	; 10
    e5ae:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    e5b2:	f2 e0       	ldi	r31, 0x02	; 2
    e5b4:	ef 0e       	add	r14, r31
    e5b6:	f1 1c       	adc	r15, r1
		
	case 704: // Report PWM pins in use
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(pwmPinSettingHdr);
		SERIAL_PGMLN(MSG_DELIMIT);
		for(int i = 0; i < 12; i++) {
    e5b8:	ec 14       	cp	r14, r12
    e5ba:	fd 04       	cpc	r15, r13
    e5bc:	09 f0       	breq	.+2      	; 0xe5c0 <_Z12processMCodei+0x5fda>
    e5be:	46 cf       	rjmp	.-372    	; 0xe44c <_Z12processMCodei+0x5e66>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e5c0:	e7 ed       	ldi	r30, 0xD7	; 215
    e5c2:	fb e0       	ldi	r31, 0x0B	; 11
    e5c4:	64 91       	lpm	r22, Z
	while(ch)
    e5c6:	66 23       	and	r22, r22
    e5c8:	a1 f0       	breq	.+40     	; 0xe5f2 <_Z12processMCodei+0x600c>
    e5ca:	08 e0       	ldi	r16, 0x08	; 8
    e5cc:	1a e0       	ldi	r17, 0x0A	; 10
    e5ce:	fa 83       	std	Y+2, r31	; 0x02
    e5d0:	e9 83       	std	Y+1, r30	; 0x01
    e5d2:	d8 01       	movw	r26, r16
    e5d4:	ed 91       	ld	r30, X+
    e5d6:	fc 91       	ld	r31, X
    e5d8:	01 90       	ld	r0, Z+
    e5da:	f0 81       	ld	r31, Z
    e5dc:	e0 2d       	mov	r30, r0
    e5de:	c8 01       	movw	r24, r16
    e5e0:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e5e2:	e9 81       	ldd	r30, Y+1	; 0x01
    e5e4:	fa 81       	ldd	r31, Y+2	; 0x02
    e5e6:	31 96       	adiw	r30, 0x01	; 1
    e5e8:	fa 83       	std	Y+2, r31	; 0x02
    e5ea:	e9 83       	std	Y+1, r30	; 0x01
    e5ec:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e5ee:	61 11       	cpse	r22, r1
    e5f0:	f0 cf       	rjmp	.-32     	; 0xe5d2 <_Z12processMCodei+0x5fec>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e5f2:	e9 ec       	ldi	r30, 0xC9	; 201
    e5f4:	fb e0       	ldi	r31, 0x0B	; 11
    e5f6:	64 91       	lpm	r22, Z
	while(ch)
    e5f8:	66 23       	and	r22, r22
    e5fa:	a1 f0       	breq	.+40     	; 0xe624 <_Z12processMCodei+0x603e>
    e5fc:	08 e0       	ldi	r16, 0x08	; 8
    e5fe:	1a e0       	ldi	r17, 0x0A	; 10
    e600:	fa 83       	std	Y+2, r31	; 0x02
    e602:	e9 83       	std	Y+1, r30	; 0x01
    e604:	d8 01       	movw	r26, r16
    e606:	ed 91       	ld	r30, X+
    e608:	fc 91       	ld	r31, X
    e60a:	01 90       	ld	r0, Z+
    e60c:	f0 81       	ld	r31, Z
    e60e:	e0 2d       	mov	r30, r0
    e610:	c8 01       	movw	r24, r16
    e612:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e614:	e9 81       	ldd	r30, Y+1	; 0x01
    e616:	fa 81       	ldd	r31, Y+2	; 0x02
    e618:	31 96       	adiw	r30, 0x01	; 1
    e61a:	fa 83       	std	Y+2, r31	; 0x02
    e61c:	e9 83       	std	Y+1, r30	; 0x01
    e61e:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e620:	61 11       	cpse	r22, r1
    e622:	f0 cf       	rjmp	.-32     	; 0xe604 <_Z12processMCodei+0x601e>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e624:	e6 ec       	ldi	r30, 0xC6	; 198
    e626:	fb e0       	ldi	r31, 0x0B	; 11
    e628:	64 91       	lpm	r22, Z
	while(ch)
    e62a:	66 23       	and	r22, r22
    e62c:	a1 f0       	breq	.+40     	; 0xe656 <_Z12processMCodei+0x6070>
    e62e:	08 e0       	ldi	r16, 0x08	; 8
    e630:	1a e0       	ldi	r17, 0x0A	; 10
    e632:	fa 83       	std	Y+2, r31	; 0x02
    e634:	e9 83       	std	Y+1, r30	; 0x01
    e636:	d8 01       	movw	r26, r16
    e638:	ed 91       	ld	r30, X+
    e63a:	fc 91       	ld	r31, X
    e63c:	01 90       	ld	r0, Z+
    e63e:	f0 81       	ld	r31, Z
    e640:	e0 2d       	mov	r30, r0
    e642:	c8 01       	movw	r24, r16
    e644:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e646:	e9 81       	ldd	r30, Y+1	; 0x01
    e648:	fa 81       	ldd	r31, Y+2	; 0x02
    e64a:	31 96       	adiw	r30, 0x01	; 1
    e64c:	fa 83       	std	Y+2, r31	; 0x02
    e64e:	e9 83       	std	Y+1, r30	; 0x01
    e650:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e652:	61 11       	cpse	r22, r1
    e654:	f0 cf       	rjmp	.-32     	; 0xe636 <_Z12processMCodei+0x6050>
				SERIAL_PORT.println();
			}
		}
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(pwmPinSettingHdr);
		SERIAL_PGMLN(MSG_TERMINATE);
    e656:	88 e0       	ldi	r24, 0x08	; 8
    e658:	9a e0       	ldi	r25, 0x0A	; 10
    e65a:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		SERIAL_PORT.flush();
    e65e:	88 e0       	ldi	r24, 0x08	; 8
    e660:	9a e0       	ldi	r25, 0x0A	; 10
    e662:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
		break;
    e666:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e66a:	e4 ec       	ldi	r30, 0xC4	; 196
    e66c:	fb e0       	ldi	r31, 0x0B	; 11
    e66e:	64 91       	lpm	r22, Z
	while(ch)
    e670:	66 23       	and	r22, r22
    e672:	a1 f0       	breq	.+40     	; 0xe69c <_Z12processMCodei+0x60b6>
    e674:	08 e0       	ldi	r16, 0x08	; 8
    e676:	1a e0       	ldi	r17, 0x0A	; 10
    e678:	fa 83       	std	Y+2, r31	; 0x02
    e67a:	e9 83       	std	Y+1, r30	; 0x01
    e67c:	d8 01       	movw	r26, r16
    e67e:	ed 91       	ld	r30, X+
    e680:	fc 91       	ld	r31, X
    e682:	01 90       	ld	r0, Z+
    e684:	f0 81       	ld	r31, Z
    e686:	e0 2d       	mov	r30, r0
    e688:	c8 01       	movw	r24, r16
    e68a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e68c:	e9 81       	ldd	r30, Y+1	; 0x01
    e68e:	fa 81       	ldd	r31, Y+2	; 0x02
    e690:	31 96       	adiw	r30, 0x01	; 1
    e692:	fa 83       	std	Y+2, r31	; 0x02
    e694:	e9 83       	std	Y+1, r30	; 0x01
    e696:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e698:	61 11       	cpse	r22, r1
    e69a:	f0 cf       	rjmp	.-32     	; 0xe67c <_Z12processMCodei+0x6096>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e69c:	e0 eb       	ldi	r30, 0xB0	; 176
    e69e:	fb e0       	ldi	r31, 0x0B	; 11
    e6a0:	64 91       	lpm	r22, Z
	while(ch)
    e6a2:	66 23       	and	r22, r22
    e6a4:	a1 f0       	breq	.+40     	; 0xe6ce <_Z12processMCodei+0x60e8>
    e6a6:	08 e0       	ldi	r16, 0x08	; 8
    e6a8:	1a e0       	ldi	r17, 0x0A	; 10
    e6aa:	fa 83       	std	Y+2, r31	; 0x02
    e6ac:	e9 83       	std	Y+1, r30	; 0x01
    e6ae:	d8 01       	movw	r26, r16
    e6b0:	ed 91       	ld	r30, X+
    e6b2:	fc 91       	ld	r31, X
    e6b4:	01 90       	ld	r0, Z+
    e6b6:	f0 81       	ld	r31, Z
    e6b8:	e0 2d       	mov	r30, r0
    e6ba:	c8 01       	movw	r24, r16
    e6bc:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e6be:	e9 81       	ldd	r30, Y+1	; 0x01
    e6c0:	fa 81       	ldd	r31, Y+2	; 0x02
    e6c2:	31 96       	adiw	r30, 0x01	; 1
    e6c4:	fa 83       	std	Y+2, r31	; 0x02
    e6c6:	e9 83       	std	Y+1, r30	; 0x01
    e6c8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e6ca:	61 11       	cpse	r22, r1
    e6cc:	f0 cf       	rjmp	.-32     	; 0xe6ae <_Z12processMCodei+0x60c8>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e6ce:	ee ea       	ldi	r30, 0xAE	; 174
    e6d0:	fb e0       	ldi	r31, 0x0B	; 11
    e6d2:	64 91       	lpm	r22, Z
	while(ch)
    e6d4:	66 23       	and	r22, r22
    e6d6:	a1 f0       	breq	.+40     	; 0xe700 <_Z12processMCodei+0x611a>
    e6d8:	08 e0       	ldi	r16, 0x08	; 8
    e6da:	1a e0       	ldi	r17, 0x0A	; 10
    e6dc:	fa 83       	std	Y+2, r31	; 0x02
    e6de:	e9 83       	std	Y+1, r30	; 0x01
    e6e0:	d8 01       	movw	r26, r16
    e6e2:	ed 91       	ld	r30, X+
    e6e4:	fc 91       	ld	r31, X
    e6e6:	01 90       	ld	r0, Z+
    e6e8:	f0 81       	ld	r31, Z
    e6ea:	e0 2d       	mov	r30, r0
    e6ec:	c8 01       	movw	r24, r16
    e6ee:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e6f0:	e9 81       	ldd	r30, Y+1	; 0x01
    e6f2:	fa 81       	ldd	r31, Y+2	; 0x02
    e6f4:	31 96       	adiw	r30, 0x01	; 1
    e6f6:	fa 83       	std	Y+2, r31	; 0x02
    e6f8:	e9 83       	std	Y+1, r30	; 0x01
    e6fa:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e6fc:	61 11       	cpse	r22, r1
    e6fe:	f0 cf       	rjmp	.-32     	; 0xe6e0 <_Z12processMCodei+0x60fa>
		
	case 705:
			SERIAL_PGM(MSG_BEGIN);
			SERIAL_PGM(motorControlSettingHdr);
			SERIAL_PGMLN(MSG_DELIMIT);
    e700:	88 e0       	ldi	r24, 0x08	; 8
    e702:	9a e0       	ldi	r25, 0x0A	; 10
    e704:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    e708:	27 ef       	ldi	r18, 0xF7	; 247
    e70a:	32 e1       	ldi	r19, 0x12	; 18
    e70c:	3a 83       	std	Y+2, r19	; 0x02
    e70e:	29 83       	std	Y+1, r18	; 0x01
    e710:	48 e0       	ldi	r20, 0x08	; 8
    e712:	5a e0       	ldi	r21, 0x0A	; 10
    e714:	a4 2e       	mov	r10, r20
    e716:	75 2e       	mov	r7, r21
    e718:	04 2f       	mov	r16, r20
    e71a:	15 2f       	mov	r17, r21
    e71c:	89 80       	ldd	r8, Y+1	; 0x01
    e71e:	9a 80       	ldd	r9, Y+2	; 0x02
			for(int j = 0; j < 10; j++) {
				if( motorControl[j] ) {
    e720:	d4 01       	movw	r26, r8
    e722:	8d 91       	ld	r24, X+
    e724:	9c 91       	ld	r25, X
    e726:	89 2b       	or	r24, r25
    e728:	09 f4       	brne	.+2      	; 0xe72c <_Z12processMCodei+0x6146>
    e72a:	79 c2       	rjmp	.+1266   	; 0xec1e <_Z12processMCodei+0x6638>
    e72c:	41 2c       	mov	r4, r1
    e72e:	51 2c       	mov	r5, r1
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e730:	0f 2e       	mov	r0, r31
    e732:	fb e8       	ldi	r31, 0x8B	; 139
    e734:	2f 2e       	mov	r2, r31
    e736:	fb e0       	ldi	r31, 0x0B	; 11
    e738:	3f 2e       	mov	r3, r31
    e73a:	f0 2d       	mov	r31, r0
	uint8_t getCurrentDirection(uint8_t ch) { return currentDirection[ch-1]; }
	uint8_t getDefaultDirection(uint8_t ch) { return defaultDirection[ch-1]; }
	PCInterrupts* getWheelEncoder(uint8_t ch) { return wheelEncoder[ch-1]; }
	CounterInterruptService* getWheelEncoderService(uint8_t ch) { return wheelEncoderService[ch-1]; }
	void setChannels(uint8_t ch) { channels = ch; }
	uint8_t getChannels(void) { return channels; }
    e73c:	d4 01       	movw	r26, r8
    e73e:	ed 91       	ld	r30, X+
    e740:	fc 91       	ld	r31, X
					for(int i = 0 ; i < motorControl[j]->getChannels(); i++) { //per channel
    e742:	82 81       	ldd	r24, Z+2	; 0x02
    e744:	90 e0       	ldi	r25, 0x00	; 0
    e746:	48 16       	cp	r4, r24
    e748:	59 06       	cpc	r5, r25
    e74a:	0c f0       	brlt	.+2      	; 0xe74e <_Z12processMCodei+0x6168>
    e74c:	66 c1       	rjmp	.+716    	; 0xea1a <_Z12processMCodei+0x6434>
    e74e:	ef e9       	ldi	r30, 0x9F	; 159
    e750:	fb e0       	ldi	r31, 0x0B	; 11
    e752:	64 91       	lpm	r22, Z
	while(ch)
    e754:	66 23       	and	r22, r22
    e756:	91 f0       	breq	.+36     	; 0xe77c <_Z12processMCodei+0x6196>
    e758:	7f 01       	movw	r14, r30
    e75a:	a8 e0       	ldi	r26, 0x08	; 8
    e75c:	ba e0       	ldi	r27, 0x0A	; 10
    e75e:	ed 91       	ld	r30, X+
    e760:	fc 91       	ld	r31, X
    e762:	01 90       	ld	r0, Z+
    e764:	f0 81       	ld	r31, Z
    e766:	e0 2d       	mov	r30, r0
    e768:	80 2f       	mov	r24, r16
    e76a:	91 2f       	mov	r25, r17
    e76c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e76e:	bf ef       	ldi	r27, 0xFF	; 255
    e770:	eb 1a       	sub	r14, r27
    e772:	fb 0a       	sbc	r15, r27
    e774:	f7 01       	movw	r30, r14
    e776:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e778:	61 11       	cpse	r22, r1
    e77a:	ef cf       	rjmp	.-34     	; 0xe75a <_Z12processMCodei+0x6174>
						SERIAL_PGM("Motor channel:");
						SERIAL_PORT.print(i+1);
    e77c:	ff ef       	ldi	r31, 0xFF	; 255
    e77e:	4f 1a       	sub	r4, r31
    e780:	5f 0a       	sbc	r5, r31
    e782:	4a e0       	ldi	r20, 0x0A	; 10
    e784:	50 e0       	ldi	r21, 0x00	; 0
    e786:	b2 01       	movw	r22, r4
    e788:	8a 2d       	mov	r24, r10
    e78a:	97 2d       	mov	r25, r7
    e78c:	0e 94 a4 8a 	call	0x11548	; 0x11548 <_ZN5Print5printEii>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e790:	e3 e9       	ldi	r30, 0x93	; 147
    e792:	fb e0       	ldi	r31, 0x0B	; 11
    e794:	64 91       	lpm	r22, Z
	while(ch)
    e796:	66 23       	and	r22, r22
    e798:	91 f0       	breq	.+36     	; 0xe7be <_Z12processMCodei+0x61d8>
    e79a:	7f 01       	movw	r14, r30
    e79c:	a8 e0       	ldi	r26, 0x08	; 8
    e79e:	ba e0       	ldi	r27, 0x0A	; 10
    e7a0:	ed 91       	ld	r30, X+
    e7a2:	fc 91       	ld	r31, X
    e7a4:	01 90       	ld	r0, Z+
    e7a6:	f0 81       	ld	r31, Z
    e7a8:	e0 2d       	mov	r30, r0
    e7aa:	80 2f       	mov	r24, r16
    e7ac:	91 2f       	mov	r25, r17
    e7ae:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e7b0:	bf ef       	ldi	r27, 0xFF	; 255
    e7b2:	eb 1a       	sub	r14, r27
    e7b4:	fb 0a       	sbc	r15, r27
    e7b6:	f7 01       	movw	r30, r14
    e7b8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e7ba:	61 11       	cpse	r22, r1
    e7bc:	ef cf       	rjmp	.-34     	; 0xe79c <_Z12processMCodei+0x61b6>
						SERIAL_PGM(" Min Power:");
						SERIAL_PORT.print(motorControl[j]->getMinMotorPower(i+1));
    e7be:	b4 2c       	mov	r11, r4
	int totalUltrasonics(void) {  int j = 0; for(int i = 0; i < 10; i++) if(ultrasonicIndex[i][0] != 255)++j; return j; }
	uint8_t getUltrasonicFacing(uint8_t ch) { return ultrasonicIndex[ch-1][1]; }
	uint32_t getMinMotorDist(uint8_t ch) { return minMotorDist[ch-1]; }
	uint8_t getUltrasonicIndex(uint8_t ch) { return ultrasonicIndex[ch-1][0]; }
	uint32_t getMaxMotorDuration(uint8_t ch) { return maxMotorDuration[ch-1]; }
	uint32_t getMinMotorPower(uint8_t ch) { return minMotorPower[ch-1] ; }
    e7c0:	62 01       	movw	r12, r4
    e7c2:	dd 24       	eor	r13, r13
    e7c4:	f1 e0       	ldi	r31, 0x01	; 1
    e7c6:	cf 1a       	sub	r12, r31
    e7c8:	d1 08       	sbc	r13, r1
    e7ca:	d4 01       	movw	r26, r8
    e7cc:	ed 91       	ld	r30, X+
    e7ce:	fc 91       	ld	r31, X
    e7d0:	c6 01       	movw	r24, r12
    e7d2:	88 0f       	add	r24, r24
    e7d4:	99 1f       	adc	r25, r25
    e7d6:	88 0f       	add	r24, r24
    e7d8:	99 1f       	adc	r25, r25
    e7da:	e8 0f       	add	r30, r24
    e7dc:	f9 1f       	adc	r31, r25
    e7de:	ef 56       	subi	r30, 0x6F	; 111
    e7e0:	ff 4f       	sbci	r31, 0xFF	; 255
    e7e2:	40 81       	ld	r20, Z
    e7e4:	51 81       	ldd	r21, Z+1	; 0x01
    e7e6:	62 81       	ldd	r22, Z+2	; 0x02
    e7e8:	73 81       	ldd	r23, Z+3	; 0x03
    e7ea:	2a e0       	ldi	r18, 0x0A	; 10
    e7ec:	30 e0       	ldi	r19, 0x00	; 0
    e7ee:	8a 2d       	mov	r24, r10
    e7f0:	97 2d       	mov	r25, r7
    e7f2:	0e 94 cb 8a 	call	0x11596	; 0x11596 <_ZN5Print5printEmi>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e7f6:	f1 01       	movw	r30, r2
    e7f8:	64 91       	lpm	r22, Z
	while(ch)
    e7fa:	66 23       	and	r22, r22
    e7fc:	b9 f0       	breq	.+46     	; 0xe82c <_Z12processMCodei+0x6246>
    e7fe:	0f 2e       	mov	r0, r31
    e800:	fb e8       	ldi	r31, 0x8B	; 139
    e802:	ef 2e       	mov	r14, r31
    e804:	fb e0       	ldi	r31, 0x0B	; 11
    e806:	ff 2e       	mov	r15, r31
    e808:	f0 2d       	mov	r31, r0
    e80a:	a8 e0       	ldi	r26, 0x08	; 8
    e80c:	ba e0       	ldi	r27, 0x0A	; 10
    e80e:	ed 91       	ld	r30, X+
    e810:	fc 91       	ld	r31, X
    e812:	01 90       	ld	r0, Z+
    e814:	f0 81       	ld	r31, Z
    e816:	e0 2d       	mov	r30, r0
    e818:	80 2f       	mov	r24, r16
    e81a:	91 2f       	mov	r25, r17
    e81c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e81e:	bf ef       	ldi	r27, 0xFF	; 255
    e820:	eb 1a       	sub	r14, r27
    e822:	fb 0a       	sbc	r15, r27
    e824:	f7 01       	movw	r30, r14
    e826:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e828:	61 11       	cpse	r22, r1
    e82a:	ef cf       	rjmp	.-34     	; 0xe80a <_Z12processMCodei+0x6224>
	void setMaxMotorPower(int p) { MAXMOTORPOWER = p; if( p != 0 ) MAXMOTORPOWER /= 4; }
	int getMotorSpeed(uint8_t ch) { return motorSpeed[ch-1]; }
    e82c:	d4 01       	movw	r26, r8
    e82e:	ed 91       	ld	r30, X+
    e830:	fc 91       	ld	r31, X
    e832:	c6 01       	movw	r24, r12
    e834:	88 0f       	add	r24, r24
    e836:	99 1f       	adc	r25, r25
    e838:	e8 0f       	add	r30, r24
    e83a:	f9 1f       	adc	r31, r25
    e83c:	e7 59       	subi	r30, 0x97	; 151
    e83e:	ff 4f       	sbci	r31, 0xFF	; 255
						SERIAL_PGM(" Speed:");
						SERIAL_PORT.print(motorControl[j]->getMotorSpeed(i+1));
    e840:	60 81       	ld	r22, Z
    e842:	71 81       	ldd	r23, Z+1	; 0x01
    e844:	4a e0       	ldi	r20, 0x0A	; 10
    e846:	50 e0       	ldi	r21, 0x00	; 0
    e848:	8a 2d       	mov	r24, r10
    e84a:	97 2d       	mov	r25, r7
    e84c:	0e 94 a4 8a 	call	0x11548	; 0x11548 <_ZN5Print5printEii>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e850:	ef e7       	ldi	r30, 0x7F	; 127
    e852:	fb e0       	ldi	r31, 0x0B	; 11
    e854:	64 91       	lpm	r22, Z
	while(ch)
    e856:	66 23       	and	r22, r22
    e858:	91 f0       	breq	.+36     	; 0xe87e <_Z12processMCodei+0x6298>
    e85a:	7f 01       	movw	r14, r30
    e85c:	a8 e0       	ldi	r26, 0x08	; 8
    e85e:	ba e0       	ldi	r27, 0x0A	; 10
    e860:	ed 91       	ld	r30, X+
    e862:	fc 91       	ld	r31, X
    e864:	01 90       	ld	r0, Z+
    e866:	f0 81       	ld	r31, Z
    e868:	e0 2d       	mov	r30, r0
    e86a:	80 2f       	mov	r24, r16
    e86c:	91 2f       	mov	r25, r17
    e86e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e870:	bf ef       	ldi	r27, 0xFF	; 255
    e872:	eb 1a       	sub	r14, r27
    e874:	fb 0a       	sbc	r15, r27
    e876:	f7 01       	movw	r30, r14
    e878:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e87a:	61 11       	cpse	r22, r1
    e87c:	ef cf       	rjmp	.-34     	; 0xe85c <_Z12processMCodei+0x6276>
	uint8_t getCurrentDirection(uint8_t ch) { return currentDirection[ch-1]; }
    e87e:	d4 01       	movw	r26, r8
    e880:	ed 91       	ld	r30, X+
    e882:	fc 91       	ld	r31, X
    e884:	ec 0d       	add	r30, r12
    e886:	fd 1d       	adc	r31, r13
    e888:	e3 58       	subi	r30, 0x83	; 131
    e88a:	ff 4f       	sbci	r31, 0xFF	; 255
						SERIAL_PGM(" Curr. Dir:");
						SERIAL_PORT.print(motorControl[j]->getCurrentDirection(i+1));
    e88c:	4a e0       	ldi	r20, 0x0A	; 10
    e88e:	50 e0       	ldi	r21, 0x00	; 0
    e890:	60 81       	ld	r22, Z
    e892:	8a 2d       	mov	r24, r10
    e894:	97 2d       	mov	r25, r7
    e896:	0e 94 d9 8a 	call	0x115b2	; 0x115b2 <_ZN5Print5printEhi>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e89a:	e0 e7       	ldi	r30, 0x70	; 112
    e89c:	fb e0       	ldi	r31, 0x0B	; 11
    e89e:	64 91       	lpm	r22, Z
	while(ch)
    e8a0:	66 23       	and	r22, r22
    e8a2:	91 f0       	breq	.+36     	; 0xe8c8 <_Z12processMCodei+0x62e2>
    e8a4:	7f 01       	movw	r14, r30
    e8a6:	a8 e0       	ldi	r26, 0x08	; 8
    e8a8:	ba e0       	ldi	r27, 0x0A	; 10
    e8aa:	ed 91       	ld	r30, X+
    e8ac:	fc 91       	ld	r31, X
    e8ae:	01 90       	ld	r0, Z+
    e8b0:	f0 81       	ld	r31, Z
    e8b2:	e0 2d       	mov	r30, r0
    e8b4:	80 2f       	mov	r24, r16
    e8b6:	91 2f       	mov	r25, r17
    e8b8:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e8ba:	bf ef       	ldi	r27, 0xFF	; 255
    e8bc:	eb 1a       	sub	r14, r27
    e8be:	fb 0a       	sbc	r15, r27
    e8c0:	f7 01       	movw	r30, r14
    e8c2:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e8c4:	61 11       	cpse	r22, r1
    e8c6:	ef cf       	rjmp	.-34     	; 0xe8a6 <_Z12processMCodei+0x62c0>
	uint8_t getDefaultDirection(uint8_t ch) { return defaultDirection[ch-1]; }
    e8c8:	d4 01       	movw	r26, r8
    e8ca:	ed 91       	ld	r30, X+
    e8cc:	fc 91       	ld	r31, X
    e8ce:	ec 0d       	add	r30, r12
    e8d0:	fd 1d       	adc	r31, r13
    e8d2:	e9 57       	subi	r30, 0x79	; 121
    e8d4:	ff 4f       	sbci	r31, 0xFF	; 255
						SERIAL_PGM(" Default. Dir:");
						SERIAL_PORT.println(motorControl[j]->getDefaultDirection(i+1));
    e8d6:	4a e0       	ldi	r20, 0x0A	; 10
    e8d8:	50 e0       	ldi	r21, 0x00	; 0
    e8da:	60 81       	ld	r22, Z
    e8dc:	8a 2d       	mov	r24, r10
    e8de:	97 2d       	mov	r25, r7
    e8e0:	0e 94 e0 8a 	call	0x115c0	; 0x115c0 <_ZN5Print7printlnEhi>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e8e4:	e2 e6       	ldi	r30, 0x62	; 98
    e8e6:	fb e0       	ldi	r31, 0x0B	; 11
    e8e8:	64 91       	lpm	r22, Z
	while(ch)
    e8ea:	66 23       	and	r22, r22
    e8ec:	91 f0       	breq	.+36     	; 0xe912 <_Z12processMCodei+0x632c>
    e8ee:	7f 01       	movw	r14, r30
    e8f0:	a8 e0       	ldi	r26, 0x08	; 8
    e8f2:	ba e0       	ldi	r27, 0x0A	; 10
    e8f4:	ed 91       	ld	r30, X+
    e8f6:	fc 91       	ld	r31, X
    e8f8:	01 90       	ld	r0, Z+
    e8fa:	f0 81       	ld	r31, Z
    e8fc:	e0 2d       	mov	r30, r0
    e8fe:	80 2f       	mov	r24, r16
    e900:	91 2f       	mov	r25, r17
    e902:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e904:	bf ef       	ldi	r27, 0xFF	; 255
    e906:	eb 1a       	sub	r14, r27
    e908:	fb 0a       	sbc	r15, r27
    e90a:	f7 01       	movw	r30, r14
    e90c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e90e:	61 11       	cpse	r22, r1
    e910:	ef cf       	rjmp	.-34     	; 0xe8f0 <_Z12processMCodei+0x630a>
	PCInterrupts* getWheelEncoder(uint8_t ch) { return wheelEncoder[ch-1]; }
    e912:	d4 01       	movw	r26, r8
    e914:	ed 91       	ld	r30, X+
    e916:	fc 91       	ld	r31, X
    e918:	c6 01       	movw	r24, r12
    e91a:	88 0f       	add	r24, r24
    e91c:	99 1f       	adc	r25, r25
    e91e:	e8 0f       	add	r30, r24
    e920:	f9 1f       	adc	r31, r25
    e922:	e3 53       	subi	r30, 0x33	; 51
    e924:	ff 4f       	sbci	r31, 0xFF	; 255
    e926:	01 90       	ld	r0, Z+
    e928:	f0 81       	ld	r31, Z
    e92a:	e0 2d       	mov	r30, r0
						SERIAL_PGM(" Encoder Pin:");
						if(motorControl[j]->getWheelEncoder(i+1)) {
    e92c:	30 97       	sbiw	r30, 0x00	; 0
    e92e:	09 f4       	brne	.+2      	; 0xe932 <_Z12processMCodei+0x634c>
    e930:	58 c0       	rjmp	.+176    	; 0xe9e2 <_Z12processMCodei+0x63fc>
							SERIAL_PORT.print(motorControl[j]->getWheelEncoder(i+1)->pin);
    e932:	4a e0       	ldi	r20, 0x0A	; 10
    e934:	50 e0       	ldi	r21, 0x00	; 0
    e936:	62 81       	ldd	r22, Z+2	; 0x02
    e938:	8a 2d       	mov	r24, r10
    e93a:	97 2d       	mov	r25, r7
    e93c:	0e 94 d9 8a 	call	0x115b2	; 0x115b2 <_ZN5Print5printEhi>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e940:	ea e5       	ldi	r30, 0x5A	; 90
    e942:	fb e0       	ldi	r31, 0x0B	; 11
    e944:	64 91       	lpm	r22, Z
	while(ch)
    e946:	66 23       	and	r22, r22
    e948:	91 f0       	breq	.+36     	; 0xe96e <_Z12processMCodei+0x6388>
    e94a:	7f 01       	movw	r14, r30
    e94c:	a8 e0       	ldi	r26, 0x08	; 8
    e94e:	ba e0       	ldi	r27, 0x0A	; 10
    e950:	ed 91       	ld	r30, X+
    e952:	fc 91       	ld	r31, X
    e954:	01 90       	ld	r0, Z+
    e956:	f0 81       	ld	r31, Z
    e958:	e0 2d       	mov	r30, r0
    e95a:	80 2f       	mov	r24, r16
    e95c:	91 2f       	mov	r25, r17
    e95e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e960:	bf ef       	ldi	r27, 0xFF	; 255
    e962:	eb 1a       	sub	r14, r27
    e964:	fb 0a       	sbc	r15, r27
    e966:	f7 01       	movw	r30, r14
    e968:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e96a:	61 11       	cpse	r22, r1
    e96c:	ef cf       	rjmp	.-34     	; 0xe94c <_Z12processMCodei+0x6366>
							SERIAL_PGM(" Count:");
							SERIAL_PORT.print(motorControl[j]->getEncoderCount(i+1));
    e96e:	6b 2d       	mov	r22, r11
    e970:	d4 01       	movw	r26, r8
    e972:	8d 91       	ld	r24, X+
    e974:	9c 91       	ld	r25, X
    e976:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <_ZN20AbstractMotorControl15getEncoderCountEh>
    e97a:	4a e0       	ldi	r20, 0x0A	; 10
    e97c:	50 e0       	ldi	r21, 0x00	; 0
    e97e:	bc 01       	movw	r22, r24
    e980:	8a 2d       	mov	r24, r10
    e982:	97 2d       	mov	r25, r7
    e984:	0e 94 a4 8a 	call	0x11548	; 0x11548 <_ZN5Print5printEii>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e988:	ef e4       	ldi	r30, 0x4F	; 79
    e98a:	fb e0       	ldi	r31, 0x0B	; 11
    e98c:	64 91       	lpm	r22, Z
	while(ch)
    e98e:	66 23       	and	r22, r22
    e990:	91 f0       	breq	.+36     	; 0xe9b6 <_Z12processMCodei+0x63d0>
    e992:	7f 01       	movw	r14, r30
    e994:	a8 e0       	ldi	r26, 0x08	; 8
    e996:	ba e0       	ldi	r27, 0x0A	; 10
    e998:	ed 91       	ld	r30, X+
    e99a:	fc 91       	ld	r31, X
    e99c:	01 90       	ld	r0, Z+
    e99e:	f0 81       	ld	r31, Z
    e9a0:	e0 2d       	mov	r30, r0
    e9a2:	80 2f       	mov	r24, r16
    e9a4:	91 2f       	mov	r25, r17
    e9a6:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    e9a8:	bf ef       	ldi	r27, 0xFF	; 255
    e9aa:	eb 1a       	sub	r14, r27
    e9ac:	fb 0a       	sbc	r15, r27
    e9ae:	f7 01       	movw	r30, r14
    e9b0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    e9b2:	61 11       	cpse	r22, r1
    e9b4:	ef cf       	rjmp	.-34     	; 0xe994 <_Z12processMCodei+0x63ae>
	int  getEncoderCount(uint8_t ch);
	int totalUltrasonics(void) {  int j = 0; for(int i = 0; i < 10; i++) if(ultrasonicIndex[i][0] != 255)++j; return j; }
	uint8_t getUltrasonicFacing(uint8_t ch) { return ultrasonicIndex[ch-1][1]; }
	uint32_t getMinMotorDist(uint8_t ch) { return minMotorDist[ch-1]; }
	uint8_t getUltrasonicIndex(uint8_t ch) { return ultrasonicIndex[ch-1][0]; }
	uint32_t getMaxMotorDuration(uint8_t ch) { return maxMotorDuration[ch-1]; }
    e9b6:	d4 01       	movw	r26, r8
    e9b8:	ed 91       	ld	r30, X+
    e9ba:	fc 91       	ld	r31, X
    e9bc:	cc 0c       	add	r12, r12
    e9be:	dd 1c       	adc	r13, r13
    e9c0:	cc 0c       	add	r12, r12
    e9c2:	dd 1c       	adc	r13, r13
    e9c4:	ec 0d       	add	r30, r12
    e9c6:	fd 1d       	adc	r31, r13
    e9c8:	ef 5b       	subi	r30, 0xBF	; 191
    e9ca:	ff 4f       	sbci	r31, 0xFF	; 255
							SERIAL_PGM(" Duration:");
							SERIAL_PORT.println(motorControl[j]->getMaxMotorDuration(i+1));
    e9cc:	40 81       	ld	r20, Z
    e9ce:	51 81       	ldd	r21, Z+1	; 0x01
    e9d0:	62 81       	ldd	r22, Z+2	; 0x02
    e9d2:	73 81       	ldd	r23, Z+3	; 0x03
    e9d4:	2a e0       	ldi	r18, 0x0A	; 10
    e9d6:	30 e0       	ldi	r19, 0x00	; 0
    e9d8:	8a 2d       	mov	r24, r10
    e9da:	97 2d       	mov	r25, r7
    e9dc:	0e 94 f6 8a 	call	0x115ec	; 0x115ec <_ZN5Print7printlnEmi>
    e9e0:	ad ce       	rjmp	.-678    	; 0xe73c <_Z12processMCodei+0x6156>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    e9e2:	e9 e4       	ldi	r30, 0x49	; 73
    e9e4:	fb e0       	ldi	r31, 0x0B	; 11
    e9e6:	64 91       	lpm	r22, Z
	while(ch)
    e9e8:	66 23       	and	r22, r22
    e9ea:	91 f0       	breq	.+36     	; 0xea10 <_Z12processMCodei+0x642a>
    e9ec:	7f 01       	movw	r14, r30
    e9ee:	a8 e0       	ldi	r26, 0x08	; 8
    e9f0:	ba e0       	ldi	r27, 0x0A	; 10
    e9f2:	ed 91       	ld	r30, X+
    e9f4:	fc 91       	ld	r31, X
    e9f6:	01 90       	ld	r0, Z+
    e9f8:	f0 81       	ld	r31, Z
    e9fa:	e0 2d       	mov	r30, r0
    e9fc:	80 2f       	mov	r24, r16
    e9fe:	91 2f       	mov	r25, r17
    ea00:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ea02:	bf ef       	ldi	r27, 0xFF	; 255
    ea04:	eb 1a       	sub	r14, r27
    ea06:	fb 0a       	sbc	r15, r27
    ea08:	f7 01       	movw	r30, r14
    ea0a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ea0c:	61 11       	cpse	r22, r1
    ea0e:	ef cf       	rjmp	.-34     	; 0xe9ee <_Z12processMCodei+0x6408>
							//SERIAL_PGM(motorControl[j]->getDriverInfo(i+1));
						} else {
							SERIAL_PGMLN("None.");
    ea10:	8a 2d       	mov	r24, r10
    ea12:	97 2d       	mov	r25, r7
    ea14:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    ea18:	91 ce       	rjmp	.-734    	; 0xe73c <_Z12processMCodei+0x6156>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ea1a:	e8 e3       	ldi	r30, 0x38	; 56
    ea1c:	fb e0       	ldi	r31, 0x0B	; 11
    ea1e:	64 91       	lpm	r22, Z
	while(ch)
    ea20:	66 23       	and	r22, r22
    ea22:	91 f0       	breq	.+36     	; 0xea48 <_Z12processMCodei+0x6462>
    ea24:	7f 01       	movw	r14, r30
    ea26:	a8 e0       	ldi	r26, 0x08	; 8
    ea28:	ba e0       	ldi	r27, 0x0A	; 10
    ea2a:	ed 91       	ld	r30, X+
    ea2c:	fc 91       	ld	r31, X
    ea2e:	01 90       	ld	r0, Z+
    ea30:	f0 81       	ld	r31, Z
    ea32:	e0 2d       	mov	r30, r0
    ea34:	8a 2d       	mov	r24, r10
    ea36:	97 2d       	mov	r25, r7
    ea38:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ea3a:	bf ef       	ldi	r27, 0xFF	; 255
    ea3c:	eb 1a       	sub	r14, r27
    ea3e:	fb 0a       	sbc	r15, r27
    ea40:	f7 01       	movw	r30, r14
    ea42:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ea44:	61 11       	cpse	r22, r1
    ea46:	ef cf       	rjmp	.-34     	; 0xea26 <_Z12processMCodei+0x6440>
						}
					}
					SERIAL_PGM("Ultrasonic pins:");
					if( motorControl[j]->totalUltrasonics() ) {
    ea48:	d4 01       	movw	r26, r8
    ea4a:	8d 91       	ld	r24, X+
    ea4c:	9c 91       	ld	r25, X
    ea4e:	dc 01       	movw	r26, r24
    ea50:	9d 96       	adiw	r26, 0x2d	; 45
    ea52:	8f 5b       	subi	r24, 0xBF	; 191
    ea54:	9f 4f       	sbci	r25, 0xFF	; 255
    ea56:	fd 01       	movw	r30, r26
	// If the wheel is mirrored to speed commands or commutation, 0 - normal, 1 - mirror
	void setDefaultDirection(uint8_t ch, uint8_t val) { defaultDirection[ch-1] = val; }
	void setDuration(uint8_t ch, uint32_t durx) { maxMotorDuration[ch-1] = durx; }
	void setMinMotorPower(uint8_t ch, uint32_t mpow) { minMotorPower[ch-1] = mpow; 	if( mpow != 0 ) minMotorPower[ch-1] /= 4; }
	int  getEncoderCount(uint8_t ch);
	int totalUltrasonics(void) {  int j = 0; for(int i = 0; i < 10; i++) if(ultrasonicIndex[i][0] != 255)++j; return j; }
    ea58:	20 e0       	ldi	r18, 0x00	; 0
    ea5a:	30 e0       	ldi	r19, 0x00	; 0
    ea5c:	40 81       	ld	r20, Z
    ea5e:	4f 3f       	cpi	r20, 0xFF	; 255
    ea60:	11 f0       	breq	.+4      	; 0xea66 <_Z12processMCodei+0x6480>
    ea62:	2f 5f       	subi	r18, 0xFF	; 255
    ea64:	3f 4f       	sbci	r19, 0xFF	; 255
    ea66:	32 96       	adiw	r30, 0x02	; 2
    ea68:	e8 17       	cp	r30, r24
    ea6a:	f9 07       	cpc	r31, r25
    ea6c:	b9 f7       	brne	.-18     	; 0xea5c <_Z12processMCodei+0x6476>
    ea6e:	23 2b       	or	r18, r19
    ea70:	09 f4       	brne	.+2      	; 0xea74 <_Z12processMCodei+0x648e>
    ea72:	b7 c0       	rjmp	.+366    	; 0xebe2 <_Z12processMCodei+0x65fc>
    ea74:	60 e0       	ldi	r22, 0x00	; 0
    ea76:	70 e0       	ldi	r23, 0x00	; 0
    ea78:	2c 91       	ld	r18, X
    ea7a:	2f 3f       	cpi	r18, 0xFF	; 255
    ea7c:	11 f0       	breq	.+4      	; 0xea82 <_Z12processMCodei+0x649c>
    ea7e:	6f 5f       	subi	r22, 0xFF	; 255
    ea80:	7f 4f       	sbci	r23, 0xFF	; 255
    ea82:	12 96       	adiw	r26, 0x02	; 2
    ea84:	a8 17       	cp	r26, r24
    ea86:	b9 07       	cpc	r27, r25
    ea88:	b9 f7       	brne	.-18     	; 0xea78 <_Z12processMCodei+0x6492>
						SERIAL_PORT.println(motorControl[j]->totalUltrasonics());
    ea8a:	4a e0       	ldi	r20, 0x0A	; 10
    ea8c:	50 e0       	ldi	r21, 0x00	; 0
    ea8e:	88 e0       	ldi	r24, 0x08	; 8
    ea90:	9a e0       	ldi	r25, 0x0A	; 10
    ea92:	0e 94 ab 8a 	call	0x11556	; 0x11556 <_ZN5Print7printlnEii>
    ea96:	bb 24       	eor	r11, r11
    ea98:	b3 94       	inc	r11
						for(int k = 0; k < motorControl[j]->totalUltrasonics(); k++) {
    ea9a:	41 2c       	mov	r4, r1
    ea9c:	51 2c       	mov	r5, r1
    ea9e:	f0 2e       	mov	r15, r16
    eaa0:	e1 2e       	mov	r14, r17
    eaa2:	f4 01       	movw	r30, r8
    eaa4:	40 81       	ld	r20, Z
    eaa6:	51 81       	ldd	r21, Z+1	; 0x01
    eaa8:	fa 01       	movw	r30, r20
    eaaa:	bd 96       	adiw	r30, 0x2d	; 45
    eaac:	4f 5b       	subi	r20, 0xBF	; 191
    eaae:	5f 4f       	sbci	r21, 0xFF	; 255
    eab0:	20 e0       	ldi	r18, 0x00	; 0
    eab2:	30 e0       	ldi	r19, 0x00	; 0
    eab4:	80 81       	ld	r24, Z
    eab6:	8f 3f       	cpi	r24, 0xFF	; 255
    eab8:	11 f0       	breq	.+4      	; 0xeabe <_Z12processMCodei+0x64d8>
    eaba:	2f 5f       	subi	r18, 0xFF	; 255
    eabc:	3f 4f       	sbci	r19, 0xFF	; 255
    eabe:	32 96       	adiw	r30, 0x02	; 2
    eac0:	4e 17       	cp	r20, r30
    eac2:	5f 07       	cpc	r21, r31
    eac4:	b9 f7       	brne	.-18     	; 0xeab4 <_Z12processMCodei+0x64ce>
    eac6:	42 16       	cp	r4, r18
    eac8:	53 06       	cpc	r5, r19
    eaca:	0c f0       	brlt	.+2      	; 0xeace <_Z12processMCodei+0x64e8>
    eacc:	a6 c0       	rjmp	.+332    	; 0xec1a <_Z12processMCodei+0x6634>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    eace:	e3 e3       	ldi	r30, 0x33	; 51
    ead0:	fb e0       	ldi	r31, 0x0B	; 11
    ead2:	64 91       	lpm	r22, Z
	while(ch)
    ead4:	66 23       	and	r22, r22
    ead6:	89 f0       	breq	.+34     	; 0xeafa <_Z12processMCodei+0x6514>
    ead8:	8f 01       	movw	r16, r30
    eada:	a8 e0       	ldi	r26, 0x08	; 8
    eadc:	ba e0       	ldi	r27, 0x0A	; 10
    eade:	ed 91       	ld	r30, X+
    eae0:	fc 91       	ld	r31, X
    eae2:	01 90       	ld	r0, Z+
    eae4:	f0 81       	ld	r31, Z
    eae6:	e0 2d       	mov	r30, r0
    eae8:	8f 2d       	mov	r24, r15
    eaea:	9e 2d       	mov	r25, r14
    eaec:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    eaee:	0f 5f       	subi	r16, 0xFF	; 255
    eaf0:	1f 4f       	sbci	r17, 0xFF	; 255
    eaf2:	f8 01       	movw	r30, r16
    eaf4:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    eaf6:	61 11       	cpse	r22, r1
    eaf8:	f0 cf       	rjmp	.-32     	; 0xeada <_Z12processMCodei+0x64f4>
	uint8_t getUltrasonicFacing(uint8_t ch) { return ultrasonicIndex[ch-1][1]; }
	uint32_t getMinMotorDist(uint8_t ch) { return minMotorDist[ch-1]; }
	uint8_t getUltrasonicIndex(uint8_t ch) { return ultrasonicIndex[ch-1][0]; }
    eafa:	cb 2c       	mov	r12, r11
    eafc:	d1 2c       	mov	r13, r1
    eafe:	f1 e0       	ldi	r31, 0x01	; 1
    eb00:	cf 1a       	sub	r12, r31
    eb02:	d1 08       	sbc	r13, r1
    eb04:	d4 01       	movw	r26, r8
    eb06:	ed 91       	ld	r30, X+
    eb08:	fc 91       	ld	r31, X
    eb0a:	c6 01       	movw	r24, r12
    eb0c:	88 0f       	add	r24, r24
    eb0e:	99 1f       	adc	r25, r25
    eb10:	e8 0f       	add	r30, r24
    eb12:	f9 1f       	adc	r31, r25
							SERIAL_PGM("Pin:");
							SERIAL_PORT.print(psonics[motorControl[j]->getUltrasonicIndex(k+1)]->getPin());
    eb14:	e5 a5       	ldd	r30, Z+45	; 0x2d
    eb16:	f0 e0       	ldi	r31, 0x00	; 0
    eb18:	ee 0f       	add	r30, r30
    eb1a:	ff 1f       	adc	r31, r31
    eb1c:	ed 5b       	subi	r30, 0xBD	; 189
    eb1e:	fb 4e       	sbci	r31, 0xEB	; 235
    eb20:	01 90       	ld	r0, Z+
    eb22:	f0 81       	ld	r31, Z
    eb24:	e0 2d       	mov	r30, r0
    eb26:	04 80       	ldd	r0, Z+4	; 0x04
    eb28:	f5 81       	ldd	r31, Z+5	; 0x05
    eb2a:	e0 2d       	mov	r30, r0
    eb2c:	4a e0       	ldi	r20, 0x0A	; 10
    eb2e:	50 e0       	ldi	r21, 0x00	; 0
    eb30:	60 81       	ld	r22, Z
    eb32:	8a 2d       	mov	r24, r10
    eb34:	97 2d       	mov	r25, r7
    eb36:	0e 94 d9 8a 	call	0x115b2	; 0x115b2 <_ZN5Print5printEhi>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    eb3a:	ea e2       	ldi	r30, 0x2A	; 42
    eb3c:	fb e0       	ldi	r31, 0x0B	; 11
    eb3e:	64 91       	lpm	r22, Z
	while(ch)
    eb40:	66 23       	and	r22, r22
    eb42:	89 f0       	breq	.+34     	; 0xeb66 <_Z12processMCodei+0x6580>
    eb44:	8f 01       	movw	r16, r30
    eb46:	a8 e0       	ldi	r26, 0x08	; 8
    eb48:	ba e0       	ldi	r27, 0x0A	; 10
    eb4a:	ed 91       	ld	r30, X+
    eb4c:	fc 91       	ld	r31, X
    eb4e:	01 90       	ld	r0, Z+
    eb50:	f0 81       	ld	r31, Z
    eb52:	e0 2d       	mov	r30, r0
    eb54:	8f 2d       	mov	r24, r15
    eb56:	9e 2d       	mov	r25, r14
    eb58:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    eb5a:	0f 5f       	subi	r16, 0xFF	; 255
    eb5c:	1f 4f       	sbci	r17, 0xFF	; 255
    eb5e:	f8 01       	movw	r30, r16
    eb60:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    eb62:	61 11       	cpse	r22, r1
    eb64:	f0 cf       	rjmp	.-32     	; 0xeb46 <_Z12processMCodei+0x6560>
	void setDefaultDirection(uint8_t ch, uint8_t val) { defaultDirection[ch-1] = val; }
	void setDuration(uint8_t ch, uint32_t durx) { maxMotorDuration[ch-1] = durx; }
	void setMinMotorPower(uint8_t ch, uint32_t mpow) { minMotorPower[ch-1] = mpow; 	if( mpow != 0 ) minMotorPower[ch-1] /= 4; }
	int  getEncoderCount(uint8_t ch);
	int totalUltrasonics(void) {  int j = 0; for(int i = 0; i < 10; i++) if(ultrasonicIndex[i][0] != 255)++j; return j; }
	uint8_t getUltrasonicFacing(uint8_t ch) { return ultrasonicIndex[ch-1][1]; }
    eb66:	d4 01       	movw	r26, r8
    eb68:	8d 91       	ld	r24, X+
    eb6a:	9c 91       	ld	r25, X
    eb6c:	f6 01       	movw	r30, r12
    eb6e:	77 96       	adiw	r30, 0x17	; 23
    eb70:	ee 0f       	add	r30, r30
    eb72:	ff 1f       	adc	r31, r31
    eb74:	e8 0f       	add	r30, r24
    eb76:	f9 1f       	adc	r31, r25
							SERIAL_PGM(" Facing:");
							SERIAL_PORT.print(motorControl[j]->getUltrasonicFacing(k+1));
    eb78:	4a e0       	ldi	r20, 0x0A	; 10
    eb7a:	50 e0       	ldi	r21, 0x00	; 0
    eb7c:	60 81       	ld	r22, Z
    eb7e:	8a 2d       	mov	r24, r10
    eb80:	97 2d       	mov	r25, r7
    eb82:	0e 94 d9 8a 	call	0x115b2	; 0x115b2 <_ZN5Print5printEhi>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    eb86:	ec e1       	ldi	r30, 0x1C	; 28
    eb88:	fb e0       	ldi	r31, 0x0B	; 11
    eb8a:	64 91       	lpm	r22, Z
	while(ch)
    eb8c:	66 23       	and	r22, r22
    eb8e:	89 f0       	breq	.+34     	; 0xebb2 <_Z12processMCodei+0x65cc>
    eb90:	8f 01       	movw	r16, r30
    eb92:	a8 e0       	ldi	r26, 0x08	; 8
    eb94:	ba e0       	ldi	r27, 0x0A	; 10
    eb96:	ed 91       	ld	r30, X+
    eb98:	fc 91       	ld	r31, X
    eb9a:	01 90       	ld	r0, Z+
    eb9c:	f0 81       	ld	r31, Z
    eb9e:	e0 2d       	mov	r30, r0
    eba0:	8f 2d       	mov	r24, r15
    eba2:	9e 2d       	mov	r25, r14
    eba4:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    eba6:	0f 5f       	subi	r16, 0xFF	; 255
    eba8:	1f 4f       	sbci	r17, 0xFF	; 255
    ebaa:	f8 01       	movw	r30, r16
    ebac:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ebae:	61 11       	cpse	r22, r1
    ebb0:	f0 cf       	rjmp	.-32     	; 0xeb92 <_Z12processMCodei+0x65ac>
	uint32_t getMinMotorDist(uint8_t ch) { return minMotorDist[ch-1]; }
    ebb2:	d4 01       	movw	r26, r8
    ebb4:	ed 91       	ld	r30, X+
    ebb6:	fc 91       	ld	r31, X
    ebb8:	cc 0c       	add	r12, r12
    ebba:	dd 1c       	adc	r13, r13
    ebbc:	cc 0c       	add	r12, r12
    ebbe:	dd 1c       	adc	r13, r13
    ebc0:	ec 0d       	add	r30, r12
    ebc2:	fd 1d       	adc	r31, r13
							SERIAL_PGM(" Shutdown cm:");
							SERIAL_PORT.println(motorControl[j]->getMinMotorDist(k+1));
    ebc4:	45 81       	ldd	r20, Z+5	; 0x05
    ebc6:	56 81       	ldd	r21, Z+6	; 0x06
    ebc8:	67 81       	ldd	r22, Z+7	; 0x07
    ebca:	70 85       	ldd	r23, Z+8	; 0x08
    ebcc:	2a e0       	ldi	r18, 0x0A	; 10
    ebce:	30 e0       	ldi	r19, 0x00	; 0
    ebd0:	8a 2d       	mov	r24, r10
    ebd2:	97 2d       	mov	r25, r7
    ebd4:	0e 94 f6 8a 	call	0x115ec	; 0x115ec <_ZN5Print7printlnEmi>
						}
					}
					SERIAL_PGM("Ultrasonic pins:");
					if( motorControl[j]->totalUltrasonics() ) {
						SERIAL_PORT.println(motorControl[j]->totalUltrasonics());
						for(int k = 0; k < motorControl[j]->totalUltrasonics(); k++) {
    ebd8:	bf ef       	ldi	r27, 0xFF	; 255
    ebda:	4b 1a       	sub	r4, r27
    ebdc:	5b 0a       	sbc	r5, r27
    ebde:	b3 94       	inc	r11
    ebe0:	60 cf       	rjmp	.-320    	; 0xeaa2 <_Z12processMCodei+0x64bc>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ebe2:	e6 e1       	ldi	r30, 0x16	; 22
    ebe4:	fb e0       	ldi	r31, 0x0B	; 11
    ebe6:	64 91       	lpm	r22, Z
	while(ch)
    ebe8:	66 23       	and	r22, r22
    ebea:	91 f0       	breq	.+36     	; 0xec10 <_Z12processMCodei+0x662a>
    ebec:	7f 01       	movw	r14, r30
    ebee:	a8 e0       	ldi	r26, 0x08	; 8
    ebf0:	ba e0       	ldi	r27, 0x0A	; 10
    ebf2:	ed 91       	ld	r30, X+
    ebf4:	fc 91       	ld	r31, X
    ebf6:	01 90       	ld	r0, Z+
    ebf8:	f0 81       	ld	r31, Z
    ebfa:	e0 2d       	mov	r30, r0
    ebfc:	8a 2d       	mov	r24, r10
    ebfe:	97 2d       	mov	r25, r7
    ec00:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ec02:	bf ef       	ldi	r27, 0xFF	; 255
    ec04:	eb 1a       	sub	r14, r27
    ec06:	fb 0a       	sbc	r15, r27
    ec08:	f7 01       	movw	r30, r14
    ec0a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ec0c:	61 11       	cpse	r22, r1
    ec0e:	ef cf       	rjmp	.-34     	; 0xebee <_Z12processMCodei+0x6608>
							SERIAL_PORT.print(motorControl[j]->getUltrasonicFacing(k+1));
							SERIAL_PGM(" Shutdown cm:");
							SERIAL_PORT.println(motorControl[j]->getMinMotorDist(k+1));
						}
					} else {
						SERIAL_PGMLN("None.");
    ec10:	88 e0       	ldi	r24, 0x08	; 8
    ec12:	9a e0       	ldi	r25, 0x0A	; 10
    ec14:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    ec18:	02 c0       	rjmp	.+4      	; 0xec1e <_Z12processMCodei+0x6638>
    ec1a:	0f 2d       	mov	r16, r15
    ec1c:	1e 2d       	mov	r17, r14
    ec1e:	29 81       	ldd	r18, Y+1	; 0x01
    ec20:	3a 81       	ldd	r19, Y+2	; 0x02
    ec22:	2e 5f       	subi	r18, 0xFE	; 254
    ec24:	3f 4f       	sbci	r19, 0xFF	; 255
    ec26:	3a 83       	std	Y+2, r19	; 0x02
    ec28:	29 83       	std	Y+1, r18	; 0x01
		
	case 705:
			SERIAL_PGM(MSG_BEGIN);
			SERIAL_PGM(motorControlSettingHdr);
			SERIAL_PGMLN(MSG_DELIMIT);
			for(int j = 0; j < 10; j++) {
    ec2a:	4b e0       	ldi	r20, 0x0B	; 11
    ec2c:	53 e1       	ldi	r21, 0x13	; 19
    ec2e:	42 17       	cp	r20, r18
    ec30:	53 07       	cpc	r21, r19
    ec32:	09 f0       	breq	.+2      	; 0xec36 <_Z12processMCodei+0x6650>
    ec34:	73 cd       	rjmp	.-1306   	; 0xe71c <_Z12processMCodei+0x6136>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ec36:	e4 e1       	ldi	r30, 0x14	; 20
    ec38:	fb e0       	ldi	r31, 0x0B	; 11
    ec3a:	64 91       	lpm	r22, Z
	while(ch)
    ec3c:	66 23       	and	r22, r22
    ec3e:	a1 f0       	breq	.+40     	; 0xec68 <_Z12processMCodei+0x6682>
    ec40:	08 e0       	ldi	r16, 0x08	; 8
    ec42:	1a e0       	ldi	r17, 0x0A	; 10
    ec44:	fa 83       	std	Y+2, r31	; 0x02
    ec46:	e9 83       	std	Y+1, r30	; 0x01
    ec48:	d8 01       	movw	r26, r16
    ec4a:	ed 91       	ld	r30, X+
    ec4c:	fc 91       	ld	r31, X
    ec4e:	01 90       	ld	r0, Z+
    ec50:	f0 81       	ld	r31, Z
    ec52:	e0 2d       	mov	r30, r0
    ec54:	c8 01       	movw	r24, r16
    ec56:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ec58:	e9 81       	ldd	r30, Y+1	; 0x01
    ec5a:	fa 81       	ldd	r31, Y+2	; 0x02
    ec5c:	31 96       	adiw	r30, 0x01	; 1
    ec5e:	fa 83       	std	Y+2, r31	; 0x02
    ec60:	e9 83       	std	Y+1, r30	; 0x01
    ec62:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ec64:	61 11       	cpse	r22, r1
    ec66:	f0 cf       	rjmp	.-32     	; 0xec48 <_Z12processMCodei+0x6662>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ec68:	e0 e0       	ldi	r30, 0x00	; 0
    ec6a:	fb e0       	ldi	r31, 0x0B	; 11
    ec6c:	64 91       	lpm	r22, Z
	while(ch)
    ec6e:	66 23       	and	r22, r22
    ec70:	a1 f0       	breq	.+40     	; 0xec9a <_Z12processMCodei+0x66b4>
    ec72:	08 e0       	ldi	r16, 0x08	; 8
    ec74:	1a e0       	ldi	r17, 0x0A	; 10
    ec76:	fa 83       	std	Y+2, r31	; 0x02
    ec78:	e9 83       	std	Y+1, r30	; 0x01
    ec7a:	d8 01       	movw	r26, r16
    ec7c:	ed 91       	ld	r30, X+
    ec7e:	fc 91       	ld	r31, X
    ec80:	01 90       	ld	r0, Z+
    ec82:	f0 81       	ld	r31, Z
    ec84:	e0 2d       	mov	r30, r0
    ec86:	c8 01       	movw	r24, r16
    ec88:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ec8a:	e9 81       	ldd	r30, Y+1	; 0x01
    ec8c:	fa 81       	ldd	r31, Y+2	; 0x02
    ec8e:	31 96       	adiw	r30, 0x01	; 1
    ec90:	fa 83       	std	Y+2, r31	; 0x02
    ec92:	e9 83       	std	Y+1, r30	; 0x01
    ec94:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ec96:	61 11       	cpse	r22, r1
    ec98:	f0 cf       	rjmp	.-32     	; 0xec7a <_Z12processMCodei+0x6694>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ec9a:	ed ef       	ldi	r30, 0xFD	; 253
    ec9c:	fa e0       	ldi	r31, 0x0A	; 10
    ec9e:	64 91       	lpm	r22, Z
	while(ch)
    eca0:	66 23       	and	r22, r22
    eca2:	a1 f0       	breq	.+40     	; 0xeccc <_Z12processMCodei+0x66e6>
    eca4:	08 e0       	ldi	r16, 0x08	; 8
    eca6:	1a e0       	ldi	r17, 0x0A	; 10
    eca8:	fa 83       	std	Y+2, r31	; 0x02
    ecaa:	e9 83       	std	Y+1, r30	; 0x01
    ecac:	d8 01       	movw	r26, r16
    ecae:	ed 91       	ld	r30, X+
    ecb0:	fc 91       	ld	r31, X
    ecb2:	01 90       	ld	r0, Z+
    ecb4:	f0 81       	ld	r31, Z
    ecb6:	e0 2d       	mov	r30, r0
    ecb8:	c8 01       	movw	r24, r16
    ecba:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ecbc:	e9 81       	ldd	r30, Y+1	; 0x01
    ecbe:	fa 81       	ldd	r31, Y+2	; 0x02
    ecc0:	31 96       	adiw	r30, 0x01	; 1
    ecc2:	fa 83       	std	Y+2, r31	; 0x02
    ecc4:	e9 83       	std	Y+1, r30	; 0x01
    ecc6:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ecc8:	61 11       	cpse	r22, r1
    ecca:	f0 cf       	rjmp	.-32     	; 0xecac <_Z12processMCodei+0x66c6>
					}
				} // if motorControl[j]
			} // j each motor controller
			SERIAL_PGM(MSG_BEGIN);
			SERIAL_PGM(motorControlSettingHdr);
			SERIAL_PGMLN(MSG_TERMINATE);
    eccc:	88 e0       	ldi	r24, 0x08	; 8
    ecce:	9a e0       	ldi	r25, 0x0A	; 10
    ecd0:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
			SERIAL_PORT.flush();
    ecd4:	88 e0       	ldi	r24, 0x08	; 8
    ecd6:	9a e0       	ldi	r25, 0x0A	; 10
    ecd8:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ecdc:	eb ef       	ldi	r30, 0xFB	; 251
    ecde:	fa e0       	ldi	r31, 0x0A	; 10
    ece0:	64 91       	lpm	r22, Z
	while(ch)
    ece2:	66 23       	and	r22, r22
    ece4:	a1 f0       	breq	.+40     	; 0xed0e <_Z12processMCodei+0x6728>
    ece6:	08 e0       	ldi	r16, 0x08	; 8
    ece8:	1a e0       	ldi	r17, 0x0A	; 10
    ecea:	fa 83       	std	Y+2, r31	; 0x02
    ecec:	e9 83       	std	Y+1, r30	; 0x01
    ecee:	d8 01       	movw	r26, r16
    ecf0:	ed 91       	ld	r30, X+
    ecf2:	fc 91       	ld	r31, X
    ecf4:	01 90       	ld	r0, Z+
    ecf6:	f0 81       	ld	r31, Z
    ecf8:	e0 2d       	mov	r30, r0
    ecfa:	c8 01       	movw	r24, r16
    ecfc:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ecfe:	e9 81       	ldd	r30, Y+1	; 0x01
    ed00:	fa 81       	ldd	r31, Y+2	; 0x02
    ed02:	31 96       	adiw	r30, 0x01	; 1
    ed04:	fa 83       	std	Y+2, r31	; 0x02
    ed06:	e9 83       	std	Y+1, r30	; 0x01
    ed08:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ed0a:	61 11       	cpse	r22, r1
    ed0c:	f0 cf       	rjmp	.-32     	; 0xecee <_Z12processMCodei+0x6708>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ed0e:	e9 ee       	ldi	r30, 0xE9	; 233
    ed10:	fa e0       	ldi	r31, 0x0A	; 10
    ed12:	64 91       	lpm	r22, Z
	while(ch)
    ed14:	66 23       	and	r22, r22
    ed16:	a1 f0       	breq	.+40     	; 0xed40 <_Z12processMCodei+0x675a>
    ed18:	08 e0       	ldi	r16, 0x08	; 8
    ed1a:	1a e0       	ldi	r17, 0x0A	; 10
    ed1c:	fa 83       	std	Y+2, r31	; 0x02
    ed1e:	e9 83       	std	Y+1, r30	; 0x01
    ed20:	d8 01       	movw	r26, r16
    ed22:	ed 91       	ld	r30, X+
    ed24:	fc 91       	ld	r31, X
    ed26:	01 90       	ld	r0, Z+
    ed28:	f0 81       	ld	r31, Z
    ed2a:	e0 2d       	mov	r30, r0
    ed2c:	c8 01       	movw	r24, r16
    ed2e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ed30:	e9 81       	ldd	r30, Y+1	; 0x01
    ed32:	fa 81       	ldd	r31, Y+2	; 0x02
    ed34:	31 96       	adiw	r30, 0x01	; 1
    ed36:	fa 83       	std	Y+2, r31	; 0x02
    ed38:	e9 83       	std	Y+1, r30	; 0x01
    ed3a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ed3c:	61 11       	cpse	r22, r1
    ed3e:	f0 cf       	rjmp	.-32     	; 0xed20 <_Z12processMCodei+0x673a>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ed40:	e7 ee       	ldi	r30, 0xE7	; 231
    ed42:	fa e0       	ldi	r31, 0x0A	; 10
    ed44:	64 91       	lpm	r22, Z
	while(ch)
    ed46:	66 23       	and	r22, r22
    ed48:	a1 f0       	breq	.+40     	; 0xed72 <_Z12processMCodei+0x678c>
    ed4a:	08 e0       	ldi	r16, 0x08	; 8
    ed4c:	1a e0       	ldi	r17, 0x0A	; 10
    ed4e:	fa 83       	std	Y+2, r31	; 0x02
    ed50:	e9 83       	std	Y+1, r30	; 0x01
    ed52:	d8 01       	movw	r26, r16
    ed54:	ed 91       	ld	r30, X+
    ed56:	fc 91       	ld	r31, X
    ed58:	01 90       	ld	r0, Z+
    ed5a:	f0 81       	ld	r31, Z
    ed5c:	e0 2d       	mov	r30, r0
    ed5e:	c8 01       	movw	r24, r16
    ed60:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ed62:	e9 81       	ldd	r30, Y+1	; 0x01
    ed64:	fa 81       	ldd	r31, Y+2	; 0x02
    ed66:	31 96       	adiw	r30, 0x01	; 1
    ed68:	fa 83       	std	Y+2, r31	; 0x02
    ed6a:	e9 83       	std	Y+1, r30	; 0x01
    ed6c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ed6e:	61 11       	cpse	r22, r1
    ed70:	f0 cf       	rjmp	.-32     	; 0xed52 <_Z12processMCodei+0x676c>
			//
			// PWM control
			//
			SERIAL_PGM(MSG_BEGIN);
			SERIAL_PGM(pwmControlSettingHdr);
			SERIAL_PGMLN(MSG_DELIMIT);
    ed72:	88 e0       	ldi	r24, 0x08	; 8
    ed74:	9a e0       	ldi	r25, 0x0A	; 10
    ed76:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    ed7a:	23 ee       	ldi	r18, 0xE3	; 227
    ed7c:	32 e1       	ldi	r19, 0x12	; 18
    ed7e:	3a 83       	std	Y+2, r19	; 0x02
    ed80:	29 83       	std	Y+1, r18	; 0x01
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ed82:	0f 2e       	mov	r0, r31
    ed84:	fa ed       	ldi	r31, 0xDA	; 218
    ed86:	4f 2e       	mov	r4, r31
    ed88:	fa e0       	ldi	r31, 0x0A	; 10
    ed8a:	5f 2e       	mov	r5, r31
    ed8c:	f0 2d       	mov	r31, r0
    ed8e:	08 e0       	ldi	r16, 0x08	; 8
    ed90:	1a e0       	ldi	r17, 0x0A	; 10
    ed92:	60 2e       	mov	r6, r16
    ed94:	71 2e       	mov	r7, r17
    ed96:	0f 2e       	mov	r0, r31
    ed98:	fe ec       	ldi	r31, 0xCE	; 206
    ed9a:	2f 2e       	mov	r2, r31
    ed9c:	fa e0       	ldi	r31, 0x0A	; 10
    ed9e:	3f 2e       	mov	r3, r31
    eda0:	f0 2d       	mov	r31, r0
    eda2:	a0 2e       	mov	r10, r16
    eda4:	b1 2e       	mov	r11, r17
    eda6:	c9 80       	ldd	r12, Y+1	; 0x01
    eda8:	da 80       	ldd	r13, Y+2	; 0x02
			for(int j = 0; j < 10; j++) {
				if(pwmControl[j]) {
    edaa:	d6 01       	movw	r26, r12
    edac:	ed 91       	ld	r30, X+
    edae:	fc 91       	ld	r31, X
    edb0:	30 97       	sbiw	r30, 0x00	; 0
    edb2:	09 f4       	brne	.+2      	; 0xedb6 <_Z12processMCodei+0x67d0>
    edb4:	91 c0       	rjmp	.+290    	; 0xeed8 <_Z12processMCodei+0x68f2>
					for(int i = 0 ; i < pwmControl[j]->getChannels(); i++) { //per channel
    edb6:	82 81       	ldd	r24, Z+2	; 0x02
    edb8:	88 23       	and	r24, r24
    edba:	09 f4       	brne	.+2      	; 0xedbe <_Z12processMCodei+0x67d8>
    edbc:	8d c0       	rjmp	.+282    	; 0xeed8 <_Z12processMCodei+0x68f2>
    edbe:	e1 2c       	mov	r14, r1
    edc0:	f1 2c       	mov	r15, r1
    edc2:	f2 01       	movw	r30, r4
    edc4:	64 91       	lpm	r22, Z
	while(ch)
    edc6:	66 23       	and	r22, r22
    edc8:	a9 f0       	breq	.+42     	; 0xedf4 <_Z12processMCodei+0x680e>
    edca:	2a ed       	ldi	r18, 0xDA	; 218
    edcc:	3a e0       	ldi	r19, 0x0A	; 10
    edce:	3c 83       	std	Y+4, r19	; 0x04
    edd0:	2b 83       	std	Y+3, r18	; 0x03
    edd2:	d8 01       	movw	r26, r16
    edd4:	ed 91       	ld	r30, X+
    edd6:	fc 91       	ld	r31, X
    edd8:	01 90       	ld	r0, Z+
    edda:	f0 81       	ld	r31, Z
    eddc:	e0 2d       	mov	r30, r0
    edde:	8a 2d       	mov	r24, r10
    ede0:	9b 2d       	mov	r25, r11
    ede2:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ede4:	eb 81       	ldd	r30, Y+3	; 0x03
    ede6:	fc 81       	ldd	r31, Y+4	; 0x04
    ede8:	31 96       	adiw	r30, 0x01	; 1
    edea:	fc 83       	std	Y+4, r31	; 0x04
    edec:	eb 83       	std	Y+3, r30	; 0x03
    edee:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    edf0:	61 11       	cpse	r22, r1
    edf2:	ef cf       	rjmp	.-34     	; 0xedd2 <_Z12processMCodei+0x67ec>
						SERIAL_PGM("PWM channel:");
						SERIAL_PORT.print(i+1);
    edf4:	ff ef       	ldi	r31, 0xFF	; 255
    edf6:	ef 1a       	sub	r14, r31
    edf8:	ff 0a       	sbc	r15, r31
    edfa:	4a e0       	ldi	r20, 0x0A	; 10
    edfc:	50 e0       	ldi	r21, 0x00	; 0
    edfe:	b7 01       	movw	r22, r14
    ee00:	86 2d       	mov	r24, r6
    ee02:	97 2d       	mov	r25, r7
    ee04:	0e 94 a4 8a 	call	0x11548	; 0x11548 <_ZN5Print5printEii>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ee08:	f1 01       	movw	r30, r2
    ee0a:	64 91       	lpm	r22, Z
	while(ch)
    ee0c:	66 23       	and	r22, r22
    ee0e:	a9 f0       	breq	.+42     	; 0xee3a <_Z12processMCodei+0x6854>
    ee10:	2e ec       	ldi	r18, 0xCE	; 206
    ee12:	3a e0       	ldi	r19, 0x0A	; 10
    ee14:	3c 83       	std	Y+4, r19	; 0x04
    ee16:	2b 83       	std	Y+3, r18	; 0x03
    ee18:	d8 01       	movw	r26, r16
    ee1a:	ed 91       	ld	r30, X+
    ee1c:	fc 91       	ld	r31, X
    ee1e:	01 90       	ld	r0, Z+
    ee20:	f0 81       	ld	r31, Z
    ee22:	e0 2d       	mov	r30, r0
    ee24:	8a 2d       	mov	r24, r10
    ee26:	9b 2d       	mov	r25, r11
    ee28:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ee2a:	eb 81       	ldd	r30, Y+3	; 0x03
    ee2c:	fc 81       	ldd	r31, Y+4	; 0x04
    ee2e:	31 96       	adiw	r30, 0x01	; 1
    ee30:	fc 83       	std	Y+4, r31	; 0x04
    ee32:	eb 83       	std	Y+3, r30	; 0x03
    ee34:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ee36:	61 11       	cpse	r22, r1
    ee38:	ef cf       	rjmp	.-34     	; 0xee18 <_Z12processMCodei+0x6832>
	virtual void getDriverInfo(uint8_t ch, char* outStr)=0;
	virtual int queryFaultFlag(void)=0;
	virtual int queryStatusFlag(void)=0;
	virtual void setMaxPWMLevel(int p)=0;
	uint32_t getMaxPWMDuration(uint8_t ch) { return maxPWMDuration[ch-1]; }
	uint32_t getMinPWMLevel(uint8_t ch) { return minPWMLevel[ch-1] ; }
    ee3a:	47 01       	movw	r8, r14
    ee3c:	99 24       	eor	r9, r9
    ee3e:	f1 e0       	ldi	r31, 0x01	; 1
    ee40:	8f 1a       	sub	r8, r31
    ee42:	91 08       	sbc	r9, r1
    ee44:	d6 01       	movw	r26, r12
    ee46:	ed 91       	ld	r30, X+
    ee48:	fc 91       	ld	r31, X
    ee4a:	c4 01       	movw	r24, r8
    ee4c:	88 0f       	add	r24, r24
    ee4e:	99 1f       	adc	r25, r25
    ee50:	88 0f       	add	r24, r24
    ee52:	99 1f       	adc	r25, r25
    ee54:	e8 0f       	add	r30, r24
    ee56:	f9 1f       	adc	r31, r25
    ee58:	e3 59       	subi	r30, 0x93	; 147
    ee5a:	ff 4f       	sbci	r31, 0xFF	; 255
						SERIAL_PGM(" Min Level:");
						SERIAL_PORT.print(pwmControl[j]->getMinPWMLevel(i+1));
    ee5c:	40 81       	ld	r20, Z
    ee5e:	51 81       	ldd	r21, Z+1	; 0x01
    ee60:	62 81       	ldd	r22, Z+2	; 0x02
    ee62:	73 81       	ldd	r23, Z+3	; 0x03
    ee64:	2a e0       	ldi	r18, 0x0A	; 10
    ee66:	30 e0       	ldi	r19, 0x00	; 0
    ee68:	86 2d       	mov	r24, r6
    ee6a:	97 2d       	mov	r25, r7
    ee6c:	0e 94 cb 8a 	call	0x11596	; 0x11596 <_ZN5Print5printEmi>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ee70:	e3 ec       	ldi	r30, 0xC3	; 195
    ee72:	fa e0       	ldi	r31, 0x0A	; 10
    ee74:	64 91       	lpm	r22, Z
	while(ch)
    ee76:	66 23       	and	r22, r22
    ee78:	99 f0       	breq	.+38     	; 0xeea0 <_Z12processMCodei+0x68ba>
    ee7a:	fc 83       	std	Y+4, r31	; 0x04
    ee7c:	eb 83       	std	Y+3, r30	; 0x03
    ee7e:	d8 01       	movw	r26, r16
    ee80:	ed 91       	ld	r30, X+
    ee82:	fc 91       	ld	r31, X
    ee84:	01 90       	ld	r0, Z+
    ee86:	f0 81       	ld	r31, Z
    ee88:	e0 2d       	mov	r30, r0
    ee8a:	8a 2d       	mov	r24, r10
    ee8c:	9b 2d       	mov	r25, r11
    ee8e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ee90:	eb 81       	ldd	r30, Y+3	; 0x03
    ee92:	fc 81       	ldd	r31, Y+4	; 0x04
    ee94:	31 96       	adiw	r30, 0x01	; 1
    ee96:	fc 83       	std	Y+4, r31	; 0x04
    ee98:	eb 83       	std	Y+3, r30	; 0x03
    ee9a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ee9c:	61 11       	cpse	r22, r1
    ee9e:	ef cf       	rjmp	.-34     	; 0xee7e <_Z12processMCodei+0x6898>
	virtual int isConnected(void)=0;
	virtual void getDriverInfo(uint8_t ch, char* outStr)=0;
	virtual int queryFaultFlag(void)=0;
	virtual int queryStatusFlag(void)=0;
	virtual void setMaxPWMLevel(int p)=0;
	uint32_t getMaxPWMDuration(uint8_t ch) { return maxPWMDuration[ch-1]; }
    eea0:	d6 01       	movw	r26, r12
    eea2:	ed 91       	ld	r30, X+
    eea4:	fc 91       	ld	r31, X
    eea6:	88 0c       	add	r8, r8
    eea8:	99 1c       	adc	r9, r9
    eeaa:	88 0c       	add	r8, r8
    eeac:	99 1c       	adc	r9, r9
    eeae:	e8 0d       	add	r30, r8
    eeb0:	f9 1d       	adc	r31, r9
						SERIAL_PGM(" Duration:");
						SERIAL_PORT.println(pwmControl[j]->getMaxPWMDuration(i+1));
    eeb2:	41 a9       	ldd	r20, Z+49	; 0x31
    eeb4:	52 a9       	ldd	r21, Z+50	; 0x32
    eeb6:	63 a9       	ldd	r22, Z+51	; 0x33
    eeb8:	74 a9       	ldd	r23, Z+52	; 0x34
    eeba:	2a e0       	ldi	r18, 0x0A	; 10
    eebc:	30 e0       	ldi	r19, 0x00	; 0
    eebe:	86 2d       	mov	r24, r6
    eec0:	97 2d       	mov	r25, r7
    eec2:	0e 94 f6 8a 	call	0x115ec	; 0x115ec <_ZN5Print7printlnEmi>
	uint32_t getMinPWMLevel(uint8_t ch) { return minPWMLevel[ch-1] ; }
	int getPWMLevel(uint8_t ch) { return pwmLevel[ch-1]; }
	void setChannels(uint8_t ch) { channels = ch; }
	uint8_t getChannels(void) { return channels; }
    eec6:	d6 01       	movw	r26, r12
    eec8:	ed 91       	ld	r30, X+
    eeca:	fc 91       	ld	r31, X
			SERIAL_PGM(MSG_BEGIN);
			SERIAL_PGM(pwmControlSettingHdr);
			SERIAL_PGMLN(MSG_DELIMIT);
			for(int j = 0; j < 10; j++) {
				if(pwmControl[j]) {
					for(int i = 0 ; i < pwmControl[j]->getChannels(); i++) { //per channel
    eecc:	82 81       	ldd	r24, Z+2	; 0x02
    eece:	90 e0       	ldi	r25, 0x00	; 0
    eed0:	e8 16       	cp	r14, r24
    eed2:	f9 06       	cpc	r15, r25
    eed4:	0c f4       	brge	.+2      	; 0xeed8 <_Z12processMCodei+0x68f2>
    eed6:	75 cf       	rjmp	.-278    	; 0xedc2 <_Z12processMCodei+0x67dc>
    eed8:	e9 81       	ldd	r30, Y+1	; 0x01
    eeda:	fa 81       	ldd	r31, Y+2	; 0x02
    eedc:	32 96       	adiw	r30, 0x02	; 2
    eede:	fa 83       	std	Y+2, r31	; 0x02
    eee0:	e9 83       	std	Y+1, r30	; 0x01
			// PWM control
			//
			SERIAL_PGM(MSG_BEGIN);
			SERIAL_PGM(pwmControlSettingHdr);
			SERIAL_PGMLN(MSG_DELIMIT);
			for(int j = 0; j < 10; j++) {
    eee2:	27 ef       	ldi	r18, 0xF7	; 247
    eee4:	32 e1       	ldi	r19, 0x12	; 18
    eee6:	2e 17       	cp	r18, r30
    eee8:	3f 07       	cpc	r19, r31
    eeea:	09 f0       	breq	.+2      	; 0xeeee <_Z12processMCodei+0x6908>
    eeec:	5c cf       	rjmp	.-328    	; 0xeda6 <_Z12processMCodei+0x67c0>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    eeee:	e1 ec       	ldi	r30, 0xC1	; 193
    eef0:	fa e0       	ldi	r31, 0x0A	; 10
    eef2:	64 91       	lpm	r22, Z
	while(ch)
    eef4:	66 23       	and	r22, r22
    eef6:	a1 f0       	breq	.+40     	; 0xef20 <_Z12processMCodei+0x693a>
    eef8:	08 e0       	ldi	r16, 0x08	; 8
    eefa:	1a e0       	ldi	r17, 0x0A	; 10
    eefc:	fa 83       	std	Y+2, r31	; 0x02
    eefe:	e9 83       	std	Y+1, r30	; 0x01
    ef00:	d8 01       	movw	r26, r16
    ef02:	ed 91       	ld	r30, X+
    ef04:	fc 91       	ld	r31, X
    ef06:	01 90       	ld	r0, Z+
    ef08:	f0 81       	ld	r31, Z
    ef0a:	e0 2d       	mov	r30, r0
    ef0c:	c8 01       	movw	r24, r16
    ef0e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ef10:	e9 81       	ldd	r30, Y+1	; 0x01
    ef12:	fa 81       	ldd	r31, Y+2	; 0x02
    ef14:	31 96       	adiw	r30, 0x01	; 1
    ef16:	fa 83       	std	Y+2, r31	; 0x02
    ef18:	e9 83       	std	Y+1, r30	; 0x01
    ef1a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ef1c:	61 11       	cpse	r22, r1
    ef1e:	f0 cf       	rjmp	.-32     	; 0xef00 <_Z12processMCodei+0x691a>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ef20:	ef ea       	ldi	r30, 0xAF	; 175
    ef22:	fa e0       	ldi	r31, 0x0A	; 10
    ef24:	64 91       	lpm	r22, Z
	while(ch)
    ef26:	66 23       	and	r22, r22
    ef28:	a1 f0       	breq	.+40     	; 0xef52 <_Z12processMCodei+0x696c>
    ef2a:	08 e0       	ldi	r16, 0x08	; 8
    ef2c:	1a e0       	ldi	r17, 0x0A	; 10
    ef2e:	fa 83       	std	Y+2, r31	; 0x02
    ef30:	e9 83       	std	Y+1, r30	; 0x01
    ef32:	d8 01       	movw	r26, r16
    ef34:	ed 91       	ld	r30, X+
    ef36:	fc 91       	ld	r31, X
    ef38:	01 90       	ld	r0, Z+
    ef3a:	f0 81       	ld	r31, Z
    ef3c:	e0 2d       	mov	r30, r0
    ef3e:	c8 01       	movw	r24, r16
    ef40:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ef42:	e9 81       	ldd	r30, Y+1	; 0x01
    ef44:	fa 81       	ldd	r31, Y+2	; 0x02
    ef46:	31 96       	adiw	r30, 0x01	; 1
    ef48:	fa 83       	std	Y+2, r31	; 0x02
    ef4a:	e9 83       	std	Y+1, r30	; 0x01
    ef4c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ef4e:	61 11       	cpse	r22, r1
    ef50:	f0 cf       	rjmp	.-32     	; 0xef32 <_Z12processMCodei+0x694c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ef52:	ec ea       	ldi	r30, 0xAC	; 172
    ef54:	fa e0       	ldi	r31, 0x0A	; 10
    ef56:	64 91       	lpm	r22, Z
	while(ch)
    ef58:	66 23       	and	r22, r22
    ef5a:	a1 f0       	breq	.+40     	; 0xef84 <_Z12processMCodei+0x699e>
    ef5c:	08 e0       	ldi	r16, 0x08	; 8
    ef5e:	1a e0       	ldi	r17, 0x0A	; 10
    ef60:	fa 83       	std	Y+2, r31	; 0x02
    ef62:	e9 83       	std	Y+1, r30	; 0x01
    ef64:	d8 01       	movw	r26, r16
    ef66:	ed 91       	ld	r30, X+
    ef68:	fc 91       	ld	r31, X
    ef6a:	01 90       	ld	r0, Z+
    ef6c:	f0 81       	ld	r31, Z
    ef6e:	e0 2d       	mov	r30, r0
    ef70:	c8 01       	movw	r24, r16
    ef72:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ef74:	e9 81       	ldd	r30, Y+1	; 0x01
    ef76:	fa 81       	ldd	r31, Y+2	; 0x02
    ef78:	31 96       	adiw	r30, 0x01	; 1
    ef7a:	fa 83       	std	Y+2, r31	; 0x02
    ef7c:	e9 83       	std	Y+1, r30	; 0x01
    ef7e:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ef80:	61 11       	cpse	r22, r1
    ef82:	f0 cf       	rjmp	.-32     	; 0xef64 <_Z12processMCodei+0x697e>
					}
				}
			} // j each PWM controller
			SERIAL_PGM(MSG_BEGIN);
			SERIAL_PGM(pwmControlSettingHdr);
			SERIAL_PGMLN(MSG_TERMINATE);
    ef84:	88 e0       	ldi	r24, 0x08	; 8
    ef86:	9a e0       	ldi	r25, 0x0A	; 10
    ef88:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
			SERIAL_PORT.flush();
    ef8c:	88 e0       	ldi	r24, 0x08	; 8
    ef8e:	9a e0       	ldi	r25, 0x0A	; 10
    ef90:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
			break;
    ef94:	b2 c7       	rjmp	.+3940   	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ef96:	ea ea       	ldi	r30, 0xAA	; 170
    ef98:	fa e0       	ldi	r31, 0x0A	; 10
    ef9a:	64 91       	lpm	r22, Z
	while(ch)
    ef9c:	66 23       	and	r22, r22
    ef9e:	a1 f0       	breq	.+40     	; 0xefc8 <_Z12processMCodei+0x69e2>
    efa0:	08 e0       	ldi	r16, 0x08	; 8
    efa2:	1a e0       	ldi	r17, 0x0A	; 10
    efa4:	fa 83       	std	Y+2, r31	; 0x02
    efa6:	e9 83       	std	Y+1, r30	; 0x01
    efa8:	d8 01       	movw	r26, r16
    efaa:	ed 91       	ld	r30, X+
    efac:	fc 91       	ld	r31, X
    efae:	01 90       	ld	r0, Z+
    efb0:	f0 81       	ld	r31, Z
    efb2:	e0 2d       	mov	r30, r0
    efb4:	c8 01       	movw	r24, r16
    efb6:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    efb8:	e9 81       	ldd	r30, Y+1	; 0x01
    efba:	fa 81       	ldd	r31, Y+2	; 0x02
    efbc:	31 96       	adiw	r30, 0x01	; 1
    efbe:	fa 83       	std	Y+2, r31	; 0x02
    efc0:	e9 83       	std	Y+1, r30	; 0x01
    efc2:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    efc4:	61 11       	cpse	r22, r1
    efc6:	f0 cf       	rjmp	.-32     	; 0xefa8 <_Z12processMCodei+0x69c2>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    efc8:	ed e9       	ldi	r30, 0x9D	; 157
    efca:	fa e0       	ldi	r31, 0x0A	; 10
    efcc:	64 91       	lpm	r22, Z
	while(ch)
    efce:	66 23       	and	r22, r22
    efd0:	a1 f0       	breq	.+40     	; 0xeffa <_Z12processMCodei+0x6a14>
    efd2:	08 e0       	ldi	r16, 0x08	; 8
    efd4:	1a e0       	ldi	r17, 0x0A	; 10
    efd6:	fa 83       	std	Y+2, r31	; 0x02
    efd8:	e9 83       	std	Y+1, r30	; 0x01
    efda:	d8 01       	movw	r26, r16
    efdc:	ed 91       	ld	r30, X+
    efde:	fc 91       	ld	r31, X
    efe0:	01 90       	ld	r0, Z+
    efe2:	f0 81       	ld	r31, Z
    efe4:	e0 2d       	mov	r30, r0
    efe6:	c8 01       	movw	r24, r16
    efe8:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    efea:	e9 81       	ldd	r30, Y+1	; 0x01
    efec:	fa 81       	ldd	r31, Y+2	; 0x02
    efee:	31 96       	adiw	r30, 0x01	; 1
    eff0:	fa 83       	std	Y+2, r31	; 0x02
    eff2:	e9 83       	std	Y+1, r30	; 0x01
    eff4:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    eff6:	61 11       	cpse	r22, r1
    eff8:	f0 cf       	rjmp	.-32     	; 0xefda <_Z12processMCodei+0x69f4>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    effa:	eb e9       	ldi	r30, 0x9B	; 155
    effc:	fa e0       	ldi	r31, 0x0A	; 10
    effe:	64 91       	lpm	r22, Z
	while(ch)
    f000:	66 23       	and	r22, r22
    f002:	a1 f0       	breq	.+40     	; 0xf02c <_Z12processMCodei+0x6a46>
    f004:	08 e0       	ldi	r16, 0x08	; 8
    f006:	1a e0       	ldi	r17, 0x0A	; 10
    f008:	fa 83       	std	Y+2, r31	; 0x02
    f00a:	e9 83       	std	Y+1, r30	; 0x01
    f00c:	d8 01       	movw	r26, r16
    f00e:	ed 91       	ld	r30, X+
    f010:	fc 91       	ld	r31, X
    f012:	01 90       	ld	r0, Z+
    f014:	f0 81       	ld	r31, Z
    f016:	e0 2d       	mov	r30, r0
    f018:	c8 01       	movw	r24, r16
    f01a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    f01c:	e9 81       	ldd	r30, Y+1	; 0x01
    f01e:	fa 81       	ldd	r31, Y+2	; 0x02
    f020:	31 96       	adiw	r30, 0x01	; 1
    f022:	fa 83       	std	Y+2, r31	; 0x02
    f024:	e9 83       	std	Y+1, r30	; 0x01
    f026:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    f028:	61 11       	cpse	r22, r1
    f02a:	f0 cf       	rjmp	.-32     	; 0xf00c <_Z12processMCodei+0x6a26>
			
	case 706: // Report all pins in use
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(pinSettingHdr);
		SERIAL_PGMLN(MSG_DELIMIT);
    f02c:	88 e0       	ldi	r24, 0x08	; 8
    f02e:	9a e0       	ldi	r25, 0x0A	; 10
    f030:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		for(int i = 0; i < 100; i++) {
    f034:	20 e0       	ldi	r18, 0x00	; 0
    f036:	30 e0       	ldi	r19, 0x00	; 0
    f038:	3a 83       	std	Y+2, r19	; 0x02
    f03a:	29 83       	std	Y+1, r18	; 0x01
			if( pinAssignment(i) == PIN_ASSIGNED ) {
    f03c:	89 81       	ldd	r24, Y+1	; 0x01
    f03e:	0e 94 8b 1c 	call	0x3916	; 0x3916 <_Z13pinAssignmenth>
    f042:	02 97       	sbiw	r24, 0x02	; 2
    f044:	69 f4       	brne	.+26     	; 0xf060 <_Z12processMCodei+0x6a7a>
				SERIAL_PORT.print(i);
    f046:	4a e0       	ldi	r20, 0x0A	; 10
    f048:	50 e0       	ldi	r21, 0x00	; 0
    f04a:	69 81       	ldd	r22, Y+1	; 0x01
    f04c:	7a 81       	ldd	r23, Y+2	; 0x02
    f04e:	88 e0       	ldi	r24, 0x08	; 8
    f050:	9a e0       	ldi	r25, 0x0A	; 10
    f052:	0e 94 a4 8a 	call	0x11548	; 0x11548 <_ZN5Print5printEii>
				SERIAL_PORT.print(',');
    f056:	6c e2       	ldi	r22, 0x2C	; 44
    f058:	88 e0       	ldi	r24, 0x08	; 8
    f05a:	9a e0       	ldi	r25, 0x0A	; 10
    f05c:	0e 94 ed 89 	call	0x113da	; 0x113da <_ZN5Print5printEc>
			
	case 706: // Report all pins in use
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(pinSettingHdr);
		SERIAL_PGMLN(MSG_DELIMIT);
		for(int i = 0; i < 100; i++) {
    f060:	49 81       	ldd	r20, Y+1	; 0x01
    f062:	5a 81       	ldd	r21, Y+2	; 0x02
    f064:	4f 5f       	subi	r20, 0xFF	; 255
    f066:	5f 4f       	sbci	r21, 0xFF	; 255
    f068:	5a 83       	std	Y+2, r21	; 0x02
    f06a:	49 83       	std	Y+1, r20	; 0x01
    f06c:	44 36       	cpi	r20, 0x64	; 100
    f06e:	51 05       	cpc	r21, r1
    f070:	29 f7       	brne	.-54     	; 0xf03c <_Z12processMCodei+0x6a56>
			if( pinAssignment(i) == PIN_ASSIGNED ) {
				SERIAL_PORT.print(i);
				SERIAL_PORT.print(',');
			}
		}
		Serial.println();
    f072:	88 e0       	ldi	r24, 0x08	; 8
    f074:	9a e0       	ldi	r25, 0x0A	; 10
    f076:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    f07a:	e9 e9       	ldi	r30, 0x99	; 153
    f07c:	fa e0       	ldi	r31, 0x0A	; 10
    f07e:	64 91       	lpm	r22, Z
	while(ch)
    f080:	66 23       	and	r22, r22
    f082:	a1 f0       	breq	.+40     	; 0xf0ac <_Z12processMCodei+0x6ac6>
    f084:	08 e0       	ldi	r16, 0x08	; 8
    f086:	1a e0       	ldi	r17, 0x0A	; 10
    f088:	fa 83       	std	Y+2, r31	; 0x02
    f08a:	e9 83       	std	Y+1, r30	; 0x01
    f08c:	d8 01       	movw	r26, r16
    f08e:	ed 91       	ld	r30, X+
    f090:	fc 91       	ld	r31, X
    f092:	01 90       	ld	r0, Z+
    f094:	f0 81       	ld	r31, Z
    f096:	e0 2d       	mov	r30, r0
    f098:	c8 01       	movw	r24, r16
    f09a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    f09c:	e9 81       	ldd	r30, Y+1	; 0x01
    f09e:	fa 81       	ldd	r31, Y+2	; 0x02
    f0a0:	31 96       	adiw	r30, 0x01	; 1
    f0a2:	fa 83       	std	Y+2, r31	; 0x02
    f0a4:	e9 83       	std	Y+1, r30	; 0x01
    f0a6:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    f0a8:	61 11       	cpse	r22, r1
    f0aa:	f0 cf       	rjmp	.-32     	; 0xf08c <_Z12processMCodei+0x6aa6>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    f0ac:	ec e8       	ldi	r30, 0x8C	; 140
    f0ae:	fa e0       	ldi	r31, 0x0A	; 10
    f0b0:	64 91       	lpm	r22, Z
	while(ch)
    f0b2:	66 23       	and	r22, r22
    f0b4:	a1 f0       	breq	.+40     	; 0xf0de <_Z12processMCodei+0x6af8>
    f0b6:	08 e0       	ldi	r16, 0x08	; 8
    f0b8:	1a e0       	ldi	r17, 0x0A	; 10
    f0ba:	fa 83       	std	Y+2, r31	; 0x02
    f0bc:	e9 83       	std	Y+1, r30	; 0x01
    f0be:	d8 01       	movw	r26, r16
    f0c0:	ed 91       	ld	r30, X+
    f0c2:	fc 91       	ld	r31, X
    f0c4:	01 90       	ld	r0, Z+
    f0c6:	f0 81       	ld	r31, Z
    f0c8:	e0 2d       	mov	r30, r0
    f0ca:	c8 01       	movw	r24, r16
    f0cc:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    f0ce:	e9 81       	ldd	r30, Y+1	; 0x01
    f0d0:	fa 81       	ldd	r31, Y+2	; 0x02
    f0d2:	31 96       	adiw	r30, 0x01	; 1
    f0d4:	fa 83       	std	Y+2, r31	; 0x02
    f0d6:	e9 83       	std	Y+1, r30	; 0x01
    f0d8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    f0da:	61 11       	cpse	r22, r1
    f0dc:	f0 cf       	rjmp	.-32     	; 0xf0be <_Z12processMCodei+0x6ad8>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    f0de:	e9 e8       	ldi	r30, 0x89	; 137
    f0e0:	fa e0       	ldi	r31, 0x0A	; 10
    f0e2:	64 91       	lpm	r22, Z
	while(ch)
    f0e4:	66 23       	and	r22, r22
    f0e6:	a1 f0       	breq	.+40     	; 0xf110 <_Z12processMCodei+0x6b2a>
    f0e8:	08 e0       	ldi	r16, 0x08	; 8
    f0ea:	1a e0       	ldi	r17, 0x0A	; 10
    f0ec:	fa 83       	std	Y+2, r31	; 0x02
    f0ee:	e9 83       	std	Y+1, r30	; 0x01
    f0f0:	d8 01       	movw	r26, r16
    f0f2:	ed 91       	ld	r30, X+
    f0f4:	fc 91       	ld	r31, X
    f0f6:	01 90       	ld	r0, Z+
    f0f8:	f0 81       	ld	r31, Z
    f0fa:	e0 2d       	mov	r30, r0
    f0fc:	c8 01       	movw	r24, r16
    f0fe:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    f100:	e9 81       	ldd	r30, Y+1	; 0x01
    f102:	fa 81       	ldd	r31, Y+2	; 0x02
    f104:	31 96       	adiw	r30, 0x01	; 1
    f106:	fa 83       	std	Y+2, r31	; 0x02
    f108:	e9 83       	std	Y+1, r30	; 0x01
    f10a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    f10c:	61 11       	cpse	r22, r1
    f10e:	f0 cf       	rjmp	.-32     	; 0xf0f0 <_Z12processMCodei+0x6b0a>
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(pinSettingHdr);
		SERIAL_PGMLN(MSG_TERMINATE);
    f110:	88 e0       	ldi	r24, 0x08	; 8
    f112:	9a e0       	ldi	r25, 0x0A	; 10
    f114:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		SERIAL_PORT.flush();
    f118:	88 e0       	ldi	r24, 0x08	; 8
    f11a:	9a e0       	ldi	r25, 0x0A	; 10
    f11c:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
		break;
    f120:	ec c6       	rjmp	.+3544   	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    f122:	e7 e8       	ldi	r30, 0x87	; 135
    f124:	fa e0       	ldi	r31, 0x0A	; 10
    f126:	64 91       	lpm	r22, Z
	while(ch)
    f128:	66 23       	and	r22, r22
    f12a:	a1 f0       	breq	.+40     	; 0xf154 <_Z12processMCodei+0x6b6e>
    f12c:	08 e0       	ldi	r16, 0x08	; 8
    f12e:	1a e0       	ldi	r17, 0x0A	; 10
    f130:	fa 83       	std	Y+2, r31	; 0x02
    f132:	e9 83       	std	Y+1, r30	; 0x01
    f134:	d8 01       	movw	r26, r16
    f136:	ed 91       	ld	r30, X+
    f138:	fc 91       	ld	r31, X
    f13a:	01 90       	ld	r0, Z+
    f13c:	f0 81       	ld	r31, Z
    f13e:	e0 2d       	mov	r30, r0
    f140:	c8 01       	movw	r24, r16
    f142:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    f144:	e9 81       	ldd	r30, Y+1	; 0x01
    f146:	fa 81       	ldd	r31, Y+2	; 0x02
    f148:	31 96       	adiw	r30, 0x01	; 1
    f14a:	fa 83       	std	Y+2, r31	; 0x02
    f14c:	e9 83       	std	Y+1, r30	; 0x01
    f14e:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    f150:	61 11       	cpse	r22, r1
    f152:	f0 cf       	rjmp	.-32     	; 0xf134 <_Z12processMCodei+0x6b4e>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    f154:	e6 e7       	ldi	r30, 0x76	; 118
    f156:	fa e0       	ldi	r31, 0x0A	; 10
    f158:	64 91       	lpm	r22, Z
	while(ch)
    f15a:	66 23       	and	r22, r22
    f15c:	a1 f0       	breq	.+40     	; 0xf186 <_Z12processMCodei+0x6ba0>
    f15e:	08 e0       	ldi	r16, 0x08	; 8
    f160:	1a e0       	ldi	r17, 0x0A	; 10
    f162:	fa 83       	std	Y+2, r31	; 0x02
    f164:	e9 83       	std	Y+1, r30	; 0x01
    f166:	d8 01       	movw	r26, r16
    f168:	ed 91       	ld	r30, X+
    f16a:	fc 91       	ld	r31, X
    f16c:	01 90       	ld	r0, Z+
    f16e:	f0 81       	ld	r31, Z
    f170:	e0 2d       	mov	r30, r0
    f172:	c8 01       	movw	r24, r16
    f174:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    f176:	e9 81       	ldd	r30, Y+1	; 0x01
    f178:	fa 81       	ldd	r31, Y+2	; 0x02
    f17a:	31 96       	adiw	r30, 0x01	; 1
    f17c:	fa 83       	std	Y+2, r31	; 0x02
    f17e:	e9 83       	std	Y+1, r30	; 0x01
    f180:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    f182:	61 11       	cpse	r22, r1
    f184:	f0 cf       	rjmp	.-32     	; 0xf166 <_Z12processMCodei+0x6b80>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    f186:	e4 e7       	ldi	r30, 0x74	; 116
    f188:	fa e0       	ldi	r31, 0x0A	; 10
    f18a:	64 91       	lpm	r22, Z
	while(ch)
    f18c:	66 23       	and	r22, r22
    f18e:	a1 f0       	breq	.+40     	; 0xf1b8 <_Z12processMCodei+0x6bd2>
    f190:	08 e0       	ldi	r16, 0x08	; 8
    f192:	1a e0       	ldi	r17, 0x0A	; 10
    f194:	fa 83       	std	Y+2, r31	; 0x02
    f196:	e9 83       	std	Y+1, r30	; 0x01
    f198:	d8 01       	movw	r26, r16
    f19a:	ed 91       	ld	r30, X+
    f19c:	fc 91       	ld	r31, X
    f19e:	01 90       	ld	r0, Z+
    f1a0:	f0 81       	ld	r31, Z
    f1a2:	e0 2d       	mov	r30, r0
    f1a4:	c8 01       	movw	r24, r16
    f1a6:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    f1a8:	e9 81       	ldd	r30, Y+1	; 0x01
    f1aa:	fa 81       	ldd	r31, Y+2	; 0x02
    f1ac:	31 96       	adiw	r30, 0x01	; 1
    f1ae:	fa 83       	std	Y+2, r31	; 0x02
    f1b0:	e9 83       	std	Y+1, r30	; 0x01
    f1b2:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    f1b4:	61 11       	cpse	r22, r1
    f1b6:	f0 cf       	rjmp	.-32     	; 0xf198 <_Z12processMCodei+0x6bb2>
		
	case 798: // M798 Z<motor control> [X] Report controller status for given controller. If X, slot is PWM
		char* buf;
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(controllerStatusHdr);
		SERIAL_PGMLN(MSG_DELIMIT);
    f1b8:	88 e0       	ldi	r24, 0x08	; 8
    f1ba:	9a e0       	ldi	r25, 0x0A	; 10
    f1bc:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		if (code_seen('Z')) {
    f1c0:	8a e5       	ldi	r24, 0x5A	; 90
    f1c2:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    f1c6:	88 23       	and	r24, r24
    f1c8:	31 f0       	breq	.+12     	; 0xf1d6 <_Z12processMCodei+0x6bf0>
			motorController = code_value();
    f1ca:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    f1ce:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    f1d2:	8b 01       	movw	r16, r22
    f1d4:	02 c0       	rjmp	.+4      	; 0xf1da <_Z12processMCodei+0x6bf4>
  /*-------------------------------------
  * M Code processing
  *--------------------------------------
  */
  void processMCode(int cval) {
	  int motorController = 0; 
    f1d6:	00 e0       	ldi	r16, 0x00	; 0
    f1d8:	10 e0       	ldi	r17, 0x00	; 0
		SERIAL_PGMLN(MSG_DELIMIT);
		if (code_seen('Z')) {
			motorController = code_value();
		}
		
		if(code_seen('X')) {
    f1da:	88 e5       	ldi	r24, 0x58	; 88
    f1dc:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    f1e0:	88 23       	and	r24, r24
    f1e2:	09 f4       	brne	.+2      	; 0xf1e6 <_Z12processMCodei+0x6c00>
    f1e4:	72 c0       	rjmp	.+228    	; 0xf2ca <_Z12processMCodei+0x6ce4>
				if(pwmControl[motorController]) {
    f1e6:	f8 01       	movw	r30, r16
    f1e8:	ee 0f       	add	r30, r30
    f1ea:	ff 1f       	adc	r31, r31
    f1ec:	ed 51       	subi	r30, 0x1D	; 29
    f1ee:	fd 4e       	sbci	r31, 0xED	; 237
    f1f0:	01 90       	ld	r0, Z+
    f1f2:	f0 81       	ld	r31, Z
    f1f4:	e0 2d       	mov	r30, r0
    f1f6:	30 97       	sbiw	r30, 0x00	; 0
    f1f8:	09 f4       	brne	.+2      	; 0xf1fc <_Z12processMCodei+0x6c16>
    f1fa:	e9 c0       	rjmp	.+466    	; 0xf3ce <_Z12processMCodei+0x6de8>
					for(int i = 0; i < pwmControl[motorController]->getChannels() ; i++ ) {
    f1fc:	82 81       	ldd	r24, Z+2	; 0x02
    f1fe:	88 23       	and	r24, r24
    f200:	09 f4       	brne	.+2      	; 0xf204 <_Z12processMCodei+0x6c1e>
    f202:	e5 c0       	rjmp	.+458    	; 0xf3ce <_Z12processMCodei+0x6de8>
    f204:	e1 2c       	mov	r14, r1
    f206:	f1 2c       	mov	r15, r1
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    f208:	0f 2e       	mov	r0, r31
    f20a:	f7 e6       	ldi	r31, 0x67	; 103
    f20c:	cf 2e       	mov	r12, r31
    f20e:	fa e0       	ldi	r31, 0x0A	; 10
    f210:	df 2e       	mov	r13, r31
    f212:	f0 2d       	mov	r31, r0
    f214:	28 e0       	ldi	r18, 0x08	; 8
    f216:	3a e0       	ldi	r19, 0x0A	; 10
    f218:	82 2e       	mov	r8, r18
    f21a:	93 2e       	mov	r9, r19
						SERIAL_PGM("PWM Channel:");
						SERIAL_PORT.println(i+1);
						pwmControl[motorController]->getDriverInfo(i+1,outbuffer);
    f21c:	00 0f       	add	r16, r16
    f21e:	11 1f       	adc	r17, r17
    f220:	0d 51       	subi	r16, 0x1D	; 29
    f222:	1d 4e       	sbci	r17, 0xED	; 237
    f224:	f6 01       	movw	r30, r12
    f226:	64 91       	lpm	r22, Z
	while(ch)
    f228:	66 23       	and	r22, r22
    f22a:	b9 f0       	breq	.+46     	; 0xf25a <_Z12processMCodei+0x6c74>
    f22c:	0f 2e       	mov	r0, r31
    f22e:	f7 e6       	ldi	r31, 0x67	; 103
    f230:	af 2e       	mov	r10, r31
    f232:	fa e0       	ldi	r31, 0x0A	; 10
    f234:	bf 2e       	mov	r11, r31
    f236:	f0 2d       	mov	r31, r0
    f238:	a8 e0       	ldi	r26, 0x08	; 8
    f23a:	ba e0       	ldi	r27, 0x0A	; 10
    f23c:	ed 91       	ld	r30, X+
    f23e:	fc 91       	ld	r31, X
    f240:	01 90       	ld	r0, Z+
    f242:	f0 81       	ld	r31, Z
    f244:	e0 2d       	mov	r30, r0
    f246:	88 2d       	mov	r24, r8
    f248:	99 2d       	mov	r25, r9
    f24a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    f24c:	bf ef       	ldi	r27, 0xFF	; 255
    f24e:	ab 1a       	sub	r10, r27
    f250:	bb 0a       	sbc	r11, r27
    f252:	f5 01       	movw	r30, r10
    f254:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    f256:	61 11       	cpse	r22, r1
    f258:	ef cf       	rjmp	.-34     	; 0xf238 <_Z12processMCodei+0x6c52>
		
		if(code_seen('X')) {
				if(pwmControl[motorController]) {
					for(int i = 0; i < pwmControl[motorController]->getChannels() ; i++ ) {
						SERIAL_PGM("PWM Channel:");
						SERIAL_PORT.println(i+1);
    f25a:	ff ef       	ldi	r31, 0xFF	; 255
    f25c:	ef 1a       	sub	r14, r31
    f25e:	ff 0a       	sbc	r15, r31
    f260:	4a e0       	ldi	r20, 0x0A	; 10
    f262:	50 e0       	ldi	r21, 0x00	; 0
    f264:	b7 01       	movw	r22, r14
    f266:	88 e0       	ldi	r24, 0x08	; 8
    f268:	9a e0       	ldi	r25, 0x0A	; 10
    f26a:	0e 94 ab 8a 	call	0x11556	; 0x11556 <_ZN5Print7printlnEii>
						pwmControl[motorController]->getDriverInfo(i+1,outbuffer);
    f26e:	d8 01       	movw	r26, r16
    f270:	8d 91       	ld	r24, X+
    f272:	9c 91       	ld	r25, X
    f274:	dc 01       	movw	r26, r24
    f276:	ed 91       	ld	r30, X+
    f278:	fc 91       	ld	r31, X
    f27a:	02 84       	ldd	r0, Z+10	; 0x0a
    f27c:	f3 85       	ldd	r31, Z+11	; 0x0b
    f27e:	e0 2d       	mov	r30, r0
    f280:	4b e7       	ldi	r20, 0x7B	; 123
    f282:	54 e1       	ldi	r21, 0x14	; 20
    f284:	6e 2d       	mov	r22, r14
    f286:	19 95       	eicall
						//SERIAL_PORT.println(outbuffer);
						char* buf = outbuffer;
						while(*buf){
    f288:	60 91 7b 14 	lds	r22, 0x147B	; 0x80147b <_ZL9outbuffer>
    f28c:	66 23       	and	r22, r22
    f28e:	79 f0       	breq	.+30     	; 0xf2ae <_Z12processMCodei+0x6cc8>
    f290:	0f 2e       	mov	r0, r31
    f292:	fc e7       	ldi	r31, 0x7C	; 124
    f294:	af 2e       	mov	r10, r31
    f296:	f4 e1       	ldi	r31, 0x14	; 20
    f298:	bf 2e       	mov	r11, r31
    f29a:	f0 2d       	mov	r31, r0
								Serial.print(*buf);
    f29c:	88 e0       	ldi	r24, 0x08	; 8
    f29e:	9a e0       	ldi	r25, 0x0A	; 10
    f2a0:	0e 94 ed 89 	call	0x113da	; 0x113da <_ZN5Print5printEc>
						SERIAL_PGM("PWM Channel:");
						SERIAL_PORT.println(i+1);
						pwmControl[motorController]->getDriverInfo(i+1,outbuffer);
						//SERIAL_PORT.println(outbuffer);
						char* buf = outbuffer;
						while(*buf){
    f2a4:	f5 01       	movw	r30, r10
    f2a6:	61 91       	ld	r22, Z+
    f2a8:	5f 01       	movw	r10, r30
    f2aa:	61 11       	cpse	r22, r1
    f2ac:	f7 cf       	rjmp	.-18     	; 0xf29c <_Z12processMCodei+0x6cb6>
								Serial.print(*buf);
								buf++;
						}
						Serial.println();
    f2ae:	88 e0       	ldi	r24, 0x08	; 8
    f2b0:	9a e0       	ldi	r25, 0x0A	; 10
    f2b2:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    f2b6:	d8 01       	movw	r26, r16
    f2b8:	ed 91       	ld	r30, X+
    f2ba:	fc 91       	ld	r31, X
			motorController = code_value();
		}
		
		if(code_seen('X')) {
				if(pwmControl[motorController]) {
					for(int i = 0; i < pwmControl[motorController]->getChannels() ; i++ ) {
    f2bc:	82 81       	ldd	r24, Z+2	; 0x02
    f2be:	90 e0       	ldi	r25, 0x00	; 0
    f2c0:	e8 16       	cp	r14, r24
    f2c2:	f9 06       	cpc	r15, r25
    f2c4:	0c f4       	brge	.+2      	; 0xf2c8 <_Z12processMCodei+0x6ce2>
    f2c6:	ae cf       	rjmp	.-164    	; 0xf224 <_Z12processMCodei+0x6c3e>
    f2c8:	82 c0       	rjmp	.+260    	; 0xf3ce <_Z12processMCodei+0x6de8>
						}
						Serial.println();
					}
				}
		} else {
			if( motorControl[motorController] && motorControl[motorController]->isConnected() ) {
    f2ca:	f8 01       	movw	r30, r16
    f2cc:	ee 0f       	add	r30, r30
    f2ce:	ff 1f       	adc	r31, r31
    f2d0:	e9 50       	subi	r30, 0x09	; 9
    f2d2:	fd 4e       	sbci	r31, 0xED	; 237
    f2d4:	80 81       	ld	r24, Z
    f2d6:	91 81       	ldd	r25, Z+1	; 0x01
    f2d8:	00 97       	sbiw	r24, 0x00	; 0
    f2da:	09 f4       	brne	.+2      	; 0xf2de <_Z12processMCodei+0x6cf8>
    f2dc:	78 c0       	rjmp	.+240    	; 0xf3ce <_Z12processMCodei+0x6de8>
    f2de:	dc 01       	movw	r26, r24
    f2e0:	ed 91       	ld	r30, X+
    f2e2:	fc 91       	ld	r31, X
    f2e4:	00 84       	ldd	r0, Z+8	; 0x08
    f2e6:	f1 85       	ldd	r31, Z+9	; 0x09
    f2e8:	e0 2d       	mov	r30, r0
    f2ea:	19 95       	eicall
    f2ec:	89 2b       	or	r24, r25
    f2ee:	09 f4       	brne	.+2      	; 0xf2f2 <_Z12processMCodei+0x6d0c>
    f2f0:	6e c0       	rjmp	.+220    	; 0xf3ce <_Z12processMCodei+0x6de8>
				for(int i = 0; i < motorControl[motorController]->getChannels() ; i++ ) {
    f2f2:	f8 01       	movw	r30, r16
    f2f4:	ee 0f       	add	r30, r30
    f2f6:	ff 1f       	adc	r31, r31
    f2f8:	e9 50       	subi	r30, 0x09	; 9
    f2fa:	fd 4e       	sbci	r31, 0xED	; 237
	uint8_t getCurrentDirection(uint8_t ch) { return currentDirection[ch-1]; }
	uint8_t getDefaultDirection(uint8_t ch) { return defaultDirection[ch-1]; }
	PCInterrupts* getWheelEncoder(uint8_t ch) { return wheelEncoder[ch-1]; }
	CounterInterruptService* getWheelEncoderService(uint8_t ch) { return wheelEncoderService[ch-1]; }
	void setChannels(uint8_t ch) { channels = ch; }
	uint8_t getChannels(void) { return channels; }
    f2fc:	01 90       	ld	r0, Z+
    f2fe:	f0 81       	ld	r31, Z
    f300:	e0 2d       	mov	r30, r0
    f302:	82 81       	ldd	r24, Z+2	; 0x02
    f304:	88 23       	and	r24, r24
    f306:	09 f4       	brne	.+2      	; 0xf30a <_Z12processMCodei+0x6d24>
    f308:	62 c0       	rjmp	.+196    	; 0xf3ce <_Z12processMCodei+0x6de8>
    f30a:	e1 2c       	mov	r14, r1
    f30c:	f1 2c       	mov	r15, r1
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    f30e:	0f 2e       	mov	r0, r31
    f310:	f8 e5       	ldi	r31, 0x58	; 88
    f312:	cf 2e       	mov	r12, r31
    f314:	fa e0       	ldi	r31, 0x0A	; 10
    f316:	df 2e       	mov	r13, r31
    f318:	f0 2d       	mov	r31, r0
    f31a:	e8 e0       	ldi	r30, 0x08	; 8
    f31c:	fa e0       	ldi	r31, 0x0A	; 10
    f31e:	8e 2e       	mov	r8, r30
    f320:	9f 2e       	mov	r9, r31
					SERIAL_PGM("Motor Channel:");
					SERIAL_PORT.println(i+1);
					motorControl[motorController]->getDriverInfo(i+1, outbuffer);
    f322:	00 0f       	add	r16, r16
    f324:	11 1f       	adc	r17, r17
    f326:	09 50       	subi	r16, 0x09	; 9
    f328:	1d 4e       	sbci	r17, 0xED	; 237
    f32a:	f6 01       	movw	r30, r12
    f32c:	64 91       	lpm	r22, Z
	while(ch)
    f32e:	66 23       	and	r22, r22
    f330:	b9 f0       	breq	.+46     	; 0xf360 <_Z12processMCodei+0x6d7a>
    f332:	0f 2e       	mov	r0, r31
    f334:	f8 e5       	ldi	r31, 0x58	; 88
    f336:	af 2e       	mov	r10, r31
    f338:	fa e0       	ldi	r31, 0x0A	; 10
    f33a:	bf 2e       	mov	r11, r31
    f33c:	f0 2d       	mov	r31, r0
    f33e:	a8 e0       	ldi	r26, 0x08	; 8
    f340:	ba e0       	ldi	r27, 0x0A	; 10
    f342:	ed 91       	ld	r30, X+
    f344:	fc 91       	ld	r31, X
    f346:	01 90       	ld	r0, Z+
    f348:	f0 81       	ld	r31, Z
    f34a:	e0 2d       	mov	r30, r0
    f34c:	88 2d       	mov	r24, r8
    f34e:	99 2d       	mov	r25, r9
    f350:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    f352:	bf ef       	ldi	r27, 0xFF	; 255
    f354:	ab 1a       	sub	r10, r27
    f356:	bb 0a       	sbc	r11, r27
    f358:	f5 01       	movw	r30, r10
    f35a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    f35c:	61 11       	cpse	r22, r1
    f35e:	ef cf       	rjmp	.-34     	; 0xf33e <_Z12processMCodei+0x6d58>
				}
		} else {
			if( motorControl[motorController] && motorControl[motorController]->isConnected() ) {
				for(int i = 0; i < motorControl[motorController]->getChannels() ; i++ ) {
					SERIAL_PGM("Motor Channel:");
					SERIAL_PORT.println(i+1);
    f360:	ff ef       	ldi	r31, 0xFF	; 255
    f362:	ef 1a       	sub	r14, r31
    f364:	ff 0a       	sbc	r15, r31
    f366:	4a e0       	ldi	r20, 0x0A	; 10
    f368:	50 e0       	ldi	r21, 0x00	; 0
    f36a:	b7 01       	movw	r22, r14
    f36c:	88 e0       	ldi	r24, 0x08	; 8
    f36e:	9a e0       	ldi	r25, 0x0A	; 10
    f370:	0e 94 ab 8a 	call	0x11556	; 0x11556 <_ZN5Print7printlnEii>
					motorControl[motorController]->getDriverInfo(i+1, outbuffer);
    f374:	d8 01       	movw	r26, r16
    f376:	8d 91       	ld	r24, X+
    f378:	9c 91       	ld	r25, X
    f37a:	dc 01       	movw	r26, r24
    f37c:	ed 91       	ld	r30, X+
    f37e:	fc 91       	ld	r31, X
    f380:	02 84       	ldd	r0, Z+10	; 0x0a
    f382:	f3 85       	ldd	r31, Z+11	; 0x0b
    f384:	e0 2d       	mov	r30, r0
    f386:	4b e7       	ldi	r20, 0x7B	; 123
    f388:	54 e1       	ldi	r21, 0x14	; 20
    f38a:	6e 2d       	mov	r22, r14
    f38c:	19 95       	eicall
					//SERIAL_PORT.println(outbuffer);
					char* buf = outbuffer;
					while(*buf){
    f38e:	60 91 7b 14 	lds	r22, 0x147B	; 0x80147b <_ZL9outbuffer>
    f392:	66 23       	and	r22, r22
    f394:	79 f0       	breq	.+30     	; 0xf3b4 <_Z12processMCodei+0x6dce>
    f396:	0f 2e       	mov	r0, r31
    f398:	fc e7       	ldi	r31, 0x7C	; 124
    f39a:	af 2e       	mov	r10, r31
    f39c:	f4 e1       	ldi	r31, 0x14	; 20
    f39e:	bf 2e       	mov	r11, r31
    f3a0:	f0 2d       	mov	r31, r0
						 Serial.print(*buf);
    f3a2:	88 e0       	ldi	r24, 0x08	; 8
    f3a4:	9a e0       	ldi	r25, 0x0A	; 10
    f3a6:	0e 94 ed 89 	call	0x113da	; 0x113da <_ZN5Print5printEc>
					SERIAL_PGM("Motor Channel:");
					SERIAL_PORT.println(i+1);
					motorControl[motorController]->getDriverInfo(i+1, outbuffer);
					//SERIAL_PORT.println(outbuffer);
					char* buf = outbuffer;
					while(*buf){
    f3aa:	f5 01       	movw	r30, r10
    f3ac:	61 91       	ld	r22, Z+
    f3ae:	5f 01       	movw	r10, r30
    f3b0:	61 11       	cpse	r22, r1
    f3b2:	f7 cf       	rjmp	.-18     	; 0xf3a2 <_Z12processMCodei+0x6dbc>
						 Serial.print(*buf);
						 buf++;
					}
					Serial.println();
    f3b4:	88 e0       	ldi	r24, 0x08	; 8
    f3b6:	9a e0       	ldi	r25, 0x0A	; 10
    f3b8:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    f3bc:	d8 01       	movw	r26, r16
    f3be:	ed 91       	ld	r30, X+
    f3c0:	fc 91       	ld	r31, X
						Serial.println();
					}
				}
		} else {
			if( motorControl[motorController] && motorControl[motorController]->isConnected() ) {
				for(int i = 0; i < motorControl[motorController]->getChannels() ; i++ ) {
    f3c2:	82 81       	ldd	r24, Z+2	; 0x02
    f3c4:	90 e0       	ldi	r25, 0x00	; 0
    f3c6:	e8 16       	cp	r14, r24
    f3c8:	f9 06       	cpc	r15, r25
    f3ca:	0c f4       	brge	.+2      	; 0xf3ce <_Z12processMCodei+0x6de8>
    f3cc:	ae cf       	rjmp	.-164    	; 0xf32a <_Z12processMCodei+0x6d44>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    f3ce:	e6 e5       	ldi	r30, 0x56	; 86
    f3d0:	fa e0       	ldi	r31, 0x0A	; 10
    f3d2:	64 91       	lpm	r22, Z
	while(ch)
    f3d4:	66 23       	and	r22, r22
    f3d6:	a1 f0       	breq	.+40     	; 0xf400 <_Z12processMCodei+0x6e1a>
    f3d8:	08 e0       	ldi	r16, 0x08	; 8
    f3da:	1a e0       	ldi	r17, 0x0A	; 10
    f3dc:	fa 83       	std	Y+2, r31	; 0x02
    f3de:	e9 83       	std	Y+1, r30	; 0x01
    f3e0:	d8 01       	movw	r26, r16
    f3e2:	ed 91       	ld	r30, X+
    f3e4:	fc 91       	ld	r31, X
    f3e6:	01 90       	ld	r0, Z+
    f3e8:	f0 81       	ld	r31, Z
    f3ea:	e0 2d       	mov	r30, r0
    f3ec:	c8 01       	movw	r24, r16
    f3ee:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    f3f0:	e9 81       	ldd	r30, Y+1	; 0x01
    f3f2:	fa 81       	ldd	r31, Y+2	; 0x02
    f3f4:	31 96       	adiw	r30, 0x01	; 1
    f3f6:	fa 83       	std	Y+2, r31	; 0x02
    f3f8:	e9 83       	std	Y+1, r30	; 0x01
    f3fa:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    f3fc:	61 11       	cpse	r22, r1
    f3fe:	f0 cf       	rjmp	.-32     	; 0xf3e0 <_Z12processMCodei+0x6dfa>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    f400:	e5 e4       	ldi	r30, 0x45	; 69
    f402:	fa e0       	ldi	r31, 0x0A	; 10
    f404:	64 91       	lpm	r22, Z
	while(ch)
    f406:	66 23       	and	r22, r22
    f408:	a1 f0       	breq	.+40     	; 0xf432 <_Z12processMCodei+0x6e4c>
    f40a:	08 e0       	ldi	r16, 0x08	; 8
    f40c:	1a e0       	ldi	r17, 0x0A	; 10
    f40e:	fa 83       	std	Y+2, r31	; 0x02
    f410:	e9 83       	std	Y+1, r30	; 0x01
    f412:	d8 01       	movw	r26, r16
    f414:	ed 91       	ld	r30, X+
    f416:	fc 91       	ld	r31, X
    f418:	01 90       	ld	r0, Z+
    f41a:	f0 81       	ld	r31, Z
    f41c:	e0 2d       	mov	r30, r0
    f41e:	c8 01       	movw	r24, r16
    f420:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    f422:	e9 81       	ldd	r30, Y+1	; 0x01
    f424:	fa 81       	ldd	r31, Y+2	; 0x02
    f426:	31 96       	adiw	r30, 0x01	; 1
    f428:	fa 83       	std	Y+2, r31	; 0x02
    f42a:	e9 83       	std	Y+1, r30	; 0x01
    f42c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    f42e:	61 11       	cpse	r22, r1
    f430:	f0 cf       	rjmp	.-32     	; 0xf412 <_Z12processMCodei+0x6e2c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    f432:	e2 e4       	ldi	r30, 0x42	; 66
    f434:	fa e0       	ldi	r31, 0x0A	; 10
    f436:	64 91       	lpm	r22, Z
	while(ch)
    f438:	66 23       	and	r22, r22
    f43a:	a1 f0       	breq	.+40     	; 0xf464 <_Z12processMCodei+0x6e7e>
    f43c:	08 e0       	ldi	r16, 0x08	; 8
    f43e:	1a e0       	ldi	r17, 0x0A	; 10
    f440:	fa 83       	std	Y+2, r31	; 0x02
    f442:	e9 83       	std	Y+1, r30	; 0x01
    f444:	d8 01       	movw	r26, r16
    f446:	ed 91       	ld	r30, X+
    f448:	fc 91       	ld	r31, X
    f44a:	01 90       	ld	r0, Z+
    f44c:	f0 81       	ld	r31, Z
    f44e:	e0 2d       	mov	r30, r0
    f450:	c8 01       	movw	r24, r16
    f452:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    f454:	e9 81       	ldd	r30, Y+1	; 0x01
    f456:	fa 81       	ldd	r31, Y+2	; 0x02
    f458:	31 96       	adiw	r30, 0x01	; 1
    f45a:	fa 83       	std	Y+2, r31	; 0x02
    f45c:	e9 83       	std	Y+1, r30	; 0x01
    f45e:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    f460:	61 11       	cpse	r22, r1
    f462:	f0 cf       	rjmp	.-32     	; 0xf444 <_Z12processMCodei+0x6e5e>
				}
			}
		} // code_seen('X')
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(controllerStatusHdr);
		SERIAL_PGMLN(MSG_TERMINATE);
    f464:	88 e0       	ldi	r24, 0x08	; 8
    f466:	9a e0       	ldi	r25, 0x0A	; 10
    f468:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		SERIAL_PORT.flush();
    f46c:	88 e0       	ldi	r24, 0x08	; 8
    f46e:	9a e0       	ldi	r25, 0x0A	; 10
    f470:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
		break;	
    f474:	42 c5       	rjmp	.+2692   	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		
	case 799: // M799 [Z<controller>][X] Reset controller, if no argument, reset all. If X, slot is PWM
		if (code_seen('Z')) {
    f476:	8a e5       	ldi	r24, 0x5A	; 90
    f478:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    f47c:	88 23       	and	r24, r24
    f47e:	09 f4       	brne	.+2      	; 0xf482 <_Z12processMCodei+0x6e9c>
    f480:	dc c0       	rjmp	.+440    	; 0xf63a <_Z12processMCodei+0x7054>
			motorController = code_value();
    f482:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    f486:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    f48a:	6b 01       	movw	r12, r22
    f48c:	7c 01       	movw	r14, r24
			if(code_seen('X')) {
    f48e:	88 e5       	ldi	r24, 0x58	; 88
    f490:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    f494:	88 23       	and	r24, r24
    f496:	09 f4       	brne	.+2      	; 0xf49a <_Z12processMCodei+0x6eb4>
    f498:	68 c0       	rjmp	.+208    	; 0xf56a <_Z12processMCodei+0x6f84>
				if(pwmControl[motorController]) {
    f49a:	c6 01       	movw	r24, r12
    f49c:	88 0f       	add	r24, r24
    f49e:	99 1f       	adc	r25, r25
    f4a0:	fc 01       	movw	r30, r24
    f4a2:	ed 51       	subi	r30, 0x1D	; 29
    f4a4:	fd 4e       	sbci	r31, 0xED	; 237
    f4a6:	80 81       	ld	r24, Z
    f4a8:	91 81       	ldd	r25, Z+1	; 0x01
    f4aa:	00 97       	sbiw	r24, 0x00	; 0
    f4ac:	09 f4       	brne	.+2      	; 0xf4b0 <_Z12processMCodei+0x6eca>
    f4ae:	25 c5       	rjmp	.+2634   	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
					pwmControl[motorController]->commandEmergencyStop(799);
    f4b0:	dc 01       	movw	r26, r24
    f4b2:	ed 91       	ld	r30, X+
    f4b4:	fc 91       	ld	r31, X
    f4b6:	06 80       	ldd	r0, Z+6	; 0x06
    f4b8:	f7 81       	ldd	r31, Z+7	; 0x07
    f4ba:	e0 2d       	mov	r30, r0
    f4bc:	6f e1       	ldi	r22, 0x1F	; 31
    f4be:	73 e0       	ldi	r23, 0x03	; 3
    f4c0:	19 95       	eicall
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    f4c2:	e0 e4       	ldi	r30, 0x40	; 64
    f4c4:	fa e0       	ldi	r31, 0x0A	; 10
    f4c6:	64 91       	lpm	r22, Z
	while(ch)
    f4c8:	66 23       	and	r22, r22
    f4ca:	a1 f0       	breq	.+40     	; 0xf4f4 <_Z12processMCodei+0x6f0e>
    f4cc:	fa 83       	std	Y+2, r31	; 0x02
    f4ce:	e9 83       	std	Y+1, r30	; 0x01
    f4d0:	08 e0       	ldi	r16, 0x08	; 8
    f4d2:	1a e0       	ldi	r17, 0x0A	; 10
    f4d4:	d8 01       	movw	r26, r16
    f4d6:	ed 91       	ld	r30, X+
    f4d8:	fc 91       	ld	r31, X
    f4da:	01 90       	ld	r0, Z+
    f4dc:	f0 81       	ld	r31, Z
    f4de:	e0 2d       	mov	r30, r0
    f4e0:	c8 01       	movw	r24, r16
    f4e2:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    f4e4:	e9 81       	ldd	r30, Y+1	; 0x01
    f4e6:	fa 81       	ldd	r31, Y+2	; 0x02
    f4e8:	31 96       	adiw	r30, 0x01	; 1
    f4ea:	fa 83       	std	Y+2, r31	; 0x02
    f4ec:	e9 83       	std	Y+1, r30	; 0x01
    f4ee:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    f4f0:	61 11       	cpse	r22, r1
    f4f2:	f0 cf       	rjmp	.-32     	; 0xf4d4 <_Z12processMCodei+0x6eee>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    f4f4:	eb e3       	ldi	r30, 0x3B	; 59
    f4f6:	fa e0       	ldi	r31, 0x0A	; 10
    f4f8:	64 91       	lpm	r22, Z
	while(ch)
    f4fa:	66 23       	and	r22, r22
    f4fc:	a1 f0       	breq	.+40     	; 0xf526 <_Z12processMCodei+0x6f40>
    f4fe:	fa 83       	std	Y+2, r31	; 0x02
    f500:	e9 83       	std	Y+1, r30	; 0x01
    f502:	08 e0       	ldi	r16, 0x08	; 8
    f504:	1a e0       	ldi	r17, 0x0A	; 10
    f506:	d8 01       	movw	r26, r16
    f508:	ed 91       	ld	r30, X+
    f50a:	fc 91       	ld	r31, X
    f50c:	01 90       	ld	r0, Z+
    f50e:	f0 81       	ld	r31, Z
    f510:	e0 2d       	mov	r30, r0
    f512:	c8 01       	movw	r24, r16
    f514:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    f516:	e9 81       	ldd	r30, Y+1	; 0x01
    f518:	fa 81       	ldd	r31, Y+2	; 0x02
    f51a:	31 96       	adiw	r30, 0x01	; 1
    f51c:	fa 83       	std	Y+2, r31	; 0x02
    f51e:	e9 83       	std	Y+1, r30	; 0x01
    f520:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    f522:	61 11       	cpse	r22, r1
    f524:	f0 cf       	rjmp	.-32     	; 0xf506 <_Z12processMCodei+0x6f20>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    f526:	e8 e3       	ldi	r30, 0x38	; 56
    f528:	fa e0       	ldi	r31, 0x0A	; 10
    f52a:	64 91       	lpm	r22, Z
	while(ch)
    f52c:	66 23       	and	r22, r22
    f52e:	a1 f0       	breq	.+40     	; 0xf558 <_Z12processMCodei+0x6f72>
    f530:	fa 83       	std	Y+2, r31	; 0x02
    f532:	e9 83       	std	Y+1, r30	; 0x01
    f534:	08 e0       	ldi	r16, 0x08	; 8
    f536:	1a e0       	ldi	r17, 0x0A	; 10
    f538:	d8 01       	movw	r26, r16
    f53a:	ed 91       	ld	r30, X+
    f53c:	fc 91       	ld	r31, X
    f53e:	01 90       	ld	r0, Z+
    f540:	f0 81       	ld	r31, Z
    f542:	e0 2d       	mov	r30, r0
    f544:	c8 01       	movw	r24, r16
    f546:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    f548:	e9 81       	ldd	r30, Y+1	; 0x01
    f54a:	fa 81       	ldd	r31, Y+2	; 0x02
    f54c:	31 96       	adiw	r30, 0x01	; 1
    f54e:	fa 83       	std	Y+2, r31	; 0x02
    f550:	e9 83       	std	Y+1, r30	; 0x01
    f552:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    f554:	61 11       	cpse	r22, r1
    f556:	f0 cf       	rjmp	.-32     	; 0xf538 <_Z12processMCodei+0x6f52>
					SERIAL_PGM(MSG_BEGIN);
					SERIAL_PGM("M799");
					SERIAL_PGMLN(MSG_TERMINATE);
    f558:	88 e0       	ldi	r24, 0x08	; 8
    f55a:	9a e0       	ldi	r25, 0x0A	; 10
    f55c:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
					SERIAL_PORT.flush();
    f560:	88 e0       	ldi	r24, 0x08	; 8
    f562:	9a e0       	ldi	r25, 0x0A	; 10
    f564:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    f568:	c8 c4       	rjmp	.+2448   	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
				}
			} else {
				if(motorControl[motorController]) {
    f56a:	c6 01       	movw	r24, r12
    f56c:	88 0f       	add	r24, r24
    f56e:	99 1f       	adc	r25, r25
    f570:	fc 01       	movw	r30, r24
    f572:	e9 50       	subi	r30, 0x09	; 9
    f574:	fd 4e       	sbci	r31, 0xED	; 237
    f576:	80 81       	ld	r24, Z
    f578:	91 81       	ldd	r25, Z+1	; 0x01
    f57a:	00 97       	sbiw	r24, 0x00	; 0
    f57c:	09 f4       	brne	.+2      	; 0xf580 <_Z12processMCodei+0x6f9a>
    f57e:	bd c4       	rjmp	.+2426   	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
					motorControl[motorController]->commandEmergencyStop(799);
    f580:	dc 01       	movw	r26, r24
    f582:	ed 91       	ld	r30, X+
    f584:	fc 91       	ld	r31, X
    f586:	06 80       	ldd	r0, Z+6	; 0x06
    f588:	f7 81       	ldd	r31, Z+7	; 0x07
    f58a:	e0 2d       	mov	r30, r0
    f58c:	6f e1       	ldi	r22, 0x1F	; 31
    f58e:	73 e0       	ldi	r23, 0x03	; 3
    f590:	19 95       	eicall
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    f592:	e6 e3       	ldi	r30, 0x36	; 54
    f594:	fa e0       	ldi	r31, 0x0A	; 10
    f596:	64 91       	lpm	r22, Z
	while(ch)
    f598:	66 23       	and	r22, r22
    f59a:	a1 f0       	breq	.+40     	; 0xf5c4 <_Z12processMCodei+0x6fde>
    f59c:	fa 83       	std	Y+2, r31	; 0x02
    f59e:	e9 83       	std	Y+1, r30	; 0x01
    f5a0:	08 e0       	ldi	r16, 0x08	; 8
    f5a2:	1a e0       	ldi	r17, 0x0A	; 10
    f5a4:	d8 01       	movw	r26, r16
    f5a6:	ed 91       	ld	r30, X+
    f5a8:	fc 91       	ld	r31, X
    f5aa:	01 90       	ld	r0, Z+
    f5ac:	f0 81       	ld	r31, Z
    f5ae:	e0 2d       	mov	r30, r0
    f5b0:	c8 01       	movw	r24, r16
    f5b2:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    f5b4:	e9 81       	ldd	r30, Y+1	; 0x01
    f5b6:	fa 81       	ldd	r31, Y+2	; 0x02
    f5b8:	31 96       	adiw	r30, 0x01	; 1
    f5ba:	fa 83       	std	Y+2, r31	; 0x02
    f5bc:	e9 83       	std	Y+1, r30	; 0x01
    f5be:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    f5c0:	61 11       	cpse	r22, r1
    f5c2:	f0 cf       	rjmp	.-32     	; 0xf5a4 <_Z12processMCodei+0x6fbe>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    f5c4:	e1 e3       	ldi	r30, 0x31	; 49
    f5c6:	fa e0       	ldi	r31, 0x0A	; 10
    f5c8:	64 91       	lpm	r22, Z
	while(ch)
    f5ca:	66 23       	and	r22, r22
    f5cc:	a1 f0       	breq	.+40     	; 0xf5f6 <_Z12processMCodei+0x7010>
    f5ce:	fa 83       	std	Y+2, r31	; 0x02
    f5d0:	e9 83       	std	Y+1, r30	; 0x01
    f5d2:	08 e0       	ldi	r16, 0x08	; 8
    f5d4:	1a e0       	ldi	r17, 0x0A	; 10
    f5d6:	d8 01       	movw	r26, r16
    f5d8:	ed 91       	ld	r30, X+
    f5da:	fc 91       	ld	r31, X
    f5dc:	01 90       	ld	r0, Z+
    f5de:	f0 81       	ld	r31, Z
    f5e0:	e0 2d       	mov	r30, r0
    f5e2:	c8 01       	movw	r24, r16
    f5e4:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    f5e6:	e9 81       	ldd	r30, Y+1	; 0x01
    f5e8:	fa 81       	ldd	r31, Y+2	; 0x02
    f5ea:	31 96       	adiw	r30, 0x01	; 1
    f5ec:	fa 83       	std	Y+2, r31	; 0x02
    f5ee:	e9 83       	std	Y+1, r30	; 0x01
    f5f0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    f5f2:	61 11       	cpse	r22, r1
    f5f4:	f0 cf       	rjmp	.-32     	; 0xf5d6 <_Z12processMCodei+0x6ff0>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    f5f6:	ee e2       	ldi	r30, 0x2E	; 46
    f5f8:	fa e0       	ldi	r31, 0x0A	; 10
    f5fa:	64 91       	lpm	r22, Z
	while(ch)
    f5fc:	66 23       	and	r22, r22
    f5fe:	a1 f0       	breq	.+40     	; 0xf628 <_Z12processMCodei+0x7042>
    f600:	fa 83       	std	Y+2, r31	; 0x02
    f602:	e9 83       	std	Y+1, r30	; 0x01
    f604:	08 e0       	ldi	r16, 0x08	; 8
    f606:	1a e0       	ldi	r17, 0x0A	; 10
    f608:	d8 01       	movw	r26, r16
    f60a:	ed 91       	ld	r30, X+
    f60c:	fc 91       	ld	r31, X
    f60e:	01 90       	ld	r0, Z+
    f610:	f0 81       	ld	r31, Z
    f612:	e0 2d       	mov	r30, r0
    f614:	c8 01       	movw	r24, r16
    f616:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    f618:	e9 81       	ldd	r30, Y+1	; 0x01
    f61a:	fa 81       	ldd	r31, Y+2	; 0x02
    f61c:	31 96       	adiw	r30, 0x01	; 1
    f61e:	fa 83       	std	Y+2, r31	; 0x02
    f620:	e9 83       	std	Y+1, r30	; 0x01
    f622:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    f624:	61 11       	cpse	r22, r1
    f626:	f0 cf       	rjmp	.-32     	; 0xf608 <_Z12processMCodei+0x7022>
					SERIAL_PGM(MSG_BEGIN);
					SERIAL_PGM("M799");
					SERIAL_PGMLN(MSG_TERMINATE);
    f628:	88 e0       	ldi	r24, 0x08	; 8
    f62a:	9a e0       	ldi	r25, 0x0A	; 10
    f62c:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
					SERIAL_PORT.flush();
    f630:	88 e0       	ldi	r24, 0x08	; 8
    f632:	9a e0       	ldi	r25, 0x0A	; 10
    f634:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    f638:	60 c4       	rjmp	.+2240   	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
    f63a:	27 ef       	ldi	r18, 0xF7	; 247
    f63c:	32 e1       	ldi	r19, 0x12	; 18
    f63e:	3a 83       	std	Y+2, r19	; 0x02
    f640:	29 83       	std	Y+1, r18	; 0x01
    f642:	03 ee       	ldi	r16, 0xE3	; 227
    f644:	12 e1       	ldi	r17, 0x12	; 18
    f646:	0f 2e       	mov	r0, r31
    f648:	fb e0       	ldi	r31, 0x0B	; 11
    f64a:	ef 2e       	mov	r14, r31
    f64c:	f3 e1       	ldi	r31, 0x13	; 19
    f64e:	ff 2e       	mov	r15, r31
    f650:	f0 2d       	mov	r31, r0
				}
			}
		} else { // no slot defined, do them all if present
			for(int j = 0;j < 10; j++) {
				if(code_seen('X')) {
    f652:	88 e5       	ldi	r24, 0x58	; 88
    f654:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    f658:	88 23       	and	r24, r24
    f65a:	79 f0       	breq	.+30     	; 0xf67a <_Z12processMCodei+0x7094>
					if(pwmControl[j]) {
    f65c:	d8 01       	movw	r26, r16
    f65e:	8d 91       	ld	r24, X+
    f660:	9c 91       	ld	r25, X
    f662:	00 97       	sbiw	r24, 0x00	; 0
    f664:	c9 f0       	breq	.+50     	; 0xf698 <_Z12processMCodei+0x70b2>
						pwmControl[j]->commandEmergencyStop(-1);
    f666:	dc 01       	movw	r26, r24
    f668:	ed 91       	ld	r30, X+
    f66a:	fc 91       	ld	r31, X
    f66c:	06 80       	ldd	r0, Z+6	; 0x06
    f66e:	f7 81       	ldd	r31, Z+7	; 0x07
    f670:	e0 2d       	mov	r30, r0
    f672:	6f ef       	ldi	r22, 0xFF	; 255
    f674:	7f ef       	ldi	r23, 0xFF	; 255
    f676:	19 95       	eicall
    f678:	0f c0       	rjmp	.+30     	; 0xf698 <_Z12processMCodei+0x70b2>
					}
				} else {
					if(motorControl[j]) {
    f67a:	e9 81       	ldd	r30, Y+1	; 0x01
    f67c:	fa 81       	ldd	r31, Y+2	; 0x02
    f67e:	80 81       	ld	r24, Z
    f680:	91 81       	ldd	r25, Z+1	; 0x01
    f682:	00 97       	sbiw	r24, 0x00	; 0
    f684:	49 f0       	breq	.+18     	; 0xf698 <_Z12processMCodei+0x70b2>
						motorControl[j]->commandEmergencyStop(-1);
    f686:	dc 01       	movw	r26, r24
    f688:	ed 91       	ld	r30, X+
    f68a:	fc 91       	ld	r31, X
    f68c:	06 80       	ldd	r0, Z+6	; 0x06
    f68e:	f7 81       	ldd	r31, Z+7	; 0x07
    f690:	e0 2d       	mov	r30, r0
    f692:	6f ef       	ldi	r22, 0xFF	; 255
    f694:	7f ef       	ldi	r23, 0xFF	; 255
    f696:	19 95       	eicall
    f698:	e9 81       	ldd	r30, Y+1	; 0x01
    f69a:	fa 81       	ldd	r31, Y+2	; 0x02
    f69c:	32 96       	adiw	r30, 0x02	; 2
    f69e:	fa 83       	std	Y+2, r31	; 0x02
    f6a0:	e9 83       	std	Y+1, r30	; 0x01
    f6a2:	0e 5f       	subi	r16, 0xFE	; 254
    f6a4:	1f 4f       	sbci	r17, 0xFF	; 255
					SERIAL_PGMLN(MSG_TERMINATE);
					SERIAL_PORT.flush();
				}
			}
		} else { // no slot defined, do them all if present
			for(int j = 0;j < 10; j++) {
    f6a6:	ee 16       	cp	r14, r30
    f6a8:	ff 06       	cpc	r15, r31
    f6aa:	99 f6       	brne	.-90     	; 0xf652 <_Z12processMCodei+0x706c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    f6ac:	ec e2       	ldi	r30, 0x2C	; 44
    f6ae:	fa e0       	ldi	r31, 0x0A	; 10
    f6b0:	64 91       	lpm	r22, Z
	while(ch)
    f6b2:	66 23       	and	r22, r22
    f6b4:	a1 f0       	breq	.+40     	; 0xf6de <_Z12processMCodei+0x70f8>
    f6b6:	fa 83       	std	Y+2, r31	; 0x02
    f6b8:	e9 83       	std	Y+1, r30	; 0x01
    f6ba:	08 e0       	ldi	r16, 0x08	; 8
    f6bc:	1a e0       	ldi	r17, 0x0A	; 10
    f6be:	d8 01       	movw	r26, r16
    f6c0:	ed 91       	ld	r30, X+
    f6c2:	fc 91       	ld	r31, X
    f6c4:	01 90       	ld	r0, Z+
    f6c6:	f0 81       	ld	r31, Z
    f6c8:	e0 2d       	mov	r30, r0
    f6ca:	c8 01       	movw	r24, r16
    f6cc:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    f6ce:	e9 81       	ldd	r30, Y+1	; 0x01
    f6d0:	fa 81       	ldd	r31, Y+2	; 0x02
    f6d2:	31 96       	adiw	r30, 0x01	; 1
    f6d4:	fa 83       	std	Y+2, r31	; 0x02
    f6d6:	e9 83       	std	Y+1, r30	; 0x01
    f6d8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    f6da:	61 11       	cpse	r22, r1
    f6dc:	f0 cf       	rjmp	.-32     	; 0xf6be <_Z12processMCodei+0x70d8>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    f6de:	e7 e2       	ldi	r30, 0x27	; 39
    f6e0:	fa e0       	ldi	r31, 0x0A	; 10
    f6e2:	64 91       	lpm	r22, Z
	while(ch)
    f6e4:	66 23       	and	r22, r22
    f6e6:	a1 f0       	breq	.+40     	; 0xf710 <_Z12processMCodei+0x712a>
    f6e8:	fa 83       	std	Y+2, r31	; 0x02
    f6ea:	e9 83       	std	Y+1, r30	; 0x01
    f6ec:	08 e0       	ldi	r16, 0x08	; 8
    f6ee:	1a e0       	ldi	r17, 0x0A	; 10
    f6f0:	d8 01       	movw	r26, r16
    f6f2:	ed 91       	ld	r30, X+
    f6f4:	fc 91       	ld	r31, X
    f6f6:	01 90       	ld	r0, Z+
    f6f8:	f0 81       	ld	r31, Z
    f6fa:	e0 2d       	mov	r30, r0
    f6fc:	c8 01       	movw	r24, r16
    f6fe:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    f700:	e9 81       	ldd	r30, Y+1	; 0x01
    f702:	fa 81       	ldd	r31, Y+2	; 0x02
    f704:	31 96       	adiw	r30, 0x01	; 1
    f706:	fa 83       	std	Y+2, r31	; 0x02
    f708:	e9 83       	std	Y+1, r30	; 0x01
    f70a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    f70c:	61 11       	cpse	r22, r1
    f70e:	f0 cf       	rjmp	.-32     	; 0xf6f0 <_Z12processMCodei+0x710a>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    f710:	e4 e2       	ldi	r30, 0x24	; 36
    f712:	fa e0       	ldi	r31, 0x0A	; 10
    f714:	64 91       	lpm	r22, Z
	while(ch)
    f716:	66 23       	and	r22, r22
    f718:	a1 f0       	breq	.+40     	; 0xf742 <_Z12processMCodei+0x715c>
    f71a:	fa 83       	std	Y+2, r31	; 0x02
    f71c:	e9 83       	std	Y+1, r30	; 0x01
    f71e:	08 e0       	ldi	r16, 0x08	; 8
    f720:	1a e0       	ldi	r17, 0x0A	; 10
    f722:	d8 01       	movw	r26, r16
    f724:	ed 91       	ld	r30, X+
    f726:	fc 91       	ld	r31, X
    f728:	01 90       	ld	r0, Z+
    f72a:	f0 81       	ld	r31, Z
    f72c:	e0 2d       	mov	r30, r0
    f72e:	c8 01       	movw	r24, r16
    f730:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    f732:	e9 81       	ldd	r30, Y+1	; 0x01
    f734:	fa 81       	ldd	r31, Y+2	; 0x02
    f736:	31 96       	adiw	r30, 0x01	; 1
    f738:	fa 83       	std	Y+2, r31	; 0x02
    f73a:	e9 83       	std	Y+1, r30	; 0x01
    f73c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    f73e:	61 11       	cpse	r22, r1
    f740:	f0 cf       	rjmp	.-32     	; 0xf722 <_Z12processMCodei+0x713c>
					}
				}
			}
			SERIAL_PGM(MSG_BEGIN);
			SERIAL_PGM("M799");
			SERIAL_PGMLN(MSG_TERMINATE);
    f742:	88 e0       	ldi	r24, 0x08	; 8
    f744:	9a e0       	ldi	r25, 0x0A	; 10
    f746:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
			SERIAL_PORT.flush();
    f74a:	88 e0       	ldi	r24, 0x08	; 8
    f74c:	9a e0       	ldi	r25, 0x0A	; 10
    f74e:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
    f752:	d3 c3       	rjmp	.+1958   	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		break;		
		
			
	case 802: // Acquire analog pin data M802 Pnn Sxxx Mxxx P=Pin number, S=number readings, M=microseconds per reading. X - pullup.
		// Publish <dataset> 1 - pin, 2 - reading
		if( code_seen('P')) {
    f754:	80 e5       	ldi	r24, 0x50	; 80
    f756:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    f75a:	88 23       	and	r24, r24
    f75c:	09 f4       	brne	.+2      	; 0xf760 <_Z12processMCodei+0x717a>
    f75e:	af c0       	rjmp	.+350    	; 0xf8be <_Z12processMCodei+0x72d8>
			apin = new Analog((uint8_t)code_value());
    f760:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    f764:	6b 01       	movw	r12, r22
    f766:	7c 01       	movw	r14, r24
    f768:	86 e0       	ldi	r24, 0x06	; 6
    f76a:	90 e0       	ldi	r25, 0x00	; 0
    f76c:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    f770:	9a 83       	std	Y+2, r25	; 0x02
    f772:	89 83       	std	Y+1, r24	; 0x01

class Digital {
	public:
	uint8_t pin;
	uint8_t mode = INPUT; // default
	Digital(uint8_t spin) {
    f774:	dc 01       	movw	r26, r24
    f776:	15 96       	adiw	r26, 0x05	; 5
    f778:	1c 92       	st	X, r1
		this->pin = spin;
    f77a:	c7 01       	movw	r24, r14
    f77c:	b6 01       	movw	r22, r12
    f77e:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    f782:	e9 81       	ldd	r30, Y+1	; 0x01
    f784:	fa 81       	ldd	r31, Y+2	; 0x02
    f786:	64 83       	std	Z+4, r22	; 0x04
    f788:	86 ec       	ldi	r24, 0xC6	; 198
    f78a:	99 e0       	ldi	r25, 0x09	; 9
    f78c:	91 83       	std	Z+1, r25	; 0x01
    f78e:	80 83       	st	Z, r24
    f790:	12 82       	std	Z+2, r1	; 0x02
    f792:	81 e0       	ldi	r24, 0x01	; 1
    f794:	83 83       	std	Z+3, r24	; 0x03
    f796:	ea e7       	ldi	r30, 0x7A	; 122
    f798:	f0 e0       	ldi	r31, 0x00	; 0
    f79a:	80 81       	ld	r24, Z
    f79c:	80 68       	ori	r24, 0x80	; 128
    f79e:	80 83       	st	Z, r24
    f7a0:	29 81       	ldd	r18, Y+1	; 0x01
    f7a2:	3a 81       	ldd	r19, Y+2	; 0x02
    f7a4:	30 93 6f 14 	sts	0x146F, r19	; 0x80146f <apin+0x1>
    f7a8:	20 93 6e 14 	sts	0x146E, r18	; 0x80146e <apin>
			if( code_seen('X') ) {
    f7ac:	88 e5       	ldi	r24, 0x58	; 88
    f7ae:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    f7b2:	88 23       	and	r24, r24
    f7b4:	09 f4       	brne	.+2      	; 0xf7b8 <_Z12processMCodei+0x71d2>
    f7b6:	42 c0       	rjmp	.+132    	; 0xf83c <_Z12processMCodei+0x7256>
				apin->pinMode(INPUT_PULLUP);
    f7b8:	e0 91 6e 14 	lds	r30, 0x146E	; 0x80146e <apin>
    f7bc:	f0 91 6f 14 	lds	r31, 0x146F	; 0x80146f <apin+0x1>
    f7c0:	a0 81       	ld	r26, Z
    f7c2:	b1 81       	ldd	r27, Z+1	; 0x01
    f7c4:	16 97       	sbiw	r26, 0x06	; 6
    f7c6:	8d 91       	ld	r24, X+
    f7c8:	9c 91       	ld	r25, X
    f7ca:	e8 0f       	add	r30, r24
    f7cc:	f9 1f       	adc	r31, r25
	}
	
void setPin(uint8_t spin) { this->pin = spin; }
	
void pinMode(uint8_t pmode) {
	this->mode = pmode;
    f7ce:	82 e0       	ldi	r24, 0x02	; 2
    f7d0:	81 83       	std	Z+1, r24	; 0x01
	uint8_t bit = digitalPinToBitMask(this->pin);
    f7d2:	80 81       	ld	r24, Z
    f7d4:	90 e0       	ldi	r25, 0x00	; 0
    f7d6:	fc 01       	movw	r30, r24
    f7d8:	ef 52       	subi	r30, 0x2F	; 47
    f7da:	fd 4e       	sbci	r31, 0xED	; 237
    f7dc:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(this->pin);
    f7de:	fc 01       	movw	r30, r24
    f7e0:	e9 5e       	subi	r30, 0xE9	; 233
    f7e2:	fc 4e       	sbci	r31, 0xEC	; 236
    f7e4:	84 91       	lpm	r24, Z
	volatile uint16_t *reg, *out;

	if (port == NOT_A_PIN) return;
    f7e6:	88 23       	and	r24, r24
    f7e8:	09 f4       	brne	.+2      	; 0xf7ec <_Z12processMCodei+0x7206>
    f7ea:	69 c0       	rjmp	.+210    	; 0xf8be <_Z12processMCodei+0x72d8>

	reg = portModeRegister(port);
    f7ec:	90 e0       	ldi	r25, 0x00	; 0
    f7ee:	88 0f       	add	r24, r24
    f7f0:	99 1f       	adc	r25, r25
    f7f2:	fc 01       	movw	r30, r24
    f7f4:	ef 56       	subi	r30, 0x6F	; 111
    f7f6:	fc 4e       	sbci	r31, 0xEC	; 236
    f7f8:	45 91       	lpm	r20, Z+
    f7fa:	54 91       	lpm	r21, Z
    f7fc:	5a 83       	std	Y+2, r21	; 0x02
    f7fe:	49 83       	std	Y+1, r20	; 0x01
	out = portOutputRegister(port);
    f800:	89 58       	subi	r24, 0x89	; 137
    f802:	9c 4e       	sbci	r25, 0xEC	; 236
    f804:	fc 01       	movw	r30, r24
    f806:	a5 91       	lpm	r26, Z+
    f808:	b4 91       	lpm	r27, Z
                cli();
		*reg &= ~bit;
		*out &= ~bit;
		SREG = oldSREG;
	} else if (this->mode == INPUT_PULLUP) {
		uint8_t oldSREG = SREG;
    f80a:	6f b7       	in	r22, 0x3f	; 63
                cli();
    f80c:	f8 94       	cli
		*reg &= ~bit;
    f80e:	e9 81       	ldd	r30, Y+1	; 0x01
    f810:	fa 81       	ldd	r31, Y+2	; 0x02
    f812:	40 81       	ld	r20, Z
    f814:	51 81       	ldd	r21, Z+1	; 0x01
    f816:	82 2f       	mov	r24, r18
    f818:	90 e0       	ldi	r25, 0x00	; 0
    f81a:	9c 01       	movw	r18, r24
    f81c:	20 95       	com	r18
    f81e:	30 95       	com	r19
    f820:	24 23       	and	r18, r20
    f822:	35 23       	and	r19, r21
    f824:	31 83       	std	Z+1, r19	; 0x01
    f826:	20 83       	st	Z, r18
		*out |= bit;
    f828:	2d 91       	ld	r18, X+
    f82a:	3c 91       	ld	r19, X
    f82c:	11 97       	sbiw	r26, 0x01	; 1
    f82e:	82 2b       	or	r24, r18
    f830:	93 2b       	or	r25, r19
    f832:	11 96       	adiw	r26, 0x01	; 1
    f834:	9c 93       	st	X, r25
    f836:	8e 93       	st	-X, r24
		SREG = oldSREG;
    f838:	6f bf       	out	0x3f, r22	; 63
    f83a:	41 c0       	rjmp	.+130    	; 0xf8be <_Z12processMCodei+0x72d8>
			} else {
				apin->pinMode(INPUT);
    f83c:	e0 91 6e 14 	lds	r30, 0x146E	; 0x80146e <apin>
    f840:	f0 91 6f 14 	lds	r31, 0x146F	; 0x80146f <apin+0x1>
    f844:	a0 81       	ld	r26, Z
    f846:	b1 81       	ldd	r27, Z+1	; 0x01
    f848:	16 97       	sbiw	r26, 0x06	; 6
    f84a:	8d 91       	ld	r24, X+
    f84c:	9c 91       	ld	r25, X
    f84e:	e8 0f       	add	r30, r24
    f850:	f9 1f       	adc	r31, r25
	}
	
void setPin(uint8_t spin) { this->pin = spin; }
	
void pinMode(uint8_t pmode) {
	this->mode = pmode;
    f852:	11 82       	std	Z+1, r1	; 0x01
	uint8_t bit = digitalPinToBitMask(this->pin);
    f854:	80 81       	ld	r24, Z
    f856:	90 e0       	ldi	r25, 0x00	; 0
    f858:	fc 01       	movw	r30, r24
    f85a:	ef 52       	subi	r30, 0x2F	; 47
    f85c:	fd 4e       	sbci	r31, 0xED	; 237
    f85e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(this->pin);
    f860:	fc 01       	movw	r30, r24
    f862:	e9 5e       	subi	r30, 0xE9	; 233
    f864:	fc 4e       	sbci	r31, 0xEC	; 236
    f866:	84 91       	lpm	r24, Z
	volatile uint16_t *reg, *out;

	if (port == NOT_A_PIN) return;
    f868:	88 23       	and	r24, r24
    f86a:	49 f1       	breq	.+82     	; 0xf8be <_Z12processMCodei+0x72d8>

	reg = portModeRegister(port);
    f86c:	90 e0       	ldi	r25, 0x00	; 0
    f86e:	88 0f       	add	r24, r24
    f870:	99 1f       	adc	r25, r25
    f872:	fc 01       	movw	r30, r24
    f874:	ef 56       	subi	r30, 0x6F	; 111
    f876:	fc 4e       	sbci	r31, 0xEC	; 236
    f878:	a5 91       	lpm	r26, Z+
    f87a:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    f87c:	89 58       	subi	r24, 0x89	; 137
    f87e:	9c 4e       	sbci	r25, 0xEC	; 236
    f880:	fc 01       	movw	r30, r24
    f882:	45 91       	lpm	r20, Z+
    f884:	54 91       	lpm	r21, Z
    f886:	5a 83       	std	Y+2, r21	; 0x02
    f888:	49 83       	std	Y+1, r20	; 0x01

	if (this->mode == INPUT) { 
		uint8_t oldSREG = SREG;
    f88a:	6f b7       	in	r22, 0x3f	; 63
                cli();
    f88c:	f8 94       	cli
		*reg &= ~bit;
    f88e:	4d 91       	ld	r20, X+
    f890:	5c 91       	ld	r21, X
    f892:	11 97       	sbiw	r26, 0x01	; 1
    f894:	82 2f       	mov	r24, r18
    f896:	90 e0       	ldi	r25, 0x00	; 0
    f898:	80 95       	com	r24
    f89a:	90 95       	com	r25
    f89c:	9a 01       	movw	r18, r20
    f89e:	28 23       	and	r18, r24
    f8a0:	39 23       	and	r19, r25
    f8a2:	11 96       	adiw	r26, 0x01	; 1
    f8a4:	3c 93       	st	X, r19
    f8a6:	2e 93       	st	-X, r18
		*out &= ~bit;
    f8a8:	a9 81       	ldd	r26, Y+1	; 0x01
    f8aa:	ba 81       	ldd	r27, Y+2	; 0x02
    f8ac:	2d 91       	ld	r18, X+
    f8ae:	3c 91       	ld	r19, X
    f8b0:	11 97       	sbiw	r26, 0x01	; 1
    f8b2:	82 23       	and	r24, r18
    f8b4:	93 23       	and	r25, r19
    f8b6:	11 96       	adiw	r26, 0x01	; 1
    f8b8:	9c 93       	st	X, r25
    f8ba:	8e 93       	st	-X, r24
		SREG = oldSREG;
    f8bc:	6f bf       	out	0x3f, r22	; 63
			}
		}
		nread = 0;
    f8be:	10 92 69 14 	sts	0x1469, r1	; 0x801469 <nread+0x1>
    f8c2:	10 92 68 14 	sts	0x1468, r1	; 0x801468 <nread>
		if( code_seen('S') ) {
    f8c6:	83 e5       	ldi	r24, 0x53	; 83
    f8c8:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    f8cc:	88 23       	and	r24, r24
    f8ce:	41 f0       	breq	.+16     	; 0xf8e0 <_Z12processMCodei+0x72fa>
			nread = code_value();
    f8d0:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    f8d4:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
    f8d8:	70 93 69 14 	sts	0x1469, r23	; 0x801469 <nread+0x1>
    f8dc:	60 93 68 14 	sts	0x1468, r22	; 0x801468 <nread>
		}
		micros = 0;
    f8e0:	10 92 64 14 	sts	0x1464, r1	; 0x801464 <micros>
    f8e4:	10 92 65 14 	sts	0x1465, r1	; 0x801465 <micros+0x1>
    f8e8:	10 92 66 14 	sts	0x1466, r1	; 0x801466 <micros+0x2>
    f8ec:	10 92 67 14 	sts	0x1467, r1	; 0x801467 <micros+0x3>
		if( code_seen('M')) {
    f8f0:	8d e4       	ldi	r24, 0x4D	; 77
    f8f2:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
    f8f6:	88 23       	and	r24, r24
    f8f8:	61 f0       	breq	.+24     	; 0xf912 <_Z12processMCodei+0x732c>
			micros = (uint32_t)code_value();
    f8fa:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
    f8fe:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
    f902:	60 93 64 14 	sts	0x1464, r22	; 0x801464 <micros>
    f906:	70 93 65 14 	sts	0x1465, r23	; 0x801465 <micros+0x1>
    f90a:	80 93 66 14 	sts	0x1466, r24	; 0x801466 <micros+0x2>
    f90e:	90 93 67 14 	sts	0x1467, r25	; 0x801467 <micros+0x3>
		}
		values = new int(nread);
    f912:	82 e0       	ldi	r24, 0x02	; 2
    f914:	90 e0       	ldi	r25, 0x00	; 0
    f916:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    f91a:	20 91 68 14 	lds	r18, 0x1468	; 0x801468 <nread>
    f91e:	30 91 69 14 	lds	r19, 0x1469	; 0x801469 <nread+0x1>
    f922:	fc 01       	movw	r30, r24
    f924:	31 83       	std	Z+1, r19	; 0x01
    f926:	20 83       	st	Z, r18
    f928:	90 93 63 14 	sts	0x1463, r25	; 0x801463 <values+0x1>
    f92c:	80 93 62 14 	sts	0x1462, r24	; 0x801462 <values>
		for(int i = 0; i < nread; i++) {
    f930:	12 16       	cp	r1, r18
    f932:	13 06       	cpc	r1, r19
    f934:	0c f0       	brlt	.+2      	; 0xf938 <_Z12processMCodei+0x7352>
    f936:	8c c0       	rjmp	.+280    	; 0xfa50 <_Z12processMCodei+0x746a>
    f938:	20 e0       	ldi	r18, 0x00	; 0
    f93a:	30 e0       	ldi	r19, 0x00	; 0
{
	uint8_t low, high;
	if (pin >= 54 && pin <= 69) 
		analog_channel = pin - 54; // allow for pin numbers
	else
		return -1; // can analog read a digital pin
    f93c:	cc 24       	eor	r12, r12
    f93e:	ca 94       	dec	r12
    f940:	dd 24       	eor	r13, r13
    f942:	da 94       	dec	r13

	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((analog_channel >> 3) & 0x01) << MUX5);
    f944:	0f 2e       	mov	r0, r31
    f946:	fb e7       	ldi	r31, 0x7B	; 123
    f948:	4f 2e       	mov	r4, r31
    f94a:	51 2c       	mov	r5, r1
    f94c:	f0 2d       	mov	r31, r0
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
	ADMUX = (analog_reference << 6) | (analog_channel & 0x07);
    f94e:	0f 2e       	mov	r0, r31
    f950:	fc e7       	ldi	r31, 0x7C	; 124
    f952:	ef 2e       	mov	r14, r31
    f954:	f1 2c       	mov	r15, r1
    f956:	f0 2d       	mov	r31, r0

	// without a delay, we seem to read from the wrong channel
	//_delay_ms(1);

	// start the conversion
	sbi(ADCSRA, ADSC);
    f958:	ea e7       	ldi	r30, 0x7A	; 122
    f95a:	f0 e0       	ldi	r31, 0x00	; 0

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    f95c:	08 e7       	ldi	r16, 0x78	; 120
    f95e:	10 e0       	ldi	r17, 0x00	; 0
	high = ADCH;
    f960:	0f 2e       	mov	r0, r31
    f962:	f9 e7       	ldi	r31, 0x79	; 121
    f964:	6f 2e       	mov	r6, r31
    f966:	71 2c       	mov	r7, r1
    f968:	f0 2d       	mov	r31, r0
			*(values+i) = apin->analogRead();
    f96a:	a0 90 62 14 	lds	r10, 0x1462	; 0x801462 <values>
    f96e:	b0 90 63 14 	lds	r11, 0x1463	; 0x801463 <values+0x1>
    f972:	c9 01       	movw	r24, r18
    f974:	88 0f       	add	r24, r24
    f976:	99 1f       	adc	r25, r25
    f978:	a8 0e       	add	r10, r24
    f97a:	b9 1e       	adc	r11, r25
    f97c:	40 91 6e 14 	lds	r20, 0x146E	; 0x80146e <apin>
    f980:	50 91 6f 14 	lds	r21, 0x146F	; 0x80146f <apin+0x1>
* Compute the analog channel from the given pin, but maintain the pin number as its digital designation.
*/
int analogRead()
{
	uint8_t low, high;
	if (pin >= 54 && pin <= 69) 
    f984:	da 01       	movw	r26, r20
    f986:	8d 91       	ld	r24, X+
    f988:	9c 91       	ld	r25, X
    f98a:	06 97       	sbiw	r24, 0x06	; 6
    f98c:	dc 01       	movw	r26, r24
    f98e:	8d 91       	ld	r24, X+
    f990:	9c 91       	ld	r25, X
    f992:	84 0f       	add	r24, r20
    f994:	95 1f       	adc	r25, r21
    f996:	dc 01       	movw	r26, r24
    f998:	8c 91       	ld	r24, X
    f99a:	86 53       	subi	r24, 0x36	; 54
    f99c:	80 31       	cpi	r24, 0x10	; 16
    f99e:	20 f5       	brcc	.+72     	; 0xf9e8 <_Z12processMCodei+0x7402>
		analog_channel = pin - 54; // allow for pin numbers
    f9a0:	da 01       	movw	r26, r20
    f9a2:	12 96       	adiw	r26, 0x02	; 2
    f9a4:	8c 93       	st	X, r24
	else
		return -1; // can analog read a digital pin

	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((analog_channel >> 3) & 0x01) << MUX5);
    f9a6:	d2 01       	movw	r26, r4
    f9a8:	9c 91       	ld	r25, X
    f9aa:	97 7f       	andi	r25, 0xF7	; 247
    f9ac:	88 70       	andi	r24, 0x08	; 8
    f9ae:	89 2b       	or	r24, r25
    f9b0:	8c 93       	st	X, r24
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
	ADMUX = (analog_reference << 6) | (analog_channel & 0x07);
    f9b2:	da 01       	movw	r26, r20
    f9b4:	13 96       	adiw	r26, 0x03	; 3
    f9b6:	8c 91       	ld	r24, X
    f9b8:	b0 e4       	ldi	r27, 0x40	; 64
    f9ba:	8b 9f       	mul	r24, r27
    f9bc:	c0 01       	movw	r24, r0
    f9be:	11 24       	eor	r1, r1
    f9c0:	da 01       	movw	r26, r20
    f9c2:	12 96       	adiw	r26, 0x02	; 2
    f9c4:	9c 91       	ld	r25, X
    f9c6:	97 70       	andi	r25, 0x07	; 7
    f9c8:	89 2b       	or	r24, r25
    f9ca:	d7 01       	movw	r26, r14
    f9cc:	8c 93       	st	X, r24

	// without a delay, we seem to read from the wrong channel
	//_delay_ms(1);

	// start the conversion
	sbi(ADCSRA, ADSC);
    f9ce:	80 81       	ld	r24, Z
    f9d0:	80 64       	ori	r24, 0x40	; 64
    f9d2:	80 83       	st	Z, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    f9d4:	80 81       	ld	r24, Z
    f9d6:	86 fd       	sbrc	r24, 6
    f9d8:	fd cf       	rjmp	.-6      	; 0xf9d4 <_Z12processMCodei+0x73ee>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    f9da:	d8 01       	movw	r26, r16
    f9dc:	8c 91       	ld	r24, X
	high = ADCH;
    f9de:	d3 01       	movw	r26, r6
    f9e0:	4c 91       	ld	r20, X

	// combine the two bytes
	return (high << 8) | low;
    f9e2:	90 e0       	ldi	r25, 0x00	; 0
    f9e4:	94 2b       	or	r25, r20
    f9e6:	02 c0       	rjmp	.+4      	; 0xf9ec <_Z12processMCodei+0x7406>
{
	uint8_t low, high;
	if (pin >= 54 && pin <= 69) 
		analog_channel = pin - 54; // allow for pin numbers
	else
		return -1; // can analog read a digital pin
    f9e8:	8c 2d       	mov	r24, r12
    f9ea:	9d 2d       	mov	r25, r13
    f9ec:	d5 01       	movw	r26, r10
    f9ee:	8d 93       	st	X+, r24
    f9f0:	9c 93       	st	X, r25
			for(int j = 0; j < micros; j++) _delay_us(1);
    f9f2:	40 91 64 14 	lds	r20, 0x1464	; 0x801464 <micros>
    f9f6:	50 91 65 14 	lds	r21, 0x1465	; 0x801465 <micros+0x1>
    f9fa:	60 91 66 14 	lds	r22, 0x1466	; 0x801466 <micros+0x2>
    f9fe:	70 91 67 14 	lds	r23, 0x1467	; 0x801467 <micros+0x3>
    fa02:	45 2b       	or	r20, r21
    fa04:	46 2b       	or	r20, r22
    fa06:	47 2b       	or	r20, r23
    fa08:	c9 f0       	breq	.+50     	; 0xfa3c <_Z12processMCodei+0x7456>
    fa0a:	80 e0       	ldi	r24, 0x00	; 0
    fa0c:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    fa0e:	b5 e0       	ldi	r27, 0x05	; 5
    fa10:	ba 95       	dec	r27
    fa12:	f1 f7       	brne	.-4      	; 0xfa10 <_Z12processMCodei+0x742a>
    fa14:	00 00       	nop
    fa16:	01 96       	adiw	r24, 0x01	; 1
    fa18:	4c 01       	movw	r8, r24
    fa1a:	09 2e       	mov	r0, r25
    fa1c:	00 0c       	add	r0, r0
    fa1e:	aa 08       	sbc	r10, r10
    fa20:	bb 08       	sbc	r11, r11
    fa22:	40 91 64 14 	lds	r20, 0x1464	; 0x801464 <micros>
    fa26:	50 91 65 14 	lds	r21, 0x1465	; 0x801465 <micros+0x1>
    fa2a:	60 91 66 14 	lds	r22, 0x1466	; 0x801466 <micros+0x2>
    fa2e:	70 91 67 14 	lds	r23, 0x1467	; 0x801467 <micros+0x3>
    fa32:	84 16       	cp	r8, r20
    fa34:	95 06       	cpc	r9, r21
    fa36:	a6 06       	cpc	r10, r22
    fa38:	b7 06       	cpc	r11, r23
    fa3a:	48 f3       	brcs	.-46     	; 0xfa0e <_Z12processMCodei+0x7428>
		micros = 0;
		if( code_seen('M')) {
			micros = (uint32_t)code_value();
		}
		values = new int(nread);
		for(int i = 0; i < nread; i++) {
    fa3c:	2f 5f       	subi	r18, 0xFF	; 255
    fa3e:	3f 4f       	sbci	r19, 0xFF	; 255
    fa40:	80 91 68 14 	lds	r24, 0x1468	; 0x801468 <nread>
    fa44:	90 91 69 14 	lds	r25, 0x1469	; 0x801469 <nread+0x1>
    fa48:	28 17       	cp	r18, r24
    fa4a:	39 07       	cpc	r19, r25
    fa4c:	0c f4       	brge	.+2      	; 0xfa50 <_Z12processMCodei+0x746a>
    fa4e:	8d cf       	rjmp	.-230    	; 0xf96a <_Z12processMCodei+0x7384>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    fa50:	e2 e2       	ldi	r30, 0x22	; 34
    fa52:	fa e0       	ldi	r31, 0x0A	; 10
    fa54:	64 91       	lpm	r22, Z
	while(ch)
    fa56:	66 23       	and	r22, r22
    fa58:	a1 f0       	breq	.+40     	; 0xfa82 <_Z12processMCodei+0x749c>
    fa5a:	08 e0       	ldi	r16, 0x08	; 8
    fa5c:	1a e0       	ldi	r17, 0x0A	; 10
    fa5e:	fa 83       	std	Y+2, r31	; 0x02
    fa60:	e9 83       	std	Y+1, r30	; 0x01
    fa62:	d8 01       	movw	r26, r16
    fa64:	ed 91       	ld	r30, X+
    fa66:	fc 91       	ld	r31, X
    fa68:	01 90       	ld	r0, Z+
    fa6a:	f0 81       	ld	r31, Z
    fa6c:	e0 2d       	mov	r30, r0
    fa6e:	c8 01       	movw	r24, r16
    fa70:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    fa72:	e9 81       	ldd	r30, Y+1	; 0x01
    fa74:	fa 81       	ldd	r31, Y+2	; 0x02
    fa76:	31 96       	adiw	r30, 0x01	; 1
    fa78:	fa 83       	std	Y+2, r31	; 0x02
    fa7a:	e9 83       	std	Y+1, r30	; 0x01
    fa7c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    fa7e:	61 11       	cpse	r22, r1
    fa80:	f0 cf       	rjmp	.-32     	; 0xfa62 <_Z12processMCodei+0x747c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    fa82:	e8 e1       	ldi	r30, 0x18	; 24
    fa84:	fa e0       	ldi	r31, 0x0A	; 10
    fa86:	64 91       	lpm	r22, Z
	while(ch)
    fa88:	66 23       	and	r22, r22
    fa8a:	a1 f0       	breq	.+40     	; 0xfab4 <_Z12processMCodei+0x74ce>
    fa8c:	08 e0       	ldi	r16, 0x08	; 8
    fa8e:	1a e0       	ldi	r17, 0x0A	; 10
    fa90:	fa 83       	std	Y+2, r31	; 0x02
    fa92:	e9 83       	std	Y+1, r30	; 0x01
    fa94:	d8 01       	movw	r26, r16
    fa96:	ed 91       	ld	r30, X+
    fa98:	fc 91       	ld	r31, X
    fa9a:	01 90       	ld	r0, Z+
    fa9c:	f0 81       	ld	r31, Z
    fa9e:	e0 2d       	mov	r30, r0
    faa0:	c8 01       	movw	r24, r16
    faa2:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    faa4:	e9 81       	ldd	r30, Y+1	; 0x01
    faa6:	fa 81       	ldd	r31, Y+2	; 0x02
    faa8:	31 96       	adiw	r30, 0x01	; 1
    faaa:	fa 83       	std	Y+2, r31	; 0x02
    faac:	e9 83       	std	Y+1, r30	; 0x01
    faae:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    fab0:	61 11       	cpse	r22, r1
    fab2:	f0 cf       	rjmp	.-32     	; 0xfa94 <_Z12processMCodei+0x74ae>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    fab4:	e6 e1       	ldi	r30, 0x16	; 22
    fab6:	fa e0       	ldi	r31, 0x0A	; 10
    fab8:	64 91       	lpm	r22, Z
	while(ch)
    faba:	66 23       	and	r22, r22
    fabc:	a1 f0       	breq	.+40     	; 0xfae6 <_Z12processMCodei+0x7500>
    fabe:	08 e0       	ldi	r16, 0x08	; 8
    fac0:	1a e0       	ldi	r17, 0x0A	; 10
    fac2:	fa 83       	std	Y+2, r31	; 0x02
    fac4:	e9 83       	std	Y+1, r30	; 0x01
    fac6:	d8 01       	movw	r26, r16
    fac8:	ed 91       	ld	r30, X+
    faca:	fc 91       	ld	r31, X
    facc:	01 90       	ld	r0, Z+
    face:	f0 81       	ld	r31, Z
    fad0:	e0 2d       	mov	r30, r0
    fad2:	c8 01       	movw	r24, r16
    fad4:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    fad6:	e9 81       	ldd	r30, Y+1	; 0x01
    fad8:	fa 81       	ldd	r31, Y+2	; 0x02
    fada:	31 96       	adiw	r30, 0x01	; 1
    fadc:	fa 83       	std	Y+2, r31	; 0x02
    fade:	e9 83       	std	Y+1, r30	; 0x01
    fae0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    fae2:	61 11       	cpse	r22, r1
    fae4:	f0 cf       	rjmp	.-32     	; 0xfac6 <_Z12processMCodei+0x74e0>
			*(values+i) = apin->analogRead();
			for(int j = 0; j < micros; j++) _delay_us(1);
		}
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(analogPinHdr);
		SERIAL_PGMLN(MSG_DELIMIT);
    fae6:	88 e0       	ldi	r24, 0x08	; 8
    fae8:	9a e0       	ldi	r25, 0x0A	; 10
    faea:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
    faee:	20 e0       	ldi	r18, 0x00	; 0
    faf0:	30 e0       	ldi	r19, 0x00	; 0
    faf2:	3a 83       	std	Y+2, r19	; 0x02
    faf4:	29 83       	std	Y+1, r18	; 0x01
    faf6:	02 c0       	rjmp	.+4      	; 0xfafc <_Z12processMCodei+0x7516>
    faf8:	1a 83       	std	Y+2, r17	; 0x02
    fafa:	09 83       	std	Y+1, r16	; 0x01
    fafc:	e9 80       	ldd	r14, Y+1	; 0x01
    fafe:	fa 80       	ldd	r15, Y+2	; 0x02
		for(int i = 0; i < nread; i++) {
    fb00:	80 91 68 14 	lds	r24, 0x1468	; 0x801468 <nread>
    fb04:	90 91 69 14 	lds	r25, 0x1469	; 0x801469 <nread+0x1>
    fb08:	e8 16       	cp	r14, r24
    fb0a:	f9 06       	cpc	r15, r25
    fb0c:	c4 f5       	brge	.+112    	; 0xfb7e <_Z12processMCodei+0x7598>
    fb0e:	87 01       	movw	r16, r14
    fb10:	0f 5f       	subi	r16, 0xFF	; 255
    fb12:	1f 4f       	sbci	r17, 0xFF	; 255
			SERIAL_PORT.print(i+1); // sequence
    fb14:	4a e0       	ldi	r20, 0x0A	; 10
    fb16:	50 e0       	ldi	r21, 0x00	; 0
    fb18:	b8 01       	movw	r22, r16
    fb1a:	88 e0       	ldi	r24, 0x08	; 8
    fb1c:	9a e0       	ldi	r25, 0x0A	; 10
    fb1e:	0e 94 a4 8a 	call	0x11548	; 0x11548 <_ZN5Print5printEii>
			SERIAL_PORT.print(' ');
    fb22:	60 e2       	ldi	r22, 0x20	; 32
    fb24:	88 e0       	ldi	r24, 0x08	; 8
    fb26:	9a e0       	ldi	r25, 0x0A	; 10
    fb28:	0e 94 ed 89 	call	0x113da	; 0x113da <_ZN5Print5printEc>
			// 0 element is pin number
			if( i == 0 ) {
    fb2c:	ef 28       	or	r14, r15
    fb2e:	99 f4       	brne	.+38     	; 0xfb56 <_Z12processMCodei+0x7570>
				SERIAL_PORT.println(apin->pin);
    fb30:	e0 91 6e 14 	lds	r30, 0x146E	; 0x80146e <apin>
    fb34:	f0 91 6f 14 	lds	r31, 0x146F	; 0x80146f <apin+0x1>
    fb38:	a0 81       	ld	r26, Z
    fb3a:	b1 81       	ldd	r27, Z+1	; 0x01
    fb3c:	16 97       	sbiw	r26, 0x06	; 6
    fb3e:	8d 91       	ld	r24, X+
    fb40:	9c 91       	ld	r25, X
    fb42:	e8 0f       	add	r30, r24
    fb44:	f9 1f       	adc	r31, r25
    fb46:	4a e0       	ldi	r20, 0x0A	; 10
    fb48:	50 e0       	ldi	r21, 0x00	; 0
    fb4a:	60 81       	ld	r22, Z
    fb4c:	88 e0       	ldi	r24, 0x08	; 8
    fb4e:	9a e0       	ldi	r25, 0x0A	; 10
    fb50:	0e 94 e0 8a 	call	0x115c0	; 0x115c0 <_ZN5Print7printlnEhi>
    fb54:	d1 cf       	rjmp	.-94     	; 0xfaf8 <_Z12processMCodei+0x7512>
			} else {
				SERIAL_PORT.println(*(values+i)); // value
    fb56:	49 81       	ldd	r20, Y+1	; 0x01
    fb58:	5a 81       	ldd	r21, Y+2	; 0x02
    fb5a:	44 0f       	add	r20, r20
    fb5c:	55 1f       	adc	r21, r21
    fb5e:	80 91 62 14 	lds	r24, 0x1462	; 0x801462 <values>
    fb62:	90 91 63 14 	lds	r25, 0x1463	; 0x801463 <values+0x1>
    fb66:	48 0f       	add	r20, r24
    fb68:	59 1f       	adc	r21, r25
    fb6a:	da 01       	movw	r26, r20
    fb6c:	6d 91       	ld	r22, X+
    fb6e:	7c 91       	ld	r23, X
    fb70:	4a e0       	ldi	r20, 0x0A	; 10
    fb72:	50 e0       	ldi	r21, 0x00	; 0
    fb74:	88 e0       	ldi	r24, 0x08	; 8
    fb76:	9a e0       	ldi	r25, 0x0A	; 10
    fb78:	0e 94 ab 8a 	call	0x11556	; 0x11556 <_ZN5Print7printlnEii>
    fb7c:	bd cf       	rjmp	.-134    	; 0xfaf8 <_Z12processMCodei+0x7512>
			}
		}
		delete values;
    fb7e:	80 91 62 14 	lds	r24, 0x1462	; 0x801462 <values>
    fb82:	90 91 63 14 	lds	r25, 0x1463	; 0x801463 <values+0x1>
    fb86:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    fb8a:	e4 e1       	ldi	r30, 0x14	; 20
    fb8c:	fa e0       	ldi	r31, 0x0A	; 10
    fb8e:	64 91       	lpm	r22, Z
	while(ch)
    fb90:	66 23       	and	r22, r22
    fb92:	a1 f0       	breq	.+40     	; 0xfbbc <_Z12processMCodei+0x75d6>
    fb94:	08 e0       	ldi	r16, 0x08	; 8
    fb96:	1a e0       	ldi	r17, 0x0A	; 10
    fb98:	fa 83       	std	Y+2, r31	; 0x02
    fb9a:	e9 83       	std	Y+1, r30	; 0x01
    fb9c:	d8 01       	movw	r26, r16
    fb9e:	ed 91       	ld	r30, X+
    fba0:	fc 91       	ld	r31, X
    fba2:	01 90       	ld	r0, Z+
    fba4:	f0 81       	ld	r31, Z
    fba6:	e0 2d       	mov	r30, r0
    fba8:	c8 01       	movw	r24, r16
    fbaa:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    fbac:	e9 81       	ldd	r30, Y+1	; 0x01
    fbae:	fa 81       	ldd	r31, Y+2	; 0x02
    fbb0:	31 96       	adiw	r30, 0x01	; 1
    fbb2:	fa 83       	std	Y+2, r31	; 0x02
    fbb4:	e9 83       	std	Y+1, r30	; 0x01
    fbb6:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    fbb8:	61 11       	cpse	r22, r1
    fbba:	f0 cf       	rjmp	.-32     	; 0xfb9c <_Z12processMCodei+0x75b6>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    fbbc:	ea e0       	ldi	r30, 0x0A	; 10
    fbbe:	fa e0       	ldi	r31, 0x0A	; 10
    fbc0:	64 91       	lpm	r22, Z
	while(ch)
    fbc2:	66 23       	and	r22, r22
    fbc4:	a1 f0       	breq	.+40     	; 0xfbee <_Z12processMCodei+0x7608>
    fbc6:	08 e0       	ldi	r16, 0x08	; 8
    fbc8:	1a e0       	ldi	r17, 0x0A	; 10
    fbca:	fa 83       	std	Y+2, r31	; 0x02
    fbcc:	e9 83       	std	Y+1, r30	; 0x01
    fbce:	d8 01       	movw	r26, r16
    fbd0:	ed 91       	ld	r30, X+
    fbd2:	fc 91       	ld	r31, X
    fbd4:	01 90       	ld	r0, Z+
    fbd6:	f0 81       	ld	r31, Z
    fbd8:	e0 2d       	mov	r30, r0
    fbda:	c8 01       	movw	r24, r16
    fbdc:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    fbde:	e9 81       	ldd	r30, Y+1	; 0x01
    fbe0:	fa 81       	ldd	r31, Y+2	; 0x02
    fbe2:	31 96       	adiw	r30, 0x01	; 1
    fbe4:	fa 83       	std	Y+2, r31	; 0x02
    fbe6:	e9 83       	std	Y+1, r30	; 0x01
    fbe8:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    fbea:	61 11       	cpse	r22, r1
    fbec:	f0 cf       	rjmp	.-32     	; 0xfbce <_Z12processMCodei+0x75e8>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    fbee:	e7 e0       	ldi	r30, 0x07	; 7
    fbf0:	fa e0       	ldi	r31, 0x0A	; 10
    fbf2:	64 91       	lpm	r22, Z
	while(ch)
    fbf4:	66 23       	and	r22, r22
    fbf6:	a1 f0       	breq	.+40     	; 0xfc20 <_Z12processMCodei+0x763a>
    fbf8:	08 e0       	ldi	r16, 0x08	; 8
    fbfa:	1a e0       	ldi	r17, 0x0A	; 10
    fbfc:	fa 83       	std	Y+2, r31	; 0x02
    fbfe:	e9 83       	std	Y+1, r30	; 0x01
    fc00:	d8 01       	movw	r26, r16
    fc02:	ed 91       	ld	r30, X+
    fc04:	fc 91       	ld	r31, X
    fc06:	01 90       	ld	r0, Z+
    fc08:	f0 81       	ld	r31, Z
    fc0a:	e0 2d       	mov	r30, r0
    fc0c:	c8 01       	movw	r24, r16
    fc0e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    fc10:	e9 81       	ldd	r30, Y+1	; 0x01
    fc12:	fa 81       	ldd	r31, Y+2	; 0x02
    fc14:	31 96       	adiw	r30, 0x01	; 1
    fc16:	fa 83       	std	Y+2, r31	; 0x02
    fc18:	e9 83       	std	Y+1, r30	; 0x01
    fc1a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    fc1c:	61 11       	cpse	r22, r1
    fc1e:	f0 cf       	rjmp	.-32     	; 0xfc00 <_Z12processMCodei+0x761a>
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(analogPinHdr);
		SERIAL_PGMLN(MSG_TERMINATE);
    fc20:	88 e0       	ldi	r24, 0x08	; 8
    fc22:	9a e0       	ldi	r25, 0x0A	; 10
    fc24:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		SERIAL_PORT.flush();
    fc28:	88 e0       	ldi	r24, 0x08	; 8
    fc2a:	9a e0       	ldi	r25, 0x0A	; 10
    fc2c:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
		break;	
    fc30:	64 c1       	rjmp	.+712    	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		
		
    case 999: // M999: Reset
		Stopped = false;
    fc32:	10 92 71 14 	sts	0x1471, r1	; 0x801471 <Stopped>
		//lcd_reset_alert_level();
		gcode_LastN = Stopped_gcode_LastN;
    fc36:	80 91 7b 16 	lds	r24, 0x167B	; 0x80167b <_ZL19Stopped_gcode_LastN>
    fc3a:	90 91 7c 16 	lds	r25, 0x167C	; 0x80167c <_ZL19Stopped_gcode_LastN+0x1>
    fc3e:	a0 91 7d 16 	lds	r26, 0x167D	; 0x80167d <_ZL19Stopped_gcode_LastN+0x2>
    fc42:	b0 91 7e 16 	lds	r27, 0x167E	; 0x80167e <_ZL19Stopped_gcode_LastN+0x3>
    fc46:	80 93 7f 16 	sts	0x167F, r24	; 0x80167f <_ZL11gcode_LastN>
    fc4a:	90 93 80 16 	sts	0x1680, r25	; 0x801680 <_ZL11gcode_LastN+0x1>
    fc4e:	a0 93 81 16 	sts	0x1681, r26	; 0x801681 <_ZL11gcode_LastN+0x2>
    fc52:	b0 93 82 16 	sts	0x1682, r27	; 0x801682 <_ZL11gcode_LastN+0x3>
		//FlushSerialRequestResend();
		if( watchdog_timer != NULL ) {
    fc56:	80 91 0b 13 	lds	r24, 0x130B	; 0x80130b <watchdog_timer>
    fc5a:	90 91 0c 13 	lds	r25, 0x130C	; 0x80130c <watchdog_timer+0x1>
    fc5e:	00 97       	sbiw	r24, 0x00	; 0
    fc60:	11 f0       	breq	.+4      	; 0xfc66 <_Z12processMCodei+0x7680>
			delete watchdog_timer;
    fc62:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
		}
		watchdog_timer = new WatchdogTimer();
    fc66:	81 e0       	ldi	r24, 0x01	; 1
    fc68:	90 e0       	ldi	r25, 0x00	; 0
    fc6a:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
    fc6e:	90 93 0c 13 	sts	0x130C, r25	; 0x80130c <watchdog_timer+0x1>
    fc72:	80 93 0b 13 	sts	0x130B, r24	; 0x80130b <watchdog_timer>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    fc76:	e5 e0       	ldi	r30, 0x05	; 5
    fc78:	fa e0       	ldi	r31, 0x0A	; 10
    fc7a:	64 91       	lpm	r22, Z
	while(ch)
    fc7c:	66 23       	and	r22, r22
    fc7e:	a1 f0       	breq	.+40     	; 0xfca8 <_Z12processMCodei+0x76c2>
    fc80:	08 e0       	ldi	r16, 0x08	; 8
    fc82:	1a e0       	ldi	r17, 0x0A	; 10
    fc84:	fa 83       	std	Y+2, r31	; 0x02
    fc86:	e9 83       	std	Y+1, r30	; 0x01
    fc88:	d8 01       	movw	r26, r16
    fc8a:	ed 91       	ld	r30, X+
    fc8c:	fc 91       	ld	r31, X
    fc8e:	01 90       	ld	r0, Z+
    fc90:	f0 81       	ld	r31, Z
    fc92:	e0 2d       	mov	r30, r0
    fc94:	c8 01       	movw	r24, r16
    fc96:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    fc98:	e9 81       	ldd	r30, Y+1	; 0x01
    fc9a:	fa 81       	ldd	r31, Y+2	; 0x02
    fc9c:	31 96       	adiw	r30, 0x01	; 1
    fc9e:	fa 83       	std	Y+2, r31	; 0x02
    fca0:	e9 83       	std	Y+1, r30	; 0x01
    fca2:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    fca4:	61 11       	cpse	r22, r1
    fca6:	f0 cf       	rjmp	.-32     	; 0xfc88 <_Z12processMCodei+0x76a2>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    fca8:	e0 e0       	ldi	r30, 0x00	; 0
    fcaa:	fa e0       	ldi	r31, 0x0A	; 10
    fcac:	64 91       	lpm	r22, Z
	while(ch)
    fcae:	66 23       	and	r22, r22
    fcb0:	a1 f0       	breq	.+40     	; 0xfcda <_Z12processMCodei+0x76f4>
    fcb2:	08 e0       	ldi	r16, 0x08	; 8
    fcb4:	1a e0       	ldi	r17, 0x0A	; 10
    fcb6:	fa 83       	std	Y+2, r31	; 0x02
    fcb8:	e9 83       	std	Y+1, r30	; 0x01
    fcba:	d8 01       	movw	r26, r16
    fcbc:	ed 91       	ld	r30, X+
    fcbe:	fc 91       	ld	r31, X
    fcc0:	01 90       	ld	r0, Z+
    fcc2:	f0 81       	ld	r31, Z
    fcc4:	e0 2d       	mov	r30, r0
    fcc6:	c8 01       	movw	r24, r16
    fcc8:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    fcca:	e9 81       	ldd	r30, Y+1	; 0x01
    fccc:	fa 81       	ldd	r31, Y+2	; 0x02
    fcce:	31 96       	adiw	r30, 0x01	; 1
    fcd0:	fa 83       	std	Y+2, r31	; 0x02
    fcd2:	e9 83       	std	Y+1, r30	; 0x01
    fcd4:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    fcd6:	61 11       	cpse	r22, r1
    fcd8:	f0 cf       	rjmp	.-32     	; 0xfcba <_Z12processMCodei+0x76d4>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    fcda:	ed ef       	ldi	r30, 0xFD	; 253
    fcdc:	f9 e0       	ldi	r31, 0x09	; 9
    fcde:	64 91       	lpm	r22, Z
	while(ch)
    fce0:	66 23       	and	r22, r22
    fce2:	a1 f0       	breq	.+40     	; 0xfd0c <_Z12processMCodei+0x7726>
    fce4:	08 e0       	ldi	r16, 0x08	; 8
    fce6:	1a e0       	ldi	r17, 0x0A	; 10
    fce8:	fa 83       	std	Y+2, r31	; 0x02
    fcea:	e9 83       	std	Y+1, r30	; 0x01
    fcec:	d8 01       	movw	r26, r16
    fcee:	ed 91       	ld	r30, X+
    fcf0:	fc 91       	ld	r31, X
    fcf2:	01 90       	ld	r0, Z+
    fcf4:	f0 81       	ld	r31, Z
    fcf6:	e0 2d       	mov	r30, r0
    fcf8:	c8 01       	movw	r24, r16
    fcfa:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    fcfc:	e9 81       	ldd	r30, Y+1	; 0x01
    fcfe:	fa 81       	ldd	r31, Y+2	; 0x02
    fd00:	31 96       	adiw	r30, 0x01	; 1
    fd02:	fa 83       	std	Y+2, r31	; 0x02
    fd04:	e9 83       	std	Y+1, r30	; 0x01
    fd06:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    fd08:	61 11       	cpse	r22, r1
    fd0a:	f0 cf       	rjmp	.-32     	; 0xfcec <_Z12processMCodei+0x7706>
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM("M999");
		SERIAL_PGMLN(MSG_TERMINATE);
    fd0c:	88 e0       	ldi	r24, 0x08	; 8
    fd0e:	9a e0       	ldi	r25, 0x0A	; 10
    fd10:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		SERIAL_PORT.flush();
    fd14:	88 e0       	ldi	r24, 0x08	; 8
    fd16:	9a e0       	ldi	r25, 0x0A	; 10
    fd18:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
		watchdog_timer->watchdog_init(15); // 15 ms
    fd1c:	6f e0       	ldi	r22, 0x0F	; 15
    fd1e:	70 e0       	ldi	r23, 0x00	; 0
    fd20:	80 91 0b 13 	lds	r24, 0x130B	; 0x80130b <watchdog_timer>
    fd24:	90 91 0c 13 	lds	r25, 0x130C	; 0x80130c <watchdog_timer+0x1>
    fd28:	0e 94 59 95 	call	0x12ab2	; 0x12ab2 <_ZN13WatchdogTimer13watchdog_initEj>
		break;
    fd2c:	e6 c0       	rjmp	.+460    	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    fd2e:	eb ef       	ldi	r30, 0xFB	; 251
    fd30:	f9 e0       	ldi	r31, 0x09	; 9
    fd32:	64 91       	lpm	r22, Z
	while(ch)
    fd34:	66 23       	and	r22, r22
    fd36:	a1 f0       	breq	.+40     	; 0xfd60 <_Z12processMCodei+0x777a>
    fd38:	08 e0       	ldi	r16, 0x08	; 8
    fd3a:	1a e0       	ldi	r17, 0x0A	; 10
    fd3c:	fa 83       	std	Y+2, r31	; 0x02
    fd3e:	e9 83       	std	Y+1, r30	; 0x01
    fd40:	d8 01       	movw	r26, r16
    fd42:	ed 91       	ld	r30, X+
    fd44:	fc 91       	ld	r31, X
    fd46:	01 90       	ld	r0, Z+
    fd48:	f0 81       	ld	r31, Z
    fd4a:	e0 2d       	mov	r30, r0
    fd4c:	c8 01       	movw	r24, r16
    fd4e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    fd50:	e9 81       	ldd	r30, Y+1	; 0x01
    fd52:	fa 81       	ldd	r31, Y+2	; 0x02
    fd54:	31 96       	adiw	r30, 0x01	; 1
    fd56:	fa 83       	std	Y+2, r31	; 0x02
    fd58:	e9 83       	std	Y+1, r30	; 0x01
    fd5a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    fd5c:	61 11       	cpse	r22, r1
    fd5e:	f0 cf       	rjmp	.-32     	; 0xfd40 <_Z12processMCodei+0x775a>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    fd60:	eb ee       	ldi	r30, 0xEB	; 235
    fd62:	f9 e0       	ldi	r31, 0x09	; 9
    fd64:	64 91       	lpm	r22, Z
	while(ch)
    fd66:	61 11       	cpse	r22, r1
    fd68:	05 c0       	rjmp	.+10     	; 0xfd74 <_Z12processMCodei+0x778e>
		
	default:
		int ibuf = 0;
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(MSG_UNKNOWN_MCODE);
		while(cmdbuffer[ibuf]) SERIAL_PORT.print(cmdbuffer[ibuf++]);
    fd6a:	60 91 7b 15 	lds	r22, 0x157B	; 0x80157b <_ZL9cmdbuffer>
    fd6e:	61 11       	cpse	r22, r1
    fd70:	18 c0       	rjmp	.+48     	; 0xfda2 <_Z12processMCodei+0x77bc>
    fd72:	26 c0       	rjmp	.+76     	; 0xfdc0 <_Z12processMCodei+0x77da>
    fd74:	2b ee       	ldi	r18, 0xEB	; 235
    fd76:	39 e0       	ldi	r19, 0x09	; 9
    fd78:	08 e0       	ldi	r16, 0x08	; 8
    fd7a:	1a e0       	ldi	r17, 0x0A	; 10
    fd7c:	3a 83       	std	Y+2, r19	; 0x02
    fd7e:	29 83       	std	Y+1, r18	; 0x01
    fd80:	d8 01       	movw	r26, r16
    fd82:	ed 91       	ld	r30, X+
    fd84:	fc 91       	ld	r31, X
    fd86:	01 90       	ld	r0, Z+
    fd88:	f0 81       	ld	r31, Z
    fd8a:	e0 2d       	mov	r30, r0
    fd8c:	c8 01       	movw	r24, r16
    fd8e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    fd90:	e9 81       	ldd	r30, Y+1	; 0x01
    fd92:	fa 81       	ldd	r31, Y+2	; 0x02
    fd94:	31 96       	adiw	r30, 0x01	; 1
    fd96:	fa 83       	std	Y+2, r31	; 0x02
    fd98:	e9 83       	std	Y+1, r30	; 0x01
    fd9a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    fd9c:	61 11       	cpse	r22, r1
    fd9e:	f0 cf       	rjmp	.-32     	; 0xfd80 <_Z12processMCodei+0x779a>
    fda0:	e4 cf       	rjmp	.-56     	; 0xfd6a <_Z12processMCodei+0x7784>
    fda2:	2c e7       	ldi	r18, 0x7C	; 124
    fda4:	35 e1       	ldi	r19, 0x15	; 21
    fda6:	3a 83       	std	Y+2, r19	; 0x02
    fda8:	29 83       	std	Y+1, r18	; 0x01
    fdaa:	88 e0       	ldi	r24, 0x08	; 8
    fdac:	9a e0       	ldi	r25, 0x0A	; 10
    fdae:	0e 94 ed 89 	call	0x113da	; 0x113da <_ZN5Print5printEc>
    fdb2:	a9 81       	ldd	r26, Y+1	; 0x01
    fdb4:	ba 81       	ldd	r27, Y+2	; 0x02
    fdb6:	6d 91       	ld	r22, X+
    fdb8:	ba 83       	std	Y+2, r27	; 0x02
    fdba:	a9 83       	std	Y+1, r26	; 0x01
    fdbc:	61 11       	cpse	r22, r1
    fdbe:	f5 cf       	rjmp	.-22     	; 0xfdaa <_Z12processMCodei+0x77c4>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    fdc0:	e8 ee       	ldi	r30, 0xE8	; 232
    fdc2:	f9 e0       	ldi	r31, 0x09	; 9
    fdc4:	64 91       	lpm	r22, Z
	while(ch)
    fdc6:	66 23       	and	r22, r22
    fdc8:	a1 f0       	breq	.+40     	; 0xfdf2 <_Z12processMCodei+0x780c>
    fdca:	08 e0       	ldi	r16, 0x08	; 8
    fdcc:	1a e0       	ldi	r17, 0x0A	; 10
    fdce:	fa 83       	std	Y+2, r31	; 0x02
    fdd0:	e9 83       	std	Y+1, r30	; 0x01
    fdd2:	d8 01       	movw	r26, r16
    fdd4:	ed 91       	ld	r30, X+
    fdd6:	fc 91       	ld	r31, X
    fdd8:	01 90       	ld	r0, Z+
    fdda:	f0 81       	ld	r31, Z
    fddc:	e0 2d       	mov	r30, r0
    fdde:	c8 01       	movw	r24, r16
    fde0:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    fde2:	e9 81       	ldd	r30, Y+1	; 0x01
    fde4:	fa 81       	ldd	r31, Y+2	; 0x02
    fde6:	31 96       	adiw	r30, 0x01	; 1
    fde8:	fa 83       	std	Y+2, r31	; 0x02
    fdea:	e9 83       	std	Y+1, r30	; 0x01
    fdec:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    fdee:	61 11       	cpse	r22, r1
    fdf0:	f0 cf       	rjmp	.-32     	; 0xfdd2 <_Z12processMCodei+0x77ec>
		SERIAL_PGMLN(MSG_TERMINATE);
    fdf2:	88 e0       	ldi	r24, 0x08	; 8
    fdf4:	9a e0       	ldi	r25, 0x0A	; 10
    fdf6:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
		SERIAL_PORT.flush();
    fdfa:	88 e0       	ldi	r24, 0x08	; 8
    fdfc:	9a e0       	ldi	r25, 0x0A	; 10
    fdfe:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
		break;
	
  } // switch m code

} //processMCode
    fe02:	7b c0       	rjmp	.+246    	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		
		if( pin_status < 0 || pin_status > 255) {
			pin_status = 0;
		}
		// this is a semi-permanent pin assignment so dont add if its already assigned
		if( assignPin(pin_number) ) {
    fe04:	80 91 1c 13 	lds	r24, 0x131C	; 0x80131c <pin_number>
    fe08:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_Z9assignPinh>
    fe0c:	81 11       	cpse	r24, r1
    fe0e:	0c 94 0f 5f 	jmp	0xbe1e	; 0xbe1e <_Z12processMCodei+0x3838>
					break;
				}
			}
		 } else { // reassign pin with new mode and value
			 for(int i = 0; i < 12; i++) {
				 if(ppwms[i] && ppwms[i]->pin == pin_number) {
    fe12:	20 91 1c 13 	lds	r18, 0x131C	; 0x80131c <pin_number>
    fe16:	30 91 1d 13 	lds	r19, 0x131D	; 0x80131d <pin_number+0x1>
    fe1a:	e3 e2       	ldi	r30, 0x23	; 35
    fe1c:	f3 e1       	ldi	r31, 0x13	; 19
    fe1e:	1a 82       	std	Y+2, r1	; 0x02
    fe20:	19 82       	std	Y+1, r1	; 0x01
    fe22:	0c 94 00 60 	jmp	0xc000	; 0xc000 <_Z12processMCodei+0x3a1a>
	  SERIAL_PORT.flush();
      break;
	  
	
    case 300: // M300 - emit ultrasonic pulse on given pin and return duration P<pin number>
      uspin = code_seen('P') ? code_value() : 0;
    fe26:	10 92 1f 13 	sts	0x131F, r1	; 0x80131f <_ZL5uspin+0x1>
    fe2a:	10 92 1e 13 	sts	0x131E, r1	; 0x80131e <_ZL5uspin>
    fe2e:	65 c0       	rjmp	.+202    	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		// wont assign pin 0 as its sensitive
		uspin = code_seen('P') ? code_value() : 0;
		// this is a permanent pin assignment so dont add if its already assigned
		if( assignPin(uspin) ) {
			for(int i = 0; i < 10; i++) {
				if(!psonics[i]) {
    fe30:	80 91 43 14 	lds	r24, 0x1443	; 0x801443 <psonics>
    fe34:	90 91 44 14 	lds	r25, 0x1444	; 0x801444 <psonics+0x1>
    fe38:	89 2b       	or	r24, r25
    fe3a:	11 f4       	brne	.+4      	; 0xfe40 <__DATA_REGION_LENGTH__+0x40>
    fe3c:	0c 94 7d 66 	jmp	0xccfa	; 0xccfa <_Z12processMCodei+0x4714>
    fe40:	e5 e4       	ldi	r30, 0x45	; 69
    fe42:	f4 e1       	ldi	r31, 0x14	; 20
    case 301: // M301 P<pin> - attach ultrasonic device to pin
		// wont assign pin 0 as its sensitive
		uspin = code_seen('P') ? code_value() : 0;
		// this is a permanent pin assignment so dont add if its already assigned
		if( assignPin(uspin) ) {
			for(int i = 0; i < 10; i++) {
    fe44:	21 e0       	ldi	r18, 0x01	; 1
    fe46:	30 e0       	ldi	r19, 0x00	; 0
    fe48:	3a 83       	std	Y+2, r19	; 0x02
    fe4a:	29 83       	std	Y+1, r18	; 0x01
    fe4c:	0c 94 77 66 	jmp	0xccee	; 0xccee <_Z12processMCodei+0x4708>
      }
    break;
		
    case 301: // M301 P<pin> - attach ultrasonic device to pin
		// wont assign pin 0 as its sensitive
		uspin = code_seen('P') ? code_value() : 0;
    fe50:	80 e0       	ldi	r24, 0x00	; 0
    fe52:	90 e0       	ldi	r25, 0x00	; 0
    fe54:	80 93 1e 13 	sts	0x131E, r24	; 0x80131e <_ZL5uspin>
    fe58:	90 93 1f 13 	sts	0x131F, r25	; 0x80131f <_ZL5uspin+0x1>
		// this is a permanent pin assignment so dont add if its already assigned
		if( assignPin(uspin) ) {
    fe5c:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_Z9assignPinh>
    fe60:	81 11       	cpse	r24, r1
    fe62:	e6 cf       	rjmp	.-52     	; 0xfe30 <__DATA_REGION_LENGTH__+0x30>
    fe64:	4a c0       	rjmp	.+148    	; 0xfefa <__DATA_REGION_LENGTH__+0xfa>
		// if optional L and H values exclude readings in that range
		uspin = code_seen('P') ? code_value() : 0;
		// this is a permanent pin assignment so dont add if its already assigned
		if( assignPin(uspin) ) {
			for(int i = 0; i < 16; i++) {
				if(!panalogs[i]) {
    fe66:	80 91 bb 13 	lds	r24, 0x13BB	; 0x8013bb <panalogs>
    fe6a:	90 91 bc 13 	lds	r25, 0x13BC	; 0x8013bc <panalogs+0x1>
    fe6e:	89 2b       	or	r24, r25
    fe70:	11 f4       	brne	.+4      	; 0xfe76 <__DATA_REGION_LENGTH__+0x76>
    fe72:	0c 94 cb 67 	jmp	0xcf96	; 0xcf96 <_Z12processMCodei+0x49b0>
    fe76:	ed eb       	ldi	r30, 0xBD	; 189
    fe78:	f3 e1       	ldi	r31, 0x13	; 19
	case 304:// M304 P<pin> [L<min>] [H<max>] [U] - toggle analog read optional INPUT_PULLUP with optional exclusion range 0-1024 via L<min> H<max>
		// if optional L and H values exclude readings in that range
		uspin = code_seen('P') ? code_value() : 0;
		// this is a permanent pin assignment so dont add if its already assigned
		if( assignPin(uspin) ) {
			for(int i = 0; i < 16; i++) {
    fe7a:	41 e0       	ldi	r20, 0x01	; 1
    fe7c:	50 e0       	ldi	r21, 0x00	; 0
    fe7e:	5a 83       	std	Y+2, r21	; 0x02
    fe80:	49 83       	std	Y+1, r20	; 0x01
    fe82:	0c 94 c5 67 	jmp	0xcf8a	; 0xcf8a <_Z12processMCodei+0x49a4>
		}
      break;
	  
	case 304:// M304 P<pin> [L<min>] [H<max>] [U] - toggle analog read optional INPUT_PULLUP with optional exclusion range 0-1024 via L<min> H<max>
		// if optional L and H values exclude readings in that range
		uspin = code_seen('P') ? code_value() : 0;
    fe86:	80 e0       	ldi	r24, 0x00	; 0
    fe88:	90 e0       	ldi	r25, 0x00	; 0
    fe8a:	80 93 1e 13 	sts	0x131E, r24	; 0x80131e <_ZL5uspin>
    fe8e:	90 93 1f 13 	sts	0x131F, r25	; 0x80131f <_ZL5uspin+0x1>
		// this is a permanent pin assignment so dont add if its already assigned
		if( assignPin(uspin) ) {
    fe92:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_Z9assignPinh>
    fe96:	81 11       	cpse	r24, r1
    fe98:	e6 cf       	rjmp	.-52     	; 0xfe66 <__DATA_REGION_LENGTH__+0x66>
					break;
				}
			}
		} else { // reassign values for assigned pin
			for(int i = 0; i < 16; i++) {
				if(panalogs[i] && panalogs[i]->pin == uspin) {
    fe9a:	40 91 1e 13 	lds	r20, 0x131E	; 0x80131e <_ZL5uspin>
    fe9e:	50 91 1f 13 	lds	r21, 0x131F	; 0x80131f <_ZL5uspin+0x1>
    fea2:	2b eb       	ldi	r18, 0xBB	; 187
    fea4:	33 e1       	ldi	r19, 0x13	; 19
    fea6:	1a 82       	std	Y+2, r1	; 0x02
    fea8:	19 82       	std	Y+1, r1	; 0x01
    feaa:	0c 94 8d 68 	jmp	0xd11a	; 0xd11a <_Z12processMCodei+0x4b34>
		uspin = code_seen('P') ? code_value() : 0;
		digitarg = code_seen('T') ? code_value() : 0;
		// this is a permanent pin assignment so dont add if its already assigned
		if( assignPin(uspin) ) {
			for(int i = 0; i < 32; i++) {
				if(!pdigitals[i]) {
    feae:	80 91 3b 13 	lds	r24, 0x133B	; 0x80133b <pdigitals>
    feb2:	90 91 3c 13 	lds	r25, 0x133C	; 0x80133c <pdigitals+0x1>
    feb6:	89 2b       	or	r24, r25
    feb8:	11 f4       	brne	.+4      	; 0xfebe <__DATA_REGION_LENGTH__+0xbe>
    feba:	0c 94 75 69 	jmp	0xd2ea	; 0xd2ea <_Z12processMCodei+0x4d04>
    febe:	ed e3       	ldi	r30, 0x3D	; 61
    fec0:	f3 e1       	ldi	r31, 0x13	; 19
		// Looks for target value, if so publish with <digitalpin> header and 1 - pin 2 - value
		uspin = code_seen('P') ? code_value() : 0;
		digitarg = code_seen('T') ? code_value() : 0;
		// this is a permanent pin assignment so dont add if its already assigned
		if( assignPin(uspin) ) {
			for(int i = 0; i < 32; i++) {
    fec2:	81 e0       	ldi	r24, 0x01	; 1
    fec4:	90 e0       	ldi	r25, 0x00	; 0
    fec6:	9a 83       	std	Y+2, r25	; 0x02
    fec8:	89 83       	std	Y+1, r24	; 0x01
    feca:	0c 94 6f 69 	jmp	0xd2de	; 0xd2de <_Z12processMCodei+0x4cf8>
      break;
	
	case 306://  M306 P<pin> T<target> [U] - toggle digital read, 0 or 1 for target value, default 0 optional INPUT_PULLUP 
		// Looks for target value, if so publish with <digitalpin> header and 1 - pin 2 - value
		uspin = code_seen('P') ? code_value() : 0;
		digitarg = code_seen('T') ? code_value() : 0;
    fece:	60 e0       	ldi	r22, 0x00	; 0
    fed0:	70 e0       	ldi	r23, 0x00	; 0
    fed2:	70 93 21 13 	sts	0x1321, r23	; 0x801321 <digitarg+0x1>
    fed6:	60 93 20 13 	sts	0x1320, r22	; 0x801320 <digitarg>
		// this is a permanent pin assignment so dont add if its already assigned
		if( assignPin(uspin) ) {
    feda:	80 91 1e 13 	lds	r24, 0x131E	; 0x80131e <_ZL5uspin>
    fede:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_Z9assignPinh>
    fee2:	81 11       	cpse	r24, r1
    fee4:	e4 cf       	rjmp	.-56     	; 0xfeae <__DATA_REGION_LENGTH__+0xae>
					break;
				}
			}
		} else {
			for(int i = 0; i < 32; i++) {
				if(pdigitals[i] && pdigitals[i]->pin == uspin) {
    fee6:	40 91 1e 13 	lds	r20, 0x131E	; 0x80131e <_ZL5uspin>
    feea:	50 91 1f 13 	lds	r21, 0x131F	; 0x80131f <_ZL5uspin+0x1>
    feee:	ab e3       	ldi	r26, 0x3B	; 59
    fef0:	b3 e1       	ldi	r27, 0x13	; 19
    fef2:	80 e0       	ldi	r24, 0x00	; 0
    fef4:	90 e0       	ldi	r25, 0x00	; 0
    fef6:	0c 94 07 6a 	jmp	0xd40e	; 0xd40e <_Z12processMCodei+0x4e28>
		SERIAL_PORT.flush();
		break;
	
  } // switch m code

} //processMCode
    fefa:	0f 90       	pop	r0
    fefc:	0f 90       	pop	r0
    fefe:	0f 90       	pop	r0
    ff00:	0f 90       	pop	r0
    ff02:	df 91       	pop	r29
    ff04:	cf 91       	pop	r28
    ff06:	1f 91       	pop	r17
    ff08:	0f 91       	pop	r16
    ff0a:	ff 90       	pop	r15
    ff0c:	ef 90       	pop	r14
    ff0e:	df 90       	pop	r13
    ff10:	cf 90       	pop	r12
    ff12:	bf 90       	pop	r11
    ff14:	af 90       	pop	r10
    ff16:	9f 90       	pop	r9
    ff18:	8f 90       	pop	r8
    ff1a:	7f 90       	pop	r7
    ff1c:	6f 90       	pop	r6
    ff1e:	5f 90       	pop	r5
    ff20:	4f 90       	pop	r4
    ff22:	3f 90       	pop	r3
    ff24:	2f 90       	pop	r2
    ff26:	08 95       	ret

0000ff28 <_Z24FlushSerialRequestResendv>:

void FlushSerialRequestResend()
{
    ff28:	0f 93       	push	r16
    ff2a:	1f 93       	push	r17
    ff2c:	cf 93       	push	r28
    ff2e:	df 93       	push	r29
  //char cmdbuffer[bufindr][100]="Resend:";
  SERIAL_PORT.flush();
    ff30:	88 e0       	ldi	r24, 0x08	; 8
    ff32:	9a e0       	ldi	r25, 0x0A	; 10
    ff34:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
    ff38:	ef ed       	ldi	r30, 0xDF	; 223
    ff3a:	f9 e0       	ldi	r31, 0x09	; 9
    ff3c:	64 91       	lpm	r22, Z
	while(ch)
    ff3e:	66 23       	and	r22, r22
    ff40:	81 f0       	breq	.+32     	; 0xff62 <_Z24FlushSerialRequestResendv+0x3a>
    ff42:	ef 01       	movw	r28, r30
    ff44:	08 e0       	ldi	r16, 0x08	; 8
    ff46:	1a e0       	ldi	r17, 0x0A	; 10
    ff48:	d8 01       	movw	r26, r16
    ff4a:	ed 91       	ld	r30, X+
    ff4c:	fc 91       	ld	r31, X
    ff4e:	01 90       	ld	r0, Z+
    ff50:	f0 81       	ld	r31, Z
    ff52:	e0 2d       	mov	r30, r0
    ff54:	c8 01       	movw	r24, r16
    ff56:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
    ff58:	21 96       	adiw	r28, 0x01	; 1
    ff5a:	fe 01       	movw	r30, r28
    ff5c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
    ff5e:	61 11       	cpse	r22, r1
    ff60:	f3 cf       	rjmp	.-26     	; 0xff48 <_Z24FlushSerialRequestResendv+0x20>
  SERIAL_PGMLN(MSG_RESEND);
    ff62:	88 e0       	ldi	r24, 0x08	; 8
    ff64:	9a e0       	ldi	r25, 0x0A	; 10
    ff66:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
  SERIAL_PORT.println(gcode_LastN + 1);
    ff6a:	40 91 7f 16 	lds	r20, 0x167F	; 0x80167f <_ZL11gcode_LastN>
    ff6e:	50 91 80 16 	lds	r21, 0x1680	; 0x801680 <_ZL11gcode_LastN+0x1>
    ff72:	60 91 81 16 	lds	r22, 0x1681	; 0x801681 <_ZL11gcode_LastN+0x2>
    ff76:	70 91 82 16 	lds	r23, 0x1682	; 0x801682 <_ZL11gcode_LastN+0x3>
    ff7a:	4f 5f       	subi	r20, 0xFF	; 255
    ff7c:	5f 4f       	sbci	r21, 0xFF	; 255
    ff7e:	6f 4f       	sbci	r22, 0xFF	; 255
    ff80:	7f 4f       	sbci	r23, 0xFF	; 255
    ff82:	2a e0       	ldi	r18, 0x0A	; 10
    ff84:	30 e0       	ldi	r19, 0x00	; 0
    ff86:	88 e0       	ldi	r24, 0x08	; 8
    ff88:	9a e0       	ldi	r25, 0x0A	; 10
    ff8a:	0e 94 bb 8a 	call	0x11576	; 0x11576 <_ZN5Print7printlnEli>
  SERIAL_PORT.flush();
    ff8e:	88 e0       	ldi	r24, 0x08	; 8
    ff90:	9a e0       	ldi	r25, 0x0A	; 10
    ff92:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
}
    ff96:	df 91       	pop	r29
    ff98:	cf 91       	pop	r28
    ff9a:	1f 91       	pop	r17
    ff9c:	0f 91       	pop	r16
    ff9e:	08 95       	ret

0000ffa0 <_Z11get_commandv>:
  }
  manage_inactivity();
}
  
void get_command()
{
    ffa0:	0f 93       	push	r16
    ffa2:	1f 93       	push	r17
    ffa4:	cf 93       	push	r28
    ffa6:	df 93       	push	r29
  comment_mode = true;
    ffa8:	81 e0       	ldi	r24, 0x01	; 1
    ffaa:	80 93 78 14 	sts	0x1478, r24	; 0x801478 <_ZL12comment_mode>
  while( SERIAL_PORT.available() > 0 ) {
    ffae:	88 e0       	ldi	r24, 0x08	; 8
    ffb0:	9a e0       	ldi	r25, 0x0A	; 10
    ffb2:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <_ZN14HardwareSerial9availableEv>
    ffb6:	18 16       	cp	r1, r24
    ffb8:	19 06       	cpc	r1, r25
    ffba:	0c f0       	brlt	.+2      	; 0xffbe <_Z11get_commandv+0x1e>
    ffbc:	98 c2       	rjmp	.+1328   	; 0x104ee <__EEPROM_REGION_LENGTH__+0x4ee>
    serial_read = SERIAL_PORT.read();
    ffbe:	88 e0       	ldi	r24, 0x08	; 8
    ffc0:	9a e0       	ldi	r25, 0x0A	; 10
    ffc2:	0e 94 00 19 	call	0x3200	; 0x3200 <_ZN14HardwareSerial4readEv>
	if( serial_read == -1 )
    ffc6:	8f 3f       	cpi	r24, 0xFF	; 255
    ffc8:	2f ef       	ldi	r18, 0xFF	; 255
    ffca:	92 07       	cpc	r25, r18
    ffcc:	81 f3       	breq	.-32     	; 0xffae <_Z11get_commandv+0xe>
		continue;
	serial_char = (char)serial_read;
    if(serial_char == '\n' || serial_char == '\r' || serial_count >= (MAX_CMD_SIZE - 1) ) {
    ffce:	8a 30       	cpi	r24, 0x0A	; 10
    ffd0:	51 f0       	breq	.+20     	; 0xffe6 <_Z11get_commandv+0x46>
    ffd2:	8d 30       	cpi	r24, 0x0D	; 13
    ffd4:	41 f0       	breq	.+16     	; 0xffe6 <_Z11get_commandv+0x46>
    ffd6:	20 91 79 14 	lds	r18, 0x1479	; 0x801479 <_ZL12serial_count>
    ffda:	30 91 7a 14 	lds	r19, 0x147A	; 0x80147a <_ZL12serial_count+0x1>
    ffde:	2f 3f       	cpi	r18, 0xFF	; 255
    ffe0:	31 05       	cpc	r19, r1
    ffe2:	0c f4       	brge	.+2      	; 0xffe6 <_Z11get_commandv+0x46>
    ffe4:	64 c2       	rjmp	.+1224   	; 0x104ae <__EEPROM_REGION_LENGTH__+0x4ae>
      if(!serial_count) { //if empty line
    ffe6:	80 91 79 14 	lds	r24, 0x1479	; 0x801479 <_ZL12serial_count>
    ffea:	90 91 7a 14 	lds	r25, 0x147A	; 0x80147a <_ZL12serial_count+0x1>
    ffee:	00 97       	sbiw	r24, 0x00	; 0
    fff0:	21 f4       	brne	.+8      	; 0xfffa <_Z11get_commandv+0x5a>
        comment_mode = true; //for new command
    fff2:	81 e0       	ldi	r24, 0x01	; 1
    fff4:	80 93 78 14 	sts	0x1478, r24	; 0x801478 <_ZL12comment_mode>
        return;
    fff8:	7a c2       	rjmp	.+1268   	; 0x104ee <__EEPROM_REGION_LENGTH__+0x4ee>
      }
	  comment_mode = false;
    fffa:	10 92 78 14 	sts	0x1478, r1	; 0x801478 <_ZL12comment_mode>
      cmdbuffer[serial_count] = 0; //terminate string
    fffe:	fc 01       	movw	r30, r24
   10000:	e5 58       	subi	r30, 0x85	; 133
   10002:	fa 4e       	sbci	r31, 0xEA	; 234
   10004:	10 82       	st	Z, r1
      if(strchr(cmdbuffer, 'N') != NULL) {
   10006:	6e e4       	ldi	r22, 0x4E	; 78
   10008:	70 e0       	ldi	r23, 0x00	; 0
   1000a:	8b e7       	ldi	r24, 0x7B	; 123
   1000c:	95 e1       	ldi	r25, 0x15	; 21
   1000e:	0e 94 3a ac 	call	0x15874	; 0x15874 <strchr>
   10012:	00 97       	sbiw	r24, 0x00	; 0
   10014:	09 f4       	brne	.+2      	; 0x10018 <__EEPROM_REGION_LENGTH__+0x18>
   10016:	65 c1       	rjmp	.+714    	; 0x102e2 <__EEPROM_REGION_LENGTH__+0x2e2>
          strchr_pointer = strchr(cmdbuffer, 'N');
   10018:	90 93 77 14 	sts	0x1477, r25	; 0x801477 <_ZL14strchr_pointer+0x1>
   1001c:	80 93 76 14 	sts	0x1476, r24	; 0x801476 <_ZL14strchr_pointer>
          gcode_N = (strtol(&cmdbuffer[strchr_pointer - cmdbuffer + 1], NULL, 10));
   10020:	21 e0       	ldi	r18, 0x01	; 1
   10022:	30 e0       	ldi	r19, 0x00	; 0
   10024:	e9 01       	movw	r28, r18
   10026:	cb 57       	subi	r28, 0x7B	; 123
   10028:	d5 41       	sbci	r29, 0x15	; 21
   1002a:	4a e0       	ldi	r20, 0x0A	; 10
   1002c:	50 e0       	ldi	r21, 0x00	; 0
   1002e:	60 e0       	ldi	r22, 0x00	; 0
   10030:	70 e0       	ldi	r23, 0x00	; 0
   10032:	82 0f       	add	r24, r18
   10034:	93 1f       	adc	r25, r19
   10036:	0e 94 cc aa 	call	0x15598	; 0x15598 <strtol>
   1003a:	60 93 83 16 	sts	0x1683, r22	; 0x801683 <_ZL7gcode_N>
   1003e:	70 93 84 16 	sts	0x1684, r23	; 0x801684 <_ZL7gcode_N+0x1>
   10042:	80 93 85 16 	sts	0x1685, r24	; 0x801685 <_ZL7gcode_N+0x2>
   10046:	90 93 86 16 	sts	0x1686, r25	; 0x801686 <_ZL7gcode_N+0x3>
          if(gcode_N != gcode_LastN+1 && (strstr_P(cmdbuffer, PSTR("M110")) == NULL) ) {
   1004a:	00 91 7f 16 	lds	r16, 0x167F	; 0x80167f <_ZL11gcode_LastN>
   1004e:	10 91 80 16 	lds	r17, 0x1680	; 0x801680 <_ZL11gcode_LastN+0x1>
   10052:	20 91 81 16 	lds	r18, 0x1681	; 0x801681 <_ZL11gcode_LastN+0x2>
   10056:	30 91 82 16 	lds	r19, 0x1682	; 0x801682 <_ZL11gcode_LastN+0x3>
   1005a:	0f 5f       	subi	r16, 0xFF	; 255
   1005c:	1f 4f       	sbci	r17, 0xFF	; 255
   1005e:	2f 4f       	sbci	r18, 0xFF	; 255
   10060:	3f 4f       	sbci	r19, 0xFF	; 255
   10062:	60 17       	cp	r22, r16
   10064:	71 07       	cpc	r23, r17
   10066:	82 07       	cpc	r24, r18
   10068:	93 07       	cpc	r25, r19
   1006a:	09 f4       	brne	.+2      	; 0x1006e <__EEPROM_REGION_LENGTH__+0x6e>
   1006c:	36 c2       	rjmp	.+1132   	; 0x104da <__EEPROM_REGION_LENGTH__+0x4da>
   1006e:	66 e8       	ldi	r22, 0x86	; 134
   10070:	72 e1       	ldi	r23, 0x12	; 18
   10072:	8b e7       	ldi	r24, 0x7B	; 123
   10074:	95 e1       	ldi	r25, 0x15	; 21
   10076:	0e 94 17 ac 	call	0x1582e	; 0x1582e <strstr_P>
   1007a:	89 2b       	or	r24, r25
   1007c:	09 f0       	breq	.+2      	; 0x10080 <__EEPROM_REGION_LENGTH__+0x80>
   1007e:	2d c2       	rjmp	.+1114   	; 0x104da <__EEPROM_REGION_LENGTH__+0x4da>
   10080:	22 c2       	rjmp	.+1092   	; 0x104c6 <__EEPROM_REGION_LENGTH__+0x4c6>
   10082:	d8 01       	movw	r26, r16
   10084:	ed 91       	ld	r30, X+
   10086:	fc 91       	ld	r31, X
   10088:	01 90       	ld	r0, Z+
   1008a:	f0 81       	ld	r31, Z
   1008c:	e0 2d       	mov	r30, r0
   1008e:	c8 01       	movw	r24, r16
   10090:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10092:	21 96       	adiw	r28, 0x01	; 1
   10094:	fe 01       	movw	r30, r28
   10096:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10098:	61 11       	cpse	r22, r1
   1009a:	f3 cf       	rjmp	.-26     	; 0x10082 <__EEPROM_REGION_LENGTH__+0x82>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   1009c:	e1 e5       	ldi	r30, 0x51	; 81
   1009e:	f2 e1       	ldi	r31, 0x12	; 18
   100a0:	64 91       	lpm	r22, Z
	while(ch)
   100a2:	66 23       	and	r22, r22
   100a4:	81 f0       	breq	.+32     	; 0x100c6 <__EEPROM_REGION_LENGTH__+0xc6>
   100a6:	ef 01       	movw	r28, r30
   100a8:	08 e0       	ldi	r16, 0x08	; 8
   100aa:	1a e0       	ldi	r17, 0x0A	; 10
   100ac:	d8 01       	movw	r26, r16
   100ae:	ed 91       	ld	r30, X+
   100b0:	fc 91       	ld	r31, X
   100b2:	01 90       	ld	r0, Z+
   100b4:	f0 81       	ld	r31, Z
   100b6:	e0 2d       	mov	r30, r0
   100b8:	c8 01       	movw	r24, r16
   100ba:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   100bc:	21 96       	adiw	r28, 0x01	; 1
   100be:	fe 01       	movw	r30, r28
   100c0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   100c2:	61 11       	cpse	r22, r1
   100c4:	f3 cf       	rjmp	.-26     	; 0x100ac <__EEPROM_REGION_LENGTH__+0xac>
			SERIAL_PGM(MSG_BEGIN);
            SERIAL_PGM(MSG_ERR_LINE_NO);
            SERIAL_PORT.print(gcode_LastN);
   100c6:	40 91 7f 16 	lds	r20, 0x167F	; 0x80167f <_ZL11gcode_LastN>
   100ca:	50 91 80 16 	lds	r21, 0x1680	; 0x801680 <_ZL11gcode_LastN+0x1>
   100ce:	60 91 81 16 	lds	r22, 0x1681	; 0x801681 <_ZL11gcode_LastN+0x2>
   100d2:	70 91 82 16 	lds	r23, 0x1682	; 0x801682 <_ZL11gcode_LastN+0x3>
   100d6:	2a e0       	ldi	r18, 0x0A	; 10
   100d8:	30 e0       	ldi	r19, 0x00	; 0
   100da:	88 e0       	ldi	r24, 0x08	; 8
   100dc:	9a e0       	ldi	r25, 0x0A	; 10
   100de:	0e 94 6c 8a 	call	0x114d8	; 0x114d8 <_ZN5Print5printEli>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   100e2:	ee e4       	ldi	r30, 0x4E	; 78
   100e4:	f2 e1       	ldi	r31, 0x12	; 18
   100e6:	64 91       	lpm	r22, Z
	while(ch)
   100e8:	66 23       	and	r22, r22
   100ea:	81 f0       	breq	.+32     	; 0x1010c <__EEPROM_REGION_LENGTH__+0x10c>
   100ec:	ef 01       	movw	r28, r30
   100ee:	08 e0       	ldi	r16, 0x08	; 8
   100f0:	1a e0       	ldi	r17, 0x0A	; 10
   100f2:	d8 01       	movw	r26, r16
   100f4:	ed 91       	ld	r30, X+
   100f6:	fc 91       	ld	r31, X
   100f8:	01 90       	ld	r0, Z+
   100fa:	f0 81       	ld	r31, Z
   100fc:	e0 2d       	mov	r30, r0
   100fe:	c8 01       	movw	r24, r16
   10100:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10102:	21 96       	adiw	r28, 0x01	; 1
   10104:	fe 01       	movw	r30, r28
   10106:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10108:	61 11       	cpse	r22, r1
   1010a:	f3 cf       	rjmp	.-26     	; 0x100f2 <__EEPROM_REGION_LENGTH__+0xf2>
			SERIAL_PGMLN(MSG_TERMINATE);
   1010c:	88 e0       	ldi	r24, 0x08	; 8
   1010e:	9a e0       	ldi	r25, 0x0A	; 10
   10110:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
            //Serial.println(gcode_N);
            FlushSerialRequestResend();
   10114:	09 df       	rcall	.-494    	; 0xff28 <_Z24FlushSerialRequestResendv>
            serial_count = 0;
   10116:	10 92 7a 14 	sts	0x147A, r1	; 0x80147a <_ZL12serial_count+0x1>
   1011a:	10 92 79 14 	sts	0x1479, r1	; 0x801479 <_ZL12serial_count>
			comment_mode = true;
   1011e:	81 e0       	ldi	r24, 0x01	; 1
   10120:	80 93 78 14 	sts	0x1478, r24	; 0x801478 <_ZL12comment_mode>
            return;
   10124:	e4 c1       	rjmp	.+968    	; 0x104ee <__EEPROM_REGION_LENGTH__+0x4ee>
          }
          if(strchr(cmdbuffer, '*') != NULL) {
            unsigned short checksum = 0;
            byte count = 0;
            //while(cmdbuffer[bufindw][count] != '*') checksum = checksum^cmdbuffer[bufindw][count++];
            strchr_pointer = strchr(cmdbuffer, '*');
   10126:	90 93 77 14 	sts	0x1477, r25	; 0x801477 <_ZL14strchr_pointer+0x1>
   1012a:	80 93 76 14 	sts	0x1476, r24	; 0x801476 <_ZL14strchr_pointer>
			checksum = crc16(&cmdbuffer[strchr_pointer - cmdbuffer + 1],(strchr_pointer - cmdbuffer + 1) );
   1012e:	bc 01       	movw	r22, r24
   10130:	6c 0f       	add	r22, r28
   10132:	7d 1f       	adc	r23, r29
   10134:	eb 01       	movw	r28, r22
   10136:	c5 58       	subi	r28, 0x85	; 133
   10138:	da 4e       	sbci	r29, 0xEA	; 234
   1013a:	ce 01       	movw	r24, r28
   1013c:	0e 94 22 3c 	call	0x7844	; 0x7844 <_Z5crc16Pct>
   10140:	8c 01       	movw	r16, r24
            if( (int)(strtod(&cmdbuffer[strchr_pointer - cmdbuffer + 1], NULL)) != checksum) {
   10142:	60 e0       	ldi	r22, 0x00	; 0
   10144:	70 e0       	ldi	r23, 0x00	; 0
   10146:	ce 01       	movw	r24, r28
   10148:	0e 94 79 a9 	call	0x152f2	; 0x152f2 <strtod>
   1014c:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
   10150:	06 17       	cp	r16, r22
   10152:	17 07       	cpc	r17, r23
   10154:	09 f4       	brne	.+2      	; 0x10158 <__EEPROM_REGION_LENGTH__+0x158>
   10156:	b4 c0       	rjmp	.+360    	; 0x102c0 <__EEPROM_REGION_LENGTH__+0x2c0>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10158:	ec e4       	ldi	r30, 0x4C	; 76
   1015a:	f2 e1       	ldi	r31, 0x12	; 18
   1015c:	64 91       	lpm	r22, Z
	while(ch)
   1015e:	66 23       	and	r22, r22
   10160:	81 f0       	breq	.+32     	; 0x10182 <__EEPROM_REGION_LENGTH__+0x182>
   10162:	ef 01       	movw	r28, r30
   10164:	08 e0       	ldi	r16, 0x08	; 8
   10166:	1a e0       	ldi	r17, 0x0A	; 10
   10168:	d8 01       	movw	r26, r16
   1016a:	ed 91       	ld	r30, X+
   1016c:	fc 91       	ld	r31, X
   1016e:	01 90       	ld	r0, Z+
   10170:	f0 81       	ld	r31, Z
   10172:	e0 2d       	mov	r30, r0
   10174:	c8 01       	movw	r24, r16
   10176:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10178:	21 96       	adiw	r28, 0x01	; 1
   1017a:	fe 01       	movw	r30, r28
   1017c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   1017e:	61 11       	cpse	r22, r1
   10180:	f3 cf       	rjmp	.-26     	; 0x10168 <__EEPROM_REGION_LENGTH__+0x168>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10182:	ed e2       	ldi	r30, 0x2D	; 45
   10184:	f2 e1       	ldi	r31, 0x12	; 18
   10186:	64 91       	lpm	r22, Z
	while(ch)
   10188:	66 23       	and	r22, r22
   1018a:	81 f0       	breq	.+32     	; 0x101ac <__EEPROM_REGION_LENGTH__+0x1ac>
   1018c:	ef 01       	movw	r28, r30
   1018e:	08 e0       	ldi	r16, 0x08	; 8
   10190:	1a e0       	ldi	r17, 0x0A	; 10
   10192:	d8 01       	movw	r26, r16
   10194:	ed 91       	ld	r30, X+
   10196:	fc 91       	ld	r31, X
   10198:	01 90       	ld	r0, Z+
   1019a:	f0 81       	ld	r31, Z
   1019c:	e0 2d       	mov	r30, r0
   1019e:	c8 01       	movw	r24, r16
   101a0:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   101a2:	21 96       	adiw	r28, 0x01	; 1
   101a4:	fe 01       	movw	r30, r28
   101a6:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   101a8:	61 11       	cpse	r22, r1
   101aa:	f3 cf       	rjmp	.-26     	; 0x10192 <__EEPROM_REGION_LENGTH__+0x192>
			  SERIAL_PGM(MSG_BEGIN);
              SERIAL_PGM(MSG_ERR_CHECKSUM_MISMATCH);
              SERIAL_PORT.print(gcode_LastN);
   101ac:	40 91 7f 16 	lds	r20, 0x167F	; 0x80167f <_ZL11gcode_LastN>
   101b0:	50 91 80 16 	lds	r21, 0x1680	; 0x801680 <_ZL11gcode_LastN+0x1>
   101b4:	60 91 81 16 	lds	r22, 0x1681	; 0x801681 <_ZL11gcode_LastN+0x2>
   101b8:	70 91 82 16 	lds	r23, 0x1682	; 0x801682 <_ZL11gcode_LastN+0x3>
   101bc:	2a e0       	ldi	r18, 0x0A	; 10
   101be:	30 e0       	ldi	r19, 0x00	; 0
   101c0:	88 e0       	ldi	r24, 0x08	; 8
   101c2:	9a e0       	ldi	r25, 0x0A	; 10
   101c4:	0e 94 6c 8a 	call	0x114d8	; 0x114d8 <_ZN5Print5printEli>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   101c8:	ea e2       	ldi	r30, 0x2A	; 42
   101ca:	f2 e1       	ldi	r31, 0x12	; 18
   101cc:	64 91       	lpm	r22, Z
	while(ch)
   101ce:	66 23       	and	r22, r22
   101d0:	81 f0       	breq	.+32     	; 0x101f2 <__EEPROM_REGION_LENGTH__+0x1f2>
   101d2:	ef 01       	movw	r28, r30
   101d4:	08 e0       	ldi	r16, 0x08	; 8
   101d6:	1a e0       	ldi	r17, 0x0A	; 10
   101d8:	d8 01       	movw	r26, r16
   101da:	ed 91       	ld	r30, X+
   101dc:	fc 91       	ld	r31, X
   101de:	01 90       	ld	r0, Z+
   101e0:	f0 81       	ld	r31, Z
   101e2:	e0 2d       	mov	r30, r0
   101e4:	c8 01       	movw	r24, r16
   101e6:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   101e8:	21 96       	adiw	r28, 0x01	; 1
   101ea:	fe 01       	movw	r30, r28
   101ec:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   101ee:	61 11       	cpse	r22, r1
   101f0:	f3 cf       	rjmp	.-26     	; 0x101d8 <__EEPROM_REGION_LENGTH__+0x1d8>
			  SERIAL_PGMLN(MSG_TERMINATE);
   101f2:	88 e0       	ldi	r24, 0x08	; 8
   101f4:	9a e0       	ldi	r25, 0x0A	; 10
   101f6:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
              FlushSerialRequestResend();
   101fa:	96 de       	rcall	.-724    	; 0xff28 <_Z24FlushSerialRequestResendv>
              serial_count = 0;
   101fc:	10 92 7a 14 	sts	0x147A, r1	; 0x80147a <_ZL12serial_count+0x1>
   10200:	10 92 79 14 	sts	0x1479, r1	; 0x801479 <_ZL12serial_count>
			  comment_mode = true;
   10204:	81 e0       	ldi	r24, 0x01	; 1
   10206:	80 93 78 14 	sts	0x1478, r24	; 0x801478 <_ZL12comment_mode>
              return;
   1020a:	71 c1       	rjmp	.+738    	; 0x104ee <__EEPROM_REGION_LENGTH__+0x4ee>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   1020c:	e8 e2       	ldi	r30, 0x28	; 40
   1020e:	f2 e1       	ldi	r31, 0x12	; 18
   10210:	64 91       	lpm	r22, Z
	while(ch)
   10212:	66 23       	and	r22, r22
   10214:	81 f0       	breq	.+32     	; 0x10236 <__EEPROM_REGION_LENGTH__+0x236>
   10216:	ef 01       	movw	r28, r30
   10218:	08 e0       	ldi	r16, 0x08	; 8
   1021a:	1a e0       	ldi	r17, 0x0A	; 10
   1021c:	d8 01       	movw	r26, r16
   1021e:	ed 91       	ld	r30, X+
   10220:	fc 91       	ld	r31, X
   10222:	01 90       	ld	r0, Z+
   10224:	f0 81       	ld	r31, Z
   10226:	e0 2d       	mov	r30, r0
   10228:	c8 01       	movw	r24, r16
   1022a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   1022c:	21 96       	adiw	r28, 0x01	; 1
   1022e:	fe 01       	movw	r30, r28
   10230:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10232:	61 11       	cpse	r22, r1
   10234:	f3 cf       	rjmp	.-26     	; 0x1021c <__EEPROM_REGION_LENGTH__+0x21c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10236:	ee ef       	ldi	r30, 0xFE	; 254
   10238:	f1 e1       	ldi	r31, 0x11	; 17
   1023a:	64 91       	lpm	r22, Z
	while(ch)
   1023c:	66 23       	and	r22, r22
   1023e:	81 f0       	breq	.+32     	; 0x10260 <__EEPROM_REGION_LENGTH__+0x260>
   10240:	ef 01       	movw	r28, r30
   10242:	08 e0       	ldi	r16, 0x08	; 8
   10244:	1a e0       	ldi	r17, 0x0A	; 10
   10246:	d8 01       	movw	r26, r16
   10248:	ed 91       	ld	r30, X+
   1024a:	fc 91       	ld	r31, X
   1024c:	01 90       	ld	r0, Z+
   1024e:	f0 81       	ld	r31, Z
   10250:	e0 2d       	mov	r30, r0
   10252:	c8 01       	movw	r24, r16
   10254:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10256:	21 96       	adiw	r28, 0x01	; 1
   10258:	fe 01       	movw	r30, r28
   1025a:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   1025c:	61 11       	cpse	r22, r1
   1025e:	f3 cf       	rjmp	.-26     	; 0x10246 <__EEPROM_REGION_LENGTH__+0x246>
            }
            //if no errors, continue parsing
          } else {
			SERIAL_PGM(MSG_BEGIN);
            SERIAL_PGM(MSG_ERR_NO_CHECKSUM);
            SERIAL_PORT.print(gcode_LastN);
   10260:	40 91 7f 16 	lds	r20, 0x167F	; 0x80167f <_ZL11gcode_LastN>
   10264:	50 91 80 16 	lds	r21, 0x1680	; 0x801680 <_ZL11gcode_LastN+0x1>
   10268:	60 91 81 16 	lds	r22, 0x1681	; 0x801681 <_ZL11gcode_LastN+0x2>
   1026c:	70 91 82 16 	lds	r23, 0x1682	; 0x801682 <_ZL11gcode_LastN+0x3>
   10270:	2a e0       	ldi	r18, 0x0A	; 10
   10272:	30 e0       	ldi	r19, 0x00	; 0
   10274:	88 e0       	ldi	r24, 0x08	; 8
   10276:	9a e0       	ldi	r25, 0x0A	; 10
   10278:	0e 94 6c 8a 	call	0x114d8	; 0x114d8 <_ZN5Print5printEli>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   1027c:	eb ef       	ldi	r30, 0xFB	; 251
   1027e:	f1 e1       	ldi	r31, 0x11	; 17
   10280:	64 91       	lpm	r22, Z
	while(ch)
   10282:	66 23       	and	r22, r22
   10284:	81 f0       	breq	.+32     	; 0x102a6 <__EEPROM_REGION_LENGTH__+0x2a6>
   10286:	ef 01       	movw	r28, r30
   10288:	08 e0       	ldi	r16, 0x08	; 8
   1028a:	1a e0       	ldi	r17, 0x0A	; 10
   1028c:	d8 01       	movw	r26, r16
   1028e:	ed 91       	ld	r30, X+
   10290:	fc 91       	ld	r31, X
   10292:	01 90       	ld	r0, Z+
   10294:	f0 81       	ld	r31, Z
   10296:	e0 2d       	mov	r30, r0
   10298:	c8 01       	movw	r24, r16
   1029a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   1029c:	21 96       	adiw	r28, 0x01	; 1
   1029e:	fe 01       	movw	r30, r28
   102a0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   102a2:	61 11       	cpse	r22, r1
   102a4:	f3 cf       	rjmp	.-26     	; 0x1028c <__EEPROM_REGION_LENGTH__+0x28c>
			SERIAL_PGMLN(MSG_TERMINATE);
   102a6:	88 e0       	ldi	r24, 0x08	; 8
   102a8:	9a e0       	ldi	r25, 0x0A	; 10
   102aa:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
            FlushSerialRequestResend();
   102ae:	3c de       	rcall	.-904    	; 0xff28 <_Z24FlushSerialRequestResendv>
            serial_count = 0;
   102b0:	10 92 7a 14 	sts	0x147A, r1	; 0x80147a <_ZL12serial_count+0x1>
   102b4:	10 92 79 14 	sts	0x1479, r1	; 0x801479 <_ZL12serial_count>
			comment_mode = true;
   102b8:	81 e0       	ldi	r24, 0x01	; 1
   102ba:	80 93 78 14 	sts	0x1478, r24	; 0x801478 <_ZL12comment_mode>
            return;
   102be:	17 c1       	rjmp	.+558    	; 0x104ee <__EEPROM_REGION_LENGTH__+0x4ee>
          }
          gcode_LastN = gcode_N;
   102c0:	80 91 83 16 	lds	r24, 0x1683	; 0x801683 <_ZL7gcode_N>
   102c4:	90 91 84 16 	lds	r25, 0x1684	; 0x801684 <_ZL7gcode_N+0x1>
   102c8:	a0 91 85 16 	lds	r26, 0x1685	; 0x801685 <_ZL7gcode_N+0x2>
   102cc:	b0 91 86 16 	lds	r27, 0x1686	; 0x801686 <_ZL7gcode_N+0x3>
   102d0:	80 93 7f 16 	sts	0x167F, r24	; 0x80167f <_ZL11gcode_LastN>
   102d4:	90 93 80 16 	sts	0x1680, r25	; 0x801680 <_ZL11gcode_LastN+0x1>
   102d8:	a0 93 81 16 	sts	0x1681, r26	; 0x801681 <_ZL11gcode_LastN+0x2>
   102dc:	b0 93 82 16 	sts	0x1682, r27	; 0x801682 <_ZL11gcode_LastN+0x3>
   102e0:	66 c0       	rjmp	.+204    	; 0x103ae <__EEPROM_REGION_LENGTH__+0x3ae>
          //if no errors, continue parsing
      } else { // if we don't receive 'N' but still see '*'
          if((strchr(cmdbuffer, '*') != NULL)) {
   102e2:	6a e2       	ldi	r22, 0x2A	; 42
   102e4:	70 e0       	ldi	r23, 0x00	; 0
   102e6:	8b e7       	ldi	r24, 0x7B	; 123
   102e8:	95 e1       	ldi	r25, 0x15	; 21
   102ea:	0e 94 3a ac 	call	0x15874	; 0x15874 <strchr>
   102ee:	89 2b       	or	r24, r25
   102f0:	09 f4       	brne	.+2      	; 0x102f4 <__EEPROM_REGION_LENGTH__+0x2f4>
   102f2:	5d c0       	rjmp	.+186    	; 0x103ae <__EEPROM_REGION_LENGTH__+0x3ae>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   102f4:	e9 ef       	ldi	r30, 0xF9	; 249
   102f6:	f1 e1       	ldi	r31, 0x11	; 17
   102f8:	64 91       	lpm	r22, Z
	while(ch)
   102fa:	66 23       	and	r22, r22
   102fc:	81 f0       	breq	.+32     	; 0x1031e <__EEPROM_REGION_LENGTH__+0x31e>
   102fe:	ef 01       	movw	r28, r30
   10300:	08 e0       	ldi	r16, 0x08	; 8
   10302:	1a e0       	ldi	r17, 0x0A	; 10
   10304:	d8 01       	movw	r26, r16
   10306:	ed 91       	ld	r30, X+
   10308:	fc 91       	ld	r31, X
   1030a:	01 90       	ld	r0, Z+
   1030c:	f0 81       	ld	r31, Z
   1030e:	e0 2d       	mov	r30, r0
   10310:	c8 01       	movw	r24, r16
   10312:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10314:	21 96       	adiw	r28, 0x01	; 1
   10316:	fe 01       	movw	r30, r28
   10318:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   1031a:	61 11       	cpse	r22, r1
   1031c:	f3 cf       	rjmp	.-26     	; 0x10304 <__EEPROM_REGION_LENGTH__+0x304>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   1031e:	ef ec       	ldi	r30, 0xCF	; 207
   10320:	f1 e1       	ldi	r31, 0x11	; 17
   10322:	64 91       	lpm	r22, Z
	while(ch)
   10324:	66 23       	and	r22, r22
   10326:	81 f0       	breq	.+32     	; 0x10348 <__EEPROM_REGION_LENGTH__+0x348>
   10328:	ef 01       	movw	r28, r30
   1032a:	08 e0       	ldi	r16, 0x08	; 8
   1032c:	1a e0       	ldi	r17, 0x0A	; 10
   1032e:	d8 01       	movw	r26, r16
   10330:	ed 91       	ld	r30, X+
   10332:	fc 91       	ld	r31, X
   10334:	01 90       	ld	r0, Z+
   10336:	f0 81       	ld	r31, Z
   10338:	e0 2d       	mov	r30, r0
   1033a:	c8 01       	movw	r24, r16
   1033c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   1033e:	21 96       	adiw	r28, 0x01	; 1
   10340:	fe 01       	movw	r30, r28
   10342:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10344:	61 11       	cpse	r22, r1
   10346:	f3 cf       	rjmp	.-26     	; 0x1032e <__EEPROM_REGION_LENGTH__+0x32e>
			SERIAL_PGM(MSG_BEGIN);
            SERIAL_PGM(MSG_ERR_NO_LINENUMBER_WITH_CHECKSUM);
            SERIAL_PORT.print(gcode_LastN);
   10348:	40 91 7f 16 	lds	r20, 0x167F	; 0x80167f <_ZL11gcode_LastN>
   1034c:	50 91 80 16 	lds	r21, 0x1680	; 0x801680 <_ZL11gcode_LastN+0x1>
   10350:	60 91 81 16 	lds	r22, 0x1681	; 0x801681 <_ZL11gcode_LastN+0x2>
   10354:	70 91 82 16 	lds	r23, 0x1682	; 0x801682 <_ZL11gcode_LastN+0x3>
   10358:	2a e0       	ldi	r18, 0x0A	; 10
   1035a:	30 e0       	ldi	r19, 0x00	; 0
   1035c:	88 e0       	ldi	r24, 0x08	; 8
   1035e:	9a e0       	ldi	r25, 0x0A	; 10
   10360:	0e 94 6c 8a 	call	0x114d8	; 0x114d8 <_ZN5Print5printEli>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10364:	ec ec       	ldi	r30, 0xCC	; 204
   10366:	f1 e1       	ldi	r31, 0x11	; 17
   10368:	64 91       	lpm	r22, Z
	while(ch)
   1036a:	66 23       	and	r22, r22
   1036c:	81 f0       	breq	.+32     	; 0x1038e <__EEPROM_REGION_LENGTH__+0x38e>
   1036e:	ef 01       	movw	r28, r30
   10370:	08 e0       	ldi	r16, 0x08	; 8
   10372:	1a e0       	ldi	r17, 0x0A	; 10
   10374:	d8 01       	movw	r26, r16
   10376:	ed 91       	ld	r30, X+
   10378:	fc 91       	ld	r31, X
   1037a:	01 90       	ld	r0, Z+
   1037c:	f0 81       	ld	r31, Z
   1037e:	e0 2d       	mov	r30, r0
   10380:	c8 01       	movw	r24, r16
   10382:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10384:	21 96       	adiw	r28, 0x01	; 1
   10386:	fe 01       	movw	r30, r28
   10388:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   1038a:	61 11       	cpse	r22, r1
   1038c:	f3 cf       	rjmp	.-26     	; 0x10374 <__EEPROM_REGION_LENGTH__+0x374>
			SERIAL_PGMLN(MSG_TERMINATE);
   1038e:	88 e0       	ldi	r24, 0x08	; 8
   10390:	9a e0       	ldi	r25, 0x0A	; 10
   10392:	0e 94 f5 89 	call	0x113ea	; 0x113ea <_ZN5Print7printlnEv>
			SERIAL_PORT.flush();
   10396:	88 e0       	ldi	r24, 0x08	; 8
   10398:	9a e0       	ldi	r25, 0x0A	; 10
   1039a:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
            serial_count = 0;
   1039e:	10 92 7a 14 	sts	0x147A, r1	; 0x80147a <_ZL12serial_count+0x1>
   103a2:	10 92 79 14 	sts	0x1479, r1	; 0x801479 <_ZL12serial_count>
			comment_mode = true;
   103a6:	81 e0       	ldi	r24, 0x01	; 1
   103a8:	80 93 78 14 	sts	0x1478, r24	; 0x801478 <_ZL12comment_mode>
            return;
   103ac:	a0 c0       	rjmp	.+320    	; 0x104ee <__EEPROM_REGION_LENGTH__+0x4ee>
          }
      }
      if(strchr(cmdbuffer, ';') != NULL) {
   103ae:	6b e3       	ldi	r22, 0x3B	; 59
   103b0:	70 e0       	ldi	r23, 0x00	; 0
   103b2:	8b e7       	ldi	r24, 0x7B	; 123
   103b4:	95 e1       	ldi	r25, 0x15	; 21
   103b6:	0e 94 3a ac 	call	0x15874	; 0x15874 <strchr>
   103ba:	89 2b       	or	r24, r25
   103bc:	41 f0       	breq	.+16     	; 0x103ce <__EEPROM_REGION_LENGTH__+0x3ce>
		  comment_mode = true;
   103be:	81 e0       	ldi	r24, 0x01	; 1
   103c0:	80 93 78 14 	sts	0x1478, r24	; 0x801478 <_ZL12comment_mode>
          serial_count = 0; //clear buffer
   103c4:	10 92 7a 14 	sts	0x147A, r1	; 0x80147a <_ZL12serial_count+0x1>
   103c8:	10 92 79 14 	sts	0x1479, r1	; 0x801479 <_ZL12serial_count>
		  return;
   103cc:	90 c0       	rjmp	.+288    	; 0x104ee <__EEPROM_REGION_LENGTH__+0x4ee>
	  }
	  // Determine if an outstanding error caused safety shutdown. If so respond with header
      if((strchr(cmdbuffer, 'G') != NULL)){
   103ce:	67 e4       	ldi	r22, 0x47	; 71
   103d0:	70 e0       	ldi	r23, 0x00	; 0
   103d2:	8b e7       	ldi	r24, 0x7B	; 123
   103d4:	95 e1       	ldi	r25, 0x15	; 21
   103d6:	0e 94 3a ac 	call	0x15874	; 0x15874 <strchr>
   103da:	00 97       	sbiw	r24, 0x00	; 0
   103dc:	09 f4       	brne	.+2      	; 0x103e0 <__EEPROM_REGION_LENGTH__+0x3e0>
   103de:	62 c0       	rjmp	.+196    	; 0x104a4 <__EEPROM_REGION_LENGTH__+0x4a4>
          strchr_pointer = strchr(cmdbuffer, 'G');
   103e0:	90 93 77 14 	sts	0x1477, r25	; 0x801477 <_ZL14strchr_pointer+0x1>
   103e4:	80 93 76 14 	sts	0x1476, r24	; 0x801476 <_ZL14strchr_pointer>
          switch((int)((strtod(&cmdbuffer[strchr_pointer - cmdbuffer + 1], NULL)))) {
   103e8:	60 e0       	ldi	r22, 0x00	; 0
   103ea:	70 e0       	ldi	r23, 0x00	; 0
   103ec:	01 96       	adiw	r24, 0x01	; 1
   103ee:	0e 94 79 a9 	call	0x152f2	; 0x152f2 <strtod>
   103f2:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
   103f6:	66 30       	cpi	r22, 0x06	; 6
   103f8:	71 05       	cpc	r23, r1
   103fa:	08 f0       	brcs	.+2      	; 0x103fe <__EEPROM_REGION_LENGTH__+0x3fe>
   103fc:	53 c0       	rjmp	.+166    	; 0x104a4 <__EEPROM_REGION_LENGTH__+0x4a4>
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
				if(Stopped) { // If robot is stopped by an error the G[0-5] codes are ignored.
   103fe:	80 91 71 14 	lds	r24, 0x1471	; 0x801471 <Stopped>
   10402:	88 23       	and	r24, r24
   10404:	09 f4       	brne	.+2      	; 0x10408 <__EEPROM_REGION_LENGTH__+0x408>
   10406:	4e c0       	rjmp	.+156    	; 0x104a4 <__EEPROM_REGION_LENGTH__+0x4a4>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10408:	ea ec       	ldi	r30, 0xCA	; 202
   1040a:	f1 e1       	ldi	r31, 0x11	; 17
   1040c:	64 91       	lpm	r22, Z
	while(ch)
   1040e:	66 23       	and	r22, r22
   10410:	81 f0       	breq	.+32     	; 0x10432 <__EEPROM_REGION_LENGTH__+0x432>
   10412:	ef 01       	movw	r28, r30
   10414:	08 e0       	ldi	r16, 0x08	; 8
   10416:	1a e0       	ldi	r17, 0x0A	; 10
   10418:	d8 01       	movw	r26, r16
   1041a:	ed 91       	ld	r30, X+
   1041c:	fc 91       	ld	r31, X
   1041e:	01 90       	ld	r0, Z+
   10420:	f0 81       	ld	r31, Z
   10422:	e0 2d       	mov	r30, r0
   10424:	c8 01       	movw	r24, r16
   10426:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10428:	21 96       	adiw	r28, 0x01	; 1
   1042a:	fe 01       	movw	r30, r28
   1042c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   1042e:	61 11       	cpse	r22, r1
   10430:	f3 cf       	rjmp	.-26     	; 0x10418 <__EEPROM_REGION_LENGTH__+0x418>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10432:	e9 ea       	ldi	r30, 0xA9	; 169
   10434:	f1 e1       	ldi	r31, 0x11	; 17
   10436:	64 91       	lpm	r22, Z
	while(ch)
   10438:	66 23       	and	r22, r22
   1043a:	81 f0       	breq	.+32     	; 0x1045c <__EEPROM_REGION_LENGTH__+0x45c>
   1043c:	ef 01       	movw	r28, r30
   1043e:	08 e0       	ldi	r16, 0x08	; 8
   10440:	1a e0       	ldi	r17, 0x0A	; 10
   10442:	d8 01       	movw	r26, r16
   10444:	ed 91       	ld	r30, X+
   10446:	fc 91       	ld	r31, X
   10448:	01 90       	ld	r0, Z+
   1044a:	f0 81       	ld	r31, Z
   1044c:	e0 2d       	mov	r30, r0
   1044e:	c8 01       	movw	r24, r16
   10450:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10452:	21 96       	adiw	r28, 0x01	; 1
   10454:	fe 01       	movw	r30, r28
   10456:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10458:	61 11       	cpse	r22, r1
   1045a:	f3 cf       	rjmp	.-26     	; 0x10442 <__EEPROM_REGION_LENGTH__+0x442>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   1045c:	e6 ea       	ldi	r30, 0xA6	; 166
   1045e:	f1 e1       	ldi	r31, 0x11	; 17
   10460:	64 91       	lpm	r22, Z
	while(ch)
   10462:	66 23       	and	r22, r22
   10464:	81 f0       	breq	.+32     	; 0x10486 <__EEPROM_REGION_LENGTH__+0x486>
   10466:	ef 01       	movw	r28, r30
   10468:	08 e0       	ldi	r16, 0x08	; 8
   1046a:	1a e0       	ldi	r17, 0x0A	; 10
   1046c:	d8 01       	movw	r26, r16
   1046e:	ed 91       	ld	r30, X+
   10470:	fc 91       	ld	r31, X
   10472:	01 90       	ld	r0, Z+
   10474:	f0 81       	ld	r31, Z
   10476:	e0 2d       	mov	r30, r0
   10478:	c8 01       	movw	r24, r16
   1047a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   1047c:	21 96       	adiw	r28, 0x01	; 1
   1047e:	fe 01       	movw	r30, r28
   10480:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10482:	61 11       	cpse	r22, r1
					SERIAL_PGM(MSG_BEGIN);
					SERIAL_PGM(MSG_ERR_STOPPED);
					SERIAL_PGMLN(MSG_TERMINATE);
   10484:	f3 cf       	rjmp	.-26     	; 0x1046c <__EEPROM_REGION_LENGTH__+0x46c>
   10486:	88 e0       	ldi	r24, 0x08	; 8
   10488:	9a e0       	ldi	r25, 0x0A	; 10
   1048a:	af d7       	rcall	.+3934   	; 0x113ea <_ZN5Print7printlnEv>
					SERIAL_PORT.flush();
   1048c:	88 e0       	ldi	r24, 0x08	; 8
   1048e:	9a e0       	ldi	r25, 0x0A	; 10
   10490:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
					comment_mode = true;
   10494:	81 e0       	ldi	r24, 0x01	; 1
   10496:	80 93 78 14 	sts	0x1478, r24	; 0x801478 <_ZL12comment_mode>
					serial_count = 0;
   1049a:	10 92 7a 14 	sts	0x147A, r1	; 0x80147a <_ZL12serial_count+0x1>
   1049e:	10 92 79 14 	sts	0x1479, r1	; 0x801479 <_ZL12serial_count>
					return;
   104a2:	25 c0       	rjmp	.+74     	; 0x104ee <__EEPROM_REGION_LENGTH__+0x4ee>
			default:
				break;
          }
        }
		// finished processing c/r terminated cmdl
		serial_count = 0;
   104a4:	10 92 7a 14 	sts	0x147A, r1	; 0x80147a <_ZL12serial_count+0x1>
   104a8:	10 92 79 14 	sts	0x1479, r1	; 0x801479 <_ZL12serial_count>
		return;
   104ac:	20 c0       	rjmp	.+64     	; 0x104ee <__EEPROM_REGION_LENGTH__+0x4ee>
      } // if c/r l/f
      cmdbuffer[serial_count++] = serial_char;
   104ae:	a9 01       	movw	r20, r18
   104b0:	4f 5f       	subi	r20, 0xFF	; 255
   104b2:	5f 4f       	sbci	r21, 0xFF	; 255
   104b4:	50 93 7a 14 	sts	0x147A, r21	; 0x80147a <_ZL12serial_count+0x1>
   104b8:	40 93 79 14 	sts	0x1479, r20	; 0x801479 <_ZL12serial_count>
   104bc:	f9 01       	movw	r30, r18
   104be:	e5 58       	subi	r30, 0x85	; 133
   104c0:	fa 4e       	sbci	r31, 0xEA	; 234
   104c2:	80 83       	st	Z, r24
   104c4:	74 cd       	rjmp	.-1304   	; 0xffae <_Z11get_commandv+0xe>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   104c6:	e4 e8       	ldi	r30, 0x84	; 132
   104c8:	f2 e1       	ldi	r31, 0x12	; 18
   104ca:	64 91       	lpm	r22, Z
	while(ch)
   104cc:	66 23       	and	r22, r22
   104ce:	09 f4       	brne	.+2      	; 0x104d2 <__EEPROM_REGION_LENGTH__+0x4d2>
   104d0:	e5 cd       	rjmp	.-1078   	; 0x1009c <__EEPROM_REGION_LENGTH__+0x9c>
   104d2:	ef 01       	movw	r28, r30
   104d4:	08 e0       	ldi	r16, 0x08	; 8
   104d6:	1a e0       	ldi	r17, 0x0A	; 10
   104d8:	d4 cd       	rjmp	.-1112   	; 0x10082 <__EEPROM_REGION_LENGTH__+0x82>
            FlushSerialRequestResend();
            serial_count = 0;
			comment_mode = true;
            return;
          }
          if(strchr(cmdbuffer, '*') != NULL) {
   104da:	6a e2       	ldi	r22, 0x2A	; 42
   104dc:	70 e0       	ldi	r23, 0x00	; 0
   104de:	8b e7       	ldi	r24, 0x7B	; 123
   104e0:	95 e1       	ldi	r25, 0x15	; 21
   104e2:	0e 94 3a ac 	call	0x15874	; 0x15874 <strchr>
   104e6:	00 97       	sbiw	r24, 0x00	; 0
   104e8:	09 f0       	breq	.+2      	; 0x104ec <__EEPROM_REGION_LENGTH__+0x4ec>
   104ea:	1d ce       	rjmp	.-966    	; 0x10126 <__EEPROM_REGION_LENGTH__+0x126>
   104ec:	8f ce       	rjmp	.-738    	; 0x1020c <__EEPROM_REGION_LENGTH__+0x20c>
		return;
      } // if c/r l/f
      cmdbuffer[serial_count++] = serial_char;
  } // while avail

}
   104ee:	df 91       	pop	r29
   104f0:	cf 91       	pop	r28
   104f2:	1f 91       	pop	r17
   104f4:	0f 91       	pop	r16
   104f6:	08 95       	ret

000104f8 <_Z17manage_inactivityv>:

/*---------------------------------------------------
* Arrive here at the end of each command processing iteration to check for status related events
* ---------------------------------------------------
*/
void manage_inactivity() {
   104f8:	ef 92       	push	r14
   104fa:	ff 92       	push	r15
   104fc:	0f 93       	push	r16
   104fe:	1f 93       	push	r17
   10500:	cf 93       	push	r28
   10502:	df 93       	push	r29
   10504:	c7 ef       	ldi	r28, 0xF7	; 247
   10506:	d2 e1       	ldi	r29, 0x12	; 18
   10508:	0f 2e       	mov	r0, r31
   1050a:	fb e0       	ldi	r31, 0x0B	; 11
   1050c:	ef 2e       	mov	r14, r31
   1050e:	f3 e1       	ldi	r31, 0x13	; 19
   10510:	ff 2e       	mov	r15, r31
   10512:	f0 2d       	mov	r31, r0
  // check motor controllers
  for(int j =0; j < 10; j++) {
	  if(motorControl[j]) {
   10514:	88 81       	ld	r24, Y
   10516:	99 81       	ldd	r25, Y+1	; 0x01
   10518:	00 97       	sbiw	r24, 0x00	; 0
   1051a:	a1 f1       	breq	.+104    	; 0x10584 <_Z17manage_inactivityv+0x8c>
		if( motorControl[j]->isConnected() ) {
   1051c:	dc 01       	movw	r26, r24
   1051e:	ed 91       	ld	r30, X+
   10520:	fc 91       	ld	r31, X
   10522:	00 84       	ldd	r0, Z+8	; 0x08
   10524:	f1 85       	ldd	r31, Z+9	; 0x09
   10526:	e0 2d       	mov	r30, r0
   10528:	19 95       	eicall
   1052a:	89 2b       	or	r24, r25
   1052c:	59 f1       	breq	.+86     	; 0x10584 <_Z17manage_inactivityv+0x8c>
			motorControl[j]->checkEncoderShutdown();
   1052e:	88 81       	ld	r24, Y
   10530:	99 81       	ldd	r25, Y+1	; 0x01
   10532:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <_ZN20AbstractMotorControl20checkEncoderShutdownEv>
			motorControl[j]->checkUltrasonicShutdown();
   10536:	88 81       	ld	r24, Y
   10538:	99 81       	ldd	r25, Y+1	; 0x01
   1053a:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <_ZN20AbstractMotorControl23checkUltrasonicShutdownEv>
			if( motorControl[j]->queryFaultFlag() != fault ) {
   1053e:	88 81       	ld	r24, Y
   10540:	99 81       	ldd	r25, Y+1	; 0x01
   10542:	dc 01       	movw	r26, r24
   10544:	ed 91       	ld	r30, X+
   10546:	fc 91       	ld	r31, X
   10548:	04 84       	ldd	r0, Z+12	; 0x0c
   1054a:	f5 85       	ldd	r31, Z+13	; 0x0d
   1054c:	e0 2d       	mov	r30, r0
   1054e:	19 95       	eicall
   10550:	20 91 57 14 	lds	r18, 0x1457	; 0x801457 <fault>
   10554:	30 91 58 14 	lds	r19, 0x1458	; 0x801458 <fault+0x1>
   10558:	82 17       	cp	r24, r18
   1055a:	93 07       	cpc	r25, r19
   1055c:	99 f0       	breq	.+38     	; 0x10584 <_Z17manage_inactivityv+0x8c>
				fault = motorControl[j]->queryFaultFlag();
   1055e:	88 81       	ld	r24, Y
   10560:	99 81       	ldd	r25, Y+1	; 0x01
   10562:	dc 01       	movw	r26, r24
   10564:	ed 91       	ld	r30, X+
   10566:	fc 91       	ld	r31, X
   10568:	04 84       	ldd	r0, Z+12	; 0x0c
   1056a:	f5 85       	ldd	r31, Z+13	; 0x0d
   1056c:	e0 2d       	mov	r30, r0
   1056e:	19 95       	eicall
   10570:	90 93 58 14 	sts	0x1458, r25	; 0x801458 <fault+0x1>
   10574:	80 93 57 14 	sts	0x1457, r24	; 0x801457 <fault>
				publishMotorFaultCode(fault);
   10578:	0e 94 7c 3c 	call	0x78f8	; 0x78f8 <_Z21publishMotorFaultCodei>
				SERIAL_PORT.flush();
   1057c:	88 e0       	ldi	r24, 0x08	; 8
   1057e:	9a e0       	ldi	r25, 0x0A	; 10
   10580:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
   10584:	22 96       	adiw	r28, 0x02	; 2
* Arrive here at the end of each command processing iteration to check for status related events
* ---------------------------------------------------
*/
void manage_inactivity() {
  // check motor controllers
  for(int j =0; j < 10; j++) {
   10586:	ce 15       	cp	r28, r14
   10588:	df 05       	cpc	r29, r15
   1058a:	21 f6       	brne	.-120    	; 0x10514 <_Z17manage_inactivityv+0x1c>
			}
		}
	  }
  }
  
  if( realtime_output ) {		
   1058c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <_ZL15realtime_output>
   10590:	88 23       	and	r24, r24
   10592:	a9 f0       	breq	.+42     	; 0x105be <_Z17manage_inactivityv+0xc6>
   10594:	03 e4       	ldi	r16, 0x43	; 67
   10596:	14 e1       	ldi	r17, 0x14	; 20
   10598:	c0 e0       	ldi	r28, 0x00	; 0
   1059a:	d0 e0       	ldi	r29, 0x00	; 0
	// Check the ultrasonic ranging for all devices defined by successive M301 directives
	for(int i = 0 ; i < 10; i++) {
		if( psonics[i] ) {
   1059c:	f8 01       	movw	r30, r16
   1059e:	81 91       	ld	r24, Z+
   105a0:	91 91       	ld	r25, Z+
   105a2:	8f 01       	movw	r16, r30
   105a4:	00 97       	sbiw	r24, 0x00	; 0
   105a6:	39 f0       	breq	.+14     	; 0x105b6 <_Z17manage_inactivityv+0xbe>
			printUltrasonic(psonics[i], i);
   105a8:	be 01       	movw	r22, r28
   105aa:	0e 94 5c 3f 	call	0x7eb8	; 0x7eb8 <_Z15printUltrasonicP10Ultrasonici>
			SERIAL_PORT.flush();
   105ae:	88 e0       	ldi	r24, 0x08	; 8
   105b0:	9a e0       	ldi	r25, 0x0A	; 10
   105b2:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
	  }
  }
  
  if( realtime_output ) {		
	// Check the ultrasonic ranging for all devices defined by successive M301 directives
	for(int i = 0 ; i < 10; i++) {
   105b6:	21 96       	adiw	r28, 0x01	; 1
   105b8:	ca 30       	cpi	r28, 0x0A	; 10
   105ba:	d1 05       	cpc	r29, r1
   105bc:	79 f7       	brne	.-34     	; 0x1059c <_Z17manage_inactivityv+0xa4>
			printUltrasonic(psonics[i], i);
			SERIAL_PORT.flush();
		}
	}  
  }// realtime output
}
   105be:	df 91       	pop	r29
   105c0:	cf 91       	pop	r28
   105c2:	1f 91       	pop	r17
   105c4:	0f 91       	pop	r16
   105c6:	ff 90       	pop	r15
   105c8:	ef 90       	pop	r14
   105ca:	08 95       	ret

000105cc <_Z12processGCodei>:
}
/*--------------------------
* Process the Gcode command sequence
*---------------------------
*/
void processGCode(int cval) {
   105cc:	8f 92       	push	r8
   105ce:	9f 92       	push	r9
   105d0:	af 92       	push	r10
   105d2:	bf 92       	push	r11
   105d4:	cf 92       	push	r12
   105d6:	df 92       	push	r13
   105d8:	ef 92       	push	r14
   105da:	ff 92       	push	r15
   105dc:	0f 93       	push	r16
   105de:	1f 93       	push	r17
   105e0:	cf 93       	push	r28
   105e2:	df 93       	push	r29
	  int result;
	  int motorController, PWMDriver, motorChannel, motorPower, PWMLevel;
	  unsigned long codenum;
	  char *starpos = NULL;
    switch(cval)
   105e4:	84 36       	cpi	r24, 0x64	; 100
   105e6:	91 05       	cpc	r25, r1
   105e8:	09 f4       	brne	.+2      	; 0x105ec <_Z12processGCodei+0x20>
   105ea:	d6 c2       	rjmp	.+1452   	; 0x10b98 <_Z12processGCodei+0x5cc>
   105ec:	64 f4       	brge	.+24     	; 0x10606 <_Z12processGCodei+0x3a>
   105ee:	85 30       	cpi	r24, 0x05	; 5
   105f0:	91 05       	cpc	r25, r1
   105f2:	09 f4       	brne	.+2      	; 0x105f6 <_Z12processGCodei+0x2a>
   105f4:	b0 c0       	rjmp	.+352    	; 0x10756 <_Z12processGCodei+0x18a>
   105f6:	83 36       	cpi	r24, 0x63	; 99
   105f8:	91 05       	cpc	r25, r1
   105fa:	09 f4       	brne	.+2      	; 0x105fe <_Z12processGCodei+0x32>
   105fc:	6c c2       	rjmp	.+1240   	; 0x10ad6 <_Z12processGCodei+0x50a>
   105fe:	04 97       	sbiw	r24, 0x04	; 4
   10600:	09 f0       	breq	.+2      	; 0x10604 <_Z12processGCodei+0x38>
   10602:	c1 c5       	rjmp	.+2946   	; 0x11186 <_Z12processGCodei+0xbba>
   10604:	13 c0       	rjmp	.+38     	; 0x1062c <_Z12processGCodei+0x60>
   10606:	89 3c       	cpi	r24, 0xC9	; 201
   10608:	91 05       	cpc	r25, r1
   1060a:	09 f4       	brne	.+2      	; 0x1060e <_Z12processGCodei+0x42>
   1060c:	1a c4       	rjmp	.+2100   	; 0x10e42 <_Z12processGCodei+0x876>
   1060e:	2c f4       	brge	.+10     	; 0x1061a <_Z12processGCodei+0x4e>
   10610:	88 3c       	cpi	r24, 0xC8	; 200
   10612:	91 05       	cpc	r25, r1
   10614:	09 f4       	brne	.+2      	; 0x10618 <_Z12processGCodei+0x4c>
   10616:	0f c3       	rjmp	.+1566   	; 0x10c36 <_Z12processGCodei+0x66a>
   10618:	b6 c5       	rjmp	.+2924   	; 0x11186 <_Z12processGCodei+0xbba>
   1061a:	8a 3c       	cpi	r24, 0xCA	; 202
   1061c:	91 05       	cpc	r25, r1
   1061e:	09 f4       	brne	.+2      	; 0x10622 <_Z12processGCodei+0x56>
   10620:	6c c4       	rjmp	.+2264   	; 0x10efa <_Z12processGCodei+0x92e>
   10622:	8b 3c       	cpi	r24, 0xCB	; 203
   10624:	91 05       	cpc	r25, r1
   10626:	09 f4       	brne	.+2      	; 0x1062a <_Z12processGCodei+0x5e>
   10628:	08 c5       	rjmp	.+2576   	; 0x1103a <_Z12processGCodei+0xa6e>
   1062a:	ad c5       	rjmp	.+2906   	; 0x11186 <_Z12processGCodei+0xbba>
    {
	    
    case 4: // G4 dwell
      //LCD_MESSAGEPGM(MSG_DWELL);
      codenum = 0;
      if(code_seen('P')) codenum = code_value(); // milliseconds to wait
   1062c:	80 e5       	ldi	r24, 0x50	; 80
   1062e:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
   10632:	88 23       	and	r24, r24
   10634:	09 f4       	brne	.+2      	; 0x10638 <_Z12processGCodei+0x6c>
   10636:	0a c6       	rjmp	.+3092   	; 0x1124c <_Z12processGCodei+0xc80>
   10638:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
   1063c:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
   10640:	6b 01       	movw	r12, r22
   10642:	7c 01       	movw	r14, r24
      if(code_seen('S')) codenum = code_value() * 1000; // seconds to wait
   10644:	83 e5       	ldi	r24, 0x53	; 83
   10646:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
   1064a:	88 23       	and	r24, r24
   1064c:	61 f0       	breq	.+24     	; 0x10666 <_Z12processGCodei+0x9a>
   1064e:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
   10652:	20 e0       	ldi	r18, 0x00	; 0
   10654:	30 e0       	ldi	r19, 0x00	; 0
   10656:	4a e7       	ldi	r20, 0x7A	; 122
   10658:	54 e4       	ldi	r21, 0x44	; 68
   1065a:	0e 94 25 a6 	call	0x14c4a	; 0x14c4a <__mulsf3>
   1065e:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
   10662:	6b 01       	movw	r12, r22
   10664:	7c 01       	movw	r14, r24

      //codenum += millis();  // keep track of when we started waiting
      previous_millis_cmd = 0;//millis();
      while(++previous_millis_cmd  < codenum ){
   10666:	81 e0       	ldi	r24, 0x01	; 1
   10668:	90 e0       	ldi	r25, 0x00	; 0
   1066a:	a0 e0       	ldi	r26, 0x00	; 0
   1066c:	b0 e0       	ldi	r27, 0x00	; 0
   1066e:	80 93 72 14 	sts	0x1472, r24	; 0x801472 <_ZL19previous_millis_cmd>
   10672:	90 93 73 14 	sts	0x1473, r25	; 0x801473 <_ZL19previous_millis_cmd+0x1>
   10676:	a0 93 74 14 	sts	0x1474, r26	; 0x801474 <_ZL19previous_millis_cmd+0x2>
   1067a:	b0 93 75 14 	sts	0x1475, r27	; 0x801475 <_ZL19previous_millis_cmd+0x3>
   1067e:	82 e0       	ldi	r24, 0x02	; 2
   10680:	c8 16       	cp	r12, r24
   10682:	d1 04       	cpc	r13, r1
   10684:	e1 04       	cpc	r14, r1
   10686:	f1 04       	cpc	r15, r1
   10688:	f8 f0       	brcs	.+62     	; 0x106c8 <_Z12processGCodei+0xfc>
        manage_inactivity();
   1068a:	36 df       	rcall	.-404    	; 0x104f8 <_Z17manage_inactivityv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   1068c:	af e9       	ldi	r26, 0x9F	; 159
   1068e:	bf e0       	ldi	r27, 0x0F	; 15
   10690:	11 97       	sbiw	r26, 0x01	; 1
   10692:	f1 f7       	brne	.-4      	; 0x10690 <_Z12processGCodei+0xc4>
   10694:	00 c0       	rjmp	.+0      	; 0x10696 <_Z12processGCodei+0xca>
   10696:	00 00       	nop
      if(code_seen('P')) codenum = code_value(); // milliseconds to wait
      if(code_seen('S')) codenum = code_value() * 1000; // seconds to wait

      //codenum += millis();  // keep track of when we started waiting
      previous_millis_cmd = 0;//millis();
      while(++previous_millis_cmd  < codenum ){
   10698:	80 91 72 14 	lds	r24, 0x1472	; 0x801472 <_ZL19previous_millis_cmd>
   1069c:	90 91 73 14 	lds	r25, 0x1473	; 0x801473 <_ZL19previous_millis_cmd+0x1>
   106a0:	a0 91 74 14 	lds	r26, 0x1474	; 0x801474 <_ZL19previous_millis_cmd+0x2>
   106a4:	b0 91 75 14 	lds	r27, 0x1475	; 0x801475 <_ZL19previous_millis_cmd+0x3>
   106a8:	01 96       	adiw	r24, 0x01	; 1
   106aa:	a1 1d       	adc	r26, r1
   106ac:	b1 1d       	adc	r27, r1
   106ae:	80 93 72 14 	sts	0x1472, r24	; 0x801472 <_ZL19previous_millis_cmd>
   106b2:	90 93 73 14 	sts	0x1473, r25	; 0x801473 <_ZL19previous_millis_cmd+0x1>
   106b6:	a0 93 74 14 	sts	0x1474, r26	; 0x801474 <_ZL19previous_millis_cmd+0x2>
   106ba:	b0 93 75 14 	sts	0x1475, r27	; 0x801475 <_ZL19previous_millis_cmd+0x3>
   106be:	8c 15       	cp	r24, r12
   106c0:	9d 05       	cpc	r25, r13
   106c2:	ae 05       	cpc	r26, r14
   106c4:	bf 05       	cpc	r27, r15
   106c6:	08 f3       	brcs	.-62     	; 0x1068a <_Z12processGCodei+0xbe>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   106c8:	e3 e8       	ldi	r30, 0x83	; 131
   106ca:	f1 e1       	ldi	r31, 0x11	; 17
   106cc:	64 91       	lpm	r22, Z
	while(ch)
   106ce:	66 23       	and	r22, r22
   106d0:	81 f0       	breq	.+32     	; 0x106f2 <_Z12processGCodei+0x126>
   106d2:	ef 01       	movw	r28, r30
   106d4:	08 e0       	ldi	r16, 0x08	; 8
   106d6:	1a e0       	ldi	r17, 0x0A	; 10
   106d8:	d8 01       	movw	r26, r16
   106da:	ed 91       	ld	r30, X+
   106dc:	fc 91       	ld	r31, X
   106de:	01 90       	ld	r0, Z+
   106e0:	f0 81       	ld	r31, Z
   106e2:	e0 2d       	mov	r30, r0
   106e4:	c8 01       	movw	r24, r16
   106e6:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   106e8:	21 96       	adiw	r28, 0x01	; 1
   106ea:	fe 01       	movw	r30, r28
   106ec:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   106ee:	61 11       	cpse	r22, r1
   106f0:	f3 cf       	rjmp	.-26     	; 0x106d8 <_Z12processGCodei+0x10c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   106f2:	e0 e8       	ldi	r30, 0x80	; 128
   106f4:	f1 e1       	ldi	r31, 0x11	; 17
   106f6:	64 91       	lpm	r22, Z
	while(ch)
   106f8:	66 23       	and	r22, r22
   106fa:	81 f0       	breq	.+32     	; 0x1071c <_Z12processGCodei+0x150>
   106fc:	ef 01       	movw	r28, r30
   106fe:	08 e0       	ldi	r16, 0x08	; 8
   10700:	1a e0       	ldi	r17, 0x0A	; 10
   10702:	d8 01       	movw	r26, r16
   10704:	ed 91       	ld	r30, X+
   10706:	fc 91       	ld	r31, X
   10708:	01 90       	ld	r0, Z+
   1070a:	f0 81       	ld	r31, Z
   1070c:	e0 2d       	mov	r30, r0
   1070e:	c8 01       	movw	r24, r16
   10710:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10712:	21 96       	adiw	r28, 0x01	; 1
   10714:	fe 01       	movw	r30, r28
   10716:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10718:	61 11       	cpse	r22, r1
   1071a:	f3 cf       	rjmp	.-26     	; 0x10702 <_Z12processGCodei+0x136>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   1071c:	ed e7       	ldi	r30, 0x7D	; 125
   1071e:	f1 e1       	ldi	r31, 0x11	; 17
   10720:	64 91       	lpm	r22, Z
	while(ch)
   10722:	66 23       	and	r22, r22
   10724:	81 f0       	breq	.+32     	; 0x10746 <_Z12processGCodei+0x17a>
   10726:	ef 01       	movw	r28, r30
   10728:	08 e0       	ldi	r16, 0x08	; 8
   1072a:	1a e0       	ldi	r17, 0x0A	; 10
   1072c:	d8 01       	movw	r26, r16
   1072e:	ed 91       	ld	r30, X+
   10730:	fc 91       	ld	r31, X
   10732:	01 90       	ld	r0, Z+
   10734:	f0 81       	ld	r31, Z
   10736:	e0 2d       	mov	r30, r0
   10738:	c8 01       	movw	r24, r16
   1073a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   1073c:	21 96       	adiw	r28, 0x01	; 1
   1073e:	fe 01       	movw	r30, r28
   10740:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10742:	61 11       	cpse	r22, r1
   10744:	f3 cf       	rjmp	.-26     	; 0x1072c <_Z12processGCodei+0x160>
        manage_inactivity();
		_delay_ms(1);
      }
	  SERIAL_PGM(MSG_BEGIN);
	  SERIAL_PGM("G4");
	  SERIAL_PGMLN(MSG_TERMINATE);
   10746:	88 e0       	ldi	r24, 0x08	; 8
   10748:	9a e0       	ldi	r25, 0x0A	; 10
   1074a:	4f d6       	rcall	.+3230   	; 0x113ea <_ZN5Print7printlnEv>
	  SERIAL_PORT.flush();
   1074c:	88 e0       	ldi	r24, 0x08	; 8
   1074e:	9a e0       	ldi	r25, 0x0A	; 10
   10750:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
      break;
   10754:	81 c5       	rjmp	.+2818   	; 0x11258 <_Z12processGCodei+0xc8c>
	  
	case 5: // G5 - Absolute command motor [Z<controller>] C<Channel> [P<motor power -1000 to 1000>] [X<PWM power -1000 to 1000>(scaled 0-2000)]
	     if(!Stopped) {
   10756:	80 91 71 14 	lds	r24, 0x1471	; 0x801471 <Stopped>
   1075a:	81 11       	cpse	r24, r1
   1075c:	7d c5       	rjmp	.+2810   	; 0x11258 <_Z12processGCodei+0xc8c>
			 if(code_seen('Z')) {
   1075e:	8a e5       	ldi	r24, 0x5A	; 90
   10760:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
   10764:	88 23       	and	r24, r24
   10766:	29 f0       	breq	.+10     	; 0x10772 <_Z12processGCodei+0x1a6>
				 motorController = code_value();
   10768:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
   1076c:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
   10770:	eb 01       	movw	r28, r22
			 }
		     if(code_seen('C')) {
   10772:	83 e4       	ldi	r24, 0x43	; 67
   10774:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
   10778:	88 23       	and	r24, r24
   1077a:	09 f4       	brne	.+2      	; 0x1077e <_Z12processGCodei+0x1b2>
   1077c:	6d c5       	rjmp	.+2778   	; 0x11258 <_Z12processGCodei+0xc8c>
				motorChannel = code_value(); // channel 1,2
   1077e:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
   10782:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
   10786:	b6 2e       	mov	r11, r22
   10788:	a7 2e       	mov	r10, r23
				if(code_seen('P')) {
   1078a:	80 e5       	ldi	r24, 0x50	; 80
   1078c:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
   10790:	88 23       	and	r24, r24
   10792:	09 f4       	brne	.+2      	; 0x10796 <_Z12processGCodei+0x1ca>
   10794:	cd c0       	rjmp	.+410    	; 0x10930 <_Z12processGCodei+0x364>
					motorPower = code_value(); // motor power -1000,1000
   10796:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
   1079a:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
   1079e:	6b 01       	movw	r12, r22
   107a0:	7c 01       	movw	r14, r24
					fault = 0; // clear fault flag
   107a2:	10 92 58 14 	sts	0x1458, r1	; 0x801458 <fault+0x1>
   107a6:	10 92 57 14 	sts	0x1457, r1	; 0x801457 <fault>
					if( (status=motorControl[motorController]->commandMotorPower(motorChannel, motorPower)) ) {
   107aa:	fe 01       	movw	r30, r28
   107ac:	ee 0f       	add	r30, r30
   107ae:	ff 1f       	adc	r31, r31
   107b0:	e9 50       	subi	r30, 0x09	; 9
   107b2:	fd 4e       	sbci	r31, 0xED	; 237
   107b4:	80 81       	ld	r24, Z
   107b6:	91 81       	ldd	r25, Z+1	; 0x01
   107b8:	dc 01       	movw	r26, r24
   107ba:	ed 91       	ld	r30, X+
   107bc:	fc 91       	ld	r31, X
   107be:	04 80       	ldd	r0, Z+4	; 0x04
   107c0:	f5 81       	ldd	r31, Z+5	; 0x05
   107c2:	e0 2d       	mov	r30, r0
   107c4:	a6 01       	movw	r20, r12
   107c6:	6b 2d       	mov	r22, r11
   107c8:	19 95       	eicall
   107ca:	90 93 5a 14 	sts	0x145A, r25	; 0x80145a <status+0x1>
   107ce:	80 93 59 14 	sts	0x1459, r24	; 0x801459 <status>
   107d2:	89 2b       	or	r24, r25
   107d4:	09 f4       	brne	.+2      	; 0x107d8 <_Z12processGCodei+0x20c>
   107d6:	65 c0       	rjmp	.+202    	; 0x108a2 <_Z12processGCodei+0x2d6>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   107d8:	eb e7       	ldi	r30, 0x7B	; 123
   107da:	f1 e1       	ldi	r31, 0x11	; 17
   107dc:	64 91       	lpm	r22, Z
	while(ch)
   107de:	66 23       	and	r22, r22
   107e0:	81 f0       	breq	.+32     	; 0x10802 <_Z12processGCodei+0x236>
   107e2:	ef 01       	movw	r28, r30
   107e4:	08 e0       	ldi	r16, 0x08	; 8
   107e6:	1a e0       	ldi	r17, 0x0A	; 10
   107e8:	d8 01       	movw	r26, r16
   107ea:	ed 91       	ld	r30, X+
   107ec:	fc 91       	ld	r31, X
   107ee:	01 90       	ld	r0, Z+
   107f0:	f0 81       	ld	r31, Z
   107f2:	e0 2d       	mov	r30, r0
   107f4:	c8 01       	movw	r24, r16
   107f6:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   107f8:	21 96       	adiw	r28, 0x01	; 1
   107fa:	fe 01       	movw	r30, r28
   107fc:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   107fe:	61 11       	cpse	r22, r1
   10800:	f3 cf       	rjmp	.-26     	; 0x107e8 <_Z12processGCodei+0x21c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10802:	e8 e6       	ldi	r30, 0x68	; 104
   10804:	f1 e1       	ldi	r31, 0x11	; 17
   10806:	64 91       	lpm	r22, Z
	while(ch)
   10808:	66 23       	and	r22, r22
   1080a:	81 f0       	breq	.+32     	; 0x1082c <_Z12processGCodei+0x260>
   1080c:	ef 01       	movw	r28, r30
   1080e:	08 e0       	ldi	r16, 0x08	; 8
   10810:	1a e0       	ldi	r17, 0x0A	; 10
   10812:	d8 01       	movw	r26, r16
   10814:	ed 91       	ld	r30, X+
   10816:	fc 91       	ld	r31, X
   10818:	01 90       	ld	r0, Z+
   1081a:	f0 81       	ld	r31, Z
   1081c:	e0 2d       	mov	r30, r0
   1081e:	c8 01       	movw	r24, r16
   10820:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10822:	21 96       	adiw	r28, 0x01	; 1
   10824:	fe 01       	movw	r30, r28
   10826:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10828:	61 11       	cpse	r22, r1
   1082a:	f3 cf       	rjmp	.-26     	; 0x10812 <_Z12processGCodei+0x246>
							SERIAL_PGM(MSG_BEGIN);
							SERIAL_PGM(MSG_BAD_MOTOR);
							SERIAL_PORT.print(status);
   1082c:	60 91 59 14 	lds	r22, 0x1459	; 0x801459 <status>
   10830:	70 91 5a 14 	lds	r23, 0x145A	; 0x80145a <status+0x1>
   10834:	4a e0       	ldi	r20, 0x0A	; 10
   10836:	50 e0       	ldi	r21, 0x00	; 0
   10838:	88 e0       	ldi	r24, 0x08	; 8
   1083a:	9a e0       	ldi	r25, 0x0A	; 10
   1083c:	85 d6       	rcall	.+3338   	; 0x11548 <_ZN5Print5printEii>
							SERIAL_PORT.print(' ');
   1083e:	60 e2       	ldi	r22, 0x20	; 32
   10840:	88 e0       	ldi	r24, 0x08	; 8
   10842:	9a e0       	ldi	r25, 0x0A	; 10
   10844:	ca d5       	rcall	.+2964   	; 0x113da <_ZN5Print5printEc>
							SERIAL_PORT.print(motorChannel);
   10846:	4a e0       	ldi	r20, 0x0A	; 10
   10848:	50 e0       	ldi	r21, 0x00	; 0
   1084a:	6b 2d       	mov	r22, r11
   1084c:	7a 2d       	mov	r23, r10
   1084e:	88 e0       	ldi	r24, 0x08	; 8
   10850:	9a e0       	ldi	r25, 0x0A	; 10
							SERIAL_PORT.print(' ');
   10852:	7a d6       	rcall	.+3316   	; 0x11548 <_ZN5Print5printEii>
   10854:	60 e2       	ldi	r22, 0x20	; 32
   10856:	88 e0       	ldi	r24, 0x08	; 8
   10858:	9a e0       	ldi	r25, 0x0A	; 10
							SERIAL_PORT.print(motorPower);
   1085a:	bf d5       	rcall	.+2942   	; 0x113da <_ZN5Print5printEc>
   1085c:	4a e0       	ldi	r20, 0x0A	; 10
   1085e:	50 e0       	ldi	r21, 0x00	; 0
   10860:	b6 01       	movw	r22, r12
   10862:	88 e0       	ldi	r24, 0x08	; 8
   10864:	9a e0       	ldi	r25, 0x0A	; 10
   10866:	70 d6       	rcall	.+3296   	; 0x11548 <_ZN5Print5printEii>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10868:	e5 e6       	ldi	r30, 0x65	; 101
   1086a:	f1 e1       	ldi	r31, 0x11	; 17
   1086c:	64 91       	lpm	r22, Z
	while(ch)
   1086e:	66 23       	and	r22, r22
   10870:	81 f0       	breq	.+32     	; 0x10892 <_Z12processGCodei+0x2c6>
   10872:	ef 01       	movw	r28, r30
   10874:	08 e0       	ldi	r16, 0x08	; 8
   10876:	1a e0       	ldi	r17, 0x0A	; 10
   10878:	d8 01       	movw	r26, r16
   1087a:	ed 91       	ld	r30, X+
   1087c:	fc 91       	ld	r31, X
   1087e:	01 90       	ld	r0, Z+
   10880:	f0 81       	ld	r31, Z
   10882:	e0 2d       	mov	r30, r0
   10884:	c8 01       	movw	r24, r16
   10886:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10888:	21 96       	adiw	r28, 0x01	; 1
   1088a:	fe 01       	movw	r30, r28
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   1088c:	64 91       	lpm	r22, Z
   1088e:	61 11       	cpse	r22, r1
							SERIAL_PGMLN(MSG_TERMINATE);
   10890:	f3 cf       	rjmp	.-26     	; 0x10878 <_Z12processGCodei+0x2ac>
   10892:	88 e0       	ldi	r24, 0x08	; 8
   10894:	9a e0       	ldi	r25, 0x0A	; 10
   10896:	a9 d5       	rcall	.+2898   	; 0x113ea <_ZN5Print7printlnEv>
							SERIAL_PORT.flush();
   10898:	88 e0       	ldi	r24, 0x08	; 8
   1089a:	9a e0       	ldi	r25, 0x0A	; 10
   1089c:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
   108a0:	db c4       	rjmp	.+2486   	; 0x11258 <_Z12processGCodei+0xc8c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   108a2:	e3 e6       	ldi	r30, 0x63	; 99
   108a4:	f1 e1       	ldi	r31, 0x11	; 17
   108a6:	64 91       	lpm	r22, Z
	while(ch)
   108a8:	66 23       	and	r22, r22
   108aa:	81 f0       	breq	.+32     	; 0x108cc <_Z12processGCodei+0x300>
   108ac:	ef 01       	movw	r28, r30
   108ae:	08 e0       	ldi	r16, 0x08	; 8
   108b0:	1a e0       	ldi	r17, 0x0A	; 10
   108b2:	d8 01       	movw	r26, r16
   108b4:	ed 91       	ld	r30, X+
   108b6:	fc 91       	ld	r31, X
   108b8:	01 90       	ld	r0, Z+
   108ba:	f0 81       	ld	r31, Z
   108bc:	e0 2d       	mov	r30, r0
   108be:	c8 01       	movw	r24, r16
   108c0:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   108c2:	21 96       	adiw	r28, 0x01	; 1
   108c4:	fe 01       	movw	r30, r28
   108c6:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   108c8:	61 11       	cpse	r22, r1
   108ca:	f3 cf       	rjmp	.-26     	; 0x108b2 <_Z12processGCodei+0x2e6>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   108cc:	e0 e6       	ldi	r30, 0x60	; 96
   108ce:	f1 e1       	ldi	r31, 0x11	; 17
   108d0:	64 91       	lpm	r22, Z
	while(ch)
   108d2:	66 23       	and	r22, r22
   108d4:	81 f0       	breq	.+32     	; 0x108f6 <_Z12processGCodei+0x32a>
   108d6:	ef 01       	movw	r28, r30
   108d8:	08 e0       	ldi	r16, 0x08	; 8
   108da:	1a e0       	ldi	r17, 0x0A	; 10
   108dc:	d8 01       	movw	r26, r16
   108de:	ed 91       	ld	r30, X+
   108e0:	fc 91       	ld	r31, X
   108e2:	01 90       	ld	r0, Z+
   108e4:	f0 81       	ld	r31, Z
   108e6:	e0 2d       	mov	r30, r0
   108e8:	c8 01       	movw	r24, r16
   108ea:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   108ec:	21 96       	adiw	r28, 0x01	; 1
   108ee:	fe 01       	movw	r30, r28
   108f0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   108f2:	61 11       	cpse	r22, r1
   108f4:	f3 cf       	rjmp	.-26     	; 0x108dc <_Z12processGCodei+0x310>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   108f6:	ed e5       	ldi	r30, 0x5D	; 93
   108f8:	f1 e1       	ldi	r31, 0x11	; 17
   108fa:	64 91       	lpm	r22, Z
	while(ch)
   108fc:	66 23       	and	r22, r22
   108fe:	81 f0       	breq	.+32     	; 0x10920 <_Z12processGCodei+0x354>
   10900:	ef 01       	movw	r28, r30
   10902:	08 e0       	ldi	r16, 0x08	; 8
   10904:	1a e0       	ldi	r17, 0x0A	; 10
   10906:	d8 01       	movw	r26, r16
   10908:	ed 91       	ld	r30, X+
   1090a:	fc 91       	ld	r31, X
   1090c:	01 90       	ld	r0, Z+
   1090e:	f0 81       	ld	r31, Z
   10910:	e0 2d       	mov	r30, r0
   10912:	c8 01       	movw	r24, r16
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10914:	19 95       	eicall
   10916:	21 96       	adiw	r28, 0x01	; 1
   10918:	fe 01       	movw	r30, r28
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   1091a:	64 91       	lpm	r22, Z
   1091c:	61 11       	cpse	r22, r1
					} else {
							SERIAL_PGM(MSG_BEGIN);
							SERIAL_PGM("G5");
							SERIAL_PGMLN(MSG_TERMINATE);
   1091e:	f3 cf       	rjmp	.-26     	; 0x10906 <_Z12processGCodei+0x33a>
   10920:	88 e0       	ldi	r24, 0x08	; 8
   10922:	9a e0       	ldi	r25, 0x0A	; 10
   10924:	62 d5       	rcall	.+2756   	; 0x113ea <_ZN5Print7printlnEv>
							SERIAL_PORT.flush();
   10926:	88 e0       	ldi	r24, 0x08	; 8
   10928:	9a e0       	ldi	r25, 0x0A	; 10
   1092a:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
   1092e:	94 c4       	rjmp	.+2344   	; 0x11258 <_Z12processGCodei+0xc8c>
					}
				} else {// code P or X
					if(code_seen('X')) {
   10930:	88 e5       	ldi	r24, 0x58	; 88
   10932:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
   10936:	88 23       	and	r24, r24
   10938:	09 f4       	brne	.+2      	; 0x1093c <_Z12processGCodei+0x370>
   1093a:	8e c4       	rjmp	.+2332   	; 0x11258 <_Z12processGCodei+0xc8c>
						PWMLevel = code_value(); // PWM level -1000,1000, scaled to 0-2000 in PWM controller, as no reverse
   1093c:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
   10940:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
   10944:	6b 01       	movw	r12, r22
   10946:	7c 01       	movw	r14, r24
						fault = 0; // clear fault flag
   10948:	10 92 58 14 	sts	0x1458, r1	; 0x801458 <fault+0x1>
   1094c:	10 92 57 14 	sts	0x1457, r1	; 0x801457 <fault>
						// use motor related index and value, as we have them
						if( (status=pwmControl[motorController]->commandPWMLevel(motorChannel, PWMLevel)) ) {
   10950:	fe 01       	movw	r30, r28
   10952:	ee 0f       	add	r30, r30
   10954:	ff 1f       	adc	r31, r31
   10956:	ed 51       	subi	r30, 0x1D	; 29
   10958:	fd 4e       	sbci	r31, 0xED	; 237
   1095a:	80 81       	ld	r24, Z
   1095c:	91 81       	ldd	r25, Z+1	; 0x01
   1095e:	dc 01       	movw	r26, r24
   10960:	ed 91       	ld	r30, X+
   10962:	fc 91       	ld	r31, X
   10964:	04 80       	ldd	r0, Z+4	; 0x04
   10966:	f5 81       	ldd	r31, Z+5	; 0x05
   10968:	e0 2d       	mov	r30, r0
   1096a:	a6 01       	movw	r20, r12
   1096c:	6b 2d       	mov	r22, r11
   1096e:	19 95       	eicall
   10970:	90 93 5a 14 	sts	0x145A, r25	; 0x80145a <status+0x1>
   10974:	80 93 59 14 	sts	0x1459, r24	; 0x801459 <status>
   10978:	89 2b       	or	r24, r25
   1097a:	09 f4       	brne	.+2      	; 0x1097e <_Z12processGCodei+0x3b2>
   1097c:	65 c0       	rjmp	.+202    	; 0x10a48 <_Z12processGCodei+0x47c>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   1097e:	eb e5       	ldi	r30, 0x5B	; 91
   10980:	f1 e1       	ldi	r31, 0x11	; 17
   10982:	64 91       	lpm	r22, Z
	while(ch)
   10984:	66 23       	and	r22, r22
   10986:	81 f0       	breq	.+32     	; 0x109a8 <_Z12processGCodei+0x3dc>
   10988:	ef 01       	movw	r28, r30
   1098a:	08 e0       	ldi	r16, 0x08	; 8
   1098c:	1a e0       	ldi	r17, 0x0A	; 10
   1098e:	d8 01       	movw	r26, r16
   10990:	ed 91       	ld	r30, X+
   10992:	fc 91       	ld	r31, X
   10994:	01 90       	ld	r0, Z+
   10996:	f0 81       	ld	r31, Z
   10998:	e0 2d       	mov	r30, r0
   1099a:	c8 01       	movw	r24, r16
   1099c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   1099e:	21 96       	adiw	r28, 0x01	; 1
   109a0:	fe 01       	movw	r30, r28
   109a2:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   109a4:	61 11       	cpse	r22, r1
   109a6:	f3 cf       	rjmp	.-26     	; 0x1098e <_Z12processGCodei+0x3c2>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   109a8:	e3 e4       	ldi	r30, 0x43	; 67
   109aa:	f1 e1       	ldi	r31, 0x11	; 17
   109ac:	64 91       	lpm	r22, Z
	while(ch)
   109ae:	66 23       	and	r22, r22
   109b0:	81 f0       	breq	.+32     	; 0x109d2 <_Z12processGCodei+0x406>
   109b2:	ef 01       	movw	r28, r30
   109b4:	08 e0       	ldi	r16, 0x08	; 8
   109b6:	1a e0       	ldi	r17, 0x0A	; 10
   109b8:	d8 01       	movw	r26, r16
   109ba:	ed 91       	ld	r30, X+
   109bc:	fc 91       	ld	r31, X
   109be:	01 90       	ld	r0, Z+
   109c0:	f0 81       	ld	r31, Z
   109c2:	e0 2d       	mov	r30, r0
   109c4:	c8 01       	movw	r24, r16
   109c6:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   109c8:	21 96       	adiw	r28, 0x01	; 1
   109ca:	fe 01       	movw	r30, r28
   109cc:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   109ce:	61 11       	cpse	r22, r1
							SERIAL_PGM(MSG_BEGIN);
							SERIAL_PGM(MSG_BAD_PWM);
							SERIAL_PORT.print(status);
   109d0:	f3 cf       	rjmp	.-26     	; 0x109b8 <_Z12processGCodei+0x3ec>
   109d2:	60 91 59 14 	lds	r22, 0x1459	; 0x801459 <status>
   109d6:	70 91 5a 14 	lds	r23, 0x145A	; 0x80145a <status+0x1>
   109da:	4a e0       	ldi	r20, 0x0A	; 10
   109dc:	50 e0       	ldi	r21, 0x00	; 0
   109de:	88 e0       	ldi	r24, 0x08	; 8
   109e0:	9a e0       	ldi	r25, 0x0A	; 10
							SERIAL_PORT.print(' ');
   109e2:	b2 d5       	rcall	.+2916   	; 0x11548 <_ZN5Print5printEii>
   109e4:	60 e2       	ldi	r22, 0x20	; 32
   109e6:	88 e0       	ldi	r24, 0x08	; 8
   109e8:	9a e0       	ldi	r25, 0x0A	; 10
							SERIAL_PORT.print(motorChannel);
   109ea:	f7 d4       	rcall	.+2542   	; 0x113da <_ZN5Print5printEc>
   109ec:	4a e0       	ldi	r20, 0x0A	; 10
   109ee:	50 e0       	ldi	r21, 0x00	; 0
   109f0:	6b 2d       	mov	r22, r11
   109f2:	7a 2d       	mov	r23, r10
   109f4:	88 e0       	ldi	r24, 0x08	; 8
   109f6:	9a e0       	ldi	r25, 0x0A	; 10
							SERIAL_PORT.print(' ');
   109f8:	a7 d5       	rcall	.+2894   	; 0x11548 <_ZN5Print5printEii>
   109fa:	60 e2       	ldi	r22, 0x20	; 32
   109fc:	88 e0       	ldi	r24, 0x08	; 8
   109fe:	9a e0       	ldi	r25, 0x0A	; 10
   10a00:	ec d4       	rcall	.+2520   	; 0x113da <_ZN5Print5printEc>
							SERIAL_PORT.print(PWMLevel);
   10a02:	4a e0       	ldi	r20, 0x0A	; 10
   10a04:	50 e0       	ldi	r21, 0x00	; 0
   10a06:	b6 01       	movw	r22, r12
   10a08:	88 e0       	ldi	r24, 0x08	; 8
   10a0a:	9a e0       	ldi	r25, 0x0A	; 10
   10a0c:	9d d5       	rcall	.+2874   	; 0x11548 <_ZN5Print5printEii>
   10a0e:	e0 e4       	ldi	r30, 0x40	; 64
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10a10:	f1 e1       	ldi	r31, 0x11	; 17
   10a12:	64 91       	lpm	r22, Z
   10a14:	66 23       	and	r22, r22
	while(ch)
   10a16:	81 f0       	breq	.+32     	; 0x10a38 <_Z12processGCodei+0x46c>
   10a18:	ef 01       	movw	r28, r30
   10a1a:	08 e0       	ldi	r16, 0x08	; 8
   10a1c:	1a e0       	ldi	r17, 0x0A	; 10
   10a1e:	d8 01       	movw	r26, r16
   10a20:	ed 91       	ld	r30, X+
   10a22:	fc 91       	ld	r31, X
   10a24:	01 90       	ld	r0, Z+
   10a26:	f0 81       	ld	r31, Z
   10a28:	e0 2d       	mov	r30, r0
   10a2a:	c8 01       	movw	r24, r16
   10a2c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10a2e:	21 96       	adiw	r28, 0x01	; 1
   10a30:	fe 01       	movw	r30, r28
   10a32:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10a34:	61 11       	cpse	r22, r1
   10a36:	f3 cf       	rjmp	.-26     	; 0x10a1e <_Z12processGCodei+0x452>
							SERIAL_PGMLN(MSG_TERMINATE);
   10a38:	88 e0       	ldi	r24, 0x08	; 8
   10a3a:	9a e0       	ldi	r25, 0x0A	; 10
   10a3c:	d6 d4       	rcall	.+2476   	; 0x113ea <_ZN5Print7printlnEv>
   10a3e:	88 e0       	ldi	r24, 0x08	; 8
							SERIAL_PORT.flush();
   10a40:	9a e0       	ldi	r25, 0x0A	; 10
   10a42:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
   10a46:	08 c4       	rjmp	.+2064   	; 0x11258 <_Z12processGCodei+0xc8c>
   10a48:	ee e3       	ldi	r30, 0x3E	; 62
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10a4a:	f1 e1       	ldi	r31, 0x11	; 17
   10a4c:	64 91       	lpm	r22, Z
   10a4e:	66 23       	and	r22, r22
	while(ch)
   10a50:	81 f0       	breq	.+32     	; 0x10a72 <_Z12processGCodei+0x4a6>
   10a52:	ef 01       	movw	r28, r30
   10a54:	08 e0       	ldi	r16, 0x08	; 8
   10a56:	1a e0       	ldi	r17, 0x0A	; 10
   10a58:	d8 01       	movw	r26, r16
   10a5a:	ed 91       	ld	r30, X+
   10a5c:	fc 91       	ld	r31, X
   10a5e:	01 90       	ld	r0, Z+
   10a60:	f0 81       	ld	r31, Z
   10a62:	e0 2d       	mov	r30, r0
   10a64:	c8 01       	movw	r24, r16
   10a66:	19 95       	eicall
   10a68:	21 96       	adiw	r28, 0x01	; 1
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10a6a:	fe 01       	movw	r30, r28
   10a6c:	64 91       	lpm	r22, Z
   10a6e:	61 11       	cpse	r22, r1
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10a70:	f3 cf       	rjmp	.-26     	; 0x10a58 <_Z12processGCodei+0x48c>
   10a72:	eb e3       	ldi	r30, 0x3B	; 59
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10a74:	f1 e1       	ldi	r31, 0x11	; 17
   10a76:	64 91       	lpm	r22, Z
   10a78:	66 23       	and	r22, r22
	while(ch)
   10a7a:	81 f0       	breq	.+32     	; 0x10a9c <_Z12processGCodei+0x4d0>
   10a7c:	ef 01       	movw	r28, r30
   10a7e:	08 e0       	ldi	r16, 0x08	; 8
   10a80:	1a e0       	ldi	r17, 0x0A	; 10
   10a82:	d8 01       	movw	r26, r16
   10a84:	ed 91       	ld	r30, X+
   10a86:	fc 91       	ld	r31, X
   10a88:	01 90       	ld	r0, Z+
   10a8a:	f0 81       	ld	r31, Z
   10a8c:	e0 2d       	mov	r30, r0
   10a8e:	c8 01       	movw	r24, r16
   10a90:	19 95       	eicall
   10a92:	21 96       	adiw	r28, 0x01	; 1
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10a94:	fe 01       	movw	r30, r28
   10a96:	64 91       	lpm	r22, Z
   10a98:	61 11       	cpse	r22, r1
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10a9a:	f3 cf       	rjmp	.-26     	; 0x10a82 <_Z12processGCodei+0x4b6>
   10a9c:	e8 e3       	ldi	r30, 0x38	; 56
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10a9e:	f1 e1       	ldi	r31, 0x11	; 17
   10aa0:	64 91       	lpm	r22, Z
   10aa2:	66 23       	and	r22, r22
	while(ch)
   10aa4:	81 f0       	breq	.+32     	; 0x10ac6 <_Z12processGCodei+0x4fa>
   10aa6:	ef 01       	movw	r28, r30
   10aa8:	08 e0       	ldi	r16, 0x08	; 8
   10aaa:	1a e0       	ldi	r17, 0x0A	; 10
   10aac:	d8 01       	movw	r26, r16
   10aae:	ed 91       	ld	r30, X+
   10ab0:	fc 91       	ld	r31, X
   10ab2:	01 90       	ld	r0, Z+
   10ab4:	f0 81       	ld	r31, Z
   10ab6:	e0 2d       	mov	r30, r0
   10ab8:	c8 01       	movw	r24, r16
   10aba:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10abc:	21 96       	adiw	r28, 0x01	; 1
   10abe:	fe 01       	movw	r30, r28
   10ac0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10ac2:	61 11       	cpse	r22, r1
   10ac4:	f3 cf       	rjmp	.-26     	; 0x10aac <_Z12processGCodei+0x4e0>
						} else {
							SERIAL_PGM(MSG_BEGIN);
							SERIAL_PGM("G5");
							SERIAL_PGMLN(MSG_TERMINATE);
   10ac6:	88 e0       	ldi	r24, 0x08	; 8
   10ac8:	9a e0       	ldi	r25, 0x0A	; 10
   10aca:	8f d4       	rcall	.+2334   	; 0x113ea <_ZN5Print7printlnEv>
   10acc:	88 e0       	ldi	r24, 0x08	; 8
							SERIAL_PORT.flush();
   10ace:	9a e0       	ldi	r25, 0x0A	; 10
   10ad0:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
   10ad4:	c1 c3       	rjmp	.+1922   	; 0x11258 <_Z12processGCodei+0xc8c>
			 } // code C
	     } // stopped
	     break;
	  
	case 99: // G99 start watchdog timer. G99 T<time_in_millis> values are 15,30,60,120,250,500,1000,4000,8000 default 4000
		if( code_seen('T') ) {
   10ad6:	84 e5       	ldi	r24, 0x54	; 84
   10ad8:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
   10adc:	88 23       	and	r24, r24
   10ade:	09 f4       	brne	.+2      	; 0x10ae2 <_Z12processGCodei+0x516>
   10ae0:	bb c3       	rjmp	.+1910   	; 0x11258 <_Z12processGCodei+0xc8c>
			int time_val = code_value();
   10ae2:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
   10ae6:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
   10aea:	6b 01       	movw	r12, r22
   10aec:	7c 01       	movw	r14, r24
			watchdog_timer = new WatchdogTimer();
   10aee:	81 e0       	ldi	r24, 0x01	; 1
   10af0:	90 e0       	ldi	r25, 0x00	; 0
   10af2:	3f d4       	rcall	.+2174   	; 0x11372 <_Znwj>
   10af4:	90 93 0c 13 	sts	0x130C, r25	; 0x80130c <watchdog_timer+0x1>
   10af8:	80 93 0b 13 	sts	0x130B, r24	; 0x80130b <watchdog_timer>
   10afc:	e6 e3       	ldi	r30, 0x36	; 54
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10afe:	f1 e1       	ldi	r31, 0x11	; 17
   10b00:	64 91       	lpm	r22, Z
   10b02:	66 23       	and	r22, r22
	while(ch)
   10b04:	81 f0       	breq	.+32     	; 0x10b26 <_Z12processGCodei+0x55a>
   10b06:	ef 01       	movw	r28, r30
   10b08:	08 e0       	ldi	r16, 0x08	; 8
   10b0a:	1a e0       	ldi	r17, 0x0A	; 10
   10b0c:	d8 01       	movw	r26, r16
   10b0e:	ed 91       	ld	r30, X+
   10b10:	fc 91       	ld	r31, X
   10b12:	01 90       	ld	r0, Z+
   10b14:	f0 81       	ld	r31, Z
   10b16:	e0 2d       	mov	r30, r0
   10b18:	c8 01       	movw	r24, r16
   10b1a:	19 95       	eicall
   10b1c:	21 96       	adiw	r28, 0x01	; 1
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10b1e:	fe 01       	movw	r30, r28
   10b20:	64 91       	lpm	r22, Z
   10b22:	61 11       	cpse	r22, r1
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10b24:	f3 cf       	rjmp	.-26     	; 0x10b0c <_Z12processGCodei+0x540>
   10b26:	e2 e3       	ldi	r30, 0x32	; 50
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10b28:	f1 e1       	ldi	r31, 0x11	; 17
   10b2a:	64 91       	lpm	r22, Z
   10b2c:	66 23       	and	r22, r22
	while(ch)
   10b2e:	81 f0       	breq	.+32     	; 0x10b50 <_Z12processGCodei+0x584>
   10b30:	ef 01       	movw	r28, r30
   10b32:	08 e0       	ldi	r16, 0x08	; 8
   10b34:	1a e0       	ldi	r17, 0x0A	; 10
   10b36:	d8 01       	movw	r26, r16
   10b38:	ed 91       	ld	r30, X+
   10b3a:	fc 91       	ld	r31, X
   10b3c:	01 90       	ld	r0, Z+
   10b3e:	f0 81       	ld	r31, Z
   10b40:	e0 2d       	mov	r30, r0
   10b42:	c8 01       	movw	r24, r16
   10b44:	19 95       	eicall
   10b46:	21 96       	adiw	r28, 0x01	; 1
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10b48:	fe 01       	movw	r30, r28
   10b4a:	64 91       	lpm	r22, Z
   10b4c:	61 11       	cpse	r22, r1
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10b4e:	f3 cf       	rjmp	.-26     	; 0x10b36 <_Z12processGCodei+0x56a>
   10b50:	ef e2       	ldi	r30, 0x2F	; 47
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10b52:	f1 e1       	ldi	r31, 0x11	; 17
   10b54:	64 91       	lpm	r22, Z
   10b56:	66 23       	and	r22, r22
	while(ch)
   10b58:	81 f0       	breq	.+32     	; 0x10b7a <_Z12processGCodei+0x5ae>
   10b5a:	ef 01       	movw	r28, r30
   10b5c:	08 e0       	ldi	r16, 0x08	; 8
   10b5e:	1a e0       	ldi	r17, 0x0A	; 10
   10b60:	d8 01       	movw	r26, r16
   10b62:	ed 91       	ld	r30, X+
   10b64:	fc 91       	ld	r31, X
   10b66:	01 90       	ld	r0, Z+
   10b68:	f0 81       	ld	r31, Z
   10b6a:	e0 2d       	mov	r30, r0
   10b6c:	c8 01       	movw	r24, r16
   10b6e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10b70:	21 96       	adiw	r28, 0x01	; 1
   10b72:	fe 01       	movw	r30, r28
   10b74:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10b76:	61 11       	cpse	r22, r1
   10b78:	f3 cf       	rjmp	.-26     	; 0x10b60 <_Z12processGCodei+0x594>
			SERIAL_PGM(MSG_BEGIN);
			SERIAL_PGM("G99");
			SERIAL_PGMLN(MSG_TERMINATE);
   10b7a:	88 e0       	ldi	r24, 0x08	; 8
   10b7c:	9a e0       	ldi	r25, 0x0A	; 10
   10b7e:	35 d4       	rcall	.+2154   	; 0x113ea <_ZN5Print7printlnEv>
   10b80:	88 e0       	ldi	r24, 0x08	; 8
			SERIAL_PORT.flush();
   10b82:	9a e0       	ldi	r25, 0x0A	; 10
   10b84:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
   10b88:	b6 01       	movw	r22, r12
			watchdog_timer->watchdog_init(time_val);
   10b8a:	80 91 0b 13 	lds	r24, 0x130B	; 0x80130b <watchdog_timer>
   10b8e:	90 91 0c 13 	lds	r25, 0x130C	; 0x80130c <watchdog_timer+0x1>
   10b92:	0e 94 59 95 	call	0x12ab2	; 0x12ab2 <_ZN13WatchdogTimer13watchdog_initEj>
   10b96:	60 c3       	rjmp	.+1728   	; 0x11258 <_Z12processGCodei+0xc8c>
   10b98:	80 91 0b 13 	lds	r24, 0x130B	; 0x80130b <watchdog_timer>
		}
		break;
		
	case 100: // G100 reset watchog timer before time interval is expired, otherwise a reset occurs
		if( watchdog_timer != NULL ) {
   10b9c:	90 91 0c 13 	lds	r25, 0x130C	; 0x80130c <watchdog_timer+0x1>
   10ba0:	00 97       	sbiw	r24, 0x00	; 0
   10ba2:	11 f0       	breq	.+4      	; 0x10ba8 <_Z12processGCodei+0x5dc>
   10ba4:	0e 94 02 96 	call	0x12c04	; 0x12c04 <_ZN13WatchdogTimer14watchdog_resetEv>
			watchdog_timer->watchdog_reset();
   10ba8:	ed e2       	ldi	r30, 0x2D	; 45
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10baa:	f1 e1       	ldi	r31, 0x11	; 17
   10bac:	64 91       	lpm	r22, Z
   10bae:	66 23       	and	r22, r22
	while(ch)
   10bb0:	81 f0       	breq	.+32     	; 0x10bd2 <_Z12processGCodei+0x606>
   10bb2:	ef 01       	movw	r28, r30
   10bb4:	08 e0       	ldi	r16, 0x08	; 8
   10bb6:	1a e0       	ldi	r17, 0x0A	; 10
   10bb8:	d8 01       	movw	r26, r16
   10bba:	ed 91       	ld	r30, X+
   10bbc:	fc 91       	ld	r31, X
   10bbe:	01 90       	ld	r0, Z+
   10bc0:	f0 81       	ld	r31, Z
   10bc2:	e0 2d       	mov	r30, r0
   10bc4:	c8 01       	movw	r24, r16
   10bc6:	19 95       	eicall
   10bc8:	21 96       	adiw	r28, 0x01	; 1
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10bca:	fe 01       	movw	r30, r28
   10bcc:	64 91       	lpm	r22, Z
   10bce:	61 11       	cpse	r22, r1
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10bd0:	f3 cf       	rjmp	.-26     	; 0x10bb8 <_Z12processGCodei+0x5ec>
   10bd2:	e8 e2       	ldi	r30, 0x28	; 40
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10bd4:	f1 e1       	ldi	r31, 0x11	; 17
   10bd6:	64 91       	lpm	r22, Z
   10bd8:	66 23       	and	r22, r22
	while(ch)
   10bda:	81 f0       	breq	.+32     	; 0x10bfc <_Z12processGCodei+0x630>
   10bdc:	ef 01       	movw	r28, r30
   10bde:	08 e0       	ldi	r16, 0x08	; 8
   10be0:	1a e0       	ldi	r17, 0x0A	; 10
   10be2:	d8 01       	movw	r26, r16
   10be4:	ed 91       	ld	r30, X+
   10be6:	fc 91       	ld	r31, X
   10be8:	01 90       	ld	r0, Z+
   10bea:	f0 81       	ld	r31, Z
   10bec:	e0 2d       	mov	r30, r0
   10bee:	c8 01       	movw	r24, r16
   10bf0:	19 95       	eicall
   10bf2:	21 96       	adiw	r28, 0x01	; 1
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10bf4:	fe 01       	movw	r30, r28
   10bf6:	64 91       	lpm	r22, Z
   10bf8:	61 11       	cpse	r22, r1
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10bfa:	f3 cf       	rjmp	.-26     	; 0x10be2 <_Z12processGCodei+0x616>
   10bfc:	e5 e2       	ldi	r30, 0x25	; 37
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10bfe:	f1 e1       	ldi	r31, 0x11	; 17
   10c00:	64 91       	lpm	r22, Z
   10c02:	66 23       	and	r22, r22
	while(ch)
   10c04:	81 f0       	breq	.+32     	; 0x10c26 <_Z12processGCodei+0x65a>
   10c06:	ef 01       	movw	r28, r30
   10c08:	08 e0       	ldi	r16, 0x08	; 8
   10c0a:	1a e0       	ldi	r17, 0x0A	; 10
   10c0c:	d8 01       	movw	r26, r16
   10c0e:	ed 91       	ld	r30, X+
   10c10:	fc 91       	ld	r31, X
   10c12:	01 90       	ld	r0, Z+
   10c14:	f0 81       	ld	r31, Z
   10c16:	e0 2d       	mov	r30, r0
   10c18:	c8 01       	movw	r24, r16
   10c1a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10c1c:	21 96       	adiw	r28, 0x01	; 1
   10c1e:	fe 01       	movw	r30, r28
   10c20:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10c22:	61 11       	cpse	r22, r1
   10c24:	f3 cf       	rjmp	.-26     	; 0x10c0c <_Z12processGCodei+0x640>
		}
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM("G100");
		SERIAL_PGMLN(MSG_TERMINATE);
   10c26:	88 e0       	ldi	r24, 0x08	; 8
   10c28:	9a e0       	ldi	r25, 0x0A	; 10
   10c2a:	df d3       	rcall	.+1982   	; 0x113ea <_ZN5Print7printlnEv>
   10c2c:	88 e0       	ldi	r24, 0x08	; 8
		SERIAL_PORT.flush();
   10c2e:	9a e0       	ldi	r25, 0x0A	; 10
   10c30:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
   10c34:	11 c3       	rjmp	.+1570   	; 0x11258 <_Z12processGCodei+0xc8c>
		break;
   10c36:	87 e5       	ldi	r24, 0x57	; 87
	
	case 200: // G200 set up stepper. G200 W<wires else default 4> P<pin 1 default 22> Q<pin 2 default 24> R<pin 3 default 26> S<pin 4 defualt 28> F<pulse width default 20> M<motor speed default 500> A<motor accel def 400>
		int swire;
		swire = code_seen('W') ? code_value() : 4;
   10c38:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
   10c3c:	88 23       	and	r24, r24
   10c3e:	31 f0       	breq	.+12     	; 0x10c4c <_Z12processGCodei+0x680>
   10c40:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
   10c44:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
   10c48:	16 2f       	mov	r17, r22
   10c4a:	01 c0       	rjmp	.+2      	; 0x10c4e <_Z12processGCodei+0x682>
   10c4c:	14 e0       	ldi	r17, 0x04	; 4
   10c4e:	80 e5       	ldi	r24, 0x50	; 80
		int p1,q2,r3,s4;
		p1 = code_seen('P') ? code_value() : 22;
   10c50:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
   10c54:	88 23       	and	r24, r24
   10c56:	31 f0       	breq	.+12     	; 0x10c64 <_Z12processGCodei+0x698>
   10c58:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
   10c5c:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
   10c60:	f6 2e       	mov	r15, r22
   10c62:	04 c0       	rjmp	.+8      	; 0x10c6c <_Z12processGCodei+0x6a0>
   10c64:	0f 2e       	mov	r0, r31
   10c66:	f6 e1       	ldi	r31, 0x16	; 22
   10c68:	ff 2e       	mov	r15, r31
   10c6a:	f0 2d       	mov	r31, r0
   10c6c:	81 e5       	ldi	r24, 0x51	; 81
		q2 = code_seen('Q') ? code_value() : 24;
   10c6e:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
   10c72:	88 23       	and	r24, r24
   10c74:	31 f0       	breq	.+12     	; 0x10c82 <_Z12processGCodei+0x6b6>
   10c76:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
   10c7a:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
   10c7e:	d6 2e       	mov	r13, r22
   10c80:	04 c0       	rjmp	.+8      	; 0x10c8a <_Z12processGCodei+0x6be>
   10c82:	0f 2e       	mov	r0, r31
   10c84:	f8 e1       	ldi	r31, 0x18	; 24
   10c86:	df 2e       	mov	r13, r31
   10c88:	f0 2d       	mov	r31, r0
   10c8a:	82 e5       	ldi	r24, 0x52	; 82
		r3 = code_seen('R') ? code_value() : 26;
   10c8c:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
   10c90:	88 23       	and	r24, r24
   10c92:	31 f0       	breq	.+12     	; 0x10ca0 <_Z12processGCodei+0x6d4>
   10c94:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
   10c98:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
   10c9c:	06 2f       	mov	r16, r22
   10c9e:	01 c0       	rjmp	.+2      	; 0x10ca2 <_Z12processGCodei+0x6d6>
   10ca0:	0a e1       	ldi	r16, 0x1A	; 26
		s4 = code_seen('S') ? code_value() : 28;
   10ca2:	83 e5       	ldi	r24, 0x53	; 83
   10ca4:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
   10ca8:	88 23       	and	r24, r24
   10caa:	31 f0       	breq	.+12     	; 0x10cb8 <_Z12processGCodei+0x6ec>
   10cac:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
   10cb0:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
   10cb4:	e6 2e       	mov	r14, r22
   10cb6:	04 c0       	rjmp	.+8      	; 0x10cc0 <_Z12processGCodei+0x6f4>
   10cb8:	0f 2e       	mov	r0, r31
   10cba:	fc e1       	ldi	r31, 0x1C	; 28
   10cbc:	ef 2e       	mov	r14, r31
   10cbe:	f0 2d       	mov	r31, r0
		accelStepper = new AccelStepper(swire,p1,q2,r3,s4,true);
   10cc0:	8c e4       	ldi	r24, 0x4C	; 76
   10cc2:	90 e0       	ldi	r25, 0x00	; 0
   10cc4:	56 d3       	rcall	.+1708   	; 0x11372 <_Znwj>
   10cc6:	ec 01       	movw	r28, r24
   10cc8:	cc 24       	eor	r12, r12
   10cca:	c3 94       	inc	r12
   10ccc:	2d 2d       	mov	r18, r13
   10cce:	4f 2d       	mov	r20, r15
   10cd0:	61 2f       	mov	r22, r17
   10cd2:	0e 94 03 16 	call	0x2c06	; 0x2c06 <_ZN12AccelStepperC1Ehhhhhb>
   10cd6:	d0 93 e2 12 	sts	0x12E2, r29	; 0x8012e2 <accelStepper+0x1>
   10cda:	c0 93 e1 12 	sts	0x12E1, r28	; 0x8012e1 <accelStepper>
   10cde:	86 e4       	ldi	r24, 0x46	; 70
		int pulseWidth;
		int motorSpeed;
		int motorAccel;
		pulseWidth = code_seen('F') ? code_value() : 20;
   10ce0:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
   10ce4:	88 23       	and	r24, r24
   10ce6:	31 f0       	breq	.+12     	; 0x10cf4 <_Z12processGCodei+0x728>
   10ce8:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
   10cec:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
   10cf0:	7b 01       	movw	r14, r22
   10cf2:	05 c0       	rjmp	.+10     	; 0x10cfe <_Z12processGCodei+0x732>
   10cf4:	0f 2e       	mov	r0, r31
   10cf6:	f4 e1       	ldi	r31, 0x14	; 20
   10cf8:	ef 2e       	mov	r14, r31
   10cfa:	f1 2c       	mov	r15, r1
   10cfc:	f0 2d       	mov	r31, r0
   10cfe:	8d e4       	ldi	r24, 0x4D	; 77
		motorSpeed = code_seen('M') ? code_value() : 500;
   10d00:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
   10d04:	88 23       	and	r24, r24
   10d06:	31 f0       	breq	.+12     	; 0x10d14 <_Z12processGCodei+0x748>
   10d08:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
   10d0c:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
   10d10:	8b 01       	movw	r16, r22
   10d12:	02 c0       	rjmp	.+4      	; 0x10d18 <_Z12processGCodei+0x74c>
   10d14:	04 ef       	ldi	r16, 0xF4	; 244
   10d16:	11 e0       	ldi	r17, 0x01	; 1
   10d18:	81 e4       	ldi	r24, 0x41	; 65
		motorAccel = code_seen('A') ? code_value() : 400;
   10d1a:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
   10d1e:	88 23       	and	r24, r24
   10d20:	31 f0       	breq	.+12     	; 0x10d2e <_Z12processGCodei+0x762>
   10d22:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
   10d26:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
   10d2a:	eb 01       	movw	r28, r22
   10d2c:	02 c0       	rjmp	.+4      	; 0x10d32 <_Z12processGCodei+0x766>
   10d2e:	c0 e9       	ldi	r28, 0x90	; 144
   10d30:	d1 e0       	ldi	r29, 0x01	; 1
   10d32:	b7 01       	movw	r22, r14
		accelStepper->setMinPulseWidth(pulseWidth); // 20 prevents pulses too quick to be decoded
   10d34:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
   10d38:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   10d3c:	0e 94 24 17 	call	0x2e48	; 0x2e48 <_ZN12AccelStepper16setMinPulseWidthEj>
   10d40:	b8 01       	movw	r22, r16
		accelStepper->setMaxSpeed(motorSpeed);
   10d42:	11 0f       	add	r17, r17
   10d44:	88 0b       	sbc	r24, r24
   10d46:	99 0b       	sbc	r25, r25
   10d48:	0e 94 71 a5 	call	0x14ae2	; 0x14ae2 <__floatsisf>
   10d4c:	6b 01       	movw	r12, r22
   10d4e:	7c 01       	movw	r14, r24
   10d50:	ab 01       	movw	r20, r22
   10d52:	bc 01       	movw	r22, r24
   10d54:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
   10d58:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   10d5c:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <_ZN12AccelStepper11setMaxSpeedEf>
   10d60:	b7 01       	movw	r22, r14
		accelStepper->setSpeed(motorSpeed);
   10d62:	a6 01       	movw	r20, r12
   10d64:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
   10d68:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   10d6c:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <_ZN12AccelStepper8setSpeedEf>
   10d70:	be 01       	movw	r22, r28
		accelStepper->setAcceleration(motorAccel);
   10d72:	dd 0f       	add	r29, r29
   10d74:	88 0b       	sbc	r24, r24
   10d76:	99 0b       	sbc	r25, r25
   10d78:	0e 94 71 a5 	call	0x14ae2	; 0x14ae2 <__floatsisf>
   10d7c:	ab 01       	movw	r20, r22
   10d7e:	bc 01       	movw	r22, r24
   10d80:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
   10d84:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   10d88:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <_ZN12AccelStepper15setAccelerationEf>
   10d8c:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
		// the following two lines reset "step zero" to the current position
		accelStepper->setCurrentPosition(accelStepper->currentPosition());
   10d90:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   10d94:	0e 94 44 13 	call	0x2688	; 0x2688 <_ZN12AccelStepper15currentPositionEv>
   10d98:	ab 01       	movw	r20, r22
   10d9a:	bc 01       	movw	r22, r24
   10d9c:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
   10da0:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   10da4:	0e 94 4a 13 	call	0x2694	; 0x2694 <_ZN12AccelStepper18setCurrentPositionEl>
   10da8:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
		accelStepper->runToPosition();
   10dac:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   10db0:	0e 94 28 17 	call	0x2e50	; 0x2e50 <_ZN12AccelStepper13runToPositionEv>
   10db4:	e3 e2       	ldi	r30, 0x23	; 35
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10db6:	f1 e1       	ldi	r31, 0x11	; 17
   10db8:	64 91       	lpm	r22, Z
   10dba:	66 23       	and	r22, r22
	while(ch)
   10dbc:	81 f0       	breq	.+32     	; 0x10dde <_Z12processGCodei+0x812>
   10dbe:	ef 01       	movw	r28, r30
   10dc0:	08 e0       	ldi	r16, 0x08	; 8
   10dc2:	1a e0       	ldi	r17, 0x0A	; 10
   10dc4:	d8 01       	movw	r26, r16
   10dc6:	ed 91       	ld	r30, X+
   10dc8:	fc 91       	ld	r31, X
   10dca:	01 90       	ld	r0, Z+
   10dcc:	f0 81       	ld	r31, Z
   10dce:	e0 2d       	mov	r30, r0
   10dd0:	c8 01       	movw	r24, r16
   10dd2:	19 95       	eicall
   10dd4:	21 96       	adiw	r28, 0x01	; 1
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10dd6:	fe 01       	movw	r30, r28
   10dd8:	64 91       	lpm	r22, Z
   10dda:	61 11       	cpse	r22, r1
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10ddc:	f3 cf       	rjmp	.-26     	; 0x10dc4 <_Z12processGCodei+0x7f8>
   10dde:	ee e1       	ldi	r30, 0x1E	; 30
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10de0:	f1 e1       	ldi	r31, 0x11	; 17
   10de2:	64 91       	lpm	r22, Z
   10de4:	66 23       	and	r22, r22
	while(ch)
   10de6:	81 f0       	breq	.+32     	; 0x10e08 <_Z12processGCodei+0x83c>
   10de8:	ef 01       	movw	r28, r30
   10dea:	08 e0       	ldi	r16, 0x08	; 8
   10dec:	1a e0       	ldi	r17, 0x0A	; 10
   10dee:	d8 01       	movw	r26, r16
   10df0:	ed 91       	ld	r30, X+
   10df2:	fc 91       	ld	r31, X
   10df4:	01 90       	ld	r0, Z+
   10df6:	f0 81       	ld	r31, Z
   10df8:	e0 2d       	mov	r30, r0
   10dfa:	c8 01       	movw	r24, r16
   10dfc:	19 95       	eicall
   10dfe:	21 96       	adiw	r28, 0x01	; 1
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10e00:	fe 01       	movw	r30, r28
   10e02:	64 91       	lpm	r22, Z
   10e04:	61 11       	cpse	r22, r1
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10e06:	f3 cf       	rjmp	.-26     	; 0x10dee <_Z12processGCodei+0x822>
   10e08:	eb e1       	ldi	r30, 0x1B	; 27
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10e0a:	f1 e1       	ldi	r31, 0x11	; 17
   10e0c:	64 91       	lpm	r22, Z
   10e0e:	66 23       	and	r22, r22
	while(ch)
   10e10:	81 f0       	breq	.+32     	; 0x10e32 <_Z12processGCodei+0x866>
   10e12:	ef 01       	movw	r28, r30
   10e14:	08 e0       	ldi	r16, 0x08	; 8
   10e16:	1a e0       	ldi	r17, 0x0A	; 10
   10e18:	d8 01       	movw	r26, r16
   10e1a:	ed 91       	ld	r30, X+
   10e1c:	fc 91       	ld	r31, X
   10e1e:	01 90       	ld	r0, Z+
   10e20:	f0 81       	ld	r31, Z
   10e22:	e0 2d       	mov	r30, r0
   10e24:	c8 01       	movw	r24, r16
   10e26:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10e28:	21 96       	adiw	r28, 0x01	; 1
   10e2a:	fe 01       	movw	r30, r28
   10e2c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10e2e:	61 11       	cpse	r22, r1
   10e30:	f3 cf       	rjmp	.-26     	; 0x10e18 <_Z12processGCodei+0x84c>
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM("G200");
		SERIAL_PGMLN(MSG_TERMINATE);
   10e32:	88 e0       	ldi	r24, 0x08	; 8
   10e34:	9a e0       	ldi	r25, 0x0A	; 10
   10e36:	d9 d2       	rcall	.+1458   	; 0x113ea <_ZN5Print7printlnEv>
   10e38:	88 e0       	ldi	r24, 0x08	; 8
		SERIAL_PORT.flush();
   10e3a:	9a e0       	ldi	r25, 0x0A	; 10
   10e3c:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
   10e40:	0b c2       	rjmp	.+1046   	; 0x11258 <_Z12processGCodei+0xc8c>
		break;
   10e42:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
		
	case 201: // G201 stepper stop
		if(accelStepper) {
   10e46:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   10e4a:	00 97       	sbiw	r24, 0x00	; 0
   10e4c:	09 f4       	brne	.+2      	; 0x10e50 <_Z12processGCodei+0x884>
   10e4e:	04 c2       	rjmp	.+1032   	; 0x11258 <_Z12processGCodei+0xc8c>
   10e50:	0e 94 32 17 	call	0x2e64	; 0x2e64 <_ZN12AccelStepper4stopEv>
			accelStepper->stop();
   10e54:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
			accelStepper->runToPosition();
   10e58:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   10e5c:	0e 94 28 17 	call	0x2e50	; 0x2e50 <_ZN12AccelStepper13runToPositionEv>
   10e60:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
			accelStepper->run();
   10e64:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   10e68:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN12AccelStepper3runEv>
   10e6c:	e9 e1       	ldi	r30, 0x19	; 25
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10e6e:	f1 e1       	ldi	r31, 0x11	; 17
   10e70:	64 91       	lpm	r22, Z
   10e72:	66 23       	and	r22, r22
	while(ch)
   10e74:	81 f0       	breq	.+32     	; 0x10e96 <_Z12processGCodei+0x8ca>
   10e76:	ef 01       	movw	r28, r30
   10e78:	08 e0       	ldi	r16, 0x08	; 8
   10e7a:	1a e0       	ldi	r17, 0x0A	; 10
   10e7c:	d8 01       	movw	r26, r16
   10e7e:	ed 91       	ld	r30, X+
   10e80:	fc 91       	ld	r31, X
   10e82:	01 90       	ld	r0, Z+
   10e84:	f0 81       	ld	r31, Z
   10e86:	e0 2d       	mov	r30, r0
   10e88:	c8 01       	movw	r24, r16
   10e8a:	19 95       	eicall
   10e8c:	21 96       	adiw	r28, 0x01	; 1
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10e8e:	fe 01       	movw	r30, r28
   10e90:	64 91       	lpm	r22, Z
   10e92:	61 11       	cpse	r22, r1
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10e94:	f3 cf       	rjmp	.-26     	; 0x10e7c <_Z12processGCodei+0x8b0>
   10e96:	e4 e1       	ldi	r30, 0x14	; 20
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10e98:	f1 e1       	ldi	r31, 0x11	; 17
   10e9a:	64 91       	lpm	r22, Z
   10e9c:	66 23       	and	r22, r22
	while(ch)
   10e9e:	81 f0       	breq	.+32     	; 0x10ec0 <_Z12processGCodei+0x8f4>
   10ea0:	ef 01       	movw	r28, r30
   10ea2:	08 e0       	ldi	r16, 0x08	; 8
   10ea4:	1a e0       	ldi	r17, 0x0A	; 10
   10ea6:	d8 01       	movw	r26, r16
   10ea8:	ed 91       	ld	r30, X+
   10eaa:	fc 91       	ld	r31, X
   10eac:	01 90       	ld	r0, Z+
   10eae:	f0 81       	ld	r31, Z
   10eb0:	e0 2d       	mov	r30, r0
   10eb2:	c8 01       	movw	r24, r16
   10eb4:	19 95       	eicall
   10eb6:	21 96       	adiw	r28, 0x01	; 1
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10eb8:	fe 01       	movw	r30, r28
   10eba:	64 91       	lpm	r22, Z
   10ebc:	61 11       	cpse	r22, r1
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10ebe:	f3 cf       	rjmp	.-26     	; 0x10ea6 <_Z12processGCodei+0x8da>
   10ec0:	e1 e1       	ldi	r30, 0x11	; 17
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10ec2:	f1 e1       	ldi	r31, 0x11	; 17
   10ec4:	64 91       	lpm	r22, Z
	while(ch)
   10ec6:	66 23       	and	r22, r22
   10ec8:	81 f0       	breq	.+32     	; 0x10eea <_Z12processGCodei+0x91e>
   10eca:	ef 01       	movw	r28, r30
   10ecc:	08 e0       	ldi	r16, 0x08	; 8
   10ece:	1a e0       	ldi	r17, 0x0A	; 10
   10ed0:	d8 01       	movw	r26, r16
   10ed2:	ed 91       	ld	r30, X+
   10ed4:	fc 91       	ld	r31, X
   10ed6:	01 90       	ld	r0, Z+
   10ed8:	f0 81       	ld	r31, Z
   10eda:	e0 2d       	mov	r30, r0
   10edc:	c8 01       	movw	r24, r16
   10ede:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10ee0:	21 96       	adiw	r28, 0x01	; 1
   10ee2:	fe 01       	movw	r30, r28
   10ee4:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10ee6:	61 11       	cpse	r22, r1
   10ee8:	f3 cf       	rjmp	.-26     	; 0x10ed0 <_Z12processGCodei+0x904>
			SERIAL_PGM(MSG_BEGIN);
			SERIAL_PGM("G201");
			SERIAL_PGMLN(MSG_TERMINATE);
   10eea:	88 e0       	ldi	r24, 0x08	; 8
   10eec:	9a e0       	ldi	r25, 0x0A	; 10
   10eee:	7d d2       	rcall	.+1274   	; 0x113ea <_ZN5Print7printlnEv>
   10ef0:	88 e0       	ldi	r24, 0x08	; 8
			SERIAL_PORT.flush();
   10ef2:	9a e0       	ldi	r25, 0x0A	; 10
   10ef4:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
   10ef8:	af c1       	rjmp	.+862    	; 0x11258 <_Z12processGCodei+0xc8c>
   10efa:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
		}
		break;
	
	case 202: // G202 S<steps>  clockwise
		int steps;
		if(accelStepper) {
   10efe:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   10f02:	89 2b       	or	r24, r25
   10f04:	09 f4       	brne	.+2      	; 0x10f08 <_Z12processGCodei+0x93c>
   10f06:	a8 c1       	rjmp	.+848    	; 0x11258 <_Z12processGCodei+0xc8c>
   10f08:	83 e5       	ldi	r24, 0x53	; 83
			if(code_seen('S'))
   10f0a:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
   10f0e:	88 23       	and	r24, r24
   10f10:	29 f0       	breq	.+10     	; 0x10f1c <_Z12processGCodei+0x950>
   10f12:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
				steps = code_value();
   10f16:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
   10f1a:	8b 01       	movw	r16, r22
   10f1c:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
	        // The two lines that follow allow to send commands in any sequence:
	        // before execution, a quick stop is performed
	        accelStepper->stop(); // Stop as fast as possible: sets new target
   10f20:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   10f24:	0e 94 32 17 	call	0x2e64	; 0x2e64 <_ZN12AccelStepper4stopEv>
   10f28:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
	        accelStepper->runToPosition(); // Now stopped after quickstop
   10f2c:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   10f30:	0e 94 28 17 	call	0x2e50	; 0x2e50 <_ZN12AccelStepper13runToPositionEv>
   10f34:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
	        accelStepper->setCurrentPosition(accelStepper->currentPosition()); // Set step 0 "here"
   10f38:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   10f3c:	0e 94 44 13 	call	0x2688	; 0x2688 <_ZN12AccelStepper15currentPositionEv>
   10f40:	ab 01       	movw	r20, r22
   10f42:	bc 01       	movw	r22, r24
   10f44:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
   10f48:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   10f4c:	0e 94 4a 13 	call	0x2694	; 0x2694 <_ZN12AccelStepper18setCurrentPositionEl>
   10f50:	60 e0       	ldi	r22, 0x00	; 0
	        accelStepper->setSpeed(motorSpeed); // Previous commands have reset the speed
   10f52:	70 e0       	ldi	r23, 0x00	; 0
   10f54:	cb 01       	movw	r24, r22
   10f56:	0e 94 71 a5 	call	0x14ae2	; 0x14ae2 <__floatsisf>
   10f5a:	ab 01       	movw	r20, r22
   10f5c:	bc 01       	movw	r22, r24
   10f5e:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
   10f62:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   10f66:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <_ZN12AccelStepper8setSpeedEf>
   10f6a:	10 16       	cp	r1, r16
	        // Since we step forward 2047 steps, current position is starting point of the rotation
			for(int i = 0; i < steps; i++) {
   10f6c:	11 06       	cpc	r1, r17
   10f6e:	f4 f4       	brge	.+60     	; 0x10fac <_Z12processGCodei+0x9e0>
   10f70:	c0 e0       	ldi	r28, 0x00	; 0
   10f72:	d0 e0       	ldi	r29, 0x00	; 0
   10f74:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
				accelStepper->moveTo(accelStepper->currentPosition()+1); // 1 turn = 2048 step
   10f78:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   10f7c:	0e 94 44 13 	call	0x2688	; 0x2688 <_ZN12AccelStepper15currentPositionEv>
   10f80:	ab 01       	movw	r20, r22
   10f82:	bc 01       	movw	r22, r24
   10f84:	4f 5f       	subi	r20, 0xFF	; 255
   10f86:	5f 4f       	sbci	r21, 0xFF	; 255
   10f88:	6f 4f       	sbci	r22, 0xFF	; 255
   10f8a:	7f 4f       	sbci	r23, 0xFF	; 255
   10f8c:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
   10f90:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   10f94:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_ZN12AccelStepper6moveToEl>
   10f98:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
				accelStepper->run();
   10f9c:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   10fa0:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN12AccelStepper3runEv>
   10fa4:	21 96       	adiw	r28, 0x01	; 1
	        accelStepper->stop(); // Stop as fast as possible: sets new target
	        accelStepper->runToPosition(); // Now stopped after quickstop
	        accelStepper->setCurrentPosition(accelStepper->currentPosition()); // Set step 0 "here"
	        accelStepper->setSpeed(motorSpeed); // Previous commands have reset the speed
	        // Since we step forward 2047 steps, current position is starting point of the rotation
			for(int i = 0; i < steps; i++) {
   10fa6:	0c 17       	cp	r16, r28
   10fa8:	1d 07       	cpc	r17, r29
   10faa:	21 f7       	brne	.-56     	; 0x10f74 <_Z12processGCodei+0x9a8>
   10fac:	ef e0       	ldi	r30, 0x0F	; 15
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10fae:	f1 e1       	ldi	r31, 0x11	; 17
   10fb0:	64 91       	lpm	r22, Z
   10fb2:	66 23       	and	r22, r22
	while(ch)
   10fb4:	81 f0       	breq	.+32     	; 0x10fd6 <_Z12processGCodei+0xa0a>
   10fb6:	ef 01       	movw	r28, r30
   10fb8:	08 e0       	ldi	r16, 0x08	; 8
   10fba:	1a e0       	ldi	r17, 0x0A	; 10
   10fbc:	d8 01       	movw	r26, r16
   10fbe:	ed 91       	ld	r30, X+
   10fc0:	fc 91       	ld	r31, X
   10fc2:	01 90       	ld	r0, Z+
   10fc4:	f0 81       	ld	r31, Z
   10fc6:	e0 2d       	mov	r30, r0
   10fc8:	c8 01       	movw	r24, r16
   10fca:	19 95       	eicall
   10fcc:	21 96       	adiw	r28, 0x01	; 1
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10fce:	fe 01       	movw	r30, r28
   10fd0:	64 91       	lpm	r22, Z
   10fd2:	61 11       	cpse	r22, r1
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10fd4:	f3 cf       	rjmp	.-26     	; 0x10fbc <_Z12processGCodei+0x9f0>
   10fd6:	ea e0       	ldi	r30, 0x0A	; 10
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   10fd8:	f1 e1       	ldi	r31, 0x11	; 17
   10fda:	64 91       	lpm	r22, Z
   10fdc:	66 23       	and	r22, r22
	while(ch)
   10fde:	81 f0       	breq	.+32     	; 0x11000 <_Z12processGCodei+0xa34>
   10fe0:	ef 01       	movw	r28, r30
   10fe2:	08 e0       	ldi	r16, 0x08	; 8
   10fe4:	1a e0       	ldi	r17, 0x0A	; 10
   10fe6:	d8 01       	movw	r26, r16
   10fe8:	ed 91       	ld	r30, X+
   10fea:	fc 91       	ld	r31, X
   10fec:	01 90       	ld	r0, Z+
   10fee:	f0 81       	ld	r31, Z
   10ff0:	e0 2d       	mov	r30, r0
   10ff2:	c8 01       	movw	r24, r16
   10ff4:	19 95       	eicall
   10ff6:	21 96       	adiw	r28, 0x01	; 1
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   10ff8:	fe 01       	movw	r30, r28
   10ffa:	64 91       	lpm	r22, Z
   10ffc:	61 11       	cpse	r22, r1
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   10ffe:	f3 cf       	rjmp	.-26     	; 0x10fe6 <_Z12processGCodei+0xa1a>
   11000:	e7 e0       	ldi	r30, 0x07	; 7
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   11002:	f1 e1       	ldi	r31, 0x11	; 17
   11004:	64 91       	lpm	r22, Z
	while(ch)
   11006:	66 23       	and	r22, r22
   11008:	81 f0       	breq	.+32     	; 0x1102a <_Z12processGCodei+0xa5e>
   1100a:	ef 01       	movw	r28, r30
   1100c:	08 e0       	ldi	r16, 0x08	; 8
   1100e:	1a e0       	ldi	r17, 0x0A	; 10
   11010:	d8 01       	movw	r26, r16
   11012:	ed 91       	ld	r30, X+
   11014:	fc 91       	ld	r31, X
   11016:	01 90       	ld	r0, Z+
   11018:	f0 81       	ld	r31, Z
   1101a:	e0 2d       	mov	r30, r0
   1101c:	c8 01       	movw	r24, r16
   1101e:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   11020:	21 96       	adiw	r28, 0x01	; 1
   11022:	fe 01       	movw	r30, r28
   11024:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   11026:	61 11       	cpse	r22, r1
   11028:	f3 cf       	rjmp	.-26     	; 0x11010 <_Z12processGCodei+0xa44>
				accelStepper->moveTo(accelStepper->currentPosition()+1); // 1 turn = 2048 step
				accelStepper->run();
			}
			SERIAL_PGM(MSG_BEGIN);
			SERIAL_PGM("G202");
			SERIAL_PGMLN(MSG_TERMINATE);
   1102a:	88 e0       	ldi	r24, 0x08	; 8
   1102c:	9a e0       	ldi	r25, 0x0A	; 10
   1102e:	dd d1       	rcall	.+954    	; 0x113ea <_ZN5Print7printlnEv>
   11030:	88 e0       	ldi	r24, 0x08	; 8
			SERIAL_PORT.flush();
   11032:	9a e0       	ldi	r25, 0x0A	; 10
   11034:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
   11038:	0f c1       	rjmp	.+542    	; 0x11258 <_Z12processGCodei+0xc8c>
   1103a:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
		}
		break;
		
	case 203: // G203 S<steps>  anti-clockwise
		if(accelStepper) {
   1103e:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   11042:	89 2b       	or	r24, r25
   11044:	09 f4       	brne	.+2      	; 0x11048 <_Z12processGCodei+0xa7c>
   11046:	08 c1       	rjmp	.+528    	; 0x11258 <_Z12processGCodei+0xc8c>
   11048:	83 e5       	ldi	r24, 0x53	; 83
			if(code_seen('S'))
   1104a:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
   1104e:	88 23       	and	r24, r24
   11050:	29 f0       	breq	.+10     	; 0x1105c <_Z12processGCodei+0xa90>
   11052:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
				steps = code_value();
   11056:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
   1105a:	8b 01       	movw	r16, r22
   1105c:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
			// The two lines that follow allow to send commands in any sequence:
			// before execution, a quick stop is performed
			accelStepper->stop(); // Stop as fast as possible: sets new target
   11060:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   11064:	0e 94 32 17 	call	0x2e64	; 0x2e64 <_ZN12AccelStepper4stopEv>
   11068:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
			accelStepper->runToPosition(); // Now stopped after quickstop
   1106c:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   11070:	0e 94 28 17 	call	0x2e50	; 0x2e50 <_ZN12AccelStepper13runToPositionEv>
   11074:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
			accelStepper->setCurrentPosition(accelStepper->currentPosition()); // Set step 0 "here"
   11078:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   1107c:	0e 94 44 13 	call	0x2688	; 0x2688 <_ZN12AccelStepper15currentPositionEv>
   11080:	ab 01       	movw	r20, r22
   11082:	bc 01       	movw	r22, r24
   11084:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
   11088:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   1108c:	0e 94 4a 13 	call	0x2694	; 0x2694 <_ZN12AccelStepper18setCurrentPositionEl>
   11090:	60 e0       	ldi	r22, 0x00	; 0
			accelStepper->setSpeed(motorSpeed); // Previous commands have reset the speed
   11092:	70 e0       	ldi	r23, 0x00	; 0
   11094:	cb 01       	movw	r24, r22
   11096:	0e 94 71 a5 	call	0x14ae2	; 0x14ae2 <__floatsisf>
   1109a:	ab 01       	movw	r20, r22
   1109c:	bc 01       	movw	r22, r24
   1109e:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
   110a2:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   110a6:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <_ZN12AccelStepper8setSpeedEf>
   110aa:	10 16       	cp	r1, r16
			// Since we step backward 2047 steps, current position is starting point of the rotation
			for(int i = 0; i < steps; i++) {
   110ac:	11 06       	cpc	r1, r17
   110ae:	24 f5       	brge	.+72     	; 0x110f8 <_Z12processGCodei+0xb2c>
   110b0:	c0 e0       	ldi	r28, 0x00	; 0
   110b2:	d0 e0       	ldi	r29, 0x00	; 0
   110b4:	c1 2c       	mov	r12, r1
				accelStepper->moveTo(-(accelStepper->currentPosition()-1)); // 1 turn = 2048 step
   110b6:	d1 2c       	mov	r13, r1
   110b8:	76 01       	movw	r14, r12
   110ba:	c3 94       	inc	r12
   110bc:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
   110c0:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   110c4:	0e 94 44 13 	call	0x2688	; 0x2688 <_ZN12AccelStepper15currentPositionEv>
   110c8:	46 01       	movw	r8, r12
   110ca:	57 01       	movw	r10, r14
   110cc:	86 1a       	sub	r8, r22
   110ce:	97 0a       	sbc	r9, r23
   110d0:	a8 0a       	sbc	r10, r24
   110d2:	b9 0a       	sbc	r11, r25
   110d4:	b5 01       	movw	r22, r10
   110d6:	a4 01       	movw	r20, r8
   110d8:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
   110dc:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   110e0:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_ZN12AccelStepper6moveToEl>
   110e4:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <accelStepper>
				accelStepper->run();
   110e8:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <accelStepper+0x1>
   110ec:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN12AccelStepper3runEv>
   110f0:	21 96       	adiw	r28, 0x01	; 1
			accelStepper->stop(); // Stop as fast as possible: sets new target
			accelStepper->runToPosition(); // Now stopped after quickstop
			accelStepper->setCurrentPosition(accelStepper->currentPosition()); // Set step 0 "here"
			accelStepper->setSpeed(motorSpeed); // Previous commands have reset the speed
			// Since we step backward 2047 steps, current position is starting point of the rotation
			for(int i = 0; i < steps; i++) {
   110f2:	0c 17       	cp	r16, r28
   110f4:	1d 07       	cpc	r17, r29
   110f6:	11 f7       	brne	.-60     	; 0x110bc <_Z12processGCodei+0xaf0>
   110f8:	e5 e0       	ldi	r30, 0x05	; 5
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   110fa:	f1 e1       	ldi	r31, 0x11	; 17
   110fc:	64 91       	lpm	r22, Z
   110fe:	66 23       	and	r22, r22
	while(ch)
   11100:	81 f0       	breq	.+32     	; 0x11122 <_Z12processGCodei+0xb56>
   11102:	ef 01       	movw	r28, r30
   11104:	08 e0       	ldi	r16, 0x08	; 8
   11106:	1a e0       	ldi	r17, 0x0A	; 10
   11108:	d8 01       	movw	r26, r16
   1110a:	ed 91       	ld	r30, X+
   1110c:	fc 91       	ld	r31, X
   1110e:	01 90       	ld	r0, Z+
   11110:	f0 81       	ld	r31, Z
   11112:	e0 2d       	mov	r30, r0
   11114:	c8 01       	movw	r24, r16
   11116:	19 95       	eicall
   11118:	21 96       	adiw	r28, 0x01	; 1
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   1111a:	fe 01       	movw	r30, r28
   1111c:	64 91       	lpm	r22, Z
   1111e:	61 11       	cpse	r22, r1
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   11120:	f3 cf       	rjmp	.-26     	; 0x11108 <_Z12processGCodei+0xb3c>
   11122:	e0 e0       	ldi	r30, 0x00	; 0
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   11124:	f1 e1       	ldi	r31, 0x11	; 17
   11126:	64 91       	lpm	r22, Z
   11128:	66 23       	and	r22, r22
	while(ch)
   1112a:	81 f0       	breq	.+32     	; 0x1114c <_Z12processGCodei+0xb80>
   1112c:	ef 01       	movw	r28, r30
   1112e:	08 e0       	ldi	r16, 0x08	; 8
   11130:	1a e0       	ldi	r17, 0x0A	; 10
   11132:	d8 01       	movw	r26, r16
   11134:	ed 91       	ld	r30, X+
   11136:	fc 91       	ld	r31, X
   11138:	01 90       	ld	r0, Z+
   1113a:	f0 81       	ld	r31, Z
   1113c:	e0 2d       	mov	r30, r0
   1113e:	c8 01       	movw	r24, r16
   11140:	19 95       	eicall
   11142:	21 96       	adiw	r28, 0x01	; 1
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   11144:	fe 01       	movw	r30, r28
   11146:	64 91       	lpm	r22, Z
   11148:	61 11       	cpse	r22, r1
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   1114a:	f3 cf       	rjmp	.-26     	; 0x11132 <_Z12processGCodei+0xb66>
   1114c:	ed ef       	ldi	r30, 0xFD	; 253
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   1114e:	f0 e1       	ldi	r31, 0x10	; 16
   11150:	64 91       	lpm	r22, Z
	while(ch)
   11152:	66 23       	and	r22, r22
   11154:	81 f0       	breq	.+32     	; 0x11176 <_Z12processGCodei+0xbaa>
   11156:	ef 01       	movw	r28, r30
   11158:	08 e0       	ldi	r16, 0x08	; 8
   1115a:	1a e0       	ldi	r17, 0x0A	; 10
   1115c:	d8 01       	movw	r26, r16
   1115e:	ed 91       	ld	r30, X+
   11160:	fc 91       	ld	r31, X
   11162:	01 90       	ld	r0, Z+
   11164:	f0 81       	ld	r31, Z
   11166:	e0 2d       	mov	r30, r0
   11168:	c8 01       	movw	r24, r16
   1116a:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   1116c:	21 96       	adiw	r28, 0x01	; 1
   1116e:	fe 01       	movw	r30, r28
   11170:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   11172:	61 11       	cpse	r22, r1
   11174:	f3 cf       	rjmp	.-26     	; 0x1115c <_Z12processGCodei+0xb90>
				accelStepper->moveTo(-(accelStepper->currentPosition()-1)); // 1 turn = 2048 step
				accelStepper->run();
			}
			SERIAL_PGM(MSG_BEGIN);
			SERIAL_PGM("G203");
			SERIAL_PGMLN(MSG_TERMINATE);
   11176:	88 e0       	ldi	r24, 0x08	; 8
   11178:	9a e0       	ldi	r25, 0x0A	; 10
   1117a:	37 d1       	rcall	.+622    	; 0x113ea <_ZN5Print7printlnEv>
   1117c:	88 e0       	ldi	r24, 0x08	; 8
			SERIAL_PORT.flush();
   1117e:	9a e0       	ldi	r25, 0x0A	; 10
   11180:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
   11184:	69 c0       	rjmp	.+210    	; 0x11258 <_Z12processGCodei+0xc8c>
   11186:	eb ef       	ldi	r30, 0xFB	; 251
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   11188:	f0 e1       	ldi	r31, 0x10	; 16
   1118a:	64 91       	lpm	r22, Z
   1118c:	66 23       	and	r22, r22
	while(ch)
   1118e:	81 f0       	breq	.+32     	; 0x111b0 <_Z12processGCodei+0xbe4>
   11190:	ef 01       	movw	r28, r30
   11192:	08 e0       	ldi	r16, 0x08	; 8
   11194:	1a e0       	ldi	r17, 0x0A	; 10
   11196:	d8 01       	movw	r26, r16
   11198:	ed 91       	ld	r30, X+
   1119a:	fc 91       	ld	r31, X
   1119c:	01 90       	ld	r0, Z+
   1119e:	f0 81       	ld	r31, Z
   111a0:	e0 2d       	mov	r30, r0
   111a2:	c8 01       	movw	r24, r16
   111a4:	19 95       	eicall
   111a6:	21 96       	adiw	r28, 0x01	; 1
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   111a8:	fe 01       	movw	r30, r28
   111aa:	64 91       	lpm	r22, Z
   111ac:	61 11       	cpse	r22, r1
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   111ae:	f3 cf       	rjmp	.-26     	; 0x11196 <_Z12processGCodei+0xbca>
   111b0:	eb ee       	ldi	r30, 0xEB	; 235
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   111b2:	f0 e1       	ldi	r31, 0x10	; 16
   111b4:	64 91       	lpm	r22, Z
   111b6:	61 11       	cpse	r22, r1
	while(ch)
   111b8:	05 c0       	rjmp	.+10     	; 0x111c4 <_Z12processGCodei+0xbf8>
   111ba:	60 91 7b 15 	lds	r22, 0x157B	; 0x80157b <_ZL9cmdbuffer>
		
	default:
		int ibuf = 0;
		SERIAL_PGM(MSG_BEGIN);
		SERIAL_PGM(MSG_UNKNOWN_GCODE);
		while(cmdbuffer[ibuf]) SERIAL_PORT.print(cmdbuffer[ibuf++]);
   111be:	61 11       	cpse	r22, r1
   111c0:	13 c0       	rjmp	.+38     	; 0x111e8 <_Z12processGCodei+0xc1c>
   111c2:	1a c0       	rjmp	.+52     	; 0x111f8 <_Z12processGCodei+0xc2c>
   111c4:	cb ee       	ldi	r28, 0xEB	; 235
   111c6:	d0 e1       	ldi	r29, 0x10	; 16
   111c8:	08 e0       	ldi	r16, 0x08	; 8
   111ca:	1a e0       	ldi	r17, 0x0A	; 10
   111cc:	d8 01       	movw	r26, r16
   111ce:	ed 91       	ld	r30, X+
   111d0:	fc 91       	ld	r31, X
   111d2:	01 90       	ld	r0, Z+
   111d4:	f0 81       	ld	r31, Z
   111d6:	e0 2d       	mov	r30, r0
   111d8:	c8 01       	movw	r24, r16
   111da:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   111dc:	21 96       	adiw	r28, 0x01	; 1
   111de:	fe 01       	movw	r30, r28
   111e0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   111e2:	61 11       	cpse	r22, r1
   111e4:	f3 cf       	rjmp	.-26     	; 0x111cc <_Z12processGCodei+0xc00>
   111e6:	e9 cf       	rjmp	.-46     	; 0x111ba <_Z12processGCodei+0xbee>
   111e8:	cc e7       	ldi	r28, 0x7C	; 124
   111ea:	d5 e1       	ldi	r29, 0x15	; 21
   111ec:	88 e0       	ldi	r24, 0x08	; 8
   111ee:	9a e0       	ldi	r25, 0x0A	; 10
   111f0:	f4 d0       	rcall	.+488    	; 0x113da <_ZN5Print5printEc>
   111f2:	69 91       	ld	r22, Y+
   111f4:	61 11       	cpse	r22, r1
   111f6:	fa cf       	rjmp	.-12     	; 0x111ec <_Z12processGCodei+0xc20>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   111f8:	e8 ee       	ldi	r30, 0xE8	; 232
   111fa:	f0 e1       	ldi	r31, 0x10	; 16
   111fc:	64 91       	lpm	r22, Z
	while(ch)
   111fe:	66 23       	and	r22, r22
   11200:	81 f0       	breq	.+32     	; 0x11222 <_Z12processGCodei+0xc56>
   11202:	ef 01       	movw	r28, r30
   11204:	08 e0       	ldi	r16, 0x08	; 8
   11206:	1a e0       	ldi	r17, 0x0A	; 10
   11208:	d8 01       	movw	r26, r16
   1120a:	ed 91       	ld	r30, X+
   1120c:	fc 91       	ld	r31, X
   1120e:	01 90       	ld	r0, Z+
   11210:	f0 81       	ld	r31, Z
   11212:	e0 2d       	mov	r30, r0
   11214:	c8 01       	movw	r24, r16
   11216:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   11218:	21 96       	adiw	r28, 0x01	; 1
   1121a:	fe 01       	movw	r30, r28
   1121c:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   1121e:	61 11       	cpse	r22, r1
   11220:	f3 cf       	rjmp	.-26     	; 0x11208 <_Z12processGCodei+0xc3c>
		SERIAL_PGMLN(MSG_TERMINATE);
   11222:	88 e0       	ldi	r24, 0x08	; 8
   11224:	9a e0       	ldi	r25, 0x0A	; 10
   11226:	e1 d0       	rcall	.+450    	; 0x113ea <_ZN5Print7printlnEv>
   11228:	88 e0       	ldi	r24, 0x08	; 8
		SERIAL_PORT.flush();
   1122a:	9a e0       	ldi	r25, 0x0A	; 10
   1122c:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
   11230:	13 c0       	rjmp	.+38     	; 0x11258 <_Z12processGCodei+0xc8c>
		break;
		
    } // switch
  } // if code
   11232:	81 e0       	ldi	r24, 0x01	; 1
      if(code_seen('P')) codenum = code_value(); // milliseconds to wait
      if(code_seen('S')) codenum = code_value() * 1000; // seconds to wait

      //codenum += millis();  // keep track of when we started waiting
      previous_millis_cmd = 0;//millis();
      while(++previous_millis_cmd  < codenum ){
   11234:	90 e0       	ldi	r25, 0x00	; 0
   11236:	a0 e0       	ldi	r26, 0x00	; 0
   11238:	b0 e0       	ldi	r27, 0x00	; 0
   1123a:	80 93 72 14 	sts	0x1472, r24	; 0x801472 <_ZL19previous_millis_cmd>
   1123e:	90 93 73 14 	sts	0x1473, r25	; 0x801473 <_ZL19previous_millis_cmd+0x1>
   11242:	a0 93 74 14 	sts	0x1474, r26	; 0x801474 <_ZL19previous_millis_cmd+0x2>
   11246:	b0 93 75 14 	sts	0x1475, r27	; 0x801475 <_ZL19previous_millis_cmd+0x3>
   1124a:	3e ca       	rjmp	.-2948   	; 0x106c8 <_Z12processGCodei+0xfc>
   1124c:	83 e5       	ldi	r24, 0x53	; 83
	    
    case 4: // G4 dwell
      //LCD_MESSAGEPGM(MSG_DWELL);
      codenum = 0;
      if(code_seen('P')) codenum = code_value(); // milliseconds to wait
      if(code_seen('S')) codenum = code_value() * 1000; // seconds to wait
   1124e:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
   11252:	81 11       	cpse	r24, r1
   11254:	fc c9       	rjmp	.-3080   	; 0x1064e <_Z12processGCodei+0x82>
   11256:	ed cf       	rjmp	.-38     	; 0x11232 <_Z12processGCodei+0xc66>
   11258:	df 91       	pop	r29
		SERIAL_PGMLN(MSG_TERMINATE);
		SERIAL_PORT.flush();
		break;
		
    } // switch
  } // if code
   1125a:	cf 91       	pop	r28
   1125c:	1f 91       	pop	r17
   1125e:	0f 91       	pop	r16
   11260:	ff 90       	pop	r15
   11262:	ef 90       	pop	r14
   11264:	df 90       	pop	r13
   11266:	cf 90       	pop	r12
   11268:	bf 90       	pop	r11
   1126a:	af 90       	pop	r10
   1126c:	9f 90       	pop	r9
   1126e:	8f 90       	pop	r8
   11270:	08 95       	ret

00011272 <_Z16process_commandsv>:
   11272:	0f 93       	push	r16
/*----------------------------------------
*
* Process the command sequence
*-----------------------------------------
*/
void process_commands() { 
   11274:	1f 93       	push	r17
   11276:	cf 93       	push	r28
   11278:	df 93       	push	r29
  if(code_seen('G')) {
   1127a:	87 e4       	ldi	r24, 0x47	; 71
   1127c:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
   11280:	88 23       	and	r24, r24
   11282:	39 f0       	breq	.+14     	; 0x11292 <_Z16process_commandsv+0x20>
	  int cval = (int)code_value();
   11284:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
	  processGCode(cval);
   11288:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
   1128c:	cb 01       	movw	r24, r22
   1128e:	9e d9       	rcall	.-3268   	; 0x105cc <_Z12processGCodei>
   11290:	62 c0       	rjmp	.+196    	; 0x11356 <_Z16process_commandsv+0xe4>
  } else {
	  if(code_seen('M') ) {
   11292:	8d e4       	ldi	r24, 0x4D	; 77
   11294:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_Z9code_seenc>
   11298:	88 23       	and	r24, r24
   1129a:	41 f0       	breq	.+16     	; 0x112ac <_Z16process_commandsv+0x3a>
		  int cval = (int)code_value();
   1129c:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_Z10code_valuev>
		  processMCode(cval);
   112a0:	0e 94 3e a5 	call	0x14a7c	; 0x14a7c <__fixsfsi>
   112a4:	cb 01       	movw	r24, r22
   112a6:	0e 94 f3 42 	call	0x85e6	; 0x85e6 <_Z12processMCodei>
   112aa:	55 c0       	rjmp	.+170    	; 0x11356 <_Z16process_commandsv+0xe4>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   112ac:	e4 ea       	ldi	r30, 0xA4	; 164
   112ae:	f1 e1       	ldi	r31, 0x11	; 17
   112b0:	64 91       	lpm	r22, Z
	while(ch)
   112b2:	66 23       	and	r22, r22
   112b4:	81 f0       	breq	.+32     	; 0x112d6 <_Z16process_commandsv+0x64>
   112b6:	ef 01       	movw	r28, r30
   112b8:	08 e0       	ldi	r16, 0x08	; 8
   112ba:	1a e0       	ldi	r17, 0x0A	; 10
   112bc:	d8 01       	movw	r26, r16
   112be:	ed 91       	ld	r30, X+
   112c0:	fc 91       	ld	r31, X
   112c2:	01 90       	ld	r0, Z+
   112c4:	f0 81       	ld	r31, Z
   112c6:	e0 2d       	mov	r30, r0
   112c8:	c8 01       	movw	r24, r16
   112ca:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   112cc:	21 96       	adiw	r28, 0x01	; 1
   112ce:	fe 01       	movw	r30, r28
   112d0:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   112d2:	61 11       	cpse	r22, r1
   112d4:	f3 cf       	rjmp	.-26     	; 0x112bc <_Z16process_commandsv+0x4a>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   112d6:	e8 e8       	ldi	r30, 0x88	; 136
   112d8:	f1 e1       	ldi	r31, 0x11	; 17
   112da:	64 91       	lpm	r22, Z
	while(ch)
   112dc:	61 11       	cpse	r22, r1
   112de:	05 c0       	rjmp	.+10     	; 0x112ea <_Z16process_commandsv+0x78>
	  } else { // if neither G nor M code
		   int ibuf = 0;
		   SERIAL_PGM(MSG_BEGIN);
		   SERIAL_PGM(MSG_UNKNOWN_COMMAND);
		   while(cmdbuffer[ibuf]) SERIAL_PORT.print(cmdbuffer[ibuf++]);
   112e0:	60 91 7b 15 	lds	r22, 0x157B	; 0x80157b <_ZL9cmdbuffer>
   112e4:	61 11       	cpse	r22, r1
   112e6:	13 c0       	rjmp	.+38     	; 0x1130e <_Z16process_commandsv+0x9c>
   112e8:	1a c0       	rjmp	.+52     	; 0x1131e <_Z16process_commandsv+0xac>
   112ea:	c8 e8       	ldi	r28, 0x88	; 136
   112ec:	d1 e1       	ldi	r29, 0x11	; 17
   112ee:	08 e0       	ldi	r16, 0x08	; 8
   112f0:	1a e0       	ldi	r17, 0x0A	; 10
   112f2:	d8 01       	movw	r26, r16
   112f4:	ed 91       	ld	r30, X+
   112f6:	fc 91       	ld	r31, X
   112f8:	01 90       	ld	r0, Z+
   112fa:	f0 81       	ld	r31, Z
   112fc:	e0 2d       	mov	r30, r0
   112fe:	c8 01       	movw	r24, r16
   11300:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   11302:	21 96       	adiw	r28, 0x01	; 1
   11304:	fe 01       	movw	r30, r28
   11306:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   11308:	61 11       	cpse	r22, r1
   1130a:	f3 cf       	rjmp	.-26     	; 0x112f2 <_Z16process_commandsv+0x80>
   1130c:	e9 cf       	rjmp	.-46     	; 0x112e0 <_Z16process_commandsv+0x6e>
   1130e:	cc e7       	ldi	r28, 0x7C	; 124
   11310:	d5 e1       	ldi	r29, 0x15	; 21
   11312:	88 e0       	ldi	r24, 0x08	; 8
   11314:	9a e0       	ldi	r25, 0x0A	; 10
   11316:	61 d0       	rcall	.+194    	; 0x113da <_ZN5Print5printEc>
   11318:	69 91       	ld	r22, Y+
   1131a:	61 11       	cpse	r22, r1
   1131c:	fa cf       	rjmp	.-12     	; 0x11312 <_Z16process_commandsv+0xa0>
#define SERIAL_PGM(x) (serialprintPGM(PSTR(x)))
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
   1131e:	e5 e8       	ldi	r30, 0x85	; 133
   11320:	f1 e1       	ldi	r31, 0x11	; 17
   11322:	64 91       	lpm	r22, Z
	while(ch)
   11324:	66 23       	and	r22, r22
   11326:	81 f0       	breq	.+32     	; 0x11348 <_Z16process_commandsv+0xd6>
   11328:	ef 01       	movw	r28, r30
   1132a:	08 e0       	ldi	r16, 0x08	; 8
   1132c:	1a e0       	ldi	r17, 0x0A	; 10
   1132e:	d8 01       	movw	r26, r16
   11330:	ed 91       	ld	r30, X+
   11332:	fc 91       	ld	r31, X
   11334:	01 90       	ld	r0, Z+
   11336:	f0 81       	ld	r31, Z
   11338:	e0 2d       	mov	r30, r0
   1133a:	c8 01       	movw	r24, r16
   1133c:	19 95       	eicall
	{
		SERIAL_PORT.write(ch);
		ch=pgm_read_byte(++str);
   1133e:	21 96       	adiw	r28, 0x01	; 1
   11340:	fe 01       	movw	r30, r28
   11342:	64 91       	lpm	r22, Z
#define SERIAL_PGMLN(x) (serialprintPGM(PSTR(x)),SERIAL_PORT.println())

FORCE_INLINE void serialprintPGM(const char *str)
{
	char ch=pgm_read_byte(str);
	while(ch)
   11344:	61 11       	cpse	r22, r1
   11346:	f3 cf       	rjmp	.-26     	; 0x1132e <_Z16process_commandsv+0xbc>
		   SERIAL_PGMLN(MSG_TERMINATE);
   11348:	88 e0       	ldi	r24, 0x08	; 8
   1134a:	9a e0       	ldi	r25, 0x0A	; 10
   1134c:	4e d0       	rcall	.+156    	; 0x113ea <_ZN5Print7printlnEv>
		   SERIAL_PORT.flush();
   1134e:	88 e0       	ldi	r24, 0x08	; 8
   11350:	9a e0       	ldi	r25, 0x0A	; 10
   11352:	0e 94 31 19 	call	0x3262	; 0x3262 <_ZN14HardwareSerial5flushEv>
	  }
  }
}
   11356:	df 91       	pop	r29
   11358:	cf 91       	pop	r28
   1135a:	1f 91       	pop	r17
   1135c:	0f 91       	pop	r16
   1135e:	08 95       	ret

00011360 <_Z4loopv>:
/*-------------------------------------------------
* And the primary command parser loop
*/
void loop()
{
  get_command();
   11360:	0e 94 d0 7f 	call	0xffa0	; 0xffa0 <_Z11get_commandv>
  if(!comment_mode)
   11364:	80 91 78 14 	lds	r24, 0x1478	; 0x801478 <_ZL12comment_mode>
   11368:	81 11       	cpse	r24, r1
   1136a:	01 c0       	rjmp	.+2      	; 0x1136e <_Z4loopv+0xe>
  {
    process_commands();
   1136c:	82 df       	rcall	.-252    	; 0x11272 <_Z16process_commandsv>
  }
  manage_inactivity();
   1136e:	c4 c8       	rjmp	.-3704   	; 0x104f8 <_Z17manage_inactivityv>
   11370:	08 95       	ret

00011372 <_Znwj>:
   11372:	0c 94 78 a7 	jmp	0x14ef0	; 0x14ef0 <malloc>
  free(ptr);
} 

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 
   11376:	08 95       	ret

00011378 <_ZdlPv>:
   11378:	0c 94 10 a8 	jmp	0x15020	; 0x15020 <free>
   1137c:	08 95       	ret

0001137e <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
   1137e:	08 95       	ret

00011380 <_ZN5Print5writeEPKhj>:
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}
   11380:	cf 92       	push	r12
   11382:	df 92       	push	r13
   11384:	ef 92       	push	r14
   11386:	ff 92       	push	r15
   11388:	0f 93       	push	r16
   1138a:	1f 93       	push	r17
   1138c:	cf 93       	push	r28
   1138e:	df 93       	push	r29
   11390:	41 15       	cp	r20, r1
   11392:	51 05       	cpc	r21, r1
   11394:	b1 f0       	breq	.+44     	; 0x113c2 <_ZN5Print5writeEPKhj+0x42>
   11396:	8c 01       	movw	r16, r24
   11398:	e6 2e       	mov	r14, r22
   1139a:	f7 2e       	mov	r15, r23
   1139c:	ea 01       	movw	r28, r20
   1139e:	c1 2c       	mov	r12, r1
   113a0:	d1 2c       	mov	r13, r1
   113a2:	d7 01       	movw	r26, r14
   113a4:	6d 91       	ld	r22, X+
   113a6:	7d 01       	movw	r14, r26
   113a8:	d8 01       	movw	r26, r16
   113aa:	ed 91       	ld	r30, X+
   113ac:	fc 91       	ld	r31, X
   113ae:	01 90       	ld	r0, Z+
   113b0:	f0 81       	ld	r31, Z
   113b2:	e0 2d       	mov	r30, r0
   113b4:	c8 01       	movw	r24, r16
   113b6:	19 95       	eicall
   113b8:	c8 0e       	add	r12, r24
   113ba:	d9 1e       	adc	r13, r25
   113bc:	21 97       	sbiw	r28, 0x01	; 1
   113be:	89 f7       	brne	.-30     	; 0x113a2 <_ZN5Print5writeEPKhj+0x22>
   113c0:	02 c0       	rjmp	.+4      	; 0x113c6 <_ZN5Print5writeEPKhj+0x46>
   113c2:	c1 2c       	mov	r12, r1
   113c4:	d1 2c       	mov	r13, r1
   113c6:	c6 01       	movw	r24, r12
   113c8:	df 91       	pop	r29
   113ca:	cf 91       	pop	r28
   113cc:	1f 91       	pop	r17
   113ce:	0f 91       	pop	r16
   113d0:	ff 90       	pop	r15
   113d2:	ef 90       	pop	r14
   113d4:	df 90       	pop	r13
   113d6:	cf 90       	pop	r12
   113d8:	08 95       	ret

000113da <_ZN5Print5printEc>:
   113da:	dc 01       	movw	r26, r24
   113dc:	ed 91       	ld	r30, X+
   113de:	fc 91       	ld	r31, X
   113e0:	01 90       	ld	r0, Z+
   113e2:	f0 81       	ld	r31, Z
   113e4:	e0 2d       	mov	r30, r0
   113e6:	19 95       	eicall
   113e8:	08 95       	ret

000113ea <_ZN5Print7printlnEv>:
   113ea:	0f 93       	push	r16
   113ec:	1f 93       	push	r17
   113ee:	cf 93       	push	r28
   113f0:	df 93       	push	r29
   113f2:	ec 01       	movw	r28, r24
   113f4:	6d e0       	ldi	r22, 0x0D	; 13
   113f6:	f1 df       	rcall	.-30     	; 0x113da <_ZN5Print5printEc>
   113f8:	8c 01       	movw	r16, r24
   113fa:	6a e0       	ldi	r22, 0x0A	; 10
   113fc:	ce 01       	movw	r24, r28
   113fe:	ed df       	rcall	.-38     	; 0x113da <_ZN5Print5printEc>
   11400:	80 0f       	add	r24, r16
   11402:	91 1f       	adc	r25, r17
   11404:	df 91       	pop	r29
   11406:	cf 91       	pop	r28
   11408:	1f 91       	pop	r17
   1140a:	0f 91       	pop	r16
   1140c:	08 95       	ret

0001140e <_ZN5Print11printNumberEmh>:
   1140e:	8f 92       	push	r8
   11410:	9f 92       	push	r9
   11412:	af 92       	push	r10
   11414:	bf 92       	push	r11
   11416:	ef 92       	push	r14
   11418:	ff 92       	push	r15
   1141a:	0f 93       	push	r16
   1141c:	1f 93       	push	r17
   1141e:	cf 93       	push	r28
   11420:	df 93       	push	r29
   11422:	cd b7       	in	r28, 0x3d	; 61
   11424:	de b7       	in	r29, 0x3e	; 62
   11426:	a1 97       	sbiw	r28, 0x21	; 33
   11428:	0f b6       	in	r0, 0x3f	; 63
   1142a:	f8 94       	cli
   1142c:	de bf       	out	0x3e, r29	; 62
   1142e:	0f be       	out	0x3f, r0	; 63
   11430:	cd bf       	out	0x3d, r28	; 61
   11432:	7c 01       	movw	r14, r24
   11434:	cb 01       	movw	r24, r22
   11436:	ba 01       	movw	r22, r20
   11438:	19 a2       	std	Y+33, r1	; 0x21
   1143a:	22 30       	cpi	r18, 0x02	; 2
   1143c:	08 f4       	brcc	.+2      	; 0x11440 <_ZN5Print11printNumberEmh+0x32>
   1143e:	2a e0       	ldi	r18, 0x0A	; 10
   11440:	8e 01       	movw	r16, r28
   11442:	0f 5d       	subi	r16, 0xDF	; 223
   11444:	1f 4f       	sbci	r17, 0xFF	; 255
   11446:	82 2e       	mov	r8, r18
   11448:	91 2c       	mov	r9, r1
   1144a:	a1 2c       	mov	r10, r1
   1144c:	b1 2c       	mov	r11, r1
   1144e:	a5 01       	movw	r20, r10
   11450:	94 01       	movw	r18, r8
   11452:	0e 94 05 a7 	call	0x14e0a	; 0x14e0a <__udivmodsi4>
   11456:	e4 2f       	mov	r30, r20
   11458:	46 2f       	mov	r20, r22
   1145a:	62 2f       	mov	r22, r18
   1145c:	73 2f       	mov	r23, r19
   1145e:	8e 2f       	mov	r24, r30
   11460:	95 2f       	mov	r25, r21
   11462:	01 50       	subi	r16, 0x01	; 1
   11464:	11 09       	sbc	r17, r1
   11466:	4a 30       	cpi	r20, 0x0A	; 10
   11468:	18 f4       	brcc	.+6      	; 0x11470 <_ZN5Print11printNumberEmh+0x62>
   1146a:	20 e3       	ldi	r18, 0x30	; 48
   1146c:	24 0f       	add	r18, r20
   1146e:	02 c0       	rjmp	.+4      	; 0x11474 <_ZN5Print11printNumberEmh+0x66>
   11470:	27 e3       	ldi	r18, 0x37	; 55
   11472:	24 0f       	add	r18, r20
   11474:	d8 01       	movw	r26, r16
   11476:	2c 93       	st	X, r18
   11478:	61 15       	cp	r22, r1
   1147a:	71 05       	cpc	r23, r1
   1147c:	81 05       	cpc	r24, r1
   1147e:	91 05       	cpc	r25, r1
   11480:	31 f7       	brne	.-52     	; 0x1144e <_ZN5Print11printNumberEmh+0x40>
   11482:	22 23       	and	r18, r18
   11484:	a9 f0       	breq	.+42     	; 0x114b0 <_ZN5Print11printNumberEmh+0xa2>
   11486:	0f 5f       	subi	r16, 0xFF	; 255
   11488:	1f 4f       	sbci	r17, 0xFF	; 255
   1148a:	a1 2c       	mov	r10, r1
   1148c:	b1 2c       	mov	r11, r1
   1148e:	d7 01       	movw	r26, r14
   11490:	ed 91       	ld	r30, X+
   11492:	fc 91       	ld	r31, X
   11494:	01 90       	ld	r0, Z+
   11496:	f0 81       	ld	r31, Z
   11498:	e0 2d       	mov	r30, r0
   1149a:	62 2f       	mov	r22, r18
   1149c:	c7 01       	movw	r24, r14
   1149e:	19 95       	eicall
   114a0:	a8 0e       	add	r10, r24
   114a2:	b9 1e       	adc	r11, r25
   114a4:	f8 01       	movw	r30, r16
   114a6:	21 91       	ld	r18, Z+
   114a8:	8f 01       	movw	r16, r30
   114aa:	21 11       	cpse	r18, r1
   114ac:	f0 cf       	rjmp	.-32     	; 0x1148e <_ZN5Print11printNumberEmh+0x80>
   114ae:	02 c0       	rjmp	.+4      	; 0x114b4 <_ZN5Print11printNumberEmh+0xa6>
   114b0:	a1 2c       	mov	r10, r1
   114b2:	b1 2c       	mov	r11, r1
   114b4:	c5 01       	movw	r24, r10
   114b6:	a1 96       	adiw	r28, 0x21	; 33
   114b8:	0f b6       	in	r0, 0x3f	; 63
   114ba:	f8 94       	cli
   114bc:	de bf       	out	0x3e, r29	; 62
   114be:	0f be       	out	0x3f, r0	; 63
   114c0:	cd bf       	out	0x3d, r28	; 61
   114c2:	df 91       	pop	r29
   114c4:	cf 91       	pop	r28
   114c6:	1f 91       	pop	r17
   114c8:	0f 91       	pop	r16
   114ca:	ff 90       	pop	r15
   114cc:	ef 90       	pop	r14
   114ce:	bf 90       	pop	r11
   114d0:	af 90       	pop	r10
   114d2:	9f 90       	pop	r9
   114d4:	8f 90       	pop	r8
   114d6:	08 95       	ret

000114d8 <_ZN5Print5printEli>:
   114d8:	cf 92       	push	r12
   114da:	df 92       	push	r13
   114dc:	ef 92       	push	r14
   114de:	ff 92       	push	r15
   114e0:	0f 93       	push	r16
   114e2:	1f 93       	push	r17
   114e4:	cf 93       	push	r28
   114e6:	df 93       	push	r29
   114e8:	ec 01       	movw	r28, r24
   114ea:	6a 01       	movw	r12, r20
   114ec:	7b 01       	movw	r14, r22
   114ee:	21 15       	cp	r18, r1
   114f0:	31 05       	cpc	r19, r1
   114f2:	41 f4       	brne	.+16     	; 0x11504 <_ZN5Print5printEli+0x2c>
   114f4:	e8 81       	ld	r30, Y
   114f6:	f9 81       	ldd	r31, Y+1	; 0x01
   114f8:	01 90       	ld	r0, Z+
   114fa:	f0 81       	ld	r31, Z
   114fc:	e0 2d       	mov	r30, r0
   114fe:	64 2f       	mov	r22, r20
   11500:	19 95       	eicall
   11502:	19 c0       	rjmp	.+50     	; 0x11536 <_ZN5Print5printEli+0x5e>
   11504:	2a 30       	cpi	r18, 0x0A	; 10
   11506:	31 05       	cpc	r19, r1
   11508:	a9 f4       	brne	.+42     	; 0x11534 <_ZN5Print5printEli+0x5c>
   1150a:	77 23       	and	r23, r23
   1150c:	84 f4       	brge	.+32     	; 0x1152e <_ZN5Print5printEli+0x56>
   1150e:	6d e2       	ldi	r22, 0x2D	; 45
   11510:	64 df       	rcall	.-312    	; 0x113da <_ZN5Print5printEc>
   11512:	8c 01       	movw	r16, r24
   11514:	44 27       	eor	r20, r20
   11516:	55 27       	eor	r21, r21
   11518:	ba 01       	movw	r22, r20
   1151a:	4c 19       	sub	r20, r12
   1151c:	5d 09       	sbc	r21, r13
   1151e:	6e 09       	sbc	r22, r14
   11520:	7f 09       	sbc	r23, r15
   11522:	2a e0       	ldi	r18, 0x0A	; 10
   11524:	ce 01       	movw	r24, r28
   11526:	73 df       	rcall	.-282    	; 0x1140e <_ZN5Print11printNumberEmh>
   11528:	80 0f       	add	r24, r16
   1152a:	91 1f       	adc	r25, r17
   1152c:	04 c0       	rjmp	.+8      	; 0x11536 <_ZN5Print5printEli+0x5e>
   1152e:	2a e0       	ldi	r18, 0x0A	; 10
   11530:	6e df       	rcall	.-292    	; 0x1140e <_ZN5Print11printNumberEmh>
   11532:	01 c0       	rjmp	.+2      	; 0x11536 <_ZN5Print5printEli+0x5e>
   11534:	6c df       	rcall	.-296    	; 0x1140e <_ZN5Print11printNumberEmh>
   11536:	df 91       	pop	r29
   11538:	cf 91       	pop	r28
   1153a:	1f 91       	pop	r17
   1153c:	0f 91       	pop	r16
   1153e:	ff 90       	pop	r15
   11540:	ef 90       	pop	r14
   11542:	df 90       	pop	r13
   11544:	cf 90       	pop	r12
   11546:	08 95       	ret

00011548 <_ZN5Print5printEii>:
   11548:	9a 01       	movw	r18, r20
   1154a:	ab 01       	movw	r20, r22
   1154c:	77 0f       	add	r23, r23
   1154e:	66 0b       	sbc	r22, r22
   11550:	77 0b       	sbc	r23, r23
   11552:	c2 cf       	rjmp	.-124    	; 0x114d8 <_ZN5Print5printEli>
   11554:	08 95       	ret

00011556 <_ZN5Print7printlnEii>:
   11556:	0f 93       	push	r16
   11558:	1f 93       	push	r17
   1155a:	cf 93       	push	r28
   1155c:	df 93       	push	r29
   1155e:	ec 01       	movw	r28, r24
   11560:	f3 df       	rcall	.-26     	; 0x11548 <_ZN5Print5printEii>
   11562:	8c 01       	movw	r16, r24
   11564:	ce 01       	movw	r24, r28
   11566:	41 df       	rcall	.-382    	; 0x113ea <_ZN5Print7printlnEv>
   11568:	80 0f       	add	r24, r16
   1156a:	91 1f       	adc	r25, r17
   1156c:	df 91       	pop	r29
   1156e:	cf 91       	pop	r28
   11570:	1f 91       	pop	r17
   11572:	0f 91       	pop	r16
   11574:	08 95       	ret

00011576 <_ZN5Print7printlnEli>:
   11576:	0f 93       	push	r16
   11578:	1f 93       	push	r17
   1157a:	cf 93       	push	r28
   1157c:	df 93       	push	r29
   1157e:	ec 01       	movw	r28, r24
   11580:	ab df       	rcall	.-170    	; 0x114d8 <_ZN5Print5printEli>
   11582:	8c 01       	movw	r16, r24
   11584:	ce 01       	movw	r24, r28
   11586:	31 df       	rcall	.-414    	; 0x113ea <_ZN5Print7printlnEv>
   11588:	80 0f       	add	r24, r16
   1158a:	91 1f       	adc	r25, r17
   1158c:	df 91       	pop	r29
   1158e:	cf 91       	pop	r28
   11590:	1f 91       	pop	r17
   11592:	0f 91       	pop	r16
   11594:	08 95       	ret

00011596 <_ZN5Print5printEmi>:
   11596:	21 15       	cp	r18, r1
   11598:	31 05       	cpc	r19, r1
   1159a:	49 f4       	brne	.+18     	; 0x115ae <_ZN5Print5printEmi+0x18>
   1159c:	dc 01       	movw	r26, r24
   1159e:	ed 91       	ld	r30, X+
   115a0:	fc 91       	ld	r31, X
   115a2:	01 90       	ld	r0, Z+
   115a4:	f0 81       	ld	r31, Z
   115a6:	e0 2d       	mov	r30, r0
   115a8:	64 2f       	mov	r22, r20
   115aa:	19 95       	eicall
   115ac:	08 95       	ret
   115ae:	2f cf       	rjmp	.-418    	; 0x1140e <_ZN5Print11printNumberEmh>
   115b0:	08 95       	ret

000115b2 <_ZN5Print5printEhi>:
   115b2:	9a 01       	movw	r18, r20
   115b4:	46 2f       	mov	r20, r22
   115b6:	50 e0       	ldi	r21, 0x00	; 0
   115b8:	60 e0       	ldi	r22, 0x00	; 0
   115ba:	70 e0       	ldi	r23, 0x00	; 0
   115bc:	ec cf       	rjmp	.-40     	; 0x11596 <_ZN5Print5printEmi>
   115be:	08 95       	ret

000115c0 <_ZN5Print7printlnEhi>:
   115c0:	0f 93       	push	r16
   115c2:	1f 93       	push	r17
   115c4:	cf 93       	push	r28
   115c6:	df 93       	push	r29
   115c8:	ec 01       	movw	r28, r24
   115ca:	f3 df       	rcall	.-26     	; 0x115b2 <_ZN5Print5printEhi>
   115cc:	8c 01       	movw	r16, r24
   115ce:	ce 01       	movw	r24, r28
   115d0:	0c df       	rcall	.-488    	; 0x113ea <_ZN5Print7printlnEv>
   115d2:	80 0f       	add	r24, r16
   115d4:	91 1f       	adc	r25, r17
   115d6:	df 91       	pop	r29
   115d8:	cf 91       	pop	r28
   115da:	1f 91       	pop	r17
   115dc:	0f 91       	pop	r16
   115de:	08 95       	ret

000115e0 <_ZN5Print5printEji>:
   115e0:	9a 01       	movw	r18, r20
   115e2:	ab 01       	movw	r20, r22
   115e4:	60 e0       	ldi	r22, 0x00	; 0
   115e6:	70 e0       	ldi	r23, 0x00	; 0
   115e8:	d6 cf       	rjmp	.-84     	; 0x11596 <_ZN5Print5printEmi>
   115ea:	08 95       	ret

000115ec <_ZN5Print7printlnEmi>:
   115ec:	0f 93       	push	r16
   115ee:	1f 93       	push	r17
   115f0:	cf 93       	push	r28
   115f2:	df 93       	push	r29
   115f4:	ec 01       	movw	r28, r24
   115f6:	cf df       	rcall	.-98     	; 0x11596 <_ZN5Print5printEmi>
   115f8:	8c 01       	movw	r16, r24
   115fa:	ce 01       	movw	r24, r28
   115fc:	f6 de       	rcall	.-532    	; 0x113ea <_ZN5Print7printlnEv>
   115fe:	80 0f       	add	r24, r16
   11600:	91 1f       	adc	r25, r17
   11602:	df 91       	pop	r29
   11604:	cf 91       	pop	r28
   11606:	1f 91       	pop	r17
   11608:	0f 91       	pop	r16
   1160a:	08 95       	ret

0001160c <_ZN5Print10printFloatEdh>:
   1160c:	7f 92       	push	r7
   1160e:	8f 92       	push	r8
   11610:	9f 92       	push	r9
   11612:	af 92       	push	r10
   11614:	bf 92       	push	r11
   11616:	cf 92       	push	r12
   11618:	df 92       	push	r13
   1161a:	ef 92       	push	r14
   1161c:	ff 92       	push	r15
   1161e:	0f 93       	push	r16
   11620:	1f 93       	push	r17
   11622:	cf 93       	push	r28
   11624:	df 93       	push	r29
   11626:	00 d0       	rcall	.+0      	; 0x11628 <_ZN5Print10printFloatEdh+0x1c>
   11628:	1f 92       	push	r1
   1162a:	cd b7       	in	r28, 0x3d	; 61
   1162c:	de b7       	in	r29, 0x3e	; 62
   1162e:	8c 01       	movw	r16, r24
   11630:	4a 01       	movw	r8, r20
   11632:	5b 01       	movw	r10, r22
   11634:	72 2e       	mov	r7, r18
   11636:	9a 01       	movw	r18, r20
   11638:	ab 01       	movw	r20, r22
   1163a:	c5 01       	movw	r24, r10
   1163c:	b4 01       	movw	r22, r8
   1163e:	0e 94 ca a6 	call	0x14d94	; 0x14d94 <__unordsf2>
   11642:	88 23       	and	r24, r24
   11644:	21 f0       	breq	.+8      	; 0x1164e <_ZN5Print10printFloatEdh+0x42>
   11646:	6e e6       	ldi	r22, 0x6E	; 110
   11648:	c8 01       	movw	r24, r16
   1164a:	c7 de       	rcall	.-626    	; 0x113da <_ZN5Print5printEc>
   1164c:	cc c0       	rjmp	.+408    	; 0x117e6 <_ZN5Print10printFloatEdh+0x1da>
   1164e:	75 01       	movw	r14, r10
   11650:	64 01       	movw	r12, r8
   11652:	e8 94       	clt
   11654:	f7 f8       	bld	r15, 7
   11656:	2f ef       	ldi	r18, 0xFF	; 255
   11658:	3f ef       	ldi	r19, 0xFF	; 255
   1165a:	4f e7       	ldi	r20, 0x7F	; 127
   1165c:	5f e7       	ldi	r21, 0x7F	; 127
   1165e:	c7 01       	movw	r24, r14
   11660:	b6 01       	movw	r22, r12
   11662:	0e 94 ca a6 	call	0x14d94	; 0x14d94 <__unordsf2>
   11666:	81 11       	cpse	r24, r1
   11668:	0e c0       	rjmp	.+28     	; 0x11686 <_ZN5Print10printFloatEdh+0x7a>
   1166a:	2f ef       	ldi	r18, 0xFF	; 255
   1166c:	3f ef       	ldi	r19, 0xFF	; 255
   1166e:	4f e7       	ldi	r20, 0x7F	; 127
   11670:	5f e7       	ldi	r21, 0x7F	; 127
   11672:	c7 01       	movw	r24, r14
   11674:	b6 01       	movw	r22, r12
   11676:	0e 94 d2 a4 	call	0x149a4	; 0x149a4 <__cmpsf2>
   1167a:	18 16       	cp	r1, r24
   1167c:	24 f4       	brge	.+8      	; 0x11686 <_ZN5Print10printFloatEdh+0x7a>
   1167e:	69 e6       	ldi	r22, 0x69	; 105
   11680:	c8 01       	movw	r24, r16
   11682:	ab de       	rcall	.-682    	; 0x113da <_ZN5Print5printEc>
   11684:	b0 c0       	rjmp	.+352    	; 0x117e6 <_ZN5Print10printFloatEdh+0x1da>
   11686:	2f ef       	ldi	r18, 0xFF	; 255
   11688:	3f ef       	ldi	r19, 0xFF	; 255
   1168a:	4f e7       	ldi	r20, 0x7F	; 127
   1168c:	5f e4       	ldi	r21, 0x4F	; 79
   1168e:	c5 01       	movw	r24, r10
   11690:	b4 01       	movw	r22, r8
   11692:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <__gesf2>
   11696:	18 16       	cp	r1, r24
   11698:	24 f4       	brge	.+8      	; 0x116a2 <_ZN5Print10printFloatEdh+0x96>
   1169a:	6f e6       	ldi	r22, 0x6F	; 111
   1169c:	c8 01       	movw	r24, r16
   1169e:	9d de       	rcall	.-710    	; 0x113da <_ZN5Print5printEc>
   116a0:	a2 c0       	rjmp	.+324    	; 0x117e6 <_ZN5Print10printFloatEdh+0x1da>
   116a2:	2f ef       	ldi	r18, 0xFF	; 255
   116a4:	3f ef       	ldi	r19, 0xFF	; 255
   116a6:	4f e7       	ldi	r20, 0x7F	; 127
   116a8:	5f ec       	ldi	r21, 0xCF	; 207
   116aa:	c5 01       	movw	r24, r10
   116ac:	b4 01       	movw	r22, r8
   116ae:	0e 94 d2 a4 	call	0x149a4	; 0x149a4 <__cmpsf2>
   116b2:	88 23       	and	r24, r24
   116b4:	24 f4       	brge	.+8      	; 0x116be <_ZN5Print10printFloatEdh+0xb2>
   116b6:	6f e6       	ldi	r22, 0x6F	; 111
   116b8:	c8 01       	movw	r24, r16
   116ba:	8f de       	rcall	.-738    	; 0x113da <_ZN5Print5printEc>
   116bc:	94 c0       	rjmp	.+296    	; 0x117e6 <_ZN5Print10printFloatEdh+0x1da>
   116be:	20 e0       	ldi	r18, 0x00	; 0
   116c0:	30 e0       	ldi	r19, 0x00	; 0
   116c2:	a9 01       	movw	r20, r18
   116c4:	c5 01       	movw	r24, r10
   116c6:	b4 01       	movw	r22, r8
   116c8:	0e 94 d2 a4 	call	0x149a4	; 0x149a4 <__cmpsf2>
   116cc:	88 23       	and	r24, r24
   116ce:	4c f4       	brge	.+18     	; 0x116e2 <_ZN5Print10printFloatEdh+0xd6>
   116d0:	6d e2       	ldi	r22, 0x2D	; 45
   116d2:	c8 01       	movw	r24, r16
   116d4:	82 de       	rcall	.-764    	; 0x113da <_ZN5Print5printEc>
   116d6:	7c 01       	movw	r14, r24
   116d8:	b7 fa       	bst	r11, 7
   116da:	b0 94       	com	r11
   116dc:	b7 f8       	bld	r11, 7
   116de:	b0 94       	com	r11
   116e0:	02 c0       	rjmp	.+4      	; 0x116e6 <_ZN5Print10printFloatEdh+0xda>
   116e2:	e1 2c       	mov	r14, r1
   116e4:	f1 2c       	mov	r15, r1
   116e6:	77 20       	and	r7, r7
   116e8:	09 f4       	brne	.+2      	; 0x116ec <_ZN5Print10printFloatEdh+0xe0>
   116ea:	6b c0       	rjmp	.+214    	; 0x117c2 <_ZN5Print10printFloatEdh+0x1b6>
   116ec:	19 82       	std	Y+1, r1	; 0x01
   116ee:	60 e0       	ldi	r22, 0x00	; 0
   116f0:	70 e0       	ldi	r23, 0x00	; 0
   116f2:	80 e0       	ldi	r24, 0x00	; 0
   116f4:	9f e3       	ldi	r25, 0x3F	; 63
   116f6:	20 e0       	ldi	r18, 0x00	; 0
   116f8:	30 e0       	ldi	r19, 0x00	; 0
   116fa:	40 e2       	ldi	r20, 0x20	; 32
   116fc:	51 e4       	ldi	r21, 0x41	; 65
   116fe:	0e 94 d6 a4 	call	0x149ac	; 0x149ac <__divsf3>
   11702:	29 81       	ldd	r18, Y+1	; 0x01
   11704:	2f 5f       	subi	r18, 0xFF	; 255
   11706:	29 83       	std	Y+1, r18	; 0x01
   11708:	72 12       	cpse	r7, r18
   1170a:	f5 cf       	rjmp	.-22     	; 0x116f6 <_ZN5Print10printFloatEdh+0xea>
   1170c:	2b c0       	rjmp	.+86     	; 0x11764 <_ZN5Print10printFloatEdh+0x158>
   1170e:	20 e0       	ldi	r18, 0x00	; 0
   11710:	30 e0       	ldi	r19, 0x00	; 0
   11712:	40 e2       	ldi	r20, 0x20	; 32
   11714:	51 e4       	ldi	r21, 0x41	; 65
   11716:	c5 01       	movw	r24, r10
   11718:	b4 01       	movw	r22, r8
   1171a:	0e 94 25 a6 	call	0x14c4a	; 0x14c4a <__mulsf3>
   1171e:	4b 01       	movw	r8, r22
   11720:	5c 01       	movw	r10, r24
   11722:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
   11726:	6b 01       	movw	r12, r22
   11728:	7c 01       	movw	r14, r24
   1172a:	4a e0       	ldi	r20, 0x0A	; 10
   1172c:	50 e0       	ldi	r21, 0x00	; 0
   1172e:	c8 01       	movw	r24, r16
   11730:	57 df       	rcall	.-338    	; 0x115e0 <_ZN5Print5printEji>
   11732:	29 81       	ldd	r18, Y+1	; 0x01
   11734:	3a 81       	ldd	r19, Y+2	; 0x02
   11736:	28 0f       	add	r18, r24
   11738:	39 1f       	adc	r19, r25
   1173a:	3a 83       	std	Y+2, r19	; 0x02
   1173c:	29 83       	std	Y+1, r18	; 0x01
   1173e:	b6 01       	movw	r22, r12
   11740:	80 e0       	ldi	r24, 0x00	; 0
   11742:	90 e0       	ldi	r25, 0x00	; 0
   11744:	0e 94 6f a5 	call	0x14ade	; 0x14ade <__floatunsisf>
   11748:	9b 01       	movw	r18, r22
   1174a:	ac 01       	movw	r20, r24
   1174c:	c5 01       	movw	r24, r10
   1174e:	b4 01       	movw	r22, r8
   11750:	0e 94 6d a4 	call	0x148da	; 0x148da <__subsf3>
   11754:	4b 01       	movw	r8, r22
   11756:	5c 01       	movw	r10, r24
   11758:	7a 94       	dec	r7
   1175a:	71 10       	cpse	r7, r1
   1175c:	d8 cf       	rjmp	.-80     	; 0x1170e <_ZN5Print10printFloatEdh+0x102>
   1175e:	89 81       	ldd	r24, Y+1	; 0x01
   11760:	9a 81       	ldd	r25, Y+2	; 0x02
   11762:	41 c0       	rjmp	.+130    	; 0x117e6 <_ZN5Print10printFloatEdh+0x1da>
   11764:	9b 01       	movw	r18, r22
   11766:	ac 01       	movw	r20, r24
   11768:	c5 01       	movw	r24, r10
   1176a:	b4 01       	movw	r22, r8
   1176c:	0e 94 6e a4 	call	0x148dc	; 0x148dc <__addsf3>
   11770:	4b 01       	movw	r8, r22
   11772:	5c 01       	movw	r10, r24
   11774:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
   11778:	69 83       	std	Y+1, r22	; 0x01
   1177a:	7a 83       	std	Y+2, r23	; 0x02
   1177c:	8b 83       	std	Y+3, r24	; 0x03
   1177e:	9c 83       	std	Y+4, r25	; 0x04
   11780:	0e 94 6f a5 	call	0x14ade	; 0x14ade <__floatunsisf>
   11784:	9b 01       	movw	r18, r22
   11786:	ac 01       	movw	r20, r24
   11788:	c5 01       	movw	r24, r10
   1178a:	b4 01       	movw	r22, r8
   1178c:	0e 94 6d a4 	call	0x148da	; 0x148da <__subsf3>
   11790:	4b 01       	movw	r8, r22
   11792:	5c 01       	movw	r10, r24
   11794:	2a e0       	ldi	r18, 0x0A	; 10
   11796:	30 e0       	ldi	r19, 0x00	; 0
   11798:	49 81       	ldd	r20, Y+1	; 0x01
   1179a:	5a 81       	ldd	r21, Y+2	; 0x02
   1179c:	6b 81       	ldd	r22, Y+3	; 0x03
   1179e:	7c 81       	ldd	r23, Y+4	; 0x04
   117a0:	c8 01       	movw	r24, r16
   117a2:	f9 de       	rcall	.-526    	; 0x11596 <_ZN5Print5printEmi>
   117a4:	9a 83       	std	Y+2, r25	; 0x02
   117a6:	89 83       	std	Y+1, r24	; 0x01
   117a8:	6e e2       	ldi	r22, 0x2E	; 46
   117aa:	c8 01       	movw	r24, r16
   117ac:	16 de       	rcall	.-980    	; 0x113da <_ZN5Print5printEc>
   117ae:	29 81       	ldd	r18, Y+1	; 0x01
   117b0:	3a 81       	ldd	r19, Y+2	; 0x02
   117b2:	82 0f       	add	r24, r18
   117b4:	93 1f       	adc	r25, r19
   117b6:	9c 01       	movw	r18, r24
   117b8:	2e 0d       	add	r18, r14
   117ba:	3f 1d       	adc	r19, r15
   117bc:	3a 83       	std	Y+2, r19	; 0x02
   117be:	29 83       	std	Y+1, r18	; 0x01
   117c0:	a6 cf       	rjmp	.-180    	; 0x1170e <_ZN5Print10printFloatEdh+0x102>
   117c2:	20 e0       	ldi	r18, 0x00	; 0
   117c4:	30 e0       	ldi	r19, 0x00	; 0
   117c6:	40 e0       	ldi	r20, 0x00	; 0
   117c8:	5f e3       	ldi	r21, 0x3F	; 63
   117ca:	c5 01       	movw	r24, r10
   117cc:	b4 01       	movw	r22, r8
   117ce:	0e 94 6e a4 	call	0x148dc	; 0x148dc <__addsf3>
   117d2:	0e 94 43 a5 	call	0x14a86	; 0x14a86 <__fixunssfsi>
   117d6:	ab 01       	movw	r20, r22
   117d8:	bc 01       	movw	r22, r24
   117da:	2a e0       	ldi	r18, 0x0A	; 10
   117dc:	30 e0       	ldi	r19, 0x00	; 0
   117de:	c8 01       	movw	r24, r16
   117e0:	da de       	rcall	.-588    	; 0x11596 <_ZN5Print5printEmi>
   117e2:	8e 0d       	add	r24, r14
   117e4:	9f 1d       	adc	r25, r15
   117e6:	0f 90       	pop	r0
   117e8:	0f 90       	pop	r0
   117ea:	0f 90       	pop	r0
   117ec:	0f 90       	pop	r0
   117ee:	df 91       	pop	r29
   117f0:	cf 91       	pop	r28
   117f2:	1f 91       	pop	r17
   117f4:	0f 91       	pop	r16
   117f6:	ff 90       	pop	r15
   117f8:	ef 90       	pop	r14
   117fa:	df 90       	pop	r13
   117fc:	cf 90       	pop	r12
   117fe:	bf 90       	pop	r11
   11800:	af 90       	pop	r10
   11802:	9f 90       	pop	r9
   11804:	8f 90       	pop	r8
   11806:	7f 90       	pop	r7
   11808:	08 95       	ret

0001180a <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   1180a:	0f 93       	push	r16
   1180c:	1f 93       	push	r17
   1180e:	cf 93       	push	r28
   11810:	df 93       	push	r29
   11812:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   11814:	fb de       	rcall	.-522    	; 0x1160c <_ZN5Print10printFloatEdh>
   11816:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   11818:	ce 01       	movw	r24, r28
   1181a:	e7 dd       	rcall	.-1074   	; 0x113ea <_ZN5Print7printlnEv>
  return n;
}
   1181c:	80 0f       	add	r24, r16
   1181e:	91 1f       	adc	r25, r17
   11820:	df 91       	pop	r29
   11822:	cf 91       	pop	r28
   11824:	1f 91       	pop	r17
   11826:	0f 91       	pop	r16
   11828:	08 95       	ret

0001182a <_ZN10Ultrasonic8getRangeEv>:
 *  Author: jg
 */
#include "Ultrasonic.h"

float Ultrasonic::getRange()
{
   1182a:	cf 92       	push	r12
   1182c:	df 92       	push	r13
   1182e:	ef 92       	push	r14
   11830:	ff 92       	push	r15
   11832:	0f 93       	push	r16
   11834:	1f 93       	push	r17
   11836:	cf 93       	push	r28
   11838:	df 93       	push	r29
   1183a:	ec 01       	movw	r28, r24
	// The PING))) is triggered by a HIGH pulse of 2 or more microseconds.
	// Give a short LOW pulse beforehand to ensure a clean HIGH pulse:
	pin->pinMode(OUTPUT);
   1183c:	ec 81       	ldd	r30, Y+4	; 0x04
   1183e:	fd 81       	ldd	r31, Y+5	; 0x05
	}
	
void setPin(uint8_t spin) { this->pin = spin; }
	
void pinMode(uint8_t pmode) {
	this->mode = pmode;
   11840:	81 e0       	ldi	r24, 0x01	; 1
   11842:	81 83       	std	Z+1, r24	; 0x01
	uint8_t bit = digitalPinToBitMask(this->pin);
   11844:	80 81       	ld	r24, Z
   11846:	90 e0       	ldi	r25, 0x00	; 0
   11848:	fc 01       	movw	r30, r24
   1184a:	ef 50       	subi	r30, 0x0F	; 15
   1184c:	fc 4e       	sbci	r31, 0xEC	; 236
   1184e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(this->pin);
   11850:	fc 01       	movw	r30, r24
   11852:	e9 5c       	subi	r30, 0xC9	; 201
   11854:	fb 4e       	sbci	r31, 0xEB	; 235
   11856:	84 91       	lpm	r24, Z
	volatile uint16_t *reg, *out;

	if (port == NOT_A_PIN) return;
   11858:	88 23       	and	r24, r24
   1185a:	b9 f0       	breq	.+46     	; 0x1188a <_ZN10Ultrasonic8getRangeEv+0x60>

	reg = portModeRegister(port);
   1185c:	90 e0       	ldi	r25, 0x00	; 0
   1185e:	88 0f       	add	r24, r24
   11860:	99 1f       	adc	r25, r25
   11862:	fc 01       	movw	r30, r24
   11864:	ef 54       	subi	r30, 0x4F	; 79
   11866:	fb 4e       	sbci	r31, 0xEB	; 235
   11868:	a5 91       	lpm	r26, Z+
   1186a:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
   1186c:	fc 01       	movw	r30, r24
   1186e:	e9 56       	subi	r30, 0x69	; 105
   11870:	fb 4e       	sbci	r31, 0xEB	; 235
   11872:	85 91       	lpm	r24, Z+
   11874:	94 91       	lpm	r25, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
   11876:	3f b7       	in	r19, 0x3f	; 63
                cli();
   11878:	f8 94       	cli
		*reg |= bit;
   1187a:	8d 91       	ld	r24, X+
   1187c:	9c 91       	ld	r25, X
   1187e:	11 97       	sbiw	r26, 0x01	; 1
   11880:	82 2b       	or	r24, r18
   11882:	11 96       	adiw	r26, 0x01	; 1
   11884:	9c 93       	st	X, r25
   11886:	8e 93       	st	-X, r24
		SREG = oldSREG;
   11888:	3f bf       	out	0x3f, r19	; 63
	}
}

void digitalWrite(uint8_t val)
{
	uint8_t timer = digitalPinToTimer(this->pin);
   1188a:	ec 81       	ldd	r30, Y+4	; 0x04
   1188c:	fd 81       	ldd	r31, Y+5	; 0x05
   1188e:	80 81       	ld	r24, Z
   11890:	90 e0       	ldi	r25, 0x00	; 0
   11892:	fc 01       	movw	r30, r24
   11894:	e5 55       	subi	r30, 0x55	; 85
   11896:	fc 4e       	sbci	r31, 0xEC	; 236
   11898:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(this->pin);
   1189a:	fc 01       	movw	r30, r24
   1189c:	ef 50       	subi	r30, 0x0F	; 15
   1189e:	fc 4e       	sbci	r31, 0xEC	; 236
   118a0:	04 91       	lpm	r16, Z
	uint8_t port = digitalPinToPort(this->pin);
   118a2:	fc 01       	movw	r30, r24
   118a4:	e9 5c       	subi	r30, 0xC9	; 201
   118a6:	fb 4e       	sbci	r31, 0xEB	; 235
   118a8:	14 91       	lpm	r17, Z
	volatile uint16_t *out;

	if (port == NOT_A_PIN) return;
   118aa:	11 23       	and	r17, r17
   118ac:	09 f4       	brne	.+2      	; 0x118b0 <_ZN10Ultrasonic8getRangeEv+0x86>
   118ae:	80 c0       	rjmp	.+256    	; 0x119b0 <_ZN10Ultrasonic8getRangeEv+0x186>

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   118b0:	22 23       	and	r18, r18
   118b2:	09 f4       	brne	.+2      	; 0x118b6 <_ZN10Ultrasonic8getRangeEv+0x8c>
   118b4:	67 c0       	rjmp	.+206    	; 0x11984 <_ZN10Ultrasonic8getRangeEv+0x15a>

// If we detect the pin is on a timer, we may need to defuse PWM output, 
// we need to turn pin off before doing a digital write.
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
   118b6:	82 2f       	mov	r24, r18
   118b8:	90 e0       	ldi	r25, 0x00	; 0
   118ba:	fc 01       	movw	r30, r24
   118bc:	31 97       	sbiw	r30, 0x01	; 1
   118be:	e0 31       	cpi	r30, 0x10	; 16
   118c0:	f1 05       	cpc	r31, r1
   118c2:	08 f0       	brcs	.+2      	; 0x118c6 <_ZN10Ultrasonic8getRangeEv+0x9c>
   118c4:	5f c0       	rjmp	.+190    	; 0x11984 <_ZN10Ultrasonic8getRangeEv+0x15a>
   118c6:	88 27       	eor	r24, r24
   118c8:	ed 55       	subi	r30, 0x5D	; 93
   118ca:	fe 4f       	sbci	r31, 0xFE	; 254
   118cc:	8f 4f       	sbci	r24, 0xFF	; 255
   118ce:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
	{
		case TIMER0A: Timer0.stopChannel(CHANNEL_A); break;
   118d2:	60 e0       	ldi	r22, 0x00	; 0
   118d4:	84 e7       	ldi	r24, 0x74	; 116
   118d6:	97 e1       	ldi	r25, 0x17	; 23
   118d8:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   118dc:	53 c0       	rjmp	.+166    	; 0x11984 <_ZN10Ultrasonic8getRangeEv+0x15a>
		case TIMER0B: Timer0.stopChannel(CHANNEL_B); break;
   118de:	61 e0       	ldi	r22, 0x01	; 1
   118e0:	84 e7       	ldi	r24, 0x74	; 116
   118e2:	97 e1       	ldi	r25, 0x17	; 23
   118e4:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   118e8:	4d c0       	rjmp	.+154    	; 0x11984 <_ZN10Ultrasonic8getRangeEv+0x15a>
	
		case TIMER1A: Timer1.stopChannel(CHANNEL_A); break;
   118ea:	60 e0       	ldi	r22, 0x00	; 0
   118ec:	85 e4       	ldi	r24, 0x45	; 69
   118ee:	97 e1       	ldi	r25, 0x17	; 23
   118f0:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   118f4:	47 c0       	rjmp	.+142    	; 0x11984 <_ZN10Ultrasonic8getRangeEv+0x15a>
		case TIMER1B: Timer1.stopChannel(CHANNEL_B); break;
   118f6:	61 e0       	ldi	r22, 0x01	; 1
   118f8:	85 e4       	ldi	r24, 0x45	; 69
   118fa:	97 e1       	ldi	r25, 0x17	; 23
   118fc:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11900:	41 c0       	rjmp	.+130    	; 0x11984 <_ZN10Ultrasonic8getRangeEv+0x15a>
		
		case TIMER2A: Timer2.stopChannel(CHANNEL_A); break;
   11902:	60 e0       	ldi	r22, 0x00	; 0
   11904:	86 e1       	ldi	r24, 0x16	; 22
   11906:	97 e1       	ldi	r25, 0x17	; 23
   11908:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   1190c:	3b c0       	rjmp	.+118    	; 0x11984 <_ZN10Ultrasonic8getRangeEv+0x15a>
		case TIMER2B: Timer2.stopChannel(CHANNEL_B); break;
   1190e:	61 e0       	ldi	r22, 0x01	; 1
   11910:	86 e1       	ldi	r24, 0x16	; 22
   11912:	97 e1       	ldi	r25, 0x17	; 23
   11914:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11918:	35 c0       	rjmp	.+106    	; 0x11984 <_ZN10Ultrasonic8getRangeEv+0x15a>
	
		case TIMER3A: Timer3.stopChannel(CHANNEL_A); break;
   1191a:	60 e0       	ldi	r22, 0x00	; 0
   1191c:	87 ee       	ldi	r24, 0xE7	; 231
   1191e:	96 e1       	ldi	r25, 0x16	; 22
   11920:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11924:	2f c0       	rjmp	.+94     	; 0x11984 <_ZN10Ultrasonic8getRangeEv+0x15a>
		case TIMER3B: Timer3.stopChannel(CHANNEL_B); break; 
   11926:	61 e0       	ldi	r22, 0x01	; 1
   11928:	87 ee       	ldi	r24, 0xE7	; 231
   1192a:	96 e1       	ldi	r25, 0x16	; 22
   1192c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11930:	29 c0       	rjmp	.+82     	; 0x11984 <_ZN10Ultrasonic8getRangeEv+0x15a>
		case TIMER3C: Timer3.stopChannel(CHANNEL_C); break;
   11932:	62 e0       	ldi	r22, 0x02	; 2
   11934:	87 ee       	ldi	r24, 0xE7	; 231
   11936:	96 e1       	ldi	r25, 0x16	; 22
   11938:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   1193c:	23 c0       	rjmp	.+70     	; 0x11984 <_ZN10Ultrasonic8getRangeEv+0x15a>
		
		case TIMER4A: Timer4.stopChannel(CHANNEL_A); break;
   1193e:	60 e0       	ldi	r22, 0x00	; 0
   11940:	88 eb       	ldi	r24, 0xB8	; 184
   11942:	96 e1       	ldi	r25, 0x16	; 22
   11944:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11948:	1d c0       	rjmp	.+58     	; 0x11984 <_ZN10Ultrasonic8getRangeEv+0x15a>
		case TIMER4B: Timer4.stopChannel(CHANNEL_B); break; 
   1194a:	61 e0       	ldi	r22, 0x01	; 1
   1194c:	88 eb       	ldi	r24, 0xB8	; 184
   1194e:	96 e1       	ldi	r25, 0x16	; 22
   11950:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11954:	17 c0       	rjmp	.+46     	; 0x11984 <_ZN10Ultrasonic8getRangeEv+0x15a>
		case TIMER4C: Timer4.stopChannel(CHANNEL_C); break;
   11956:	62 e0       	ldi	r22, 0x02	; 2
   11958:	88 eb       	ldi	r24, 0xB8	; 184
   1195a:	96 e1       	ldi	r25, 0x16	; 22
   1195c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11960:	11 c0       	rjmp	.+34     	; 0x11984 <_ZN10Ultrasonic8getRangeEv+0x15a>
		
		case TIMER5A: Timer5.stopChannel(CHANNEL_A); break;
   11962:	60 e0       	ldi	r22, 0x00	; 0
   11964:	89 e8       	ldi	r24, 0x89	; 137
   11966:	96 e1       	ldi	r25, 0x16	; 22
   11968:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   1196c:	0b c0       	rjmp	.+22     	; 0x11984 <_ZN10Ultrasonic8getRangeEv+0x15a>
		case TIMER5B: Timer5.stopChannel(CHANNEL_B); break; 
   1196e:	61 e0       	ldi	r22, 0x01	; 1
   11970:	89 e8       	ldi	r24, 0x89	; 137
   11972:	96 e1       	ldi	r25, 0x16	; 22
   11974:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11978:	05 c0       	rjmp	.+10     	; 0x11984 <_ZN10Ultrasonic8getRangeEv+0x15a>
		case TIMER5C: Timer5.stopChannel(CHANNEL_C); break;
   1197a:	62 e0       	ldi	r22, 0x02	; 2
   1197c:	89 e8       	ldi	r24, 0x89	; 137
   1197e:	96 e1       	ldi	r25, 0x16	; 22
   11980:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
	if (port == NOT_A_PIN) return;

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
   11984:	e1 2f       	mov	r30, r17
   11986:	f0 e0       	ldi	r31, 0x00	; 0
   11988:	ee 0f       	add	r30, r30
   1198a:	ff 1f       	adc	r31, r31
   1198c:	e9 56       	subi	r30, 0x69	; 105
   1198e:	fb 4e       	sbci	r31, 0xEB	; 235
   11990:	a5 91       	lpm	r26, Z+
   11992:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
   11994:	2f b7       	in	r18, 0x3f	; 63
	cli();
   11996:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
   11998:	8d 91       	ld	r24, X+
   1199a:	9c 91       	ld	r25, X
   1199c:	11 97       	sbiw	r26, 0x01	; 1
   1199e:	10 e0       	ldi	r17, 0x00	; 0
   119a0:	00 95       	com	r16
   119a2:	10 95       	com	r17
   119a4:	08 23       	and	r16, r24
   119a6:	19 23       	and	r17, r25
   119a8:	11 96       	adiw	r26, 0x01	; 1
   119aa:	1c 93       	st	X, r17
   119ac:	0e 93       	st	-X, r16
	} else {
		*out |= bit;
	}

	SREG = oldSREG;
   119ae:	2f bf       	out	0x3f, r18	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   119b0:	2a e0       	ldi	r18, 0x0A	; 10
   119b2:	2a 95       	dec	r18
   119b4:	f1 f7       	brne	.-4      	; 0x119b2 <_ZN10Ultrasonic8getRangeEv+0x188>
   119b6:	00 c0       	rjmp	.+0      	; 0x119b8 <_ZN10Ultrasonic8getRangeEv+0x18e>
	}
}

void digitalWrite(uint8_t val)
{
	uint8_t timer = digitalPinToTimer(this->pin);
   119b8:	ec 81       	ldd	r30, Y+4	; 0x04
   119ba:	fd 81       	ldd	r31, Y+5	; 0x05
   119bc:	80 81       	ld	r24, Z
   119be:	90 e0       	ldi	r25, 0x00	; 0
   119c0:	fc 01       	movw	r30, r24
   119c2:	e5 55       	subi	r30, 0x55	; 85
   119c4:	fc 4e       	sbci	r31, 0xEC	; 236
   119c6:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(this->pin);
   119c8:	fc 01       	movw	r30, r24
   119ca:	ef 50       	subi	r30, 0x0F	; 15
   119cc:	fc 4e       	sbci	r31, 0xEC	; 236
   119ce:	04 91       	lpm	r16, Z
	uint8_t port = digitalPinToPort(this->pin);
   119d0:	fc 01       	movw	r30, r24
   119d2:	e9 5c       	subi	r30, 0xC9	; 201
   119d4:	fb 4e       	sbci	r31, 0xEB	; 235
   119d6:	14 91       	lpm	r17, Z
	volatile uint16_t *out;

	if (port == NOT_A_PIN) return;
   119d8:	11 23       	and	r17, r17
   119da:	09 f4       	brne	.+2      	; 0x119de <_ZN10Ultrasonic8getRangeEv+0x1b4>
   119dc:	7c c0       	rjmp	.+248    	; 0x11ad6 <_ZN10Ultrasonic8getRangeEv+0x2ac>

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   119de:	22 23       	and	r18, r18
   119e0:	09 f4       	brne	.+2      	; 0x119e4 <_ZN10Ultrasonic8getRangeEv+0x1ba>
   119e2:	67 c0       	rjmp	.+206    	; 0x11ab2 <_ZN10Ultrasonic8getRangeEv+0x288>

// If we detect the pin is on a timer, we may need to defuse PWM output, 
// we need to turn pin off before doing a digital write.
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
   119e4:	82 2f       	mov	r24, r18
   119e6:	90 e0       	ldi	r25, 0x00	; 0
   119e8:	fc 01       	movw	r30, r24
   119ea:	31 97       	sbiw	r30, 0x01	; 1
   119ec:	e0 31       	cpi	r30, 0x10	; 16
   119ee:	f1 05       	cpc	r31, r1
   119f0:	08 f0       	brcs	.+2      	; 0x119f4 <_ZN10Ultrasonic8getRangeEv+0x1ca>
   119f2:	5f c0       	rjmp	.+190    	; 0x11ab2 <_ZN10Ultrasonic8getRangeEv+0x288>
   119f4:	88 27       	eor	r24, r24
   119f6:	ed 54       	subi	r30, 0x4D	; 77
   119f8:	fe 4f       	sbci	r31, 0xFE	; 254
   119fa:	8f 4f       	sbci	r24, 0xFF	; 255
   119fc:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
	{
		case TIMER0A: Timer0.stopChannel(CHANNEL_A); break;
   11a00:	60 e0       	ldi	r22, 0x00	; 0
   11a02:	84 e7       	ldi	r24, 0x74	; 116
   11a04:	97 e1       	ldi	r25, 0x17	; 23
   11a06:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11a0a:	53 c0       	rjmp	.+166    	; 0x11ab2 <_ZN10Ultrasonic8getRangeEv+0x288>
		case TIMER0B: Timer0.stopChannel(CHANNEL_B); break;
   11a0c:	61 e0       	ldi	r22, 0x01	; 1
   11a0e:	84 e7       	ldi	r24, 0x74	; 116
   11a10:	97 e1       	ldi	r25, 0x17	; 23
   11a12:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11a16:	4d c0       	rjmp	.+154    	; 0x11ab2 <_ZN10Ultrasonic8getRangeEv+0x288>
	
		case TIMER1A: Timer1.stopChannel(CHANNEL_A); break;
   11a18:	60 e0       	ldi	r22, 0x00	; 0
   11a1a:	85 e4       	ldi	r24, 0x45	; 69
   11a1c:	97 e1       	ldi	r25, 0x17	; 23
   11a1e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11a22:	47 c0       	rjmp	.+142    	; 0x11ab2 <_ZN10Ultrasonic8getRangeEv+0x288>
		case TIMER1B: Timer1.stopChannel(CHANNEL_B); break;
   11a24:	61 e0       	ldi	r22, 0x01	; 1
   11a26:	85 e4       	ldi	r24, 0x45	; 69
   11a28:	97 e1       	ldi	r25, 0x17	; 23
   11a2a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11a2e:	41 c0       	rjmp	.+130    	; 0x11ab2 <_ZN10Ultrasonic8getRangeEv+0x288>
		
		case TIMER2A: Timer2.stopChannel(CHANNEL_A); break;
   11a30:	60 e0       	ldi	r22, 0x00	; 0
   11a32:	86 e1       	ldi	r24, 0x16	; 22
   11a34:	97 e1       	ldi	r25, 0x17	; 23
   11a36:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11a3a:	3b c0       	rjmp	.+118    	; 0x11ab2 <_ZN10Ultrasonic8getRangeEv+0x288>
		case TIMER2B: Timer2.stopChannel(CHANNEL_B); break;
   11a3c:	61 e0       	ldi	r22, 0x01	; 1
   11a3e:	86 e1       	ldi	r24, 0x16	; 22
   11a40:	97 e1       	ldi	r25, 0x17	; 23
   11a42:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11a46:	35 c0       	rjmp	.+106    	; 0x11ab2 <_ZN10Ultrasonic8getRangeEv+0x288>
	
		case TIMER3A: Timer3.stopChannel(CHANNEL_A); break;
   11a48:	60 e0       	ldi	r22, 0x00	; 0
   11a4a:	87 ee       	ldi	r24, 0xE7	; 231
   11a4c:	96 e1       	ldi	r25, 0x16	; 22
   11a4e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11a52:	2f c0       	rjmp	.+94     	; 0x11ab2 <_ZN10Ultrasonic8getRangeEv+0x288>
		case TIMER3B: Timer3.stopChannel(CHANNEL_B); break; 
   11a54:	61 e0       	ldi	r22, 0x01	; 1
   11a56:	87 ee       	ldi	r24, 0xE7	; 231
   11a58:	96 e1       	ldi	r25, 0x16	; 22
   11a5a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11a5e:	29 c0       	rjmp	.+82     	; 0x11ab2 <_ZN10Ultrasonic8getRangeEv+0x288>
		case TIMER3C: Timer3.stopChannel(CHANNEL_C); break;
   11a60:	62 e0       	ldi	r22, 0x02	; 2
   11a62:	87 ee       	ldi	r24, 0xE7	; 231
   11a64:	96 e1       	ldi	r25, 0x16	; 22
   11a66:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11a6a:	23 c0       	rjmp	.+70     	; 0x11ab2 <_ZN10Ultrasonic8getRangeEv+0x288>
		
		case TIMER4A: Timer4.stopChannel(CHANNEL_A); break;
   11a6c:	60 e0       	ldi	r22, 0x00	; 0
   11a6e:	88 eb       	ldi	r24, 0xB8	; 184
   11a70:	96 e1       	ldi	r25, 0x16	; 22
   11a72:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11a76:	1d c0       	rjmp	.+58     	; 0x11ab2 <_ZN10Ultrasonic8getRangeEv+0x288>
		case TIMER4B: Timer4.stopChannel(CHANNEL_B); break; 
   11a78:	61 e0       	ldi	r22, 0x01	; 1
   11a7a:	88 eb       	ldi	r24, 0xB8	; 184
   11a7c:	96 e1       	ldi	r25, 0x16	; 22
   11a7e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11a82:	17 c0       	rjmp	.+46     	; 0x11ab2 <_ZN10Ultrasonic8getRangeEv+0x288>
		case TIMER4C: Timer4.stopChannel(CHANNEL_C); break;
   11a84:	62 e0       	ldi	r22, 0x02	; 2
   11a86:	88 eb       	ldi	r24, 0xB8	; 184
   11a88:	96 e1       	ldi	r25, 0x16	; 22
   11a8a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11a8e:	11 c0       	rjmp	.+34     	; 0x11ab2 <_ZN10Ultrasonic8getRangeEv+0x288>
		
		case TIMER5A: Timer5.stopChannel(CHANNEL_A); break;
   11a90:	60 e0       	ldi	r22, 0x00	; 0
   11a92:	89 e8       	ldi	r24, 0x89	; 137
   11a94:	96 e1       	ldi	r25, 0x16	; 22
   11a96:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11a9a:	0b c0       	rjmp	.+22     	; 0x11ab2 <_ZN10Ultrasonic8getRangeEv+0x288>
		case TIMER5B: Timer5.stopChannel(CHANNEL_B); break; 
   11a9c:	61 e0       	ldi	r22, 0x01	; 1
   11a9e:	89 e8       	ldi	r24, 0x89	; 137
   11aa0:	96 e1       	ldi	r25, 0x16	; 22
   11aa2:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11aa6:	05 c0       	rjmp	.+10     	; 0x11ab2 <_ZN10Ultrasonic8getRangeEv+0x288>
		case TIMER5C: Timer5.stopChannel(CHANNEL_C); break;
   11aa8:	62 e0       	ldi	r22, 0x02	; 2
   11aaa:	89 e8       	ldi	r24, 0x89	; 137
   11aac:	96 e1       	ldi	r25, 0x16	; 22
   11aae:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
	if (port == NOT_A_PIN) return;

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
   11ab2:	e1 2f       	mov	r30, r17
   11ab4:	f0 e0       	ldi	r31, 0x00	; 0
   11ab6:	ee 0f       	add	r30, r30
   11ab8:	ff 1f       	adc	r31, r31
   11aba:	e9 56       	subi	r30, 0x69	; 105
   11abc:	fb 4e       	sbci	r31, 0xEB	; 235
   11abe:	a5 91       	lpm	r26, Z+
   11ac0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
   11ac2:	2f b7       	in	r18, 0x3f	; 63
	cli();
   11ac4:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
   11ac6:	8d 91       	ld	r24, X+
   11ac8:	9c 91       	ld	r25, X
   11aca:	11 97       	sbiw	r26, 0x01	; 1
   11acc:	80 2b       	or	r24, r16
   11ace:	11 96       	adiw	r26, 0x01	; 1
   11ad0:	9c 93       	st	X, r25
   11ad2:	8e 93       	st	-X, r24
	}

	SREG = oldSREG;
   11ad4:	2f bf       	out	0x3f, r18	; 63
   11ad6:	4a e1       	ldi	r20, 0x1A	; 26
   11ad8:	4a 95       	dec	r20
   11ada:	f1 f7       	brne	.-4      	; 0x11ad8 <_ZN10Ultrasonic8getRangeEv+0x2ae>
   11adc:	00 c0       	rjmp	.+0      	; 0x11ade <_ZN10Ultrasonic8getRangeEv+0x2b4>
	}
}

void digitalWrite(uint8_t val)
{
	uint8_t timer = digitalPinToTimer(this->pin);
   11ade:	ec 81       	ldd	r30, Y+4	; 0x04
   11ae0:	fd 81       	ldd	r31, Y+5	; 0x05
   11ae2:	80 81       	ld	r24, Z
   11ae4:	90 e0       	ldi	r25, 0x00	; 0
   11ae6:	fc 01       	movw	r30, r24
   11ae8:	e5 55       	subi	r30, 0x55	; 85
   11aea:	fc 4e       	sbci	r31, 0xEC	; 236
   11aec:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(this->pin);
   11aee:	fc 01       	movw	r30, r24
   11af0:	ef 50       	subi	r30, 0x0F	; 15
   11af2:	fc 4e       	sbci	r31, 0xEC	; 236
   11af4:	04 91       	lpm	r16, Z
	uint8_t port = digitalPinToPort(this->pin);
   11af6:	fc 01       	movw	r30, r24
   11af8:	e9 5c       	subi	r30, 0xC9	; 201
   11afa:	fb 4e       	sbci	r31, 0xEB	; 235
   11afc:	14 91       	lpm	r17, Z
	volatile uint16_t *out;

	if (port == NOT_A_PIN) return;
   11afe:	11 23       	and	r17, r17
   11b00:	09 f4       	brne	.+2      	; 0x11b04 <_ZN10Ultrasonic8getRangeEv+0x2da>
   11b02:	80 c0       	rjmp	.+256    	; 0x11c04 <_ZN10Ultrasonic8getRangeEv+0x3da>

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   11b04:	22 23       	and	r18, r18
   11b06:	09 f4       	brne	.+2      	; 0x11b0a <_ZN10Ultrasonic8getRangeEv+0x2e0>
   11b08:	67 c0       	rjmp	.+206    	; 0x11bd8 <_ZN10Ultrasonic8getRangeEv+0x3ae>

// If we detect the pin is on a timer, we may need to defuse PWM output, 
// we need to turn pin off before doing a digital write.
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
   11b0a:	82 2f       	mov	r24, r18
   11b0c:	90 e0       	ldi	r25, 0x00	; 0
   11b0e:	fc 01       	movw	r30, r24
   11b10:	31 97       	sbiw	r30, 0x01	; 1
   11b12:	e0 31       	cpi	r30, 0x10	; 16
   11b14:	f1 05       	cpc	r31, r1
   11b16:	08 f0       	brcs	.+2      	; 0x11b1a <_ZN10Ultrasonic8getRangeEv+0x2f0>
   11b18:	5f c0       	rjmp	.+190    	; 0x11bd8 <_ZN10Ultrasonic8getRangeEv+0x3ae>
   11b1a:	88 27       	eor	r24, r24
   11b1c:	ed 53       	subi	r30, 0x3D	; 61
   11b1e:	fe 4f       	sbci	r31, 0xFE	; 254
   11b20:	8f 4f       	sbci	r24, 0xFF	; 255
   11b22:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
	{
		case TIMER0A: Timer0.stopChannel(CHANNEL_A); break;
   11b26:	60 e0       	ldi	r22, 0x00	; 0
   11b28:	84 e7       	ldi	r24, 0x74	; 116
   11b2a:	97 e1       	ldi	r25, 0x17	; 23
   11b2c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11b30:	53 c0       	rjmp	.+166    	; 0x11bd8 <_ZN10Ultrasonic8getRangeEv+0x3ae>
		case TIMER0B: Timer0.stopChannel(CHANNEL_B); break;
   11b32:	61 e0       	ldi	r22, 0x01	; 1
   11b34:	84 e7       	ldi	r24, 0x74	; 116
   11b36:	97 e1       	ldi	r25, 0x17	; 23
   11b38:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11b3c:	4d c0       	rjmp	.+154    	; 0x11bd8 <_ZN10Ultrasonic8getRangeEv+0x3ae>
	
		case TIMER1A: Timer1.stopChannel(CHANNEL_A); break;
   11b3e:	60 e0       	ldi	r22, 0x00	; 0
   11b40:	85 e4       	ldi	r24, 0x45	; 69
   11b42:	97 e1       	ldi	r25, 0x17	; 23
   11b44:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11b48:	47 c0       	rjmp	.+142    	; 0x11bd8 <_ZN10Ultrasonic8getRangeEv+0x3ae>
		case TIMER1B: Timer1.stopChannel(CHANNEL_B); break;
   11b4a:	61 e0       	ldi	r22, 0x01	; 1
   11b4c:	85 e4       	ldi	r24, 0x45	; 69
   11b4e:	97 e1       	ldi	r25, 0x17	; 23
   11b50:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11b54:	41 c0       	rjmp	.+130    	; 0x11bd8 <_ZN10Ultrasonic8getRangeEv+0x3ae>
		
		case TIMER2A: Timer2.stopChannel(CHANNEL_A); break;
   11b56:	60 e0       	ldi	r22, 0x00	; 0
   11b58:	86 e1       	ldi	r24, 0x16	; 22
   11b5a:	97 e1       	ldi	r25, 0x17	; 23
   11b5c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11b60:	3b c0       	rjmp	.+118    	; 0x11bd8 <_ZN10Ultrasonic8getRangeEv+0x3ae>
		case TIMER2B: Timer2.stopChannel(CHANNEL_B); break;
   11b62:	61 e0       	ldi	r22, 0x01	; 1
   11b64:	86 e1       	ldi	r24, 0x16	; 22
   11b66:	97 e1       	ldi	r25, 0x17	; 23
   11b68:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11b6c:	35 c0       	rjmp	.+106    	; 0x11bd8 <_ZN10Ultrasonic8getRangeEv+0x3ae>
	
		case TIMER3A: Timer3.stopChannel(CHANNEL_A); break;
   11b6e:	60 e0       	ldi	r22, 0x00	; 0
   11b70:	87 ee       	ldi	r24, 0xE7	; 231
   11b72:	96 e1       	ldi	r25, 0x16	; 22
   11b74:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11b78:	2f c0       	rjmp	.+94     	; 0x11bd8 <_ZN10Ultrasonic8getRangeEv+0x3ae>
		case TIMER3B: Timer3.stopChannel(CHANNEL_B); break; 
   11b7a:	61 e0       	ldi	r22, 0x01	; 1
   11b7c:	87 ee       	ldi	r24, 0xE7	; 231
   11b7e:	96 e1       	ldi	r25, 0x16	; 22
   11b80:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11b84:	29 c0       	rjmp	.+82     	; 0x11bd8 <_ZN10Ultrasonic8getRangeEv+0x3ae>
		case TIMER3C: Timer3.stopChannel(CHANNEL_C); break;
   11b86:	62 e0       	ldi	r22, 0x02	; 2
   11b88:	87 ee       	ldi	r24, 0xE7	; 231
   11b8a:	96 e1       	ldi	r25, 0x16	; 22
   11b8c:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11b90:	23 c0       	rjmp	.+70     	; 0x11bd8 <_ZN10Ultrasonic8getRangeEv+0x3ae>
		
		case TIMER4A: Timer4.stopChannel(CHANNEL_A); break;
   11b92:	60 e0       	ldi	r22, 0x00	; 0
   11b94:	88 eb       	ldi	r24, 0xB8	; 184
   11b96:	96 e1       	ldi	r25, 0x16	; 22
   11b98:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11b9c:	1d c0       	rjmp	.+58     	; 0x11bd8 <_ZN10Ultrasonic8getRangeEv+0x3ae>
		case TIMER4B: Timer4.stopChannel(CHANNEL_B); break; 
   11b9e:	61 e0       	ldi	r22, 0x01	; 1
   11ba0:	88 eb       	ldi	r24, 0xB8	; 184
   11ba2:	96 e1       	ldi	r25, 0x16	; 22
   11ba4:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11ba8:	17 c0       	rjmp	.+46     	; 0x11bd8 <_ZN10Ultrasonic8getRangeEv+0x3ae>
		case TIMER4C: Timer4.stopChannel(CHANNEL_C); break;
   11baa:	62 e0       	ldi	r22, 0x02	; 2
   11bac:	88 eb       	ldi	r24, 0xB8	; 184
   11bae:	96 e1       	ldi	r25, 0x16	; 22
   11bb0:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11bb4:	11 c0       	rjmp	.+34     	; 0x11bd8 <_ZN10Ultrasonic8getRangeEv+0x3ae>
		
		case TIMER5A: Timer5.stopChannel(CHANNEL_A); break;
   11bb6:	60 e0       	ldi	r22, 0x00	; 0
   11bb8:	89 e8       	ldi	r24, 0x89	; 137
   11bba:	96 e1       	ldi	r25, 0x16	; 22
   11bbc:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11bc0:	0b c0       	rjmp	.+22     	; 0x11bd8 <_ZN10Ultrasonic8getRangeEv+0x3ae>
		case TIMER5B: Timer5.stopChannel(CHANNEL_B); break; 
   11bc2:	61 e0       	ldi	r22, 0x01	; 1
   11bc4:	89 e8       	ldi	r24, 0x89	; 137
   11bc6:	96 e1       	ldi	r25, 0x16	; 22
   11bc8:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11bcc:	05 c0       	rjmp	.+10     	; 0x11bd8 <_ZN10Ultrasonic8getRangeEv+0x3ae>
		case TIMER5C: Timer5.stopChannel(CHANNEL_C); break;
   11bce:	62 e0       	ldi	r22, 0x02	; 2
   11bd0:	89 e8       	ldi	r24, 0x89	; 137
   11bd2:	96 e1       	ldi	r25, 0x16	; 22
   11bd4:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
	if (port == NOT_A_PIN) return;

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
   11bd8:	e1 2f       	mov	r30, r17
   11bda:	f0 e0       	ldi	r31, 0x00	; 0
   11bdc:	ee 0f       	add	r30, r30
   11bde:	ff 1f       	adc	r31, r31
   11be0:	e9 56       	subi	r30, 0x69	; 105
   11be2:	fb 4e       	sbci	r31, 0xEB	; 235
   11be4:	a5 91       	lpm	r26, Z+
   11be6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
   11be8:	2f b7       	in	r18, 0x3f	; 63
	cli();
   11bea:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
   11bec:	8d 91       	ld	r24, X+
   11bee:	9c 91       	ld	r25, X
   11bf0:	11 97       	sbiw	r26, 0x01	; 1
   11bf2:	10 e0       	ldi	r17, 0x00	; 0
   11bf4:	00 95       	com	r16
   11bf6:	10 95       	com	r17
   11bf8:	08 23       	and	r16, r24
   11bfa:	19 23       	and	r17, r25
   11bfc:	11 96       	adiw	r26, 0x01	; 1
   11bfe:	1c 93       	st	X, r17
   11c00:	0e 93       	st	-X, r16
	} else {
		*out |= bit;
	}

	SREG = oldSREG;
   11c02:	2f bf       	out	0x3f, r18	; 63
	pin->digitalWrite(LOW);

	// The same pin is used to read the signal from the PING))): a HIGH
	// pulse whose duration is the time (in microseconds) from the sending
	// of the ping to the reception of its echo off of an object.
	pin->pinMode(INPUT);
   11c04:	ec 81       	ldd	r30, Y+4	; 0x04
   11c06:	fd 81       	ldd	r31, Y+5	; 0x05
	}
	
void setPin(uint8_t spin) { this->pin = spin; }
	
void pinMode(uint8_t pmode) {
	this->mode = pmode;
   11c08:	11 82       	std	Z+1, r1	; 0x01
	uint8_t bit = digitalPinToBitMask(this->pin);
   11c0a:	80 81       	ld	r24, Z
   11c0c:	90 e0       	ldi	r25, 0x00	; 0
   11c0e:	fc 01       	movw	r30, r24
   11c10:	ef 50       	subi	r30, 0x0F	; 15
   11c12:	fc 4e       	sbci	r31, 0xEC	; 236
   11c14:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(this->pin);
   11c16:	fc 01       	movw	r30, r24
   11c18:	e9 5c       	subi	r30, 0xC9	; 201
   11c1a:	fb 4e       	sbci	r31, 0xEB	; 235
   11c1c:	84 91       	lpm	r24, Z
	volatile uint16_t *reg, *out;

	if (port == NOT_A_PIN) return;
   11c1e:	88 23       	and	r24, r24
   11c20:	29 f1       	breq	.+74     	; 0x11c6c <_ZN10Ultrasonic8getRangeEv+0x442>

	reg = portModeRegister(port);
   11c22:	90 e0       	ldi	r25, 0x00	; 0
   11c24:	88 0f       	add	r24, r24
   11c26:	99 1f       	adc	r25, r25
   11c28:	fc 01       	movw	r30, r24
   11c2a:	ef 54       	subi	r30, 0x4F	; 79
   11c2c:	fb 4e       	sbci	r31, 0xEB	; 235
   11c2e:	a5 91       	lpm	r26, Z+
   11c30:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
   11c32:	fc 01       	movw	r30, r24
   11c34:	e9 56       	subi	r30, 0x69	; 105
   11c36:	fb 4e       	sbci	r31, 0xEB	; 235
   11c38:	45 91       	lpm	r20, Z+
   11c3a:	54 91       	lpm	r21, Z

	if (this->mode == INPUT) { 
		uint8_t oldSREG = SREG;
   11c3c:	3f b7       	in	r19, 0x3f	; 63
                cli();
   11c3e:	f8 94       	cli
		*reg &= ~bit;
   11c40:	8d 91       	ld	r24, X+
   11c42:	9c 91       	ld	r25, X
   11c44:	11 97       	sbiw	r26, 0x01	; 1
   11c46:	e2 2f       	mov	r30, r18
   11c48:	f0 e0       	ldi	r31, 0x00	; 0
   11c4a:	e0 95       	com	r30
   11c4c:	f0 95       	com	r31
   11c4e:	8e 23       	and	r24, r30
   11c50:	9f 23       	and	r25, r31
   11c52:	11 96       	adiw	r26, 0x01	; 1
   11c54:	9c 93       	st	X, r25
   11c56:	8e 93       	st	-X, r24
		*out &= ~bit;
   11c58:	da 01       	movw	r26, r20
   11c5a:	8d 91       	ld	r24, X+
   11c5c:	9c 91       	ld	r25, X
   11c5e:	11 97       	sbiw	r26, 0x01	; 1
   11c60:	e8 23       	and	r30, r24
   11c62:	f9 23       	and	r31, r25
   11c64:	11 96       	adiw	r26, 0x01	; 1
   11c66:	fc 93       	st	X, r31
   11c68:	ee 93       	st	-X, r30
		SREG = oldSREG;
   11c6a:	3f bf       	out	0x3f, r19	; 63
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t state, unsigned long timeout=1000000L) {
		// cache the port and bit of the pin in order to speed up the
		// pulse width measuring loop and achieve finer resolution.  calling
		// digitalRead() instead yields much coarser resolution.
		uint8_t bit = digitalPinToBitMask(this->pin);
   11c6c:	ec 81       	ldd	r30, Y+4	; 0x04
   11c6e:	fd 81       	ldd	r31, Y+5	; 0x05
   11c70:	80 81       	ld	r24, Z
   11c72:	90 e0       	ldi	r25, 0x00	; 0
   11c74:	fc 01       	movw	r30, r24
   11c76:	ef 50       	subi	r30, 0x0F	; 15
   11c78:	fc 4e       	sbci	r31, 0xEC	; 236
   11c7a:	44 91       	lpm	r20, Z
		uint8_t port = digitalPinToPort(this->pin);
   11c7c:	fc 01       	movw	r30, r24
   11c7e:	e9 5c       	subi	r30, 0xC9	; 201
   11c80:	fb 4e       	sbci	r31, 0xEB	; 235
   11c82:	04 91       	lpm	r16, Z
		// convert the timeout from microseconds to a number of times through
		// the initial loop; it takes 16 clock cycles per iteration.
		unsigned long numloops = 0;
		unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
		// wait for any previous pulse to end
		while ((*portInputRegister(port) & bit) == stateMask)
   11c84:	10 e0       	ldi	r17, 0x00	; 0
   11c86:	00 0f       	add	r16, r16
   11c88:	11 1f       	adc	r17, r17
   11c8a:	03 58       	subi	r16, 0x83	; 131
   11c8c:	1b 4e       	sbci	r17, 0xEB	; 235
		uint8_t port = digitalPinToPort(this->pin);
		uint8_t stateMask = (state ? bit : 0);
		unsigned long width = 0; // keep initialization out of time critical area
		// convert the timeout from microseconds to a number of times through
		// the initial loop; it takes 16 clock cycles per iteration.
		unsigned long numloops = 0;
   11c8e:	80 e0       	ldi	r24, 0x00	; 0
   11c90:	90 e0       	ldi	r25, 0x00	; 0
   11c92:	dc 01       	movw	r26, r24
		unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
		// wait for any previous pulse to end
		while ((*portInputRegister(port) & bit) == stateMask)
   11c94:	50 e0       	ldi	r21, 0x00	; 0
   11c96:	f8 01       	movw	r30, r16
   11c98:	25 91       	lpm	r18, Z+
   11c9a:	34 91       	lpm	r19, Z
   11c9c:	f9 01       	movw	r30, r18
   11c9e:	20 81       	ld	r18, Z
   11ca0:	31 81       	ldd	r19, Z+1	; 0x01
   11ca2:	ba 01       	movw	r22, r20
   11ca4:	24 23       	and	r18, r20
   11ca6:	35 23       	and	r19, r21
   11ca8:	42 17       	cp	r20, r18
   11caa:	53 07       	cpc	r21, r19
   11cac:	59 f4       	brne	.+22     	; 0x11cc4 <_ZN10Ultrasonic8getRangeEv+0x49a>
			if (numloops++ == maxloops)
   11cae:	01 96       	adiw	r24, 0x01	; 1
   11cb0:	a1 1d       	adc	r26, r1
   11cb2:	b1 1d       	adc	r27, r1
   11cb4:	81 34       	cpi	r24, 0x41	; 65
   11cb6:	f2 e4       	ldi	r31, 0x42	; 66
   11cb8:	9f 07       	cpc	r25, r31
   11cba:	ff e0       	ldi	r31, 0x0F	; 15
   11cbc:	af 07       	cpc	r26, r31
   11cbe:	b1 05       	cpc	r27, r1
   11cc0:	51 f7       	brne	.-44     	; 0x11c96 <_ZN10Ultrasonic8getRangeEv+0x46c>
   11cc2:	7f c0       	rjmp	.+254    	; 0x11dc2 <_ZN10Ultrasonic8getRangeEv+0x598>
				return 0;	
		// wait for the pulse to start
		while ((*portInputRegister(port) & bit) != stateMask)
   11cc4:	f8 01       	movw	r30, r16
   11cc6:	25 91       	lpm	r18, Z+
   11cc8:	34 91       	lpm	r19, Z
   11cca:	f9 01       	movw	r30, r18
   11ccc:	20 81       	ld	r18, Z
   11cce:	31 81       	ldd	r19, Z+1	; 0x01
   11cd0:	26 23       	and	r18, r22
   11cd2:	37 23       	and	r19, r23
   11cd4:	62 17       	cp	r22, r18
   11cd6:	73 07       	cpc	r23, r19
   11cd8:	79 f4       	brne	.+30     	; 0x11cf8 <_ZN10Ultrasonic8getRangeEv+0x4ce>
			if (numloops++ == maxloops)
				return 0;
	
		// wait for the pulse to stop
		while ((*portInputRegister(port) & bit) == stateMask) {
   11cda:	f8 01       	movw	r30, r16
   11cdc:	25 91       	lpm	r18, Z+
   11cde:	34 91       	lpm	r19, Z
   11ce0:	f9 01       	movw	r30, r18
   11ce2:	20 81       	ld	r18, Z
   11ce4:	31 81       	ldd	r19, Z+1	; 0x01
   11ce6:	26 23       	and	r18, r22
   11ce8:	37 23       	and	r19, r23
   11cea:	26 17       	cp	r18, r22
   11cec:	37 07       	cpc	r19, r23
   11cee:	a1 f0       	breq	.+40     	; 0x11d18 <_ZN10Ultrasonic8getRangeEv+0x4ee>
   11cf0:	40 e0       	ldi	r20, 0x00	; 0
   11cf2:	50 e0       	ldi	r21, 0x00	; 0
   11cf4:	ba 01       	movw	r22, r20
   11cf6:	3b c0       	rjmp	.+118    	; 0x11d6e <_ZN10Ultrasonic8getRangeEv+0x544>
		while ((*portInputRegister(port) & bit) == stateMask)
			if (numloops++ == maxloops)
				return 0;	
		// wait for the pulse to start
		while ((*portInputRegister(port) & bit) != stateMask)
			if (numloops++ == maxloops)
   11cf8:	6c 01       	movw	r12, r24
   11cfa:	7d 01       	movw	r14, r26
   11cfc:	ff ef       	ldi	r31, 0xFF	; 255
   11cfe:	cf 1a       	sub	r12, r31
   11d00:	df 0a       	sbc	r13, r31
   11d02:	ef 0a       	sbc	r14, r31
   11d04:	ff 0a       	sbc	r15, r31
   11d06:	80 34       	cpi	r24, 0x40	; 64
   11d08:	92 44       	sbci	r25, 0x42	; 66
   11d0a:	af 40       	sbci	r26, 0x0F	; 15
   11d0c:	b1 05       	cpc	r27, r1
   11d0e:	09 f4       	brne	.+2      	; 0x11d12 <_ZN10Ultrasonic8getRangeEv+0x4e8>
   11d10:	5c c0       	rjmp	.+184    	; 0x11dca <_ZN10Ultrasonic8getRangeEv+0x5a0>
   11d12:	d7 01       	movw	r26, r14
   11d14:	c6 01       	movw	r24, r12
   11d16:	d6 cf       	rjmp	.-84     	; 0x11cc4 <_ZN10Ultrasonic8getRangeEv+0x49a>
				return 0;
	
		// wait for the pulse to stop
		while ((*portInputRegister(port) & bit) == stateMask) {
			if (numloops++ == maxloops)
   11d18:	80 34       	cpi	r24, 0x40	; 64
   11d1a:	42 e4       	ldi	r20, 0x42	; 66
   11d1c:	94 07       	cpc	r25, r20
   11d1e:	4f e0       	ldi	r20, 0x0F	; 15
   11d20:	a4 07       	cpc	r26, r20
   11d22:	b1 05       	cpc	r27, r1
   11d24:	09 f4       	brne	.+2      	; 0x11d28 <_ZN10Ultrasonic8getRangeEv+0x4fe>
   11d26:	55 c0       	rjmp	.+170    	; 0x11dd2 <_ZN10Ultrasonic8getRangeEv+0x5a8>
   11d28:	40 e0       	ldi	r20, 0x00	; 0
   11d2a:	50 e0       	ldi	r21, 0x00	; 0
   11d2c:	ba 01       	movw	r22, r20
   11d2e:	0f c0       	rjmp	.+30     	; 0x11d4e <_ZN10Ultrasonic8getRangeEv+0x524>
   11d30:	6c 01       	movw	r12, r24
   11d32:	7d 01       	movw	r14, r26
   11d34:	c4 0e       	add	r12, r20
   11d36:	d5 1e       	adc	r13, r21
   11d38:	e6 1e       	adc	r14, r22
   11d3a:	f7 1e       	adc	r15, r23
   11d3c:	e0 e4       	ldi	r30, 0x40	; 64
   11d3e:	ce 16       	cp	r12, r30
   11d40:	e2 e4       	ldi	r30, 0x42	; 66
   11d42:	de 06       	cpc	r13, r30
   11d44:	ef e0       	ldi	r30, 0x0F	; 15
   11d46:	ee 06       	cpc	r14, r30
   11d48:	f1 04       	cpc	r15, r1
   11d4a:	09 f4       	brne	.+2      	; 0x11d4e <_ZN10Ultrasonic8getRangeEv+0x524>
   11d4c:	46 c0       	rjmp	.+140    	; 0x11dda <_ZN10Ultrasonic8getRangeEv+0x5b0>
				return 0;
			width++;
   11d4e:	4f 5f       	subi	r20, 0xFF	; 255
   11d50:	5f 4f       	sbci	r21, 0xFF	; 255
   11d52:	6f 4f       	sbci	r22, 0xFF	; 255
   11d54:	7f 4f       	sbci	r23, 0xFF	; 255
		while ((*portInputRegister(port) & bit) != stateMask)
			if (numloops++ == maxloops)
				return 0;
	
		// wait for the pulse to stop
		while ((*portInputRegister(port) & bit) == stateMask) {
   11d56:	f8 01       	movw	r30, r16
   11d58:	e5 90       	lpm	r14, Z+
   11d5a:	f4 90       	lpm	r15, Z
   11d5c:	f7 01       	movw	r30, r14
   11d5e:	e0 80       	ld	r14, Z
   11d60:	f1 80       	ldd	r15, Z+1	; 0x01
   11d62:	f7 01       	movw	r30, r14
   11d64:	e2 23       	and	r30, r18
   11d66:	f3 23       	and	r31, r19
   11d68:	2e 17       	cp	r18, r30
   11d6a:	3f 07       	cpc	r19, r31
   11d6c:	09 f3       	breq	.-62     	; 0x11d30 <_ZN10Ultrasonic8getRangeEv+0x506>
		}
		// convert the reading to microseconds. The loop has been determined
		// to be 20 clock cycles long and have about 16 clocks between the edge
		// and the start of the loop. There will be some error introduced by
		// the interrupt handlers.
		return clockCyclesToMicroseconds(width * 21 + 16); 
   11d6e:	8a 01       	movw	r16, r20
   11d70:	9b 01       	movw	r18, r22
   11d72:	00 0f       	add	r16, r16
   11d74:	11 1f       	adc	r17, r17
   11d76:	22 1f       	adc	r18, r18
   11d78:	33 1f       	adc	r19, r19
   11d7a:	00 0f       	add	r16, r16
   11d7c:	11 1f       	adc	r17, r17
   11d7e:	22 1f       	adc	r18, r18
   11d80:	33 1f       	adc	r19, r19
   11d82:	d9 01       	movw	r26, r18
   11d84:	c8 01       	movw	r24, r16
   11d86:	88 0f       	add	r24, r24
   11d88:	99 1f       	adc	r25, r25
   11d8a:	aa 1f       	adc	r26, r26
   11d8c:	bb 1f       	adc	r27, r27
   11d8e:	88 0f       	add	r24, r24
   11d90:	99 1f       	adc	r25, r25
   11d92:	aa 1f       	adc	r26, r26
   11d94:	bb 1f       	adc	r27, r27
   11d96:	80 0f       	add	r24, r16
   11d98:	91 1f       	adc	r25, r17
   11d9a:	a2 1f       	adc	r26, r18
   11d9c:	b3 1f       	adc	r27, r19
   11d9e:	84 0f       	add	r24, r20
   11da0:	95 1f       	adc	r25, r21
   11da2:	a6 1f       	adc	r26, r22
   11da4:	b7 1f       	adc	r27, r23
   11da6:	40 96       	adiw	r24, 0x10	; 16
   11da8:	a1 1d       	adc	r26, r1
   11daa:	b1 1d       	adc	r27, r1
   11dac:	bc 01       	movw	r22, r24
   11dae:	cd 01       	movw	r24, r26
   11db0:	68 94       	set
   11db2:	13 f8       	bld	r1, 3
   11db4:	96 95       	lsr	r25
   11db6:	87 95       	ror	r24
   11db8:	77 95       	ror	r23
   11dba:	67 95       	ror	r22
   11dbc:	16 94       	lsr	r1
   11dbe:	d1 f7       	brne	.-12     	; 0x11db4 <_ZN10Ultrasonic8getRangeEv+0x58a>
   11dc0:	0f c0       	rjmp	.+30     	; 0x11de0 <_ZN10Ultrasonic8getRangeEv+0x5b6>
		unsigned long numloops = 0;
		unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
		// wait for any previous pulse to end
		while ((*portInputRegister(port) & bit) == stateMask)
			if (numloops++ == maxloops)
				return 0;	
   11dc2:	60 e0       	ldi	r22, 0x00	; 0
   11dc4:	70 e0       	ldi	r23, 0x00	; 0
   11dc6:	cb 01       	movw	r24, r22
   11dc8:	0b c0       	rjmp	.+22     	; 0x11de0 <_ZN10Ultrasonic8getRangeEv+0x5b6>
		// wait for the pulse to start
		while ((*portInputRegister(port) & bit) != stateMask)
			if (numloops++ == maxloops)
				return 0;
   11dca:	60 e0       	ldi	r22, 0x00	; 0
   11dcc:	70 e0       	ldi	r23, 0x00	; 0
   11dce:	cb 01       	movw	r24, r22
   11dd0:	07 c0       	rjmp	.+14     	; 0x11de0 <_ZN10Ultrasonic8getRangeEv+0x5b6>
	
		// wait for the pulse to stop
		while ((*portInputRegister(port) & bit) == stateMask) {
			if (numloops++ == maxloops)
				return 0;
   11dd2:	60 e0       	ldi	r22, 0x00	; 0
   11dd4:	70 e0       	ldi	r23, 0x00	; 0
   11dd6:	cb 01       	movw	r24, r22
   11dd8:	03 c0       	rjmp	.+6      	; 0x11de0 <_ZN10Ultrasonic8getRangeEv+0x5b6>
   11dda:	60 e0       	ldi	r22, 0x00	; 0
   11ddc:	70 e0       	ldi	r23, 0x00	; 0
   11dde:	cb 01       	movw	r24, r22
	duration = pin->pulseIn(HIGH);
   11de0:	68 83       	st	Y, r22
   11de2:	79 83       	std	Y+1, r23	; 0x01
   11de4:	8a 83       	std	Y+2, r24	; 0x02
   11de6:	9b 83       	std	Y+3, r25	; 0x03

	// convert the time into a distance
	return microsecondsToCentimeters();// return centimeters
   11de8:	2a e3       	ldi	r18, 0x3A	; 58
   11dea:	30 e0       	ldi	r19, 0x00	; 0
   11dec:	40 e0       	ldi	r20, 0x00	; 0
   11dee:	50 e0       	ldi	r21, 0x00	; 0
   11df0:	0e 94 05 a7 	call	0x14e0a	; 0x14e0a <__udivmodsi4>
   11df4:	ca 01       	movw	r24, r20
   11df6:	b9 01       	movw	r22, r18
   11df8:	0e 94 71 a5 	call	0x14ae2	; 0x14ae2 <__floatsisf>
}
   11dfc:	df 91       	pop	r29
   11dfe:	cf 91       	pop	r28
   11e00:	1f 91       	pop	r17
   11e02:	0f 91       	pop	r16
   11e04:	ff 90       	pop	r15
   11e06:	ef 90       	pop	r14
   11e08:	df 90       	pop	r13
   11e0a:	cf 90       	pop	r12
   11e0c:	08 95       	ret

00011e0e <_ZN17VariablePWMDriver11isConnectedEv>:
public:
	VariablePWMDriver();
	~VariablePWMDriver();
	int commandPWMLevel(uint8_t ch, int16_t p);
	int commandEmergencyStop(int status);
	int isConnected(void) { return true; }
   11e0e:	81 e0       	ldi	r24, 0x01	; 1
   11e10:	90 e0       	ldi	r25, 0x00	; 0
   11e12:	08 95       	ret

00011e14 <_ZN17VariablePWMDriver14setMaxPWMLevelEi>:
	void setPWMs(PWM** pwm) { ppwms = pwm; }
	void setEnablePins(Digital** dpin) { pdigitals = dpin; }
	void setMaxPWMLevel(int p) { MAXPWMLEVEL = p; }
   11e14:	86 56       	subi	r24, 0x66	; 102
   11e16:	9f 4f       	sbci	r25, 0xFF	; 255
   11e18:	fc 01       	movw	r30, r24
   11e1a:	71 83       	std	Z+1, r23	; 0x01
   11e1c:	60 83       	st	Z, r22
   11e1e:	08 95       	ret

00011e20 <_ZN17VariablePWMDriver14queryFaultFlagEv>:
	uint8_t getPWMLevelPin(uint8_t channel) { return pwmDrive[channel-1][0]; }
	uint8_t getPWMEnablePin(uint8_t channel) {return pwmDrive[channel-1][1]; }
	void createPWM(uint8_t channel, uint8_t pin_number, uint8_t enable_pin, int timer_pre, int timer_res);
	void getDriverInfo(uint8_t ch, char* outStr);
	int queryFaultFlag(void) { return fault_flag; }
   11e20:	88 56       	subi	r24, 0x68	; 104
   11e22:	9f 4f       	sbci	r25, 0xFF	; 255
   11e24:	fc 01       	movw	r30, r24
   11e26:	80 81       	ld	r24, Z
   11e28:	91 81       	ldd	r25, Z+1	; 0x01
   11e2a:	08 95       	ret

00011e2c <_ZN17VariablePWMDriver15queryStatusFlagEv>:
	int queryStatusFlag(void) { return status_flag; }
   11e2c:	fc 01       	movw	r30, r24
   11e2e:	83 81       	ldd	r24, Z+3	; 0x03
   11e30:	94 81       	ldd	r25, Z+4	; 0x04
   11e32:	08 95       	ret

00011e34 <_ZN17VariablePWMDriverD1Ev>:
VariablePWMDriver::VariablePWMDriver()
{
} //VariablePWMDriver

// default destructor
VariablePWMDriver::~VariablePWMDriver()
   11e34:	2a ec       	ldi	r18, 0xCA	; 202
   11e36:	39 e0       	ldi	r19, 0x09	; 9
   11e38:	fc 01       	movw	r30, r24
   11e3a:	31 83       	std	Z+1, r19	; 0x01
   11e3c:	20 83       	st	Z, r18
   11e3e:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <_ZN18AbstractPWMControlD1Ev>
   11e42:	08 95       	ret

00011e44 <_ZN17VariablePWMDriverD0Ev>:
   11e44:	cf 93       	push	r28
   11e46:	df 93       	push	r29
   11e48:	ec 01       	movw	r28, r24
{
} //~VariablePWMDriver
   11e4a:	f4 df       	rcall	.-24     	; 0x11e34 <_ZN17VariablePWMDriverD1Ev>
   11e4c:	ce 01       	movw	r24, r28
   11e4e:	94 da       	rcall	.-2776   	; 0x11378 <_ZdlPv>
   11e50:	df 91       	pop	r29
   11e52:	cf 91       	pop	r28
   11e54:	08 95       	ret

00011e56 <_ZN17VariablePWMDriver15commandPWMLevelEhi>:
* Instead of our -1000 to 1000 range from stick we change it to 0-2000 by adding 1000 since no reverse is relevant.
* In the case of Ps3 controller the axis will have the zero point of the stick as halfway, and full stick back
* as 0, in the case of a trigger, the output is from -1 to 1 with no output being -1, so it will function as desired and expected.
* Each channel is a PWM driven device.
*/
int VariablePWMDriver::commandPWMLevel(uint8_t pwmChannel, int16_t pwmPower) {
   11e56:	af 92       	push	r10
   11e58:	bf 92       	push	r11
   11e5a:	cf 92       	push	r12
   11e5c:	df 92       	push	r13
   11e5e:	ef 92       	push	r14
   11e60:	ff 92       	push	r15
   11e62:	0f 93       	push	r16
   11e64:	1f 93       	push	r17
   11e66:	cf 93       	push	r28
   11e68:	df 93       	push	r29
	// check shutdown override
	if( PWMSHUTDOWN )
   11e6a:	fc 01       	movw	r30, r24
   11e6c:	e9 56       	subi	r30, 0x69	; 105
   11e6e:	ff 4f       	sbci	r31, 0xFF	; 255
   11e70:	20 81       	ld	r18, Z
   11e72:	21 11       	cpse	r18, r1
   11e74:	68 c1       	rjmp	.+720    	; 0x12146 <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x2f0>
   11e76:	5c 01       	movw	r10, r24
		return 0;
	int foundPin = 0;
	pwmPower += 1000;
   11e78:	7a 01       	movw	r14, r20
   11e7a:	88 e1       	ldi	r24, 0x18	; 24
   11e7c:	e8 1a       	sub	r14, r24
   11e7e:	8c ef       	ldi	r24, 0xFC	; 252
   11e80:	f8 0a       	sbc	r15, r24
	pwmLevel[pwmChannel-1] = pwmPower;
   11e82:	06 2f       	mov	r16, r22
   11e84:	10 e0       	ldi	r17, 0x00	; 0
   11e86:	01 50       	subi	r16, 0x01	; 1
   11e88:	11 09       	sbc	r17, r1
   11e8a:	f8 01       	movw	r30, r16
   11e8c:	ee 0f       	add	r30, r30
   11e8e:	ff 1f       	adc	r31, r31
   11e90:	ea 0d       	add	r30, r10
   11e92:	fb 1d       	adc	r31, r11
   11e94:	e7 5a       	subi	r30, 0xA7	; 167
   11e96:	ff 4f       	sbci	r31, 0xFF	; 255
   11e98:	f1 82       	std	Z+1, r15	; 0x01
   11e9a:	e0 82       	st	Z, r14
   11e9c:	e5 01       	movw	r28, r10
   11e9e:	af 81       	ldd	r26, Y+7	; 0x07
   11ea0:	b8 85       	ldd	r27, Y+8	; 0x08
	// get mapping of channel to pin
	for(int i = 0; i < 10; i++) {
		if(pdigitals[i] && pdigitals[i]->pin ==  pwmDrive[pwmChannel-1][1]) {
   11ea2:	20 e0       	ldi	r18, 0x00	; 0
   11ea4:	30 e0       	ldi	r19, 0x00	; 0
   11ea6:	b8 01       	movw	r22, r16
   11ea8:	66 0f       	add	r22, r22
   11eaa:	77 1f       	adc	r23, r23
   11eac:	66 0f       	add	r22, r22
   11eae:	77 1f       	adc	r23, r23
   11eb0:	6a 0d       	add	r22, r10
   11eb2:	7b 1d       	adc	r23, r11
   11eb4:	66 5f       	subi	r22, 0xF6	; 246
   11eb6:	7f 4f       	sbci	r23, 0xFF	; 255
   11eb8:	a9 01       	movw	r20, r18
   11eba:	ed 91       	ld	r30, X+
   11ebc:	fd 91       	ld	r31, X+
   11ebe:	30 97       	sbiw	r30, 0x00	; 0
   11ec0:	09 f4       	brne	.+2      	; 0x11ec4 <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x6e>
   11ec2:	c0 c0       	rjmp	.+384    	; 0x12044 <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x1ee>
   11ec4:	eb 01       	movw	r28, r22
   11ec6:	88 81       	ld	r24, Y
   11ec8:	90 81       	ld	r25, Z
   11eca:	98 13       	cpse	r25, r24
   11ecc:	bb c0       	rjmp	.+374    	; 0x12044 <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x1ee>
	}
	
void setPin(uint8_t spin) { this->pin = spin; }
	
void pinMode(uint8_t pmode) {
	this->mode = pmode;
   11ece:	91 e0       	ldi	r25, 0x01	; 1
   11ed0:	91 83       	std	Z+1, r25	; 0x01
	uint8_t bit = digitalPinToBitMask(this->pin);
   11ed2:	90 e0       	ldi	r25, 0x00	; 0
   11ed4:	fc 01       	movw	r30, r24
   11ed6:	ef 5e       	subi	r30, 0xEF	; 239
   11ed8:	fa 4e       	sbci	r31, 0xEA	; 234
   11eda:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(this->pin);
   11edc:	fc 01       	movw	r30, r24
   11ede:	e9 5a       	subi	r30, 0xA9	; 169
   11ee0:	fa 4e       	sbci	r31, 0xEA	; 234
   11ee2:	84 91       	lpm	r24, Z
	volatile uint16_t *reg, *out;

	if (port == NOT_A_PIN) return;
   11ee4:	88 23       	and	r24, r24
   11ee6:	b9 f0       	breq	.+46     	; 0x11f16 <_ZN17VariablePWMDriver15commandPWMLevelEhi+0xc0>

	reg = portModeRegister(port);
   11ee8:	90 e0       	ldi	r25, 0x00	; 0
   11eea:	88 0f       	add	r24, r24
   11eec:	99 1f       	adc	r25, r25
   11eee:	fc 01       	movw	r30, r24
   11ef0:	e9 54       	subi	r30, 0x49	; 73
   11ef2:	fa 4e       	sbci	r31, 0xEA	; 234
   11ef4:	a5 91       	lpm	r26, Z+
   11ef6:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
   11ef8:	fc 01       	movw	r30, r24
   11efa:	e3 56       	subi	r30, 0x63	; 99
   11efc:	fa 4e       	sbci	r31, 0xEA	; 234
   11efe:	85 91       	lpm	r24, Z+
   11f00:	94 91       	lpm	r25, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
   11f02:	3f b7       	in	r19, 0x3f	; 63
                cli();
   11f04:	f8 94       	cli
		*reg |= bit;
   11f06:	8d 91       	ld	r24, X+
   11f08:	9c 91       	ld	r25, X
   11f0a:	11 97       	sbiw	r26, 0x01	; 1
   11f0c:	82 2b       	or	r24, r18
   11f0e:	11 96       	adiw	r26, 0x01	; 1
   11f10:	9c 93       	st	X, r25
   11f12:	8e 93       	st	-X, r24
		SREG = oldSREG;
   11f14:	3f bf       	out	0x3f, r19	; 63
				//pdigitals[i]->setPin(motorDrive[motorChannel-1][1]);
				pdigitals[i]->pinMode(OUTPUT);
				pdigitals[i]->digitalWrite(HIGH);
   11f16:	f5 01       	movw	r30, r10
   11f18:	87 81       	ldd	r24, Z+7	; 0x07
   11f1a:	90 85       	ldd	r25, Z+8	; 0x08
   11f1c:	fc 01       	movw	r30, r24
   11f1e:	e4 0f       	add	r30, r20
   11f20:	f5 1f       	adc	r31, r21
	}
}

void digitalWrite(uint8_t val)
{
	uint8_t timer = digitalPinToTimer(this->pin);
   11f22:	01 90       	ld	r0, Z+
   11f24:	f0 81       	ld	r31, Z
   11f26:	e0 2d       	mov	r30, r0
   11f28:	80 81       	ld	r24, Z
   11f2a:	90 e0       	ldi	r25, 0x00	; 0
   11f2c:	fc 01       	movw	r30, r24
   11f2e:	e5 53       	subi	r30, 0x35	; 53
   11f30:	fb 4e       	sbci	r31, 0xEB	; 235
   11f32:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(this->pin);
   11f34:	fc 01       	movw	r30, r24
   11f36:	ef 5e       	subi	r30, 0xEF	; 239
   11f38:	fa 4e       	sbci	r31, 0xEA	; 234
   11f3a:	d4 90       	lpm	r13, Z
	uint8_t port = digitalPinToPort(this->pin);
   11f3c:	fc 01       	movw	r30, r24
   11f3e:	e9 5a       	subi	r30, 0xA9	; 169
   11f40:	fa 4e       	sbci	r31, 0xEA	; 234
   11f42:	c4 90       	lpm	r12, Z
	volatile uint16_t *out;

	if (port == NOT_A_PIN) return;
   11f44:	cc 20       	and	r12, r12
   11f46:	09 f4       	brne	.+2      	; 0x11f4a <_ZN17VariablePWMDriver15commandPWMLevelEhi+0xf4>
   11f48:	0c c1       	rjmp	.+536    	; 0x12162 <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x30c>

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   11f4a:	22 23       	and	r18, r18
   11f4c:	09 f4       	brne	.+2      	; 0x11f50 <_ZN17VariablePWMDriver15commandPWMLevelEhi+0xfa>
   11f4e:	67 c0       	rjmp	.+206    	; 0x1201e <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x1c8>

// If we detect the pin is on a timer, we may need to defuse PWM output, 
// we need to turn pin off before doing a digital write.
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
   11f50:	82 2f       	mov	r24, r18
   11f52:	90 e0       	ldi	r25, 0x00	; 0
   11f54:	fc 01       	movw	r30, r24
   11f56:	31 97       	sbiw	r30, 0x01	; 1
   11f58:	e0 31       	cpi	r30, 0x10	; 16
   11f5a:	f1 05       	cpc	r31, r1
   11f5c:	08 f0       	brcs	.+2      	; 0x11f60 <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x10a>
   11f5e:	5f c0       	rjmp	.+190    	; 0x1201e <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x1c8>
   11f60:	88 27       	eor	r24, r24
   11f62:	ed 52       	subi	r30, 0x2D	; 45
   11f64:	fe 4f       	sbci	r31, 0xFE	; 254
   11f66:	8f 4f       	sbci	r24, 0xFF	; 255
   11f68:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
	{
		case TIMER0A: Timer0.stopChannel(CHANNEL_A); break;
   11f6c:	60 e0       	ldi	r22, 0x00	; 0
   11f6e:	84 e7       	ldi	r24, 0x74	; 116
   11f70:	97 e1       	ldi	r25, 0x17	; 23
   11f72:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11f76:	53 c0       	rjmp	.+166    	; 0x1201e <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x1c8>
		case TIMER0B: Timer0.stopChannel(CHANNEL_B); break;
   11f78:	61 e0       	ldi	r22, 0x01	; 1
   11f7a:	84 e7       	ldi	r24, 0x74	; 116
   11f7c:	97 e1       	ldi	r25, 0x17	; 23
   11f7e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11f82:	4d c0       	rjmp	.+154    	; 0x1201e <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x1c8>
	
		case TIMER1A: Timer1.stopChannel(CHANNEL_A); break;
   11f84:	60 e0       	ldi	r22, 0x00	; 0
   11f86:	85 e4       	ldi	r24, 0x45	; 69
   11f88:	97 e1       	ldi	r25, 0x17	; 23
   11f8a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11f8e:	47 c0       	rjmp	.+142    	; 0x1201e <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x1c8>
		case TIMER1B: Timer1.stopChannel(CHANNEL_B); break;
   11f90:	61 e0       	ldi	r22, 0x01	; 1
   11f92:	85 e4       	ldi	r24, 0x45	; 69
   11f94:	97 e1       	ldi	r25, 0x17	; 23
   11f96:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11f9a:	41 c0       	rjmp	.+130    	; 0x1201e <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x1c8>
		
		case TIMER2A: Timer2.stopChannel(CHANNEL_A); break;
   11f9c:	60 e0       	ldi	r22, 0x00	; 0
   11f9e:	86 e1       	ldi	r24, 0x16	; 22
   11fa0:	97 e1       	ldi	r25, 0x17	; 23
   11fa2:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11fa6:	3b c0       	rjmp	.+118    	; 0x1201e <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x1c8>
		case TIMER2B: Timer2.stopChannel(CHANNEL_B); break;
   11fa8:	61 e0       	ldi	r22, 0x01	; 1
   11faa:	86 e1       	ldi	r24, 0x16	; 22
   11fac:	97 e1       	ldi	r25, 0x17	; 23
   11fae:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11fb2:	35 c0       	rjmp	.+106    	; 0x1201e <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x1c8>
	
		case TIMER3A: Timer3.stopChannel(CHANNEL_A); break;
   11fb4:	60 e0       	ldi	r22, 0x00	; 0
   11fb6:	87 ee       	ldi	r24, 0xE7	; 231
   11fb8:	96 e1       	ldi	r25, 0x16	; 22
   11fba:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11fbe:	2f c0       	rjmp	.+94     	; 0x1201e <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x1c8>
		case TIMER3B: Timer3.stopChannel(CHANNEL_B); break; 
   11fc0:	61 e0       	ldi	r22, 0x01	; 1
   11fc2:	87 ee       	ldi	r24, 0xE7	; 231
   11fc4:	96 e1       	ldi	r25, 0x16	; 22
   11fc6:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11fca:	29 c0       	rjmp	.+82     	; 0x1201e <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x1c8>
		case TIMER3C: Timer3.stopChannel(CHANNEL_C); break;
   11fcc:	62 e0       	ldi	r22, 0x02	; 2
   11fce:	87 ee       	ldi	r24, 0xE7	; 231
   11fd0:	96 e1       	ldi	r25, 0x16	; 22
   11fd2:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11fd6:	23 c0       	rjmp	.+70     	; 0x1201e <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x1c8>
		
		case TIMER4A: Timer4.stopChannel(CHANNEL_A); break;
   11fd8:	60 e0       	ldi	r22, 0x00	; 0
   11fda:	88 eb       	ldi	r24, 0xB8	; 184
   11fdc:	96 e1       	ldi	r25, 0x16	; 22
   11fde:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11fe2:	1d c0       	rjmp	.+58     	; 0x1201e <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x1c8>
		case TIMER4B: Timer4.stopChannel(CHANNEL_B); break; 
   11fe4:	61 e0       	ldi	r22, 0x01	; 1
   11fe6:	88 eb       	ldi	r24, 0xB8	; 184
   11fe8:	96 e1       	ldi	r25, 0x16	; 22
   11fea:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11fee:	17 c0       	rjmp	.+46     	; 0x1201e <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x1c8>
		case TIMER4C: Timer4.stopChannel(CHANNEL_C); break;
   11ff0:	62 e0       	ldi	r22, 0x02	; 2
   11ff2:	88 eb       	ldi	r24, 0xB8	; 184
   11ff4:	96 e1       	ldi	r25, 0x16	; 22
   11ff6:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   11ffa:	11 c0       	rjmp	.+34     	; 0x1201e <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x1c8>
		
		case TIMER5A: Timer5.stopChannel(CHANNEL_A); break;
   11ffc:	60 e0       	ldi	r22, 0x00	; 0
   11ffe:	89 e8       	ldi	r24, 0x89	; 137
   12000:	96 e1       	ldi	r25, 0x16	; 22
   12002:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   12006:	0b c0       	rjmp	.+22     	; 0x1201e <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x1c8>
		case TIMER5B: Timer5.stopChannel(CHANNEL_B); break; 
   12008:	61 e0       	ldi	r22, 0x01	; 1
   1200a:	89 e8       	ldi	r24, 0x89	; 137
   1200c:	96 e1       	ldi	r25, 0x16	; 22
   1200e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   12012:	05 c0       	rjmp	.+10     	; 0x1201e <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x1c8>
		case TIMER5C: Timer5.stopChannel(CHANNEL_C); break;
   12014:	62 e0       	ldi	r22, 0x02	; 2
   12016:	89 e8       	ldi	r24, 0x89	; 137
   12018:	96 e1       	ldi	r25, 0x16	; 22
   1201a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
	if (port == NOT_A_PIN) return;

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
   1201e:	ec 2d       	mov	r30, r12
   12020:	f0 e0       	ldi	r31, 0x00	; 0
   12022:	ee 0f       	add	r30, r30
   12024:	ff 1f       	adc	r31, r31
   12026:	e3 56       	subi	r30, 0x63	; 99
   12028:	fa 4e       	sbci	r31, 0xEA	; 234
   1202a:	a5 91       	lpm	r26, Z+
   1202c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
   1202e:	2f b7       	in	r18, 0x3f	; 63
	cli();
   12030:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
   12032:	8d 91       	ld	r24, X+
   12034:	9c 91       	ld	r25, X
   12036:	11 97       	sbiw	r26, 0x01	; 1
   12038:	8d 29       	or	r24, r13
   1203a:	11 96       	adiw	r26, 0x01	; 1
   1203c:	9c 93       	st	X, r25
   1203e:	8e 93       	st	-X, r24
	}

	SREG = oldSREG;
   12040:	2f bf       	out	0x3f, r18	; 63
   12042:	8f c0       	rjmp	.+286    	; 0x12162 <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x30c>
   12044:	2e 5f       	subi	r18, 0xFE	; 254
   12046:	3f 4f       	sbci	r19, 0xFF	; 255
		return 0;
	int foundPin = 0;
	pwmPower += 1000;
	pwmLevel[pwmChannel-1] = pwmPower;
	// get mapping of channel to pin
	for(int i = 0; i < 10; i++) {
   12048:	24 31       	cpi	r18, 0x14	; 20
   1204a:	31 05       	cpc	r19, r1
   1204c:	09 f0       	breq	.+2      	; 0x12050 <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x1fa>
   1204e:	34 cf       	rjmp	.-408    	; 0x11eb8 <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x62>
   12050:	7d c0       	rjmp	.+250    	; 0x1214c <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x2f6>
		return commandEmergencyStop(7);
	}                                                                                                                                                     
	// scale motor power from 0-2000 to our 0-255 8 bit timer val
	pwmPower /= 8;
	//
	if( pwmPower != 0 && pwmPower < minPWMLevel[pwmChannel-1])
   12052:	f8 01       	movw	r30, r16
   12054:	ee 0f       	add	r30, r30
   12056:	ff 1f       	adc	r31, r31
   12058:	ee 0f       	add	r30, r30
   1205a:	ff 1f       	adc	r31, r31
   1205c:	ea 0d       	add	r30, r10
   1205e:	fb 1d       	adc	r31, r11
   12060:	e3 59       	subi	r30, 0x93	; 147
   12062:	ff 4f       	sbci	r31, 0xFF	; 255
   12064:	80 81       	ld	r24, Z
   12066:	91 81       	ldd	r25, Z+1	; 0x01
   12068:	a2 81       	ldd	r26, Z+2	; 0x02
   1206a:	b3 81       	ldd	r27, Z+3	; 0x03
   1206c:	a7 01       	movw	r20, r14
   1206e:	0f 2c       	mov	r0, r15
   12070:	00 0c       	add	r0, r0
   12072:	66 0b       	sbc	r22, r22
   12074:	77 0b       	sbc	r23, r23
   12076:	48 17       	cp	r20, r24
   12078:	59 07       	cpc	r21, r25
   1207a:	6a 07       	cpc	r22, r26
   1207c:	7b 07       	cpc	r23, r27
   1207e:	08 f4       	brcc	.+2      	; 0x12082 <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x22c>
		pwmPower = minPWMLevel[pwmChannel-1];
   12080:	7c 01       	movw	r14, r24
	if( pwmPower > MAXPWMLEVEL ) // cap it at max
   12082:	f5 01       	movw	r30, r10
   12084:	e6 56       	subi	r30, 0x66	; 102
   12086:	ff 4f       	sbci	r31, 0xFF	; 255
   12088:	80 81       	ld	r24, Z
   1208a:	91 81       	ldd	r25, Z+1	; 0x01
   1208c:	8e 15       	cp	r24, r14
   1208e:	9f 05       	cpc	r25, r15
   12090:	0c f4       	brge	.+2      	; 0x12094 <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x23e>
   12092:	7c 01       	movw	r14, r24
		pwmPower = MAXPWMLEVEL;
	// Scale motor power if necessary and save it in channel speed array with proper sign for later use
	if( PWMPOWERSCALE != 0 )
   12094:	f5 01       	movw	r30, r10
   12096:	eb 56       	subi	r30, 0x6B	; 107
   12098:	ff 4f       	sbci	r31, 0xFF	; 255
   1209a:	60 81       	ld	r22, Z
   1209c:	71 81       	ldd	r23, Z+1	; 0x01
   1209e:	61 15       	cp	r22, r1
   120a0:	71 05       	cpc	r23, r1
   120a2:	21 f0       	breq	.+8      	; 0x120ac <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x256>
		pwmPower /= PWMPOWERSCALE;
   120a4:	c7 01       	movw	r24, r14
   120a6:	0e 94 f2 a6 	call	0x14de4	; 0x14de4 <__divmodhi4>
   120aa:	7b 01       	movw	r14, r22
	//
	// find the PWM pin and get the object we set up in M3 to write to power level
	int timer_mode = 2;
	int timer_pre = pwmDrive[pwmChannel-1][2]; // prescale from M3
   120ac:	d8 01       	movw	r26, r16
   120ae:	aa 0f       	add	r26, r26
   120b0:	bb 1f       	adc	r27, r27
   120b2:	aa 0f       	add	r26, r26
   120b4:	bb 1f       	adc	r27, r27
   120b6:	aa 0d       	add	r26, r10
   120b8:	bb 1d       	adc	r27, r11
   120ba:	1b 96       	adiw	r26, 0x0b	; 11
   120bc:	dc 90       	ld	r13, X
   120be:	1b 97       	sbiw	r26, 0x0b	; 11
	int timer_res = pwmDrive[pwmChannel-1][3]; // timer resolution in bits from M3
   120c0:	f8 01       	movw	r30, r16
   120c2:	33 96       	adiw	r30, 0x03	; 3
   120c4:	ee 0f       	add	r30, r30
   120c6:	ff 1f       	adc	r31, r31
   120c8:	ee 0f       	add	r30, r30
   120ca:	ff 1f       	adc	r31, r31
   120cc:	ea 0d       	add	r30, r10
   120ce:	fb 1d       	adc	r31, r11
   120d0:	c0 80       	ld	r12, Z
	// element 0 of motorDrive has index to PWM array
	int pindex = pwmDrive[pwmChannel-1][0];
	// writing power 0 sets mode 0 and timer turnoff
	ppwms[pindex]->init(ppwms[pindex]->pin);
   120d2:	19 96       	adiw	r26, 0x09	; 9
   120d4:	0c 91       	ld	r16, X
   120d6:	10 e0       	ldi	r17, 0x00	; 0
   120d8:	00 0f       	add	r16, r16
   120da:	11 1f       	adc	r17, r17
   120dc:	d5 01       	movw	r26, r10
   120de:	15 96       	adiw	r26, 0x05	; 5
   120e0:	ed 91       	ld	r30, X+
   120e2:	fc 91       	ld	r31, X
   120e4:	16 97       	sbiw	r26, 0x06	; 6
   120e6:	e0 0f       	add	r30, r16
   120e8:	f1 1f       	adc	r31, r17
   120ea:	80 81       	ld	r24, Z
   120ec:	91 81       	ldd	r25, Z+1	; 0x01
   120ee:	ec 01       	movw	r28, r24
   120f0:	68 81       	ld	r22, Y
   120f2:	0e 94 6d a3 	call	0x146da	; 0x146da <_ZN3PWM4initEh>
	ppwms[pindex]->setPWMPrescale(timer_pre);
   120f6:	d5 01       	movw	r26, r10
   120f8:	15 96       	adiw	r26, 0x05	; 5
   120fa:	ed 91       	ld	r30, X+
   120fc:	fc 91       	ld	r31, X
   120fe:	16 97       	sbiw	r26, 0x06	; 6
   12100:	e0 0f       	add	r30, r16
   12102:	f1 1f       	adc	r31, r17
   12104:	6d 2d       	mov	r22, r13
   12106:	80 81       	ld	r24, Z
   12108:	91 81       	ldd	r25, Z+1	; 0x01
   1210a:	0e 94 76 a2 	call	0x144ec	; 0x144ec <_ZN3PWM14setPWMPrescaleEh>
	ppwms[pindex]->setPWMResolution(timer_res);
   1210e:	e5 01       	movw	r28, r10
   12110:	ed 81       	ldd	r30, Y+5	; 0x05
   12112:	fe 81       	ldd	r31, Y+6	; 0x06
   12114:	e0 0f       	add	r30, r16
   12116:	f1 1f       	adc	r31, r17
   12118:	6c 2d       	mov	r22, r12
   1211a:	80 81       	ld	r24, Z
   1211c:	91 81       	ldd	r25, Z+1	; 0x01
   1211e:	0e 94 54 a2 	call	0x144a8	; 0x144a8 <_ZN3PWM16setPWMResolutionEh>
	//ppwms[pindex]->attachInterrupt(motorDurationService[motorChannel-1]);// last param TRUE indicates an overflow interrupt
	ppwms[pindex]->pwmWrite(pwmPower, timer_mode);
   12122:	8d 81       	ldd	r24, Y+5	; 0x05
   12124:	9e 81       	ldd	r25, Y+6	; 0x06
   12126:	fc 01       	movw	r30, r24
   12128:	e0 0f       	add	r30, r16
   1212a:	f1 1f       	adc	r31, r17
   1212c:	42 e0       	ldi	r20, 0x02	; 2
   1212e:	b7 01       	movw	r22, r14
   12130:	80 81       	ld	r24, Z
   12132:	91 81       	ldd	r25, Z+1	; 0x01
   12134:	0e 94 12 a3 	call	0x14624	; 0x14624 <_ZN3PWM8pwmWriteEjh>
	fault_flag = 0;
   12138:	c8 56       	subi	r28, 0x68	; 104
   1213a:	df 4f       	sbci	r29, 0xFF	; 255
   1213c:	19 82       	std	Y+1, r1	; 0x01
   1213e:	18 82       	st	Y, r1
	return 0;
   12140:	80 e0       	ldi	r24, 0x00	; 0
   12142:	90 e0       	ldi	r25, 0x00	; 0
   12144:	1e c0       	rjmp	.+60     	; 0x12182 <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x32c>
* Each channel is a PWM driven device.
*/
int VariablePWMDriver::commandPWMLevel(uint8_t pwmChannel, int16_t pwmPower) {
	// check shutdown override
	if( PWMSHUTDOWN )
		return 0;
   12146:	80 e0       	ldi	r24, 0x00	; 0
   12148:	90 e0       	ldi	r25, 0x00	; 0
   1214a:	1b c0       	rjmp	.+54     	; 0x12182 <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x32c>
				foundPin = 1;
				break;
		}
	}
	if(!foundPin) {
		return commandEmergencyStop(7);
   1214c:	d5 01       	movw	r26, r10
   1214e:	ed 91       	ld	r30, X+
   12150:	fc 91       	ld	r31, X
   12152:	06 80       	ldd	r0, Z+6	; 0x06
   12154:	f7 81       	ldd	r31, Z+7	; 0x07
   12156:	e0 2d       	mov	r30, r0
   12158:	67 e0       	ldi	r22, 0x07	; 7
   1215a:	70 e0       	ldi	r23, 0x00	; 0
   1215c:	c5 01       	movw	r24, r10
   1215e:	19 95       	eicall
   12160:	10 c0       	rjmp	.+32     	; 0x12182 <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x32c>
	}                                                                                                                                                     
	// scale motor power from 0-2000 to our 0-255 8 bit timer val
	pwmPower /= 8;
   12162:	c7 01       	movw	r24, r14
   12164:	99 23       	and	r25, r25
   12166:	0c f4       	brge	.+2      	; 0x1216a <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x314>
   12168:	07 96       	adiw	r24, 0x07	; 7
   1216a:	7c 01       	movw	r14, r24
   1216c:	f5 94       	asr	r15
   1216e:	e7 94       	ror	r14
   12170:	f5 94       	asr	r15
   12172:	e7 94       	ror	r14
   12174:	f5 94       	asr	r15
   12176:	e7 94       	ror	r14
	//
	if( pwmPower != 0 && pwmPower < minPWMLevel[pwmChannel-1])
   12178:	e1 14       	cp	r14, r1
   1217a:	f1 04       	cpc	r15, r1
   1217c:	09 f0       	breq	.+2      	; 0x12180 <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x32a>
   1217e:	69 cf       	rjmp	.-302    	; 0x12052 <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x1fc>
   12180:	80 cf       	rjmp	.-256    	; 0x12082 <_ZN17VariablePWMDriver15commandPWMLevelEhi+0x22c>
	ppwms[pindex]->setPWMResolution(timer_res);
	//ppwms[pindex]->attachInterrupt(motorDurationService[motorChannel-1]);// last param TRUE indicates an overflow interrupt
	ppwms[pindex]->pwmWrite(pwmPower, timer_mode);
	fault_flag = 0;
	return 0;
}
   12182:	df 91       	pop	r29
   12184:	cf 91       	pop	r28
   12186:	1f 91       	pop	r17
   12188:	0f 91       	pop	r16
   1218a:	ff 90       	pop	r15
   1218c:	ef 90       	pop	r14
   1218e:	df 90       	pop	r13
   12190:	cf 90       	pop	r12
   12192:	bf 90       	pop	r11
   12194:	af 90       	pop	r10
   12196:	08 95       	ret

00012198 <_ZN17VariablePWMDriver20commandEmergencyStopEi>:
* Author: Groff
*/
#include "VariablePWMDriver.h"
#include "Configuration_adv.h"

int VariablePWMDriver::commandEmergencyStop(int status) {
   12198:	7f 92       	push	r7
   1219a:	8f 92       	push	r8
   1219c:	9f 92       	push	r9
   1219e:	af 92       	push	r10
   121a0:	bf 92       	push	r11
   121a2:	cf 92       	push	r12
   121a4:	df 92       	push	r13
   121a6:	ef 92       	push	r14
   121a8:	ff 92       	push	r15
   121aa:	0f 93       	push	r16
   121ac:	1f 93       	push	r17
   121ae:	cf 93       	push	r28
   121b0:	df 93       	push	r29
   121b2:	7c 01       	movw	r14, r24
   121b4:	4b 01       	movw	r8, r22
   121b6:	8c 01       	movw	r16, r24
   121b8:	07 5f       	subi	r16, 0xF7	; 247
   121ba:	1f 4f       	sbci	r17, 0xFF	; 255
   121bc:	5c 01       	movw	r10, r24
   121be:	81 e3       	ldi	r24, 0x31	; 49
   121c0:	a8 0e       	add	r10, r24
   121c2:	b1 1c       	adc	r11, r1
   121c4:	68 01       	movw	r12, r16
	for(int j=0; j < 10; j++) {
		int pindex = pwmDrive[j][0];
   121c6:	d8 01       	movw	r26, r16
   121c8:	cc 91       	ld	r28, X
		if(pindex != 255) {
   121ca:	cf 3f       	cpi	r28, 0xFF	; 255
   121cc:	09 f4       	brne	.+2      	; 0x121d0 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x38>
   121ce:	dc c0       	rjmp	.+440    	; 0x12388 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x1f0>
				pdigitals[pindex]->digitalWrite(LOW);
   121d0:	ec 2f       	mov	r30, r28
   121d2:	f0 e0       	ldi	r31, 0x00	; 0
   121d4:	ee 0f       	add	r30, r30
   121d6:	ff 1f       	adc	r31, r31
   121d8:	d7 01       	movw	r26, r14
   121da:	17 96       	adiw	r26, 0x07	; 7
   121dc:	8d 91       	ld	r24, X+
   121de:	9c 91       	ld	r25, X
   121e0:	18 97       	sbiw	r26, 0x08	; 8
   121e2:	e8 0f       	add	r30, r24
   121e4:	f9 1f       	adc	r31, r25
	}
}

void digitalWrite(uint8_t val)
{
	uint8_t timer = digitalPinToTimer(this->pin);
   121e6:	01 90       	ld	r0, Z+
   121e8:	f0 81       	ld	r31, Z
   121ea:	e0 2d       	mov	r30, r0
   121ec:	80 81       	ld	r24, Z
   121ee:	90 e0       	ldi	r25, 0x00	; 0
   121f0:	fc 01       	movw	r30, r24
   121f2:	e5 53       	subi	r30, 0x35	; 53
   121f4:	fb 4e       	sbci	r31, 0xEB	; 235
   121f6:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(this->pin);
   121f8:	fc 01       	movw	r30, r24
   121fa:	ef 5e       	subi	r30, 0xEF	; 239
   121fc:	fa 4e       	sbci	r31, 0xEA	; 234
   121fe:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(this->pin);
   12200:	fc 01       	movw	r30, r24
   12202:	e9 5a       	subi	r30, 0xA9	; 169
   12204:	fa 4e       	sbci	r31, 0xEA	; 234
   12206:	74 90       	lpm	r7, Z
	volatile uint16_t *out;

	if (port == NOT_A_PIN) return;
   12208:	77 20       	and	r7, r7
   1220a:	09 f4       	brne	.+2      	; 0x1220e <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x76>
   1220c:	85 c0       	rjmp	.+266    	; 0x12318 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x180>

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   1220e:	22 23       	and	r18, r18
   12210:	09 f4       	brne	.+2      	; 0x12214 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x7c>
   12212:	67 c0       	rjmp	.+206    	; 0x122e2 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x14a>

// If we detect the pin is on a timer, we may need to defuse PWM output, 
// we need to turn pin off before doing a digital write.
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
   12214:	82 2f       	mov	r24, r18
   12216:	90 e0       	ldi	r25, 0x00	; 0
   12218:	fc 01       	movw	r30, r24
   1221a:	31 97       	sbiw	r30, 0x01	; 1
   1221c:	e0 31       	cpi	r30, 0x10	; 16
   1221e:	f1 05       	cpc	r31, r1
   12220:	08 f0       	brcs	.+2      	; 0x12224 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x8c>
   12222:	5f c0       	rjmp	.+190    	; 0x122e2 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x14a>
   12224:	88 27       	eor	r24, r24
   12226:	ed 51       	subi	r30, 0x1D	; 29
   12228:	fe 4f       	sbci	r31, 0xFE	; 254
   1222a:	8f 4f       	sbci	r24, 0xFF	; 255
   1222c:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
	{
		case TIMER0A: Timer0.stopChannel(CHANNEL_A); break;
   12230:	60 e0       	ldi	r22, 0x00	; 0
   12232:	84 e7       	ldi	r24, 0x74	; 116
   12234:	97 e1       	ldi	r25, 0x17	; 23
   12236:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   1223a:	53 c0       	rjmp	.+166    	; 0x122e2 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x14a>
		case TIMER0B: Timer0.stopChannel(CHANNEL_B); break;
   1223c:	61 e0       	ldi	r22, 0x01	; 1
   1223e:	84 e7       	ldi	r24, 0x74	; 116
   12240:	97 e1       	ldi	r25, 0x17	; 23
   12242:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   12246:	4d c0       	rjmp	.+154    	; 0x122e2 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x14a>
	
		case TIMER1A: Timer1.stopChannel(CHANNEL_A); break;
   12248:	60 e0       	ldi	r22, 0x00	; 0
   1224a:	85 e4       	ldi	r24, 0x45	; 69
   1224c:	97 e1       	ldi	r25, 0x17	; 23
   1224e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   12252:	47 c0       	rjmp	.+142    	; 0x122e2 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x14a>
		case TIMER1B: Timer1.stopChannel(CHANNEL_B); break;
   12254:	61 e0       	ldi	r22, 0x01	; 1
   12256:	85 e4       	ldi	r24, 0x45	; 69
   12258:	97 e1       	ldi	r25, 0x17	; 23
   1225a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   1225e:	41 c0       	rjmp	.+130    	; 0x122e2 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x14a>
		
		case TIMER2A: Timer2.stopChannel(CHANNEL_A); break;
   12260:	60 e0       	ldi	r22, 0x00	; 0
   12262:	86 e1       	ldi	r24, 0x16	; 22
   12264:	97 e1       	ldi	r25, 0x17	; 23
   12266:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   1226a:	3b c0       	rjmp	.+118    	; 0x122e2 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x14a>
		case TIMER2B: Timer2.stopChannel(CHANNEL_B); break;
   1226c:	61 e0       	ldi	r22, 0x01	; 1
   1226e:	86 e1       	ldi	r24, 0x16	; 22
   12270:	97 e1       	ldi	r25, 0x17	; 23
   12272:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   12276:	35 c0       	rjmp	.+106    	; 0x122e2 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x14a>
	
		case TIMER3A: Timer3.stopChannel(CHANNEL_A); break;
   12278:	60 e0       	ldi	r22, 0x00	; 0
   1227a:	87 ee       	ldi	r24, 0xE7	; 231
   1227c:	96 e1       	ldi	r25, 0x16	; 22
   1227e:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   12282:	2f c0       	rjmp	.+94     	; 0x122e2 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x14a>
		case TIMER3B: Timer3.stopChannel(CHANNEL_B); break; 
   12284:	61 e0       	ldi	r22, 0x01	; 1
   12286:	87 ee       	ldi	r24, 0xE7	; 231
   12288:	96 e1       	ldi	r25, 0x16	; 22
   1228a:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   1228e:	29 c0       	rjmp	.+82     	; 0x122e2 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x14a>
		case TIMER3C: Timer3.stopChannel(CHANNEL_C); break;
   12290:	62 e0       	ldi	r22, 0x02	; 2
   12292:	87 ee       	ldi	r24, 0xE7	; 231
   12294:	96 e1       	ldi	r25, 0x16	; 22
   12296:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   1229a:	23 c0       	rjmp	.+70     	; 0x122e2 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x14a>
		
		case TIMER4A: Timer4.stopChannel(CHANNEL_A); break;
   1229c:	60 e0       	ldi	r22, 0x00	; 0
   1229e:	88 eb       	ldi	r24, 0xB8	; 184
   122a0:	96 e1       	ldi	r25, 0x16	; 22
   122a2:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   122a6:	1d c0       	rjmp	.+58     	; 0x122e2 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x14a>
		case TIMER4B: Timer4.stopChannel(CHANNEL_B); break; 
   122a8:	61 e0       	ldi	r22, 0x01	; 1
   122aa:	88 eb       	ldi	r24, 0xB8	; 184
   122ac:	96 e1       	ldi	r25, 0x16	; 22
   122ae:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   122b2:	17 c0       	rjmp	.+46     	; 0x122e2 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x14a>
		case TIMER4C: Timer4.stopChannel(CHANNEL_C); break;
   122b4:	62 e0       	ldi	r22, 0x02	; 2
   122b6:	88 eb       	ldi	r24, 0xB8	; 184
   122b8:	96 e1       	ldi	r25, 0x16	; 22
   122ba:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   122be:	11 c0       	rjmp	.+34     	; 0x122e2 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x14a>
		
		case TIMER5A: Timer5.stopChannel(CHANNEL_A); break;
   122c0:	60 e0       	ldi	r22, 0x00	; 0
   122c2:	89 e8       	ldi	r24, 0x89	; 137
   122c4:	96 e1       	ldi	r25, 0x16	; 22
   122c6:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   122ca:	0b c0       	rjmp	.+22     	; 0x122e2 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x14a>
		case TIMER5B: Timer5.stopChannel(CHANNEL_B); break; 
   122cc:	61 e0       	ldi	r22, 0x01	; 1
   122ce:	89 e8       	ldi	r24, 0x89	; 137
   122d0:	96 e1       	ldi	r25, 0x16	; 22
   122d2:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   122d6:	05 c0       	rjmp	.+10     	; 0x122e2 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x14a>
		case TIMER5C: Timer5.stopChannel(CHANNEL_C); break;
   122d8:	62 e0       	ldi	r22, 0x02	; 2
   122da:	89 e8       	ldi	r24, 0x89	; 137
   122dc:	96 e1       	ldi	r25, 0x16	; 22
   122de:	0e 94 ba 9e 	call	0x13d74	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
	if (port == NOT_A_PIN) return;

	// If PWM output, we need to turn pin off before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
   122e2:	e7 2d       	mov	r30, r7
   122e4:	f0 e0       	ldi	r31, 0x00	; 0
   122e6:	ee 0f       	add	r30, r30
   122e8:	ff 1f       	adc	r31, r31
   122ea:	e3 56       	subi	r30, 0x63	; 99
   122ec:	fa 4e       	sbci	r31, 0xEA	; 234
   122ee:	a5 91       	lpm	r26, Z+
   122f0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
   122f2:	2f b7       	in	r18, 0x3f	; 63
	cli();
   122f4:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
   122f6:	8d 91       	ld	r24, X+
   122f8:	9c 91       	ld	r25, X
   122fa:	11 97       	sbiw	r26, 0x01	; 1
   122fc:	ed 2f       	mov	r30, r29
   122fe:	f0 e0       	ldi	r31, 0x00	; 0
   12300:	e0 95       	com	r30
   12302:	f0 95       	com	r31
   12304:	e8 23       	and	r30, r24
   12306:	f9 23       	and	r31, r25
   12308:	11 96       	adiw	r26, 0x01	; 1
   1230a:	fc 93       	st	X, r31
   1230c:	ee 93       	st	-X, r30
	} else {
		*out |= bit;
	}

	SREG = oldSREG;
   1230e:	2f bf       	out	0x3f, r18	; 63
		}
		pindex = pwmDrive[j][0];
   12310:	f6 01       	movw	r30, r12
   12312:	c0 81       	ld	r28, Z
		if(pindex != 255) {
   12314:	cf 3f       	cpi	r28, 0xFF	; 255
   12316:	c1 f1       	breq	.+112    	; 0x12388 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x1f0>
			ppwms[pindex]->init(ppwms[pindex]->pin);
   12318:	d0 e0       	ldi	r29, 0x00	; 0
   1231a:	cc 0f       	add	r28, r28
   1231c:	dd 1f       	adc	r29, r29
   1231e:	d7 01       	movw	r26, r14
   12320:	15 96       	adiw	r26, 0x05	; 5
   12322:	ed 91       	ld	r30, X+
   12324:	fc 91       	ld	r31, X
   12326:	16 97       	sbiw	r26, 0x06	; 6
   12328:	ec 0f       	add	r30, r28
   1232a:	fd 1f       	adc	r31, r29
   1232c:	80 81       	ld	r24, Z
   1232e:	91 81       	ldd	r25, Z+1	; 0x01
   12330:	fc 01       	movw	r30, r24
   12332:	60 81       	ld	r22, Z
   12334:	0e 94 6d a3 	call	0x146da	; 0x146da <_ZN3PWM4initEh>
			ppwms[pindex]->setPWMPrescale(pwmDrive[j][2]);
   12338:	d7 01       	movw	r26, r14
   1233a:	15 96       	adiw	r26, 0x05	; 5
   1233c:	ed 91       	ld	r30, X+
   1233e:	fc 91       	ld	r31, X
   12340:	16 97       	sbiw	r26, 0x06	; 6
   12342:	ec 0f       	add	r30, r28
   12344:	fd 1f       	adc	r31, r29
   12346:	d6 01       	movw	r26, r12
   12348:	12 96       	adiw	r26, 0x02	; 2
   1234a:	6c 91       	ld	r22, X
   1234c:	80 81       	ld	r24, Z
   1234e:	91 81       	ldd	r25, Z+1	; 0x01
   12350:	0e 94 76 a2 	call	0x144ec	; 0x144ec <_ZN3PWM14setPWMPrescaleEh>
			ppwms[pindex]->setPWMResolution(pwmDrive[j][3]);
   12354:	d7 01       	movw	r26, r14
   12356:	15 96       	adiw	r26, 0x05	; 5
   12358:	ed 91       	ld	r30, X+
   1235a:	fc 91       	ld	r31, X
   1235c:	16 97       	sbiw	r26, 0x06	; 6
   1235e:	ec 0f       	add	r30, r28
   12360:	fd 1f       	adc	r31, r29
   12362:	d6 01       	movw	r26, r12
   12364:	13 96       	adiw	r26, 0x03	; 3
   12366:	6c 91       	ld	r22, X
   12368:	80 81       	ld	r24, Z
   1236a:	91 81       	ldd	r25, Z+1	; 0x01
   1236c:	0e 94 54 a2 	call	0x144a8	; 0x144a8 <_ZN3PWM16setPWMResolutionEh>
			ppwms[pindex]->pwmOff();
   12370:	f7 01       	movw	r30, r14
   12372:	85 81       	ldd	r24, Z+5	; 0x05
   12374:	96 81       	ldd	r25, Z+6	; 0x06
   12376:	c8 0f       	add	r28, r24
   12378:	d9 1f       	adc	r29, r25
	uint8_t channel = 0;
	InterruptService* interruptService=NULL;
	PWM(uint8_t spin);
	void init(uint8_t spin);
	void pwmWrite(uint16_t val, uint8_t outputMode = 0b10);
	inline void pwmOff() { pwmWrite(0, 0); };
   1237a:	40 e0       	ldi	r20, 0x00	; 0
   1237c:	60 e0       	ldi	r22, 0x00	; 0
   1237e:	70 e0       	ldi	r23, 0x00	; 0
   12380:	88 81       	ld	r24, Y
   12382:	99 81       	ldd	r25, Y+1	; 0x01
   12384:	0e 94 12 a3 	call	0x14624	; 0x14624 <_ZN3PWM8pwmWriteEjh>
   12388:	0c 5f       	subi	r16, 0xFC	; 252
   1238a:	1f 4f       	sbci	r17, 0xFF	; 255
*/
#include "VariablePWMDriver.h"
#include "Configuration_adv.h"

int VariablePWMDriver::commandEmergencyStop(int status) {
	for(int j=0; j < 10; j++) {
   1238c:	0a 15       	cp	r16, r10
   1238e:	1b 05       	cpc	r17, r11
   12390:	09 f0       	breq	.+2      	; 0x12394 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x1fc>
   12392:	18 cf       	rjmp	.-464    	; 0x121c4 <_ZN17VariablePWMDriver20commandEmergencyStopEi+0x2c>
			ppwms[pindex]->setPWMPrescale(pwmDrive[j][2]);
			ppwms[pindex]->setPWMResolution(pwmDrive[j][3]);
			ppwms[pindex]->pwmOff();
		}
	}
	fault_flag = 16;
   12394:	f7 01       	movw	r30, r14
   12396:	e8 56       	subi	r30, 0x68	; 104
   12398:	ff 4f       	sbci	r31, 0xFF	; 255
   1239a:	80 e1       	ldi	r24, 0x10	; 16
   1239c:	90 e0       	ldi	r25, 0x00	; 0
   1239e:	91 83       	std	Z+1, r25	; 0x01
   123a0:	80 83       	st	Z, r24
	resetLevels();
   123a2:	c7 01       	movw	r24, r14
   123a4:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <_ZN18AbstractPWMControl11resetLevelsEv>
	return status;
}
   123a8:	c4 01       	movw	r24, r8
   123aa:	df 91       	pop	r29
   123ac:	cf 91       	pop	r28
   123ae:	1f 91       	pop	r17
   123b0:	0f 91       	pop	r16
   123b2:	ff 90       	pop	r15
   123b4:	ef 90       	pop	r14
   123b6:	df 90       	pop	r13
   123b8:	cf 90       	pop	r12
   123ba:	bf 90       	pop	r11
   123bc:	af 90       	pop	r10
   123be:	9f 90       	pop	r9
   123c0:	8f 90       	pop	r8
   123c2:	7f 90       	pop	r7
   123c4:	08 95       	ret

000123c6 <_ZN17VariablePWMDriver13getDriverInfoEhPc>:
	ppwms[pindex]->pwmWrite(pwmPower, timer_mode);
	fault_flag = 0;
	return 0;
}

void VariablePWMDriver::getDriverInfo(uint8_t ch, char* outStr) {
   123c6:	af 92       	push	r10
   123c8:	bf 92       	push	r11
   123ca:	cf 92       	push	r12
   123cc:	df 92       	push	r13
   123ce:	ef 92       	push	r14
   123d0:	ff 92       	push	r15
   123d2:	0f 93       	push	r16
   123d4:	1f 93       	push	r17
   123d6:	cf 93       	push	r28
   123d8:	df 93       	push	r29
   123da:	cd b7       	in	r28, 0x3d	; 61
   123dc:	de b7       	in	r29, 0x3e	; 62
   123de:	cb 54       	subi	r28, 0x4B	; 75
   123e0:	d1 40       	sbci	r29, 0x01	; 1
   123e2:	0f b6       	in	r0, 0x3f	; 63
   123e4:	f8 94       	cli
   123e6:	de bf       	out	0x3e, r29	; 62
   123e8:	0f be       	out	0x3f, r0	; 63
   123ea:	cd bf       	out	0x3d, r28	; 61
   123ec:	7c 01       	movw	r14, r24
   123ee:	8a 01       	movw	r16, r20
	char dpin5[5];
	char dpin6[5];
	char dpin7[5];
	char dpin8[5];
	char dpin9[5];
	if( pwmDrive[ch-1][0] == 255 ) {
   123f0:	c6 2e       	mov	r12, r22
   123f2:	d1 2c       	mov	r13, r1
   123f4:	81 e0       	ldi	r24, 0x01	; 1
   123f6:	c8 1a       	sub	r12, r24
   123f8:	d1 08       	sbc	r13, r1
   123fa:	f6 01       	movw	r30, r12
   123fc:	ee 0f       	add	r30, r30
   123fe:	ff 1f       	adc	r31, r31
   12400:	ee 0f       	add	r30, r30
   12402:	ff 1f       	adc	r31, r31
   12404:	ee 0d       	add	r30, r14
   12406:	ff 1d       	adc	r31, r15
   12408:	e1 85       	ldd	r30, Z+9	; 0x09
   1240a:	ef 3f       	cpi	r30, 0xFF	; 255
   1240c:	89 f4       	brne	.+34     	; 0x12430 <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x6a>
   1240e:	4a e0       	ldi	r20, 0x0A	; 10
   12410:	be 01       	movw	r22, r28
   12412:	6f 5f       	subi	r22, 0xFF	; 255
   12414:	7e 4f       	sbci	r23, 0xFE	; 254
   12416:	8f ef       	ldi	r24, 0xFF	; 255
   12418:	9f ef       	ldi	r25, 0xFF	; 255
   1241a:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
   1241e:	4a e0       	ldi	r20, 0x0A	; 10
   12420:	be 01       	movw	r22, r28
   12422:	6a 5f       	subi	r22, 0xFA	; 250
   12424:	7e 4f       	sbci	r23, 0xFE	; 254
   12426:	8f ef       	ldi	r24, 0xFF	; 255
   12428:	9f ef       	ldi	r25, 0xFF	; 255
   1242a:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
   1242e:	32 c0       	rjmp	.+100    	; 0x12494 <_ZN17VariablePWMDriver13getDriverInfoEhPc+0xce>
		itoa(-1, dout1, 10);
		itoa(-1, dout2, 10);
	} else {
		itoa(ppwms[pwmDrive[ch-1][0]]->pin, dout1, 10);
   12430:	f0 e0       	ldi	r31, 0x00	; 0
   12432:	ee 0f       	add	r30, r30
   12434:	ff 1f       	adc	r31, r31
   12436:	d7 01       	movw	r26, r14
   12438:	15 96       	adiw	r26, 0x05	; 5
   1243a:	8d 91       	ld	r24, X+
   1243c:	9c 91       	ld	r25, X
   1243e:	16 97       	sbiw	r26, 0x06	; 6
   12440:	e8 0f       	add	r30, r24
   12442:	f9 1f       	adc	r31, r25
   12444:	01 90       	ld	r0, Z+
   12446:	f0 81       	ld	r31, Z
   12448:	e0 2d       	mov	r30, r0
   1244a:	80 81       	ld	r24, Z
   1244c:	4a e0       	ldi	r20, 0x0A	; 10
   1244e:	be 01       	movw	r22, r28
   12450:	6f 5f       	subi	r22, 0xFF	; 255
   12452:	7e 4f       	sbci	r23, 0xFE	; 254
   12454:	90 e0       	ldi	r25, 0x00	; 0
   12456:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(ppwms[pwmDrive[ch-1][0]]->mode, dout2, 10);
   1245a:	f6 01       	movw	r30, r12
   1245c:	ee 0f       	add	r30, r30
   1245e:	ff 1f       	adc	r31, r31
   12460:	ee 0f       	add	r30, r30
   12462:	ff 1f       	adc	r31, r31
   12464:	ee 0d       	add	r30, r14
   12466:	ff 1d       	adc	r31, r15
   12468:	e1 85       	ldd	r30, Z+9	; 0x09
   1246a:	f0 e0       	ldi	r31, 0x00	; 0
   1246c:	ee 0f       	add	r30, r30
   1246e:	ff 1f       	adc	r31, r31
   12470:	d7 01       	movw	r26, r14
   12472:	15 96       	adiw	r26, 0x05	; 5
   12474:	8d 91       	ld	r24, X+
   12476:	9c 91       	ld	r25, X
   12478:	16 97       	sbiw	r26, 0x06	; 6
   1247a:	e8 0f       	add	r30, r24
   1247c:	f9 1f       	adc	r31, r25
   1247e:	01 90       	ld	r0, Z+
   12480:	f0 81       	ld	r31, Z
   12482:	e0 2d       	mov	r30, r0
   12484:	81 81       	ldd	r24, Z+1	; 0x01
   12486:	4a e0       	ldi	r20, 0x0A	; 10
   12488:	be 01       	movw	r22, r28
   1248a:	6a 5f       	subi	r22, 0xFA	; 250
   1248c:	7e 4f       	sbci	r23, 0xFE	; 254
   1248e:	90 e0       	ldi	r25, 0x00	; 0
   12490:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
	}	
	itoa(pwmDrive[ch-1][1], dout3, 10);
   12494:	56 01       	movw	r10, r12
   12496:	aa 0c       	add	r10, r10
   12498:	bb 1c       	adc	r11, r11
   1249a:	aa 0c       	add	r10, r10
   1249c:	bb 1c       	adc	r11, r11
   1249e:	ae 0c       	add	r10, r14
   124a0:	bf 1c       	adc	r11, r15
   124a2:	f5 01       	movw	r30, r10
   124a4:	82 85       	ldd	r24, Z+10	; 0x0a
   124a6:	4a e0       	ldi	r20, 0x0A	; 10
   124a8:	be 01       	movw	r22, r28
   124aa:	65 5f       	subi	r22, 0xF5	; 245
   124ac:	7e 4f       	sbci	r23, 0xFE	; 254
   124ae:	90 e0       	ldi	r25, 0x00	; 0
   124b0:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
   124b4:	d5 01       	movw	r26, r10
   124b6:	1b 96       	adiw	r26, 0x0b	; 11
   124b8:	8c 91       	ld	r24, X
   124ba:	4a e0       	ldi	r20, 0x0A	; 10
   124bc:	be 01       	movw	r22, r28
   124be:	60 5f       	subi	r22, 0xF0	; 240
   124c0:	7e 4f       	sbci	r23, 0xFE	; 254
   124c2:	90 e0       	ldi	r25, 0x00	; 0
   124c4:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
	itoa(pwmDrive[ch-1][2], dout4, 10);
	itoa(pwmDrive[ch-1][3], dout5, 10);
   124c8:	f6 01       	movw	r30, r12
   124ca:	33 96       	adiw	r30, 0x03	; 3
   124cc:	ee 0f       	add	r30, r30
   124ce:	ff 1f       	adc	r31, r31
   124d0:	ee 0f       	add	r30, r30
   124d2:	ff 1f       	adc	r31, r31
   124d4:	ee 0d       	add	r30, r14
   124d6:	ff 1d       	adc	r31, r15
   124d8:	80 81       	ld	r24, Z
   124da:	4a e0       	ldi	r20, 0x0A	; 10
   124dc:	be 01       	movw	r22, r28
   124de:	6b 5e       	subi	r22, 0xEB	; 235
   124e0:	7e 4f       	sbci	r23, 0xFE	; 254
   124e2:	90 e0       	ldi	r25, 0x00	; 0
   124e4:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
	if(pdigitals[0])
   124e8:	d7 01       	movw	r26, r14
   124ea:	17 96       	adiw	r26, 0x07	; 7
   124ec:	ed 91       	ld	r30, X+
   124ee:	fc 91       	ld	r31, X
   124f0:	18 97       	sbiw	r26, 0x08	; 8
   124f2:	01 90       	ld	r0, Z+
   124f4:	f0 81       	ld	r31, Z
   124f6:	e0 2d       	mov	r30, r0
   124f8:	30 97       	sbiw	r30, 0x00	; 0
   124fa:	49 f0       	breq	.+18     	; 0x1250e <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x148>
   124fc:	80 81       	ld	r24, Z
   124fe:	4a e0       	ldi	r20, 0x0A	; 10
   12500:	be 01       	movw	r22, r28
   12502:	66 5e       	subi	r22, 0xE6	; 230
   12504:	7e 4f       	sbci	r23, 0xFE	; 254
   12506:	90 e0       	ldi	r25, 0x00	; 0
   12508:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
   1250c:	08 c0       	rjmp	.+16     	; 0x1251e <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x158>
   1250e:	4a e0       	ldi	r20, 0x0A	; 10
   12510:	be 01       	movw	r22, r28
   12512:	66 5e       	subi	r22, 0xE6	; 230
   12514:	7e 4f       	sbci	r23, 0xFE	; 254
   12516:	80 e0       	ldi	r24, 0x00	; 0
   12518:	90 e0       	ldi	r25, 0x00	; 0
   1251a:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[0]->pin, dpin0, 10);
	else
		itoa(0, dpin0, 10);
	if(pdigitals[1])
   1251e:	d7 01       	movw	r26, r14
   12520:	17 96       	adiw	r26, 0x07	; 7
   12522:	ed 91       	ld	r30, X+
   12524:	fc 91       	ld	r31, X
   12526:	18 97       	sbiw	r26, 0x08	; 8
   12528:	02 80       	ldd	r0, Z+2	; 0x02
   1252a:	f3 81       	ldd	r31, Z+3	; 0x03
   1252c:	e0 2d       	mov	r30, r0
   1252e:	30 97       	sbiw	r30, 0x00	; 0
   12530:	49 f0       	breq	.+18     	; 0x12544 <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x17e>
   12532:	80 81       	ld	r24, Z
   12534:	4a e0       	ldi	r20, 0x0A	; 10
   12536:	be 01       	movw	r22, r28
   12538:	61 5e       	subi	r22, 0xE1	; 225
   1253a:	7e 4f       	sbci	r23, 0xFE	; 254
   1253c:	90 e0       	ldi	r25, 0x00	; 0
   1253e:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
   12542:	08 c0       	rjmp	.+16     	; 0x12554 <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x18e>
   12544:	4a e0       	ldi	r20, 0x0A	; 10
   12546:	be 01       	movw	r22, r28
   12548:	61 5e       	subi	r22, 0xE1	; 225
   1254a:	7e 4f       	sbci	r23, 0xFE	; 254
   1254c:	80 e0       	ldi	r24, 0x00	; 0
   1254e:	90 e0       	ldi	r25, 0x00	; 0
   12550:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[1]->pin, dpin1, 10);
	else
		itoa(0, dpin1, 10);
	if(pdigitals[2])
   12554:	d7 01       	movw	r26, r14
   12556:	17 96       	adiw	r26, 0x07	; 7
   12558:	ed 91       	ld	r30, X+
   1255a:	fc 91       	ld	r31, X
   1255c:	18 97       	sbiw	r26, 0x08	; 8
   1255e:	04 80       	ldd	r0, Z+4	; 0x04
   12560:	f5 81       	ldd	r31, Z+5	; 0x05
   12562:	e0 2d       	mov	r30, r0
   12564:	30 97       	sbiw	r30, 0x00	; 0
   12566:	49 f0       	breq	.+18     	; 0x1257a <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x1b4>
   12568:	80 81       	ld	r24, Z
   1256a:	4a e0       	ldi	r20, 0x0A	; 10
   1256c:	be 01       	movw	r22, r28
   1256e:	6c 5d       	subi	r22, 0xDC	; 220
   12570:	7e 4f       	sbci	r23, 0xFE	; 254
   12572:	90 e0       	ldi	r25, 0x00	; 0
   12574:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
   12578:	08 c0       	rjmp	.+16     	; 0x1258a <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x1c4>
   1257a:	4a e0       	ldi	r20, 0x0A	; 10
   1257c:	be 01       	movw	r22, r28
   1257e:	6c 5d       	subi	r22, 0xDC	; 220
   12580:	7e 4f       	sbci	r23, 0xFE	; 254
   12582:	80 e0       	ldi	r24, 0x00	; 0
   12584:	90 e0       	ldi	r25, 0x00	; 0
   12586:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[2]->pin, dpin2, 10);
	else
		itoa(0, dpin2, 10);
	if(pdigitals[3])
   1258a:	d7 01       	movw	r26, r14
   1258c:	17 96       	adiw	r26, 0x07	; 7
   1258e:	ed 91       	ld	r30, X+
   12590:	fc 91       	ld	r31, X
   12592:	18 97       	sbiw	r26, 0x08	; 8
   12594:	06 80       	ldd	r0, Z+6	; 0x06
   12596:	f7 81       	ldd	r31, Z+7	; 0x07
   12598:	e0 2d       	mov	r30, r0
   1259a:	30 97       	sbiw	r30, 0x00	; 0
   1259c:	49 f0       	breq	.+18     	; 0x125b0 <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x1ea>
   1259e:	80 81       	ld	r24, Z
   125a0:	4a e0       	ldi	r20, 0x0A	; 10
   125a2:	be 01       	movw	r22, r28
   125a4:	67 5d       	subi	r22, 0xD7	; 215
   125a6:	7e 4f       	sbci	r23, 0xFE	; 254
   125a8:	90 e0       	ldi	r25, 0x00	; 0
   125aa:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
   125ae:	08 c0       	rjmp	.+16     	; 0x125c0 <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x1fa>
   125b0:	4a e0       	ldi	r20, 0x0A	; 10
   125b2:	be 01       	movw	r22, r28
   125b4:	67 5d       	subi	r22, 0xD7	; 215
   125b6:	7e 4f       	sbci	r23, 0xFE	; 254
   125b8:	80 e0       	ldi	r24, 0x00	; 0
   125ba:	90 e0       	ldi	r25, 0x00	; 0
   125bc:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[3]->pin, dpin3, 10);
	else
		itoa(0, dpin3, 10);
	if(pdigitals[4])
   125c0:	d7 01       	movw	r26, r14
   125c2:	17 96       	adiw	r26, 0x07	; 7
   125c4:	ed 91       	ld	r30, X+
   125c6:	fc 91       	ld	r31, X
   125c8:	18 97       	sbiw	r26, 0x08	; 8
   125ca:	00 84       	ldd	r0, Z+8	; 0x08
   125cc:	f1 85       	ldd	r31, Z+9	; 0x09
   125ce:	e0 2d       	mov	r30, r0
   125d0:	30 97       	sbiw	r30, 0x00	; 0
   125d2:	49 f0       	breq	.+18     	; 0x125e6 <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x220>
   125d4:	80 81       	ld	r24, Z
   125d6:	4a e0       	ldi	r20, 0x0A	; 10
   125d8:	be 01       	movw	r22, r28
   125da:	62 5d       	subi	r22, 0xD2	; 210
   125dc:	7e 4f       	sbci	r23, 0xFE	; 254
   125de:	90 e0       	ldi	r25, 0x00	; 0
   125e0:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
   125e4:	08 c0       	rjmp	.+16     	; 0x125f6 <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x230>
   125e6:	4a e0       	ldi	r20, 0x0A	; 10
   125e8:	be 01       	movw	r22, r28
   125ea:	62 5d       	subi	r22, 0xD2	; 210
   125ec:	7e 4f       	sbci	r23, 0xFE	; 254
   125ee:	80 e0       	ldi	r24, 0x00	; 0
   125f0:	90 e0       	ldi	r25, 0x00	; 0
   125f2:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[4]->pin, dpin4, 10);
	else
		itoa(0, dpin4, 10);
	if(pdigitals[5])
   125f6:	d7 01       	movw	r26, r14
   125f8:	17 96       	adiw	r26, 0x07	; 7
   125fa:	ed 91       	ld	r30, X+
   125fc:	fc 91       	ld	r31, X
   125fe:	18 97       	sbiw	r26, 0x08	; 8
   12600:	02 84       	ldd	r0, Z+10	; 0x0a
   12602:	f3 85       	ldd	r31, Z+11	; 0x0b
   12604:	e0 2d       	mov	r30, r0
   12606:	30 97       	sbiw	r30, 0x00	; 0
   12608:	49 f0       	breq	.+18     	; 0x1261c <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x256>
   1260a:	80 81       	ld	r24, Z
   1260c:	4a e0       	ldi	r20, 0x0A	; 10
   1260e:	be 01       	movw	r22, r28
   12610:	6d 5c       	subi	r22, 0xCD	; 205
   12612:	7e 4f       	sbci	r23, 0xFE	; 254
   12614:	90 e0       	ldi	r25, 0x00	; 0
   12616:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
   1261a:	08 c0       	rjmp	.+16     	; 0x1262c <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x266>
   1261c:	4a e0       	ldi	r20, 0x0A	; 10
   1261e:	be 01       	movw	r22, r28
   12620:	6d 5c       	subi	r22, 0xCD	; 205
   12622:	7e 4f       	sbci	r23, 0xFE	; 254
   12624:	80 e0       	ldi	r24, 0x00	; 0
   12626:	90 e0       	ldi	r25, 0x00	; 0
   12628:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[5]->pin, dpin5, 10);
	else
		itoa(0, dpin5, 10);
	if(pdigitals[6])
   1262c:	d7 01       	movw	r26, r14
   1262e:	17 96       	adiw	r26, 0x07	; 7
   12630:	ed 91       	ld	r30, X+
   12632:	fc 91       	ld	r31, X
   12634:	18 97       	sbiw	r26, 0x08	; 8
   12636:	04 84       	ldd	r0, Z+12	; 0x0c
   12638:	f5 85       	ldd	r31, Z+13	; 0x0d
   1263a:	e0 2d       	mov	r30, r0
   1263c:	30 97       	sbiw	r30, 0x00	; 0
   1263e:	49 f0       	breq	.+18     	; 0x12652 <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x28c>
   12640:	80 81       	ld	r24, Z
   12642:	4a e0       	ldi	r20, 0x0A	; 10
   12644:	be 01       	movw	r22, r28
   12646:	68 5c       	subi	r22, 0xC8	; 200
   12648:	7e 4f       	sbci	r23, 0xFE	; 254
   1264a:	90 e0       	ldi	r25, 0x00	; 0
   1264c:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
   12650:	08 c0       	rjmp	.+16     	; 0x12662 <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x29c>
   12652:	4a e0       	ldi	r20, 0x0A	; 10
   12654:	be 01       	movw	r22, r28
   12656:	68 5c       	subi	r22, 0xC8	; 200
   12658:	7e 4f       	sbci	r23, 0xFE	; 254
   1265a:	80 e0       	ldi	r24, 0x00	; 0
   1265c:	90 e0       	ldi	r25, 0x00	; 0
   1265e:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[6]->pin, dpin6, 10);
	else
		itoa(0, dpin6, 10);
	if(pdigitals[7])
   12662:	d7 01       	movw	r26, r14
   12664:	17 96       	adiw	r26, 0x07	; 7
   12666:	ed 91       	ld	r30, X+
   12668:	fc 91       	ld	r31, X
   1266a:	18 97       	sbiw	r26, 0x08	; 8
   1266c:	06 84       	ldd	r0, Z+14	; 0x0e
   1266e:	f7 85       	ldd	r31, Z+15	; 0x0f
   12670:	e0 2d       	mov	r30, r0
   12672:	30 97       	sbiw	r30, 0x00	; 0
   12674:	49 f0       	breq	.+18     	; 0x12688 <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x2c2>
   12676:	80 81       	ld	r24, Z
   12678:	4a e0       	ldi	r20, 0x0A	; 10
   1267a:	be 01       	movw	r22, r28
   1267c:	63 5c       	subi	r22, 0xC3	; 195
   1267e:	7e 4f       	sbci	r23, 0xFE	; 254
   12680:	90 e0       	ldi	r25, 0x00	; 0
   12682:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
   12686:	08 c0       	rjmp	.+16     	; 0x12698 <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x2d2>
   12688:	4a e0       	ldi	r20, 0x0A	; 10
   1268a:	be 01       	movw	r22, r28
   1268c:	63 5c       	subi	r22, 0xC3	; 195
   1268e:	7e 4f       	sbci	r23, 0xFE	; 254
   12690:	80 e0       	ldi	r24, 0x00	; 0
   12692:	90 e0       	ldi	r25, 0x00	; 0
   12694:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[7]->pin, dpin7, 10);
	else
		itoa(0, dpin7, 10);
	if(pdigitals[8])
   12698:	d7 01       	movw	r26, r14
   1269a:	17 96       	adiw	r26, 0x07	; 7
   1269c:	ed 91       	ld	r30, X+
   1269e:	fc 91       	ld	r31, X
   126a0:	18 97       	sbiw	r26, 0x08	; 8
   126a2:	00 88       	ldd	r0, Z+16	; 0x10
   126a4:	f1 89       	ldd	r31, Z+17	; 0x11
   126a6:	e0 2d       	mov	r30, r0
   126a8:	30 97       	sbiw	r30, 0x00	; 0
   126aa:	49 f0       	breq	.+18     	; 0x126be <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x2f8>
   126ac:	80 81       	ld	r24, Z
   126ae:	4a e0       	ldi	r20, 0x0A	; 10
   126b0:	be 01       	movw	r22, r28
   126b2:	6e 5b       	subi	r22, 0xBE	; 190
   126b4:	7e 4f       	sbci	r23, 0xFE	; 254
   126b6:	90 e0       	ldi	r25, 0x00	; 0
   126b8:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
   126bc:	08 c0       	rjmp	.+16     	; 0x126ce <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x308>
   126be:	4a e0       	ldi	r20, 0x0A	; 10
   126c0:	be 01       	movw	r22, r28
   126c2:	6e 5b       	subi	r22, 0xBE	; 190
   126c4:	7e 4f       	sbci	r23, 0xFE	; 254
   126c6:	80 e0       	ldi	r24, 0x00	; 0
   126c8:	90 e0       	ldi	r25, 0x00	; 0
   126ca:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[8]->pin, dpin8, 10);
	else
		itoa(0, dpin8, 10);
	if(pdigitals[9])
   126ce:	d7 01       	movw	r26, r14
   126d0:	17 96       	adiw	r26, 0x07	; 7
   126d2:	ed 91       	ld	r30, X+
   126d4:	fc 91       	ld	r31, X
   126d6:	18 97       	sbiw	r26, 0x08	; 8
   126d8:	02 88       	ldd	r0, Z+18	; 0x12
   126da:	f3 89       	ldd	r31, Z+19	; 0x13
   126dc:	e0 2d       	mov	r30, r0
   126de:	30 97       	sbiw	r30, 0x00	; 0
   126e0:	49 f0       	breq	.+18     	; 0x126f4 <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x32e>
   126e2:	80 81       	ld	r24, Z
   126e4:	4a e0       	ldi	r20, 0x0A	; 10
   126e6:	be 01       	movw	r22, r28
   126e8:	69 5b       	subi	r22, 0xB9	; 185
   126ea:	7e 4f       	sbci	r23, 0xFE	; 254
   126ec:	90 e0       	ldi	r25, 0x00	; 0
   126ee:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
   126f2:	08 c0       	rjmp	.+16     	; 0x12704 <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x33e>
   126f4:	4a e0       	ldi	r20, 0x0A	; 10
   126f6:	be 01       	movw	r22, r28
   126f8:	69 5b       	subi	r22, 0xB9	; 185
   126fa:	7e 4f       	sbci	r23, 0xFE	; 254
   126fc:	80 e0       	ldi	r24, 0x00	; 0
   126fe:	90 e0       	ldi	r25, 0x00	; 0
   12700:	0e 94 4c ac 	call	0x15898	; 0x15898 <__itoa_ncheck>
		itoa(pdigitals[9]->pin, dpin9, 10);
	else
		itoa(0, dpin9, 10);
	if( pwmDrive[ch-1][0] == 255 ) {
   12704:	cc 0c       	add	r12, r12
   12706:	dd 1c       	adc	r13, r13
   12708:	cc 0c       	add	r12, r12
   1270a:	dd 1c       	adc	r13, r13
   1270c:	f7 01       	movw	r30, r14
   1270e:	ec 0d       	add	r30, r12
   12710:	fd 1d       	adc	r31, r13
   12712:	81 85       	ldd	r24, Z+9	; 0x09
   12714:	8f 3f       	cpi	r24, 0xFF	; 255
   12716:	09 f0       	breq	.+2      	; 0x1271a <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x354>
   12718:	3f c0       	rjmp	.+126    	; 0x12798 <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x3d2>
		sprintf(cout,"VP-PWM UNITIALIZED Pin:%s, Mode:%s, Enable Pin:%s, Timer Prescale:%s, Timer Res.:%s\r\nDir Pins:0=%s,1=%s,2=%s,3=%s,4=%s,5=%s,6=%s,7=%s,8=%s,9=%s\0",
			dout1, dout2 , dout3 , dout4 , dout5, dpin0, dpin1, dpin2, dpin3, dpin4, dpin5, dpin6, dpin7, dpin8, dpin9);
   1271a:	ce 01       	movw	r24, r28
   1271c:	89 5b       	subi	r24, 0xB9	; 185
   1271e:	9e 4f       	sbci	r25, 0xFE	; 254
   12720:	9f 93       	push	r25
   12722:	8f 93       	push	r24
   12724:	05 97       	sbiw	r24, 0x05	; 5
   12726:	9f 93       	push	r25
   12728:	8f 93       	push	r24
   1272a:	05 97       	sbiw	r24, 0x05	; 5
   1272c:	9f 93       	push	r25
   1272e:	8f 93       	push	r24
   12730:	05 97       	sbiw	r24, 0x05	; 5
   12732:	9f 93       	push	r25
   12734:	8f 93       	push	r24
   12736:	05 97       	sbiw	r24, 0x05	; 5
   12738:	9f 93       	push	r25
   1273a:	8f 93       	push	r24
   1273c:	05 97       	sbiw	r24, 0x05	; 5
   1273e:	9f 93       	push	r25
   12740:	8f 93       	push	r24
   12742:	05 97       	sbiw	r24, 0x05	; 5
   12744:	9f 93       	push	r25
   12746:	8f 93       	push	r24
   12748:	05 97       	sbiw	r24, 0x05	; 5
   1274a:	9f 93       	push	r25
   1274c:	8f 93       	push	r24
   1274e:	05 97       	sbiw	r24, 0x05	; 5
   12750:	9f 93       	push	r25
   12752:	8f 93       	push	r24
   12754:	05 97       	sbiw	r24, 0x05	; 5
   12756:	9f 93       	push	r25
   12758:	8f 93       	push	r24
   1275a:	05 97       	sbiw	r24, 0x05	; 5
   1275c:	9f 93       	push	r25
   1275e:	8f 93       	push	r24
   12760:	05 97       	sbiw	r24, 0x05	; 5
   12762:	9f 93       	push	r25
   12764:	8f 93       	push	r24
   12766:	05 97       	sbiw	r24, 0x05	; 5
   12768:	9f 93       	push	r25
   1276a:	8f 93       	push	r24
   1276c:	05 97       	sbiw	r24, 0x05	; 5
   1276e:	9f 93       	push	r25
   12770:	8f 93       	push	r24
   12772:	05 97       	sbiw	r24, 0x05	; 5
   12774:	9f 93       	push	r25
   12776:	8f 93       	push	r24
   12778:	85 e9       	ldi	r24, 0x95	; 149
   1277a:	96 e0       	ldi	r25, 0x06	; 6
   1277c:	9f 93       	push	r25
   1277e:	8f 93       	push	r24
   12780:	ce 01       	movw	r24, r28
   12782:	01 96       	adiw	r24, 0x01	; 1
   12784:	9f 93       	push	r25
   12786:	8f 93       	push	r24
   12788:	0e 94 6f ac 	call	0x158de	; 0x158de <sprintf>
   1278c:	0f b6       	in	r0, 0x3f	; 63
   1278e:	f8 94       	cli
   12790:	de bf       	out	0x3e, r29	; 62
   12792:	0f be       	out	0x3f, r0	; 63
   12794:	cd bf       	out	0x3d, r28	; 61
   12796:	47 c0       	rjmp	.+142    	; 0x12826 <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x460>
	} else {
		sprintf(cout,"VP-PWM Pin:%s, Mode:%s, Enable Pin:%s, Timer Prescale:%s, Timer Res.:%s\r\nDir Pins:0=%s,1=%s,2=%s,3=%s,4=%s,5=%s,6=%s,7=%s,8=%s,9=%s\0",
			dout1, dout2 , dout3 , dout4 , dout5, dpin0, dpin1, dpin2, dpin3, dpin4, dpin5, dpin6, dpin7, dpin8, dpin9);
   12798:	ce 01       	movw	r24, r28
   1279a:	89 5b       	subi	r24, 0xB9	; 185
   1279c:	9e 4f       	sbci	r25, 0xFE	; 254
   1279e:	9f 93       	push	r25
   127a0:	8f 93       	push	r24
   127a2:	05 97       	sbiw	r24, 0x05	; 5
   127a4:	9f 93       	push	r25
   127a6:	8f 93       	push	r24
   127a8:	05 97       	sbiw	r24, 0x05	; 5
   127aa:	9f 93       	push	r25
   127ac:	8f 93       	push	r24
   127ae:	05 97       	sbiw	r24, 0x05	; 5
   127b0:	9f 93       	push	r25
   127b2:	8f 93       	push	r24
   127b4:	05 97       	sbiw	r24, 0x05	; 5
   127b6:	9f 93       	push	r25
   127b8:	8f 93       	push	r24
   127ba:	05 97       	sbiw	r24, 0x05	; 5
   127bc:	9f 93       	push	r25
   127be:	8f 93       	push	r24
   127c0:	05 97       	sbiw	r24, 0x05	; 5
   127c2:	9f 93       	push	r25
   127c4:	8f 93       	push	r24
   127c6:	05 97       	sbiw	r24, 0x05	; 5
   127c8:	9f 93       	push	r25
   127ca:	8f 93       	push	r24
   127cc:	05 97       	sbiw	r24, 0x05	; 5
   127ce:	9f 93       	push	r25
   127d0:	8f 93       	push	r24
   127d2:	05 97       	sbiw	r24, 0x05	; 5
   127d4:	9f 93       	push	r25
   127d6:	8f 93       	push	r24
   127d8:	05 97       	sbiw	r24, 0x05	; 5
   127da:	9f 93       	push	r25
   127dc:	8f 93       	push	r24
   127de:	05 97       	sbiw	r24, 0x05	; 5
   127e0:	9f 93       	push	r25
   127e2:	8f 93       	push	r24
   127e4:	05 97       	sbiw	r24, 0x05	; 5
   127e6:	9f 93       	push	r25
   127e8:	8f 93       	push	r24
   127ea:	05 97       	sbiw	r24, 0x05	; 5
   127ec:	9f 93       	push	r25
   127ee:	8f 93       	push	r24
   127f0:	05 97       	sbiw	r24, 0x05	; 5
   127f2:	9f 93       	push	r25
   127f4:	8f 93       	push	r24
   127f6:	86 e2       	ldi	r24, 0x26	; 38
   127f8:	97 e0       	ldi	r25, 0x07	; 7
   127fa:	9f 93       	push	r25
   127fc:	8f 93       	push	r24
   127fe:	ce 01       	movw	r24, r28
   12800:	01 96       	adiw	r24, 0x01	; 1
   12802:	9f 93       	push	r25
   12804:	8f 93       	push	r24
   12806:	0e 94 6f ac 	call	0x158de	; 0x158de <sprintf>
   1280a:	0f b6       	in	r0, 0x3f	; 63
   1280c:	f8 94       	cli
   1280e:	de bf       	out	0x3e, r29	; 62
   12810:	0f be       	out	0x3f, r0	; 63
   12812:	cd bf       	out	0x3d, r28	; 61
   12814:	08 c0       	rjmp	.+16     	; 0x12826 <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x460>
	}
	 for(int i=0; i < OUT_BUFFER_SIZE; ++i){
		 outStr[i] = cout[i];
   12816:	81 91       	ld	r24, Z+
   12818:	8d 93       	st	X+, r24
		 if(!outStr[i])
   1281a:	88 23       	and	r24, r24
   1281c:	81 f0       	breq	.+32     	; 0x1283e <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x478>
			dout1, dout2 , dout3 , dout4 , dout5, dpin0, dpin1, dpin2, dpin3, dpin4, dpin5, dpin6, dpin7, dpin8, dpin9);
	} else {
		sprintf(cout,"VP-PWM Pin:%s, Mode:%s, Enable Pin:%s, Timer Prescale:%s, Timer Res.:%s\r\nDir Pins:0=%s,1=%s,2=%s,3=%s,4=%s,5=%s,6=%s,7=%s,8=%s,9=%s\0",
			dout1, dout2 , dout3 , dout4 , dout5, dpin0, dpin1, dpin2, dpin3, dpin4, dpin5, dpin6, dpin7, dpin8, dpin9);
	}
	 for(int i=0; i < OUT_BUFFER_SIZE; ++i){
   1281e:	e2 17       	cp	r30, r18
   12820:	f3 07       	cpc	r31, r19
   12822:	c9 f7       	brne	.-14     	; 0x12816 <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x450>
   12824:	0c c0       	rjmp	.+24     	; 0x1283e <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x478>
		 outStr[i] = cout[i];
   12826:	89 81       	ldd	r24, Y+1	; 0x01
   12828:	d8 01       	movw	r26, r16
   1282a:	8c 93       	st	X, r24
		 if(!outStr[i])
   1282c:	88 23       	and	r24, r24
   1282e:	39 f0       	breq	.+14     	; 0x1283e <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x478>
   12830:	fe 01       	movw	r30, r28
   12832:	32 96       	adiw	r30, 0x02	; 2
   12834:	11 96       	adiw	r26, 0x01	; 1
   12836:	9e 01       	movw	r18, r28
   12838:	2f 5f       	subi	r18, 0xFF	; 255
   1283a:	3e 4f       	sbci	r19, 0xFE	; 254
   1283c:	ec cf       	rjmp	.-40     	; 0x12816 <_ZN17VariablePWMDriver13getDriverInfoEhPc+0x450>
			 break;
	 }
}
   1283e:	c5 5b       	subi	r28, 0xB5	; 181
   12840:	de 4f       	sbci	r29, 0xFE	; 254
   12842:	0f b6       	in	r0, 0x3f	; 63
   12844:	f8 94       	cli
   12846:	de bf       	out	0x3e, r29	; 62
   12848:	0f be       	out	0x3f, r0	; 63
   1284a:	cd bf       	out	0x3d, r28	; 61
   1284c:	df 91       	pop	r29
   1284e:	cf 91       	pop	r28
   12850:	1f 91       	pop	r17
   12852:	0f 91       	pop	r16
   12854:	ff 90       	pop	r15
   12856:	ef 90       	pop	r14
   12858:	df 90       	pop	r13
   1285a:	cf 90       	pop	r12
   1285c:	bf 90       	pop	r11
   1285e:	af 90       	pop	r10
   12860:	08 95       	ret

00012862 <_ZN17VariablePWMDriver9createPWMEhhhii>:
* pin_number - the index in the PWM array defined in 'setPWM', this is the next blank slot available
* enable_pin - the enable pin for this channel. Assumed that low is disabled, high is enable.
* timer_pre - timer prescale default 1 = no prescale
* timer_res - timer resolution in bits - default 8
*/
void  VariablePWMDriver::createPWM(uint8_t channel, uint8_t pin_number, uint8_t enable_pin, int timer_pre, int timer_res) {
   12862:	af 92       	push	r10
   12864:	bf 92       	push	r11
   12866:	cf 92       	push	r12
   12868:	df 92       	push	r13
   1286a:	ef 92       	push	r14
   1286c:	0f 93       	push	r16
   1286e:	1f 93       	push	r17
   12870:	cf 93       	push	r28
   12872:	df 93       	push	r29
   12874:	6c 01       	movw	r12, r24
   12876:	d6 2f       	mov	r29, r22
   12878:	14 2f       	mov	r17, r20
   1287a:	c2 2f       	mov	r28, r18
	// Attempt to assign PWM pin, lock to 8 bits no prescale, mode 2 CTC
	if( getChannels() < channel ) setChannels(channel);
   1287c:	dc 01       	movw	r26, r24
   1287e:	12 96       	adiw	r26, 0x02	; 2
   12880:	8c 91       	ld	r24, X
   12882:	12 97       	sbiw	r26, 0x02	; 2
   12884:	86 17       	cp	r24, r22
   12886:	10 f4       	brcc	.+4      	; 0x1288c <_ZN17VariablePWMDriver9createPWMEhhhii+0x2a>
	virtual int queryStatusFlag(void)=0;
	virtual void setMaxPWMLevel(int p)=0;
	uint32_t getMaxPWMDuration(uint8_t ch) { return maxPWMDuration[ch-1]; }
	uint32_t getMinPWMLevel(uint8_t ch) { return minPWMLevel[ch-1] ; }
	int getPWMLevel(uint8_t ch) { return pwmLevel[ch-1]; }
	void setChannels(uint8_t ch) { channels = ch; }
   12888:	12 96       	adiw	r26, 0x02	; 2
   1288a:	6c 93       	st	X, r22
	int foundPin = 0;
	Digital* dpin;
	if( assignPin(pin_number) ) {
   1288c:	81 2f       	mov	r24, r17
   1288e:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_Z9assignPinh>
   12892:	88 23       	and	r24, r24
   12894:	09 f4       	brne	.+2      	; 0x12898 <_ZN17VariablePWMDriver9createPWMEhhhii+0x36>
   12896:	c8 c0       	rjmp	.+400    	; 0x12a28 <_ZN17VariablePWMDriver9createPWMEhhhii+0x1c6>
		// Set up the digital enable pin, we want to be able to re-use these pins for multiple channels on 1 controller	
		if( assignPin(enable_pin) ) {
   12898:	8c 2f       	mov	r24, r28
   1289a:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_Z9assignPinh>
   1289e:	81 11       	cpse	r24, r1
   128a0:	0a c0       	rjmp	.+20     	; 0x128b6 <_ZN17VariablePWMDriver9createPWMEhhhii+0x54>
				delete dpin;
				return; // no slots?
			}
		} else { // cant assign, it may be already assigned
			for(int i = 0; i < 10; i++) {
				if(pdigitals[i]->pin == enable_pin) {
   128a2:	f6 01       	movw	r30, r12
   128a4:	a7 81       	ldd	r26, Z+7	; 0x07
   128a6:	b0 85       	ldd	r27, Z+8	; 0x08
   128a8:	ed 91       	ld	r30, X+
   128aa:	fc 91       	ld	r31, X
   128ac:	11 97       	sbiw	r26, 0x01	; 1
   128ae:	80 81       	ld	r24, Z
   128b0:	c8 13       	cpse	r28, r24
   128b2:	3d c0       	rjmp	.+122    	; 0x1292e <_ZN17VariablePWMDriver9createPWMEhhhii+0xcc>
   128b4:	4a c0       	rjmp	.+148    	; 0x1294a <_ZN17VariablePWMDriver9createPWMEhhhii+0xe8>
	int foundPin = 0;
	Digital* dpin;
	if( assignPin(pin_number) ) {
		// Set up the digital enable pin, we want to be able to re-use these pins for multiple channels on 1 controller	
		if( assignPin(enable_pin) ) {
			Digital* dpin = new Digital(enable_pin);
   128b6:	82 e0       	ldi	r24, 0x02	; 2
   128b8:	90 e0       	ldi	r25, 0x00	; 0
   128ba:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
class Digital {
	public:
	uint8_t pin;
	uint8_t mode = INPUT; // default
	Digital(uint8_t spin) {
		this->pin = spin;
   128be:	dc 01       	movw	r26, r24
   128c0:	cc 93       	st	X, r28
	}
	
void setPin(uint8_t spin) { this->pin = spin; }
	
void pinMode(uint8_t pmode) {
	this->mode = pmode;
   128c2:	21 e0       	ldi	r18, 0x01	; 1
   128c4:	11 96       	adiw	r26, 0x01	; 1
   128c6:	2c 93       	st	X, r18
	uint8_t bit = digitalPinToBitMask(this->pin);
   128c8:	2c 2f       	mov	r18, r28
   128ca:	30 e0       	ldi	r19, 0x00	; 0
   128cc:	f9 01       	movw	r30, r18
   128ce:	ef 5e       	subi	r30, 0xEF	; 239
   128d0:	fa 4e       	sbci	r31, 0xEA	; 234
   128d2:	44 91       	lpm	r20, Z
	uint8_t port = digitalPinToPort(this->pin);
   128d4:	f9 01       	movw	r30, r18
   128d6:	e9 5a       	subi	r30, 0xA9	; 169
   128d8:	fa 4e       	sbci	r31, 0xEA	; 234
   128da:	24 91       	lpm	r18, Z
	volatile uint16_t *reg, *out;

	if (port == NOT_A_PIN) return;
   128dc:	22 23       	and	r18, r18
   128de:	09 f4       	brne	.+2      	; 0x128e2 <_ZN17VariablePWMDriver9createPWMEhhhii+0x80>
   128e0:	89 c0       	rjmp	.+274    	; 0x129f4 <_ZN17VariablePWMDriver9createPWMEhhhii+0x192>

	reg = portModeRegister(port);
   128e2:	30 e0       	ldi	r19, 0x00	; 0
   128e4:	22 0f       	add	r18, r18
   128e6:	33 1f       	adc	r19, r19
   128e8:	f9 01       	movw	r30, r18
   128ea:	e9 54       	subi	r30, 0x49	; 73
   128ec:	fa 4e       	sbci	r31, 0xEA	; 234
   128ee:	a5 91       	lpm	r26, Z+
   128f0:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
   128f2:	23 56       	subi	r18, 0x63	; 99
   128f4:	3a 4e       	sbci	r19, 0xEA	; 234
   128f6:	f9 01       	movw	r30, r18
   128f8:	25 91       	lpm	r18, Z+
   128fa:	34 91       	lpm	r19, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
   128fc:	5f b7       	in	r21, 0x3f	; 63
                cli();
   128fe:	f8 94       	cli
		*reg |= bit;
   12900:	2d 91       	ld	r18, X+
   12902:	3c 91       	ld	r19, X
   12904:	11 97       	sbiw	r26, 0x01	; 1
   12906:	24 2b       	or	r18, r20
   12908:	11 96       	adiw	r26, 0x01	; 1
   1290a:	3c 93       	st	X, r19
   1290c:	2e 93       	st	-X, r18
		SREG = oldSREG;
   1290e:	5f bf       	out	0x3f, r21	; 63
   12910:	71 c0       	rjmp	.+226    	; 0x129f4 <_ZN17VariablePWMDriver9createPWMEhhhii+0x192>
			dpin->pinMode(OUTPUT);
			for(int i = 0; i < 10; i++) {
				if(!pdigitals[i]) {
   12912:	f9 01       	movw	r30, r18
   12914:	2e 5f       	subi	r18, 0xFE	; 254
   12916:	3f 4f       	sbci	r19, 0xFF	; 255
   12918:	40 81       	ld	r20, Z
   1291a:	51 81       	ldd	r21, Z+1	; 0x01
   1291c:	45 2b       	or	r20, r21
   1291e:	19 f4       	brne	.+6      	; 0x12926 <_ZN17VariablePWMDriver9createPWMEhhhii+0xc4>
					pdigitals[i] = dpin;
   12920:	91 83       	std	Z+1, r25	; 0x01
   12922:	80 83       	st	Z, r24
   12924:	12 c0       	rjmp	.+36     	; 0x1294a <_ZN17VariablePWMDriver9createPWMEhhhii+0xe8>
	if( assignPin(pin_number) ) {
		// Set up the digital enable pin, we want to be able to re-use these pins for multiple channels on 1 controller	
		if( assignPin(enable_pin) ) {
			Digital* dpin = new Digital(enable_pin);
			dpin->pinMode(OUTPUT);
			for(int i = 0; i < 10; i++) {
   12926:	62 17       	cp	r22, r18
   12928:	73 07       	cpc	r23, r19
   1292a:	99 f7       	brne	.-26     	; 0x12912 <_ZN17VariablePWMDriver9createPWMEhhhii+0xb0>
   1292c:	74 c0       	rjmp	.+232    	; 0x12a16 <_ZN17VariablePWMDriver9createPWMEhhhii+0x1b4>
   1292e:	fd 01       	movw	r30, r26
   12930:	32 96       	adiw	r30, 0x02	; 2
   12932:	9d 01       	movw	r18, r26
   12934:	2c 5e       	subi	r18, 0xEC	; 236
   12936:	3f 4f       	sbci	r19, 0xFF	; 255
				delete dpin;
				return; // no slots?
			}
		} else { // cant assign, it may be already assigned
			for(int i = 0; i < 10; i++) {
				if(pdigitals[i]->pin == enable_pin) {
   12938:	a1 91       	ld	r26, Z+
   1293a:	b1 91       	ld	r27, Z+
   1293c:	8c 91       	ld	r24, X
   1293e:	c8 17       	cp	r28, r24
   12940:	21 f0       	breq	.+8      	; 0x1294a <_ZN17VariablePWMDriver9createPWMEhhhii+0xe8>
			if(!foundPin) {
				delete dpin;
				return; // no slots?
			}
		} else { // cant assign, it may be already assigned
			for(int i = 0; i < 10; i++) {
   12942:	e2 17       	cp	r30, r18
   12944:	f3 07       	cpc	r31, r19
   12946:	c1 f7       	brne	.-16     	; 0x12938 <_ZN17VariablePWMDriver9createPWMEhhhii+0xd6>
   12948:	6f c0       	rjmp	.+222    	; 0x12a28 <_ZN17VariablePWMDriver9createPWMEhhhii+0x1c6>
			}
		}
		// find slot for new PWM pin and init
		int pindex;
		for(pindex = 0; pindex < 10; pindex++) {
			if( !ppwms[pindex] )
   1294a:	f6 01       	movw	r30, r12
   1294c:	a5 81       	ldd	r26, Z+5	; 0x05
   1294e:	b6 81       	ldd	r27, Z+6	; 0x06
   12950:	8d 91       	ld	r24, X+
   12952:	9c 91       	ld	r25, X
   12954:	11 97       	sbiw	r26, 0x01	; 1
   12956:	89 2b       	or	r24, r25
   12958:	09 f4       	brne	.+2      	; 0x1295c <_ZN17VariablePWMDriver9createPWMEhhhii+0xfa>
   1295a:	60 c0       	rjmp	.+192    	; 0x12a1c <_ZN17VariablePWMDriver9createPWMEhhhii+0x1ba>
   1295c:	fd 01       	movw	r30, r26
   1295e:	32 96       	adiw	r30, 0x02	; 2
					return; // slots full...
			}
		}
		// find slot for new PWM pin and init
		int pindex;
		for(pindex = 0; pindex < 10; pindex++) {
   12960:	81 e0       	ldi	r24, 0x01	; 1
   12962:	90 e0       	ldi	r25, 0x00	; 0
			if( !ppwms[pindex] )
   12964:	21 91       	ld	r18, Z+
   12966:	31 91       	ld	r19, Z+
   12968:	23 2b       	or	r18, r19
   1296a:	09 f4       	brne	.+2      	; 0x1296e <_ZN17VariablePWMDriver9createPWMEhhhii+0x10c>
   1296c:	59 c0       	rjmp	.+178    	; 0x12a20 <_ZN17VariablePWMDriver9createPWMEhhhii+0x1be>
					return; // slots full...
			}
		}
		// find slot for new PWM pin and init
		int pindex;
		for(pindex = 0; pindex < 10; pindex++) {
   1296e:	01 96       	adiw	r24, 0x01	; 1
   12970:	8a 30       	cpi	r24, 0x0A	; 10
   12972:	91 05       	cpc	r25, r1
   12974:	b9 f7       	brne	.-18     	; 0x12964 <_ZN17VariablePWMDriver9createPWMEhhhii+0x102>
			if( !ppwms[pindex] )
			break;
		}
		if( ppwms[pindex] ) // already assigned, slots full
   12976:	54 96       	adiw	r26, 0x14	; 20
   12978:	2d 91       	ld	r18, X+
   1297a:	3c 91       	ld	r19, X
   1297c:	55 97       	sbiw	r26, 0x15	; 21
   1297e:	23 2b       	or	r18, r19
   12980:	09 f0       	breq	.+2      	; 0x12984 <_ZN17VariablePWMDriver9createPWMEhhhii+0x122>
   12982:	52 c0       	rjmp	.+164    	; 0x12a28 <_ZN17VariablePWMDriver9createPWMEhhhii+0x1c6>
   12984:	0f 2e       	mov	r0, r31
   12986:	f4 e1       	ldi	r31, 0x14	; 20
   12988:	af 2e       	mov	r10, r31
   1298a:	b1 2c       	mov	r11, r1
   1298c:	f0 2d       	mov	r31, r0
			return;
				
		pwmDrive[channel-1][0] = pindex;
   1298e:	2d 2f       	mov	r18, r29
   12990:	30 e0       	ldi	r19, 0x00	; 0
   12992:	f9 01       	movw	r30, r18
   12994:	31 97       	sbiw	r30, 0x01	; 1
   12996:	ee 0f       	add	r30, r30
   12998:	ff 1f       	adc	r31, r31
   1299a:	ee 0f       	add	r30, r30
   1299c:	ff 1f       	adc	r31, r31
   1299e:	ec 0d       	add	r30, r12
   129a0:	fd 1d       	adc	r31, r13
   129a2:	81 87       	std	Z+9, r24	; 0x09
		pwmDrive[channel-1][1] = enable_pin;
   129a4:	c2 87       	std	Z+10, r28	; 0x0a
		pwmDrive[channel-1][2] = timer_pre;
   129a6:	03 87       	std	Z+11, r16	; 0x0b
		pwmDrive[channel-1][3] = timer_res;
   129a8:	f9 01       	movw	r30, r18
   129aa:	32 96       	adiw	r30, 0x02	; 2
   129ac:	ee 0f       	add	r30, r30
   129ae:	ff 1f       	adc	r31, r31
   129b0:	ee 0f       	add	r30, r30
   129b2:	ff 1f       	adc	r31, r31
   129b4:	ec 0d       	add	r30, r12
   129b6:	fd 1d       	adc	r31, r13
   129b8:	e0 82       	st	Z, r14
		PWM* ppin = new PWM(pin_number);
   129ba:	87 e0       	ldi	r24, 0x07	; 7
   129bc:	90 e0       	ldi	r25, 0x00	; 0
   129be:	0e 94 b9 89 	call	0x11372	; 0x11372 <_Znwj>
   129c2:	ec 01       	movw	r28, r24
   129c4:	61 2f       	mov	r22, r17
   129c6:	0e 94 64 a3 	call	0x146c8	; 0x146c8 <_ZN3PWMC1Eh>
		ppwms[pindex] = ppin;
   129ca:	d6 01       	movw	r26, r12
   129cc:	15 96       	adiw	r26, 0x05	; 5
   129ce:	ed 91       	ld	r30, X+
   129d0:	fc 91       	ld	r31, X
   129d2:	16 97       	sbiw	r26, 0x06	; 6
   129d4:	ea 0d       	add	r30, r10
   129d6:	fb 1d       	adc	r31, r11
   129d8:	d1 83       	std	Z+1, r29	; 0x01
   129da:	c0 83       	st	Z, r28
		ppwms[pindex]->init(pin_number);
   129dc:	15 96       	adiw	r26, 0x05	; 5
   129de:	ed 91       	ld	r30, X+
   129e0:	fc 91       	ld	r31, X
   129e2:	16 97       	sbiw	r26, 0x06	; 6
   129e4:	ea 0d       	add	r30, r10
   129e6:	fb 1d       	adc	r31, r11
   129e8:	61 2f       	mov	r22, r17
   129ea:	80 81       	ld	r24, Z
   129ec:	91 81       	ldd	r25, Z+1	; 0x01
   129ee:	0e 94 6d a3 	call	0x146da	; 0x146da <_ZN3PWM4initEh>
   129f2:	1a c0       	rjmp	.+52     	; 0x12a28 <_ZN17VariablePWMDriver9createPWMEhhhii+0x1c6>
		// Set up the digital enable pin, we want to be able to re-use these pins for multiple channels on 1 controller	
		if( assignPin(enable_pin) ) {
			Digital* dpin = new Digital(enable_pin);
			dpin->pinMode(OUTPUT);
			for(int i = 0; i < 10; i++) {
				if(!pdigitals[i]) {
   129f4:	d6 01       	movw	r26, r12
   129f6:	17 96       	adiw	r26, 0x07	; 7
   129f8:	ed 91       	ld	r30, X+
   129fa:	fc 91       	ld	r31, X
   129fc:	18 97       	sbiw	r26, 0x08	; 8
   129fe:	20 81       	ld	r18, Z
   12a00:	31 81       	ldd	r19, Z+1	; 0x01
   12a02:	23 2b       	or	r18, r19
   12a04:	09 f4       	brne	.+2      	; 0x12a08 <_ZN17VariablePWMDriver9createPWMEhhhii+0x1a6>
   12a06:	8c cf       	rjmp	.-232    	; 0x12920 <_ZN17VariablePWMDriver9createPWMEhhhii+0xbe>
   12a08:	9f 01       	movw	r18, r30
   12a0a:	2e 5f       	subi	r18, 0xFE	; 254
   12a0c:	3f 4f       	sbci	r19, 0xFF	; 255
   12a0e:	bf 01       	movw	r22, r30
   12a10:	6c 5e       	subi	r22, 0xEC	; 236
   12a12:	7f 4f       	sbci	r23, 0xFF	; 255
   12a14:	7e cf       	rjmp	.-260    	; 0x12912 <_ZN17VariablePWMDriver9createPWMEhhhii+0xb0>
					foundPin = 1;
					break;
				}
			}
			if(!foundPin) {
				delete dpin;
   12a16:	0e 94 bc 89 	call	0x11378	; 0x11378 <_ZdlPv>
				return; // no slots?
   12a1a:	06 c0       	rjmp	.+12     	; 0x12a28 <_ZN17VariablePWMDriver9createPWMEhhhii+0x1c6>
					return; // slots full...
			}
		}
		// find slot for new PWM pin and init
		int pindex;
		for(pindex = 0; pindex < 10; pindex++) {
   12a1c:	80 e0       	ldi	r24, 0x00	; 0
   12a1e:	90 e0       	ldi	r25, 0x00	; 0
			if( !ppwms[pindex] )
			break;
		}
		if( ppwms[pindex] ) // already assigned, slots full
   12a20:	5c 01       	movw	r10, r24
   12a22:	aa 0c       	add	r10, r10
   12a24:	bb 1c       	adc	r11, r11
   12a26:	b3 cf       	rjmp	.-154    	; 0x1298e <_ZN17VariablePWMDriver9createPWMEhhhii+0x12c>
		pwmDrive[channel-1][3] = timer_res;
		PWM* ppin = new PWM(pin_number);
		ppwms[pindex] = ppin;
		ppwms[pindex]->init(pin_number);
	}
}
   12a28:	df 91       	pop	r29
   12a2a:	cf 91       	pop	r28
   12a2c:	1f 91       	pop	r17
   12a2e:	0f 91       	pop	r16
   12a30:	ef 90       	pop	r14
   12a32:	df 90       	pop	r13
   12a34:	cf 90       	pop	r12
   12a36:	bf 90       	pop	r11
   12a38:	af 90       	pop	r10
   12a3a:	08 95       	ret

00012a3c <_ZN17VariablePWMDriverC1Ev>:
			 break;
	 }
}

// default constructor
VariablePWMDriver::VariablePWMDriver()
   12a3c:	cf 93       	push	r28
   12a3e:	df 93       	push	r29
   12a40:	ec 01       	movw	r28, r24
#define __ABSTRACTPWMCONTROL_H__
#include "pins.h"
#include "WPWM.h"
#include <stdio.h>

class AbstractPWMControl
   12a42:	1a 82       	std	Y+2, r1	; 0x02
   12a44:	1c 82       	std	Y+4, r1	; 0x04
   12a46:	1b 82       	std	Y+3, r1	; 0x03
   12a48:	88 e2       	ldi	r24, 0x28	; 40
   12a4a:	eb ea       	ldi	r30, 0xAB	; 171
   12a4c:	f7 e0       	ldi	r31, 0x07	; 7
   12a4e:	de 01       	movw	r26, r28
   12a50:	19 96       	adiw	r26, 0x09	; 9
   12a52:	01 90       	ld	r0, Z+
   12a54:	0d 92       	st	X+, r0
   12a56:	8a 95       	dec	r24
   12a58:	e1 f7       	brne	.-8      	; 0x12a52 <_ZN17VariablePWMDriverC1Ev+0x16>
   12a5a:	88 e2       	ldi	r24, 0x28	; 40
   12a5c:	e3 ed       	ldi	r30, 0xD3	; 211
   12a5e:	f7 e0       	ldi	r31, 0x07	; 7
   12a60:	de 01       	movw	r26, r28
   12a62:	d1 96       	adiw	r26, 0x31	; 49
   12a64:	01 90       	ld	r0, Z+
   12a66:	0d 92       	st	X+, r0
   12a68:	8a 95       	dec	r24
   12a6a:	e1 f7       	brne	.-8      	; 0x12a64 <_ZN17VariablePWMDriverC1Ev+0x28>
   12a6c:	fe 01       	movw	r30, r28
   12a6e:	e7 5a       	subi	r30, 0xA7	; 167
   12a70:	ff 4f       	sbci	r31, 0xFF	; 255
   12a72:	84 e1       	ldi	r24, 0x14	; 20
   12a74:	df 01       	movw	r26, r30
   12a76:	1d 92       	st	X+, r1
   12a78:	8a 95       	dec	r24
   12a7a:	e9 f7       	brne	.-6      	; 0x12a76 <_ZN17VariablePWMDriverC1Ev+0x3a>
   12a7c:	74 96       	adiw	r30, 0x14	; 20
   12a7e:	88 e2       	ldi	r24, 0x28	; 40
   12a80:	df 01       	movw	r26, r30
   12a82:	1d 92       	st	X+, r1
   12a84:	8a 95       	dec	r24
   12a86:	e9 f7       	brne	.-6      	; 0x12a82 <_ZN17VariablePWMDriverC1Ev+0x46>
   12a88:	b8 96       	adiw	r30, 0x28	; 40
   12a8a:	11 82       	std	Z+1, r1	; 0x01
   12a8c:	10 82       	st	Z, r1
   12a8e:	32 96       	adiw	r30, 0x02	; 2
   12a90:	10 82       	st	Z, r1
   12a92:	31 96       	adiw	r30, 0x01	; 1
   12a94:	11 82       	std	Z+1, r1	; 0x01
   12a96:	10 82       	st	Z, r1
   12a98:	8a ec       	ldi	r24, 0xCA	; 202
   12a9a:	99 e0       	ldi	r25, 0x09	; 9
   12a9c:	99 83       	std	Y+1, r25	; 0x01
   12a9e:	88 83       	st	Y, r24
   12aa0:	c6 56       	subi	r28, 0x66	; 102
   12aa2:	df 4f       	sbci	r29, 0xFF	; 255
   12aa4:	80 ed       	ldi	r24, 0xD0	; 208
   12aa6:	97 e0       	ldi	r25, 0x07	; 7
   12aa8:	99 83       	std	Y+1, r25	; 0x01
   12aaa:	88 83       	st	Y, r24
{
} //VariablePWMDriver
   12aac:	df 91       	pop	r29
   12aae:	cf 91       	pop	r28
   12ab0:	08 95       	ret

00012ab2 <_ZN13WatchdogTimer13watchdog_initEj>:
			break;
		case 8000:
			_WD_CONTROL_REG = _BV(WDIE) | WDTO_8S;
			break;
		default:
			_WD_CONTROL_REG = _BV(WDIE) | WDTO_4S;
   12ab2:	6a 3f       	cpi	r22, 0xFA	; 250
   12ab4:	71 05       	cpc	r23, r1
   12ab6:	09 f4       	brne	.+2      	; 0x12aba <_ZN13WatchdogTimer13watchdog_initEj+0x8>
   12ab8:	58 c0       	rjmp	.+176    	; 0x12b6a <_ZN13WatchdogTimer13watchdog_initEj+0xb8>
   12aba:	88 f4       	brcc	.+34     	; 0x12ade <_ZN13WatchdogTimer13watchdog_initEj+0x2c>
   12abc:	6e 31       	cpi	r22, 0x1E	; 30
   12abe:	71 05       	cpc	r23, r1
   12ac0:	99 f1       	breq	.+102    	; 0x12b28 <_ZN13WatchdogTimer13watchdog_initEj+0x76>
   12ac2:	20 f4       	brcc	.+8      	; 0x12acc <_ZN13WatchdogTimer13watchdog_initEj+0x1a>
   12ac4:	6f 30       	cpi	r22, 0x0F	; 15
   12ac6:	71 05       	cpc	r23, r1
   12ac8:	21 f1       	breq	.+72     	; 0x12b12 <_ZN13WatchdogTimer13watchdog_initEj+0x60>
   12aca:	91 c0       	rjmp	.+290    	; 0x12bee <_ZN13WatchdogTimer13watchdog_initEj+0x13c>
   12acc:	6c 33       	cpi	r22, 0x3C	; 60
   12ace:	71 05       	cpc	r23, r1
   12ad0:	09 f4       	brne	.+2      	; 0x12ad4 <_ZN13WatchdogTimer13watchdog_initEj+0x22>
   12ad2:	35 c0       	rjmp	.+106    	; 0x12b3e <_ZN13WatchdogTimer13watchdog_initEj+0x8c>
   12ad4:	68 37       	cpi	r22, 0x78	; 120
   12ad6:	71 05       	cpc	r23, r1
   12ad8:	09 f4       	brne	.+2      	; 0x12adc <_ZN13WatchdogTimer13watchdog_initEj+0x2a>
   12ada:	3c c0       	rjmp	.+120    	; 0x12b54 <_ZN13WatchdogTimer13watchdog_initEj+0xa2>
   12adc:	88 c0       	rjmp	.+272    	; 0x12bee <_ZN13WatchdogTimer13watchdog_initEj+0x13c>
   12ade:	60 3d       	cpi	r22, 0xD0	; 208
   12ae0:	87 e0       	ldi	r24, 0x07	; 7
   12ae2:	78 07       	cpc	r23, r24
   12ae4:	09 f4       	brne	.+2      	; 0x12ae8 <_ZN13WatchdogTimer13watchdog_initEj+0x36>
   12ae6:	62 c0       	rjmp	.+196    	; 0x12bac <_ZN13WatchdogTimer13watchdog_initEj+0xfa>
   12ae8:	50 f4       	brcc	.+20     	; 0x12afe <_ZN13WatchdogTimer13watchdog_initEj+0x4c>
   12aea:	64 3f       	cpi	r22, 0xF4	; 244
   12aec:	81 e0       	ldi	r24, 0x01	; 1
   12aee:	78 07       	cpc	r23, r24
   12af0:	09 f4       	brne	.+2      	; 0x12af4 <_ZN13WatchdogTimer13watchdog_initEj+0x42>
   12af2:	46 c0       	rjmp	.+140    	; 0x12b80 <_ZN13WatchdogTimer13watchdog_initEj+0xce>
   12af4:	68 3e       	cpi	r22, 0xE8	; 232
   12af6:	73 40       	sbci	r23, 0x03	; 3
   12af8:	09 f4       	brne	.+2      	; 0x12afc <_ZN13WatchdogTimer13watchdog_initEj+0x4a>
   12afa:	4d c0       	rjmp	.+154    	; 0x12b96 <_ZN13WatchdogTimer13watchdog_initEj+0xe4>
   12afc:	78 c0       	rjmp	.+240    	; 0x12bee <_ZN13WatchdogTimer13watchdog_initEj+0x13c>
   12afe:	60 3a       	cpi	r22, 0xA0	; 160
   12b00:	8f e0       	ldi	r24, 0x0F	; 15
   12b02:	78 07       	cpc	r23, r24
   12b04:	09 f4       	brne	.+2      	; 0x12b08 <_ZN13WatchdogTimer13watchdog_initEj+0x56>
   12b06:	5d c0       	rjmp	.+186    	; 0x12bc2 <_ZN13WatchdogTimer13watchdog_initEj+0x110>
   12b08:	60 34       	cpi	r22, 0x40	; 64
   12b0a:	7f 41       	sbci	r23, 0x1F	; 31
   12b0c:	09 f4       	brne	.+2      	; 0x12b10 <_ZN13WatchdogTimer13watchdog_initEj+0x5e>
   12b0e:	64 c0       	rjmp	.+200    	; 0x12bd8 <_ZN13WatchdogTimer13watchdog_initEj+0x126>
   12b10:	6e c0       	rjmp	.+220    	; 0x12bee <_ZN13WatchdogTimer13watchdog_initEj+0x13c>
   12b12:	98 e0       	ldi	r25, 0x08	; 8
   12b14:	88 e1       	ldi	r24, 0x18	; 24
   12b16:	0f b6       	in	r0, 0x3f	; 63
   12b18:	f8 94       	cli
   12b1a:	a8 95       	wdr
   12b1c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12b20:	0f be       	out	0x3f, r0	; 63
   12b22:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12b26:	08 95       	ret
   12b28:	99 e0       	ldi	r25, 0x09	; 9
   12b2a:	88 e1       	ldi	r24, 0x18	; 24
   12b2c:	0f b6       	in	r0, 0x3f	; 63
   12b2e:	f8 94       	cli
   12b30:	a8 95       	wdr
   12b32:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12b36:	0f be       	out	0x3f, r0	; 63
   12b38:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12b3c:	08 95       	ret
   12b3e:	9a e0       	ldi	r25, 0x0A	; 10
   12b40:	88 e1       	ldi	r24, 0x18	; 24
   12b42:	0f b6       	in	r0, 0x3f	; 63
   12b44:	f8 94       	cli
   12b46:	a8 95       	wdr
   12b48:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12b4c:	0f be       	out	0x3f, r0	; 63
   12b4e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12b52:	08 95       	ret
   12b54:	9b e0       	ldi	r25, 0x0B	; 11
   12b56:	88 e1       	ldi	r24, 0x18	; 24
   12b58:	0f b6       	in	r0, 0x3f	; 63
   12b5a:	f8 94       	cli
   12b5c:	a8 95       	wdr
   12b5e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12b62:	0f be       	out	0x3f, r0	; 63
   12b64:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12b68:	08 95       	ret
   12b6a:	9c e0       	ldi	r25, 0x0C	; 12
   12b6c:	88 e1       	ldi	r24, 0x18	; 24
   12b6e:	0f b6       	in	r0, 0x3f	; 63
   12b70:	f8 94       	cli
   12b72:	a8 95       	wdr
   12b74:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12b78:	0f be       	out	0x3f, r0	; 63
   12b7a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12b7e:	08 95       	ret
   12b80:	9d e0       	ldi	r25, 0x0D	; 13
   12b82:	88 e1       	ldi	r24, 0x18	; 24
   12b84:	0f b6       	in	r0, 0x3f	; 63
   12b86:	f8 94       	cli
   12b88:	a8 95       	wdr
   12b8a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12b8e:	0f be       	out	0x3f, r0	; 63
   12b90:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12b94:	08 95       	ret
   12b96:	9e e0       	ldi	r25, 0x0E	; 14
   12b98:	88 e1       	ldi	r24, 0x18	; 24
   12b9a:	0f b6       	in	r0, 0x3f	; 63
   12b9c:	f8 94       	cli
   12b9e:	a8 95       	wdr
   12ba0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12ba4:	0f be       	out	0x3f, r0	; 63
   12ba6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12baa:	08 95       	ret
   12bac:	9f e0       	ldi	r25, 0x0F	; 15
   12bae:	88 e1       	ldi	r24, 0x18	; 24
   12bb0:	0f b6       	in	r0, 0x3f	; 63
   12bb2:	f8 94       	cli
   12bb4:	a8 95       	wdr
   12bb6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12bba:	0f be       	out	0x3f, r0	; 63
   12bbc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12bc0:	08 95       	ret
   12bc2:	98 e2       	ldi	r25, 0x28	; 40
   12bc4:	88 e1       	ldi	r24, 0x18	; 24
   12bc6:	0f b6       	in	r0, 0x3f	; 63
   12bc8:	f8 94       	cli
   12bca:	a8 95       	wdr
   12bcc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12bd0:	0f be       	out	0x3f, r0	; 63
   12bd2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12bd6:	08 95       	ret
   12bd8:	99 e2       	ldi	r25, 0x29	; 41
   12bda:	88 e1       	ldi	r24, 0x18	; 24
   12bdc:	0f b6       	in	r0, 0x3f	; 63
   12bde:	f8 94       	cli
   12be0:	a8 95       	wdr
   12be2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12be6:	0f be       	out	0x3f, r0	; 63
   12be8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12bec:	08 95       	ret
   12bee:	98 e2       	ldi	r25, 0x28	; 40
   12bf0:	88 e1       	ldi	r24, 0x18	; 24
   12bf2:	0f b6       	in	r0, 0x3f	; 63
   12bf4:	f8 94       	cli
   12bf6:	a8 95       	wdr
   12bf8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12bfc:	0f be       	out	0x3f, r0	; 63
   12bfe:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12c02:	08 95       	ret

00012c04 <_ZN13WatchdogTimer14watchdog_resetEv>:
}

/// reset watchdog. MUST be called every 1s after init or avr will reset.
void WatchdogTimer::watchdog_reset() 
{
    wdt_reset();
   12c04:	a8 95       	wdr
   12c06:	08 95       	ret

00012c08 <__vector_12>:
}

//Watchdog timer interrupt, called if main program blocks >1sec and manual reset is enabled.

ISR(WDT_vect)
{ 
   12c08:	1f 92       	push	r1
   12c0a:	0f 92       	push	r0
   12c0c:	0f b6       	in	r0, 0x3f	; 63
   12c0e:	0f 92       	push	r0
   12c10:	11 24       	eor	r1, r1
   12c12:	0b b6       	in	r0, 0x3b	; 59
   12c14:	0f 92       	push	r0
   12c16:	2f 93       	push	r18
   12c18:	3f 93       	push	r19
   12c1a:	4f 93       	push	r20
   12c1c:	5f 93       	push	r21
   12c1e:	6f 93       	push	r22
   12c20:	7f 93       	push	r23
   12c22:	8f 93       	push	r24
   12c24:	9f 93       	push	r25
   12c26:	af 93       	push	r26
   12c28:	bf 93       	push	r27
   12c2a:	ef 93       	push	r30
   12c2c:	ff 93       	push	r31
  WatchdogTimer::dogservice->service();  
   12c2e:	80 91 87 16 	lds	r24, 0x1687	; 0x801687 <_ZN13WatchdogTimer10dogserviceE>
   12c32:	90 91 88 16 	lds	r25, 0x1688	; 0x801688 <_ZN13WatchdogTimer10dogserviceE+0x1>
   12c36:	dc 01       	movw	r26, r24
   12c38:	ed 91       	ld	r30, X+
   12c3a:	fc 91       	ld	r31, X
   12c3c:	01 90       	ld	r0, Z+
   12c3e:	f0 81       	ld	r31, Z
   12c40:	e0 2d       	mov	r30, r0
   12c42:	19 95       	eicall
}
   12c44:	ff 91       	pop	r31
   12c46:	ef 91       	pop	r30
   12c48:	bf 91       	pop	r27
   12c4a:	af 91       	pop	r26
   12c4c:	9f 91       	pop	r25
   12c4e:	8f 91       	pop	r24
   12c50:	7f 91       	pop	r23
   12c52:	6f 91       	pop	r22
   12c54:	5f 91       	pop	r21
   12c56:	4f 91       	pop	r20
   12c58:	3f 91       	pop	r19
   12c5a:	2f 91       	pop	r18
   12c5c:	0f 90       	pop	r0
   12c5e:	0b be       	out	0x3b, r0	; 59
   12c60:	0f 90       	pop	r0
   12c62:	0f be       	out	0x3f, r0	; 63
   12c64:	0f 90       	pop	r0
   12c66:	1f 90       	pop	r1
   12c68:	18 95       	reti

00012c6a <_ZN13HardwareTimer15attachInterruptEP16InterruptServicei>:
  SREG = oldSREG;

  return value;
}

void HardwareTimer::waitForOverflow(void) { while( !(*_tifrn & (1<<_tovrn))); }
   12c6a:	80 e0       	ldi	r24, 0x00	; 0
   12c6c:	08 95       	ret

00012c6e <__vector_21>:
   12c6e:	1f 92       	push	r1
   12c70:	0f 92       	push	r0
   12c72:	0f b6       	in	r0, 0x3f	; 63
   12c74:	0f 92       	push	r0
   12c76:	11 24       	eor	r1, r1
   12c78:	0b b6       	in	r0, 0x3b	; 59
   12c7a:	0f 92       	push	r0
   12c7c:	2f 93       	push	r18
   12c7e:	3f 93       	push	r19
   12c80:	4f 93       	push	r20
   12c82:	5f 93       	push	r21
   12c84:	6f 93       	push	r22
   12c86:	7f 93       	push	r23
   12c88:	8f 93       	push	r24
   12c8a:	9f 93       	push	r25
   12c8c:	af 93       	push	r26
   12c8e:	bf 93       	push	r27
   12c90:	ef 93       	push	r30
   12c92:	ff 93       	push	r31
   12c94:	80 91 9b 17 	lds	r24, 0x179B	; 0x80179b <Timer0+0x27>
   12c98:	90 91 9c 17 	lds	r25, 0x179C	; 0x80179c <Timer0+0x28>
   12c9c:	00 97       	sbiw	r24, 0x00	; 0
   12c9e:	39 f0       	breq	.+14     	; 0x12cae <__vector_21+0x40>
   12ca0:	dc 01       	movw	r26, r24
   12ca2:	ed 91       	ld	r30, X+
   12ca4:	fc 91       	ld	r31, X
   12ca6:	01 90       	ld	r0, Z+
   12ca8:	f0 81       	ld	r31, Z
   12caa:	e0 2d       	mov	r30, r0
   12cac:	19 95       	eicall
   12cae:	ff 91       	pop	r31
   12cb0:	ef 91       	pop	r30
   12cb2:	bf 91       	pop	r27
   12cb4:	af 91       	pop	r26
   12cb6:	9f 91       	pop	r25
   12cb8:	8f 91       	pop	r24
   12cba:	7f 91       	pop	r23
   12cbc:	6f 91       	pop	r22
   12cbe:	5f 91       	pop	r21
   12cc0:	4f 91       	pop	r20
   12cc2:	3f 91       	pop	r19
   12cc4:	2f 91       	pop	r18
   12cc6:	0f 90       	pop	r0
   12cc8:	0b be       	out	0x3b, r0	; 59
   12cca:	0f 90       	pop	r0
   12ccc:	0f be       	out	0x3f, r0	; 63
   12cce:	0f 90       	pop	r0
   12cd0:	1f 90       	pop	r1
   12cd2:	18 95       	reti

00012cd4 <__vector_22>:
   12cd4:	1f 92       	push	r1
   12cd6:	0f 92       	push	r0
   12cd8:	0f b6       	in	r0, 0x3f	; 63
   12cda:	0f 92       	push	r0
   12cdc:	11 24       	eor	r1, r1
   12cde:	0b b6       	in	r0, 0x3b	; 59
   12ce0:	0f 92       	push	r0
   12ce2:	2f 93       	push	r18
   12ce4:	3f 93       	push	r19
   12ce6:	4f 93       	push	r20
   12ce8:	5f 93       	push	r21
   12cea:	6f 93       	push	r22
   12cec:	7f 93       	push	r23
   12cee:	8f 93       	push	r24
   12cf0:	9f 93       	push	r25
   12cf2:	af 93       	push	r26
   12cf4:	bf 93       	push	r27
   12cf6:	ef 93       	push	r30
   12cf8:	ff 93       	push	r31
   12cfa:	80 91 9d 17 	lds	r24, 0x179D	; 0x80179d <Timer0+0x29>
   12cfe:	90 91 9e 17 	lds	r25, 0x179E	; 0x80179e <Timer0+0x2a>
   12d02:	00 97       	sbiw	r24, 0x00	; 0
   12d04:	39 f0       	breq	.+14     	; 0x12d14 <__vector_22+0x40>
   12d06:	dc 01       	movw	r26, r24
   12d08:	ed 91       	ld	r30, X+
   12d0a:	fc 91       	ld	r31, X
   12d0c:	01 90       	ld	r0, Z+
   12d0e:	f0 81       	ld	r31, Z
   12d10:	e0 2d       	mov	r30, r0
   12d12:	19 95       	eicall
   12d14:	ff 91       	pop	r31
   12d16:	ef 91       	pop	r30
   12d18:	bf 91       	pop	r27
   12d1a:	af 91       	pop	r26
   12d1c:	9f 91       	pop	r25
   12d1e:	8f 91       	pop	r24
   12d20:	7f 91       	pop	r23
   12d22:	6f 91       	pop	r22
   12d24:	5f 91       	pop	r21
   12d26:	4f 91       	pop	r20
   12d28:	3f 91       	pop	r19
   12d2a:	2f 91       	pop	r18
   12d2c:	0f 90       	pop	r0
   12d2e:	0b be       	out	0x3b, r0	; 59
   12d30:	0f 90       	pop	r0
   12d32:	0f be       	out	0x3f, r0	; 63
   12d34:	0f 90       	pop	r0
   12d36:	1f 90       	pop	r1
   12d38:	18 95       	reti

00012d3a <__vector_23>:
   12d3a:	1f 92       	push	r1
   12d3c:	0f 92       	push	r0
   12d3e:	0f b6       	in	r0, 0x3f	; 63
   12d40:	0f 92       	push	r0
   12d42:	11 24       	eor	r1, r1
   12d44:	0b b6       	in	r0, 0x3b	; 59
   12d46:	0f 92       	push	r0
   12d48:	2f 93       	push	r18
   12d4a:	3f 93       	push	r19
   12d4c:	4f 93       	push	r20
   12d4e:	5f 93       	push	r21
   12d50:	6f 93       	push	r22
   12d52:	7f 93       	push	r23
   12d54:	8f 93       	push	r24
   12d56:	9f 93       	push	r25
   12d58:	af 93       	push	r26
   12d5a:	bf 93       	push	r27
   12d5c:	ef 93       	push	r30
   12d5e:	ff 93       	push	r31
   12d60:	80 91 99 17 	lds	r24, 0x1799	; 0x801799 <Timer0+0x25>
   12d64:	90 91 9a 17 	lds	r25, 0x179A	; 0x80179a <Timer0+0x26>
   12d68:	00 97       	sbiw	r24, 0x00	; 0
   12d6a:	39 f0       	breq	.+14     	; 0x12d7a <__vector_23+0x40>
   12d6c:	dc 01       	movw	r26, r24
   12d6e:	ed 91       	ld	r30, X+
   12d70:	fc 91       	ld	r31, X
   12d72:	01 90       	ld	r0, Z+
   12d74:	f0 81       	ld	r31, Z
   12d76:	e0 2d       	mov	r30, r0
   12d78:	19 95       	eicall
   12d7a:	ff 91       	pop	r31
   12d7c:	ef 91       	pop	r30
   12d7e:	bf 91       	pop	r27
   12d80:	af 91       	pop	r26
   12d82:	9f 91       	pop	r25
   12d84:	8f 91       	pop	r24
   12d86:	7f 91       	pop	r23
   12d88:	6f 91       	pop	r22
   12d8a:	5f 91       	pop	r21
   12d8c:	4f 91       	pop	r20
   12d8e:	3f 91       	pop	r19
   12d90:	2f 91       	pop	r18
   12d92:	0f 90       	pop	r0
   12d94:	0b be       	out	0x3b, r0	; 59
   12d96:	0f 90       	pop	r0
   12d98:	0f be       	out	0x3f, r0	; 63
   12d9a:	0f 90       	pop	r0
   12d9c:	1f 90       	pop	r1
   12d9e:	18 95       	reti

00012da0 <__vector_13>:
   12da0:	1f 92       	push	r1
   12da2:	0f 92       	push	r0
   12da4:	0f b6       	in	r0, 0x3f	; 63
   12da6:	0f 92       	push	r0
   12da8:	11 24       	eor	r1, r1
   12daa:	0b b6       	in	r0, 0x3b	; 59
   12dac:	0f 92       	push	r0
   12dae:	2f 93       	push	r18
   12db0:	3f 93       	push	r19
   12db2:	4f 93       	push	r20
   12db4:	5f 93       	push	r21
   12db6:	6f 93       	push	r22
   12db8:	7f 93       	push	r23
   12dba:	8f 93       	push	r24
   12dbc:	9f 93       	push	r25
   12dbe:	af 93       	push	r26
   12dc0:	bf 93       	push	r27
   12dc2:	ef 93       	push	r30
   12dc4:	ff 93       	push	r31
   12dc6:	80 91 3d 17 	lds	r24, 0x173D	; 0x80173d <Timer2+0x27>
   12dca:	90 91 3e 17 	lds	r25, 0x173E	; 0x80173e <Timer2+0x28>
   12dce:	00 97       	sbiw	r24, 0x00	; 0
   12dd0:	39 f0       	breq	.+14     	; 0x12de0 <__vector_13+0x40>
   12dd2:	dc 01       	movw	r26, r24
   12dd4:	ed 91       	ld	r30, X+
   12dd6:	fc 91       	ld	r31, X
   12dd8:	01 90       	ld	r0, Z+
   12dda:	f0 81       	ld	r31, Z
   12ddc:	e0 2d       	mov	r30, r0
   12dde:	19 95       	eicall
   12de0:	ff 91       	pop	r31
   12de2:	ef 91       	pop	r30
   12de4:	bf 91       	pop	r27
   12de6:	af 91       	pop	r26
   12de8:	9f 91       	pop	r25
   12dea:	8f 91       	pop	r24
   12dec:	7f 91       	pop	r23
   12dee:	6f 91       	pop	r22
   12df0:	5f 91       	pop	r21
   12df2:	4f 91       	pop	r20
   12df4:	3f 91       	pop	r19
   12df6:	2f 91       	pop	r18
   12df8:	0f 90       	pop	r0
   12dfa:	0b be       	out	0x3b, r0	; 59
   12dfc:	0f 90       	pop	r0
   12dfe:	0f be       	out	0x3f, r0	; 63
   12e00:	0f 90       	pop	r0
   12e02:	1f 90       	pop	r1
   12e04:	18 95       	reti

00012e06 <__vector_14>:
   12e06:	1f 92       	push	r1
   12e08:	0f 92       	push	r0
   12e0a:	0f b6       	in	r0, 0x3f	; 63
   12e0c:	0f 92       	push	r0
   12e0e:	11 24       	eor	r1, r1
   12e10:	0b b6       	in	r0, 0x3b	; 59
   12e12:	0f 92       	push	r0
   12e14:	2f 93       	push	r18
   12e16:	3f 93       	push	r19
   12e18:	4f 93       	push	r20
   12e1a:	5f 93       	push	r21
   12e1c:	6f 93       	push	r22
   12e1e:	7f 93       	push	r23
   12e20:	8f 93       	push	r24
   12e22:	9f 93       	push	r25
   12e24:	af 93       	push	r26
   12e26:	bf 93       	push	r27
   12e28:	ef 93       	push	r30
   12e2a:	ff 93       	push	r31
   12e2c:	80 91 3f 17 	lds	r24, 0x173F	; 0x80173f <Timer2+0x29>
   12e30:	90 91 40 17 	lds	r25, 0x1740	; 0x801740 <Timer2+0x2a>
   12e34:	00 97       	sbiw	r24, 0x00	; 0
   12e36:	39 f0       	breq	.+14     	; 0x12e46 <__vector_14+0x40>
   12e38:	dc 01       	movw	r26, r24
   12e3a:	ed 91       	ld	r30, X+
   12e3c:	fc 91       	ld	r31, X
   12e3e:	01 90       	ld	r0, Z+
   12e40:	f0 81       	ld	r31, Z
   12e42:	e0 2d       	mov	r30, r0
   12e44:	19 95       	eicall
   12e46:	ff 91       	pop	r31
   12e48:	ef 91       	pop	r30
   12e4a:	bf 91       	pop	r27
   12e4c:	af 91       	pop	r26
   12e4e:	9f 91       	pop	r25
   12e50:	8f 91       	pop	r24
   12e52:	7f 91       	pop	r23
   12e54:	6f 91       	pop	r22
   12e56:	5f 91       	pop	r21
   12e58:	4f 91       	pop	r20
   12e5a:	3f 91       	pop	r19
   12e5c:	2f 91       	pop	r18
   12e5e:	0f 90       	pop	r0
   12e60:	0b be       	out	0x3b, r0	; 59
   12e62:	0f 90       	pop	r0
   12e64:	0f be       	out	0x3f, r0	; 63
   12e66:	0f 90       	pop	r0
   12e68:	1f 90       	pop	r1
   12e6a:	18 95       	reti

00012e6c <__vector_15>:
   12e6c:	1f 92       	push	r1
   12e6e:	0f 92       	push	r0
   12e70:	0f b6       	in	r0, 0x3f	; 63
   12e72:	0f 92       	push	r0
   12e74:	11 24       	eor	r1, r1
   12e76:	0b b6       	in	r0, 0x3b	; 59
   12e78:	0f 92       	push	r0
   12e7a:	2f 93       	push	r18
   12e7c:	3f 93       	push	r19
   12e7e:	4f 93       	push	r20
   12e80:	5f 93       	push	r21
   12e82:	6f 93       	push	r22
   12e84:	7f 93       	push	r23
   12e86:	8f 93       	push	r24
   12e88:	9f 93       	push	r25
   12e8a:	af 93       	push	r26
   12e8c:	bf 93       	push	r27
   12e8e:	ef 93       	push	r30
   12e90:	ff 93       	push	r31
   12e92:	80 91 3b 17 	lds	r24, 0x173B	; 0x80173b <Timer2+0x25>
   12e96:	90 91 3c 17 	lds	r25, 0x173C	; 0x80173c <Timer2+0x26>
   12e9a:	00 97       	sbiw	r24, 0x00	; 0
   12e9c:	39 f0       	breq	.+14     	; 0x12eac <__vector_15+0x40>
   12e9e:	dc 01       	movw	r26, r24
   12ea0:	ed 91       	ld	r30, X+
   12ea2:	fc 91       	ld	r31, X
   12ea4:	01 90       	ld	r0, Z+
   12ea6:	f0 81       	ld	r31, Z
   12ea8:	e0 2d       	mov	r30, r0
   12eaa:	19 95       	eicall
   12eac:	ff 91       	pop	r31
   12eae:	ef 91       	pop	r30
   12eb0:	bf 91       	pop	r27
   12eb2:	af 91       	pop	r26
   12eb4:	9f 91       	pop	r25
   12eb6:	8f 91       	pop	r24
   12eb8:	7f 91       	pop	r23
   12eba:	6f 91       	pop	r22
   12ebc:	5f 91       	pop	r21
   12ebe:	4f 91       	pop	r20
   12ec0:	3f 91       	pop	r19
   12ec2:	2f 91       	pop	r18
   12ec4:	0f 90       	pop	r0
   12ec6:	0b be       	out	0x3b, r0	; 59
   12ec8:	0f 90       	pop	r0
   12eca:	0f be       	out	0x3f, r0	; 63
   12ecc:	0f 90       	pop	r0
   12ece:	1f 90       	pop	r1
   12ed0:	18 95       	reti

00012ed2 <__vector_17>:
   12ed2:	1f 92       	push	r1
   12ed4:	0f 92       	push	r0
   12ed6:	0f b6       	in	r0, 0x3f	; 63
   12ed8:	0f 92       	push	r0
   12eda:	11 24       	eor	r1, r1
   12edc:	0b b6       	in	r0, 0x3b	; 59
   12ede:	0f 92       	push	r0
   12ee0:	2f 93       	push	r18
   12ee2:	3f 93       	push	r19
   12ee4:	4f 93       	push	r20
   12ee6:	5f 93       	push	r21
   12ee8:	6f 93       	push	r22
   12eea:	7f 93       	push	r23
   12eec:	8f 93       	push	r24
   12eee:	9f 93       	push	r25
   12ef0:	af 93       	push	r26
   12ef2:	bf 93       	push	r27
   12ef4:	ef 93       	push	r30
   12ef6:	ff 93       	push	r31
   12ef8:	80 91 6c 17 	lds	r24, 0x176C	; 0x80176c <Timer1+0x27>
   12efc:	90 91 6d 17 	lds	r25, 0x176D	; 0x80176d <Timer1+0x28>
   12f00:	00 97       	sbiw	r24, 0x00	; 0
   12f02:	39 f0       	breq	.+14     	; 0x12f12 <__vector_17+0x40>
   12f04:	dc 01       	movw	r26, r24
   12f06:	ed 91       	ld	r30, X+
   12f08:	fc 91       	ld	r31, X
   12f0a:	01 90       	ld	r0, Z+
   12f0c:	f0 81       	ld	r31, Z
   12f0e:	e0 2d       	mov	r30, r0
   12f10:	19 95       	eicall
   12f12:	ff 91       	pop	r31
   12f14:	ef 91       	pop	r30
   12f16:	bf 91       	pop	r27
   12f18:	af 91       	pop	r26
   12f1a:	9f 91       	pop	r25
   12f1c:	8f 91       	pop	r24
   12f1e:	7f 91       	pop	r23
   12f20:	6f 91       	pop	r22
   12f22:	5f 91       	pop	r21
   12f24:	4f 91       	pop	r20
   12f26:	3f 91       	pop	r19
   12f28:	2f 91       	pop	r18
   12f2a:	0f 90       	pop	r0
   12f2c:	0b be       	out	0x3b, r0	; 59
   12f2e:	0f 90       	pop	r0
   12f30:	0f be       	out	0x3f, r0	; 63
   12f32:	0f 90       	pop	r0
   12f34:	1f 90       	pop	r1
   12f36:	18 95       	reti

00012f38 <__vector_18>:
   12f38:	1f 92       	push	r1
   12f3a:	0f 92       	push	r0
   12f3c:	0f b6       	in	r0, 0x3f	; 63
   12f3e:	0f 92       	push	r0
   12f40:	11 24       	eor	r1, r1
   12f42:	0b b6       	in	r0, 0x3b	; 59
   12f44:	0f 92       	push	r0
   12f46:	2f 93       	push	r18
   12f48:	3f 93       	push	r19
   12f4a:	4f 93       	push	r20
   12f4c:	5f 93       	push	r21
   12f4e:	6f 93       	push	r22
   12f50:	7f 93       	push	r23
   12f52:	8f 93       	push	r24
   12f54:	9f 93       	push	r25
   12f56:	af 93       	push	r26
   12f58:	bf 93       	push	r27
   12f5a:	ef 93       	push	r30
   12f5c:	ff 93       	push	r31
   12f5e:	80 91 6e 17 	lds	r24, 0x176E	; 0x80176e <Timer1+0x29>
   12f62:	90 91 6f 17 	lds	r25, 0x176F	; 0x80176f <Timer1+0x2a>
   12f66:	00 97       	sbiw	r24, 0x00	; 0
   12f68:	39 f0       	breq	.+14     	; 0x12f78 <__vector_18+0x40>
   12f6a:	dc 01       	movw	r26, r24
   12f6c:	ed 91       	ld	r30, X+
   12f6e:	fc 91       	ld	r31, X
   12f70:	01 90       	ld	r0, Z+
   12f72:	f0 81       	ld	r31, Z
   12f74:	e0 2d       	mov	r30, r0
   12f76:	19 95       	eicall
   12f78:	ff 91       	pop	r31
   12f7a:	ef 91       	pop	r30
   12f7c:	bf 91       	pop	r27
   12f7e:	af 91       	pop	r26
   12f80:	9f 91       	pop	r25
   12f82:	8f 91       	pop	r24
   12f84:	7f 91       	pop	r23
   12f86:	6f 91       	pop	r22
   12f88:	5f 91       	pop	r21
   12f8a:	4f 91       	pop	r20
   12f8c:	3f 91       	pop	r19
   12f8e:	2f 91       	pop	r18
   12f90:	0f 90       	pop	r0
   12f92:	0b be       	out	0x3b, r0	; 59
   12f94:	0f 90       	pop	r0
   12f96:	0f be       	out	0x3f, r0	; 63
   12f98:	0f 90       	pop	r0
   12f9a:	1f 90       	pop	r1
   12f9c:	18 95       	reti

00012f9e <__vector_19>:
   12f9e:	1f 92       	push	r1
   12fa0:	0f 92       	push	r0
   12fa2:	0f b6       	in	r0, 0x3f	; 63
   12fa4:	0f 92       	push	r0
   12fa6:	11 24       	eor	r1, r1
   12fa8:	0b b6       	in	r0, 0x3b	; 59
   12faa:	0f 92       	push	r0
   12fac:	2f 93       	push	r18
   12fae:	3f 93       	push	r19
   12fb0:	4f 93       	push	r20
   12fb2:	5f 93       	push	r21
   12fb4:	6f 93       	push	r22
   12fb6:	7f 93       	push	r23
   12fb8:	8f 93       	push	r24
   12fba:	9f 93       	push	r25
   12fbc:	af 93       	push	r26
   12fbe:	bf 93       	push	r27
   12fc0:	ef 93       	push	r30
   12fc2:	ff 93       	push	r31
   12fc4:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <Timer1+0x2b>
   12fc8:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <Timer1+0x2c>
   12fcc:	00 97       	sbiw	r24, 0x00	; 0
   12fce:	39 f0       	breq	.+14     	; 0x12fde <__vector_19+0x40>
   12fd0:	dc 01       	movw	r26, r24
   12fd2:	ed 91       	ld	r30, X+
   12fd4:	fc 91       	ld	r31, X
   12fd6:	01 90       	ld	r0, Z+
   12fd8:	f0 81       	ld	r31, Z
   12fda:	e0 2d       	mov	r30, r0
   12fdc:	19 95       	eicall
   12fde:	ff 91       	pop	r31
   12fe0:	ef 91       	pop	r30
   12fe2:	bf 91       	pop	r27
   12fe4:	af 91       	pop	r26
   12fe6:	9f 91       	pop	r25
   12fe8:	8f 91       	pop	r24
   12fea:	7f 91       	pop	r23
   12fec:	6f 91       	pop	r22
   12fee:	5f 91       	pop	r21
   12ff0:	4f 91       	pop	r20
   12ff2:	3f 91       	pop	r19
   12ff4:	2f 91       	pop	r18
   12ff6:	0f 90       	pop	r0
   12ff8:	0b be       	out	0x3b, r0	; 59
   12ffa:	0f 90       	pop	r0
   12ffc:	0f be       	out	0x3f, r0	; 63
   12ffe:	0f 90       	pop	r0
   13000:	1f 90       	pop	r1
   13002:	18 95       	reti

00013004 <__vector_20>:
   13004:	1f 92       	push	r1
   13006:	0f 92       	push	r0
   13008:	0f b6       	in	r0, 0x3f	; 63
   1300a:	0f 92       	push	r0
   1300c:	11 24       	eor	r1, r1
   1300e:	0b b6       	in	r0, 0x3b	; 59
   13010:	0f 92       	push	r0
   13012:	2f 93       	push	r18
   13014:	3f 93       	push	r19
   13016:	4f 93       	push	r20
   13018:	5f 93       	push	r21
   1301a:	6f 93       	push	r22
   1301c:	7f 93       	push	r23
   1301e:	8f 93       	push	r24
   13020:	9f 93       	push	r25
   13022:	af 93       	push	r26
   13024:	bf 93       	push	r27
   13026:	ef 93       	push	r30
   13028:	ff 93       	push	r31
   1302a:	80 91 6a 17 	lds	r24, 0x176A	; 0x80176a <Timer1+0x25>
   1302e:	90 91 6b 17 	lds	r25, 0x176B	; 0x80176b <Timer1+0x26>
   13032:	00 97       	sbiw	r24, 0x00	; 0
   13034:	39 f0       	breq	.+14     	; 0x13044 <__vector_20+0x40>
   13036:	dc 01       	movw	r26, r24
   13038:	ed 91       	ld	r30, X+
   1303a:	fc 91       	ld	r31, X
   1303c:	01 90       	ld	r0, Z+
   1303e:	f0 81       	ld	r31, Z
   13040:	e0 2d       	mov	r30, r0
   13042:	19 95       	eicall
   13044:	ff 91       	pop	r31
   13046:	ef 91       	pop	r30
   13048:	bf 91       	pop	r27
   1304a:	af 91       	pop	r26
   1304c:	9f 91       	pop	r25
   1304e:	8f 91       	pop	r24
   13050:	7f 91       	pop	r23
   13052:	6f 91       	pop	r22
   13054:	5f 91       	pop	r21
   13056:	4f 91       	pop	r20
   13058:	3f 91       	pop	r19
   1305a:	2f 91       	pop	r18
   1305c:	0f 90       	pop	r0
   1305e:	0b be       	out	0x3b, r0	; 59
   13060:	0f 90       	pop	r0
   13062:	0f be       	out	0x3f, r0	; 63
   13064:	0f 90       	pop	r0
   13066:	1f 90       	pop	r1
   13068:	18 95       	reti

0001306a <__vector_16>:
   1306a:	1f 92       	push	r1
   1306c:	0f 92       	push	r0
   1306e:	0f b6       	in	r0, 0x3f	; 63
   13070:	0f 92       	push	r0
   13072:	11 24       	eor	r1, r1
   13074:	0b b6       	in	r0, 0x3b	; 59
   13076:	0f 92       	push	r0
   13078:	2f 93       	push	r18
   1307a:	3f 93       	push	r19
   1307c:	4f 93       	push	r20
   1307e:	5f 93       	push	r21
   13080:	6f 93       	push	r22
   13082:	7f 93       	push	r23
   13084:	8f 93       	push	r24
   13086:	9f 93       	push	r25
   13088:	af 93       	push	r26
   1308a:	bf 93       	push	r27
   1308c:	ef 93       	push	r30
   1308e:	ff 93       	push	r31
   13090:	80 91 72 17 	lds	r24, 0x1772	; 0x801772 <Timer1+0x2d>
   13094:	90 91 73 17 	lds	r25, 0x1773	; 0x801773 <Timer1+0x2e>
   13098:	00 97       	sbiw	r24, 0x00	; 0
   1309a:	39 f0       	breq	.+14     	; 0x130aa <__vector_16+0x40>
   1309c:	dc 01       	movw	r26, r24
   1309e:	ed 91       	ld	r30, X+
   130a0:	fc 91       	ld	r31, X
   130a2:	01 90       	ld	r0, Z+
   130a4:	f0 81       	ld	r31, Z
   130a6:	e0 2d       	mov	r30, r0
   130a8:	19 95       	eicall
   130aa:	ff 91       	pop	r31
   130ac:	ef 91       	pop	r30
   130ae:	bf 91       	pop	r27
   130b0:	af 91       	pop	r26
   130b2:	9f 91       	pop	r25
   130b4:	8f 91       	pop	r24
   130b6:	7f 91       	pop	r23
   130b8:	6f 91       	pop	r22
   130ba:	5f 91       	pop	r21
   130bc:	4f 91       	pop	r20
   130be:	3f 91       	pop	r19
   130c0:	2f 91       	pop	r18
   130c2:	0f 90       	pop	r0
   130c4:	0b be       	out	0x3b, r0	; 59
   130c6:	0f 90       	pop	r0
   130c8:	0f be       	out	0x3f, r0	; 63
   130ca:	0f 90       	pop	r0
   130cc:	1f 90       	pop	r1
   130ce:	18 95       	reti

000130d0 <__vector_32>:
   130d0:	1f 92       	push	r1
   130d2:	0f 92       	push	r0
   130d4:	0f b6       	in	r0, 0x3f	; 63
   130d6:	0f 92       	push	r0
   130d8:	11 24       	eor	r1, r1
   130da:	0b b6       	in	r0, 0x3b	; 59
   130dc:	0f 92       	push	r0
   130de:	2f 93       	push	r18
   130e0:	3f 93       	push	r19
   130e2:	4f 93       	push	r20
   130e4:	5f 93       	push	r21
   130e6:	6f 93       	push	r22
   130e8:	7f 93       	push	r23
   130ea:	8f 93       	push	r24
   130ec:	9f 93       	push	r25
   130ee:	af 93       	push	r26
   130f0:	bf 93       	push	r27
   130f2:	ef 93       	push	r30
   130f4:	ff 93       	push	r31
   130f6:	80 91 0e 17 	lds	r24, 0x170E	; 0x80170e <Timer3+0x27>
   130fa:	90 91 0f 17 	lds	r25, 0x170F	; 0x80170f <Timer3+0x28>
   130fe:	00 97       	sbiw	r24, 0x00	; 0
   13100:	39 f0       	breq	.+14     	; 0x13110 <__vector_32+0x40>
   13102:	dc 01       	movw	r26, r24
   13104:	ed 91       	ld	r30, X+
   13106:	fc 91       	ld	r31, X
   13108:	01 90       	ld	r0, Z+
   1310a:	f0 81       	ld	r31, Z
   1310c:	e0 2d       	mov	r30, r0
   1310e:	19 95       	eicall
   13110:	ff 91       	pop	r31
   13112:	ef 91       	pop	r30
   13114:	bf 91       	pop	r27
   13116:	af 91       	pop	r26
   13118:	9f 91       	pop	r25
   1311a:	8f 91       	pop	r24
   1311c:	7f 91       	pop	r23
   1311e:	6f 91       	pop	r22
   13120:	5f 91       	pop	r21
   13122:	4f 91       	pop	r20
   13124:	3f 91       	pop	r19
   13126:	2f 91       	pop	r18
   13128:	0f 90       	pop	r0
   1312a:	0b be       	out	0x3b, r0	; 59
   1312c:	0f 90       	pop	r0
   1312e:	0f be       	out	0x3f, r0	; 63
   13130:	0f 90       	pop	r0
   13132:	1f 90       	pop	r1
   13134:	18 95       	reti

00013136 <__vector_33>:
   13136:	1f 92       	push	r1
   13138:	0f 92       	push	r0
   1313a:	0f b6       	in	r0, 0x3f	; 63
   1313c:	0f 92       	push	r0
   1313e:	11 24       	eor	r1, r1
   13140:	0b b6       	in	r0, 0x3b	; 59
   13142:	0f 92       	push	r0
   13144:	2f 93       	push	r18
   13146:	3f 93       	push	r19
   13148:	4f 93       	push	r20
   1314a:	5f 93       	push	r21
   1314c:	6f 93       	push	r22
   1314e:	7f 93       	push	r23
   13150:	8f 93       	push	r24
   13152:	9f 93       	push	r25
   13154:	af 93       	push	r26
   13156:	bf 93       	push	r27
   13158:	ef 93       	push	r30
   1315a:	ff 93       	push	r31
   1315c:	80 91 10 17 	lds	r24, 0x1710	; 0x801710 <Timer3+0x29>
   13160:	90 91 11 17 	lds	r25, 0x1711	; 0x801711 <Timer3+0x2a>
   13164:	00 97       	sbiw	r24, 0x00	; 0
   13166:	39 f0       	breq	.+14     	; 0x13176 <__vector_33+0x40>
   13168:	dc 01       	movw	r26, r24
   1316a:	ed 91       	ld	r30, X+
   1316c:	fc 91       	ld	r31, X
   1316e:	01 90       	ld	r0, Z+
   13170:	f0 81       	ld	r31, Z
   13172:	e0 2d       	mov	r30, r0
   13174:	19 95       	eicall
   13176:	ff 91       	pop	r31
   13178:	ef 91       	pop	r30
   1317a:	bf 91       	pop	r27
   1317c:	af 91       	pop	r26
   1317e:	9f 91       	pop	r25
   13180:	8f 91       	pop	r24
   13182:	7f 91       	pop	r23
   13184:	6f 91       	pop	r22
   13186:	5f 91       	pop	r21
   13188:	4f 91       	pop	r20
   1318a:	3f 91       	pop	r19
   1318c:	2f 91       	pop	r18
   1318e:	0f 90       	pop	r0
   13190:	0b be       	out	0x3b, r0	; 59
   13192:	0f 90       	pop	r0
   13194:	0f be       	out	0x3f, r0	; 63
   13196:	0f 90       	pop	r0
   13198:	1f 90       	pop	r1
   1319a:	18 95       	reti

0001319c <__vector_34>:
   1319c:	1f 92       	push	r1
   1319e:	0f 92       	push	r0
   131a0:	0f b6       	in	r0, 0x3f	; 63
   131a2:	0f 92       	push	r0
   131a4:	11 24       	eor	r1, r1
   131a6:	0b b6       	in	r0, 0x3b	; 59
   131a8:	0f 92       	push	r0
   131aa:	2f 93       	push	r18
   131ac:	3f 93       	push	r19
   131ae:	4f 93       	push	r20
   131b0:	5f 93       	push	r21
   131b2:	6f 93       	push	r22
   131b4:	7f 93       	push	r23
   131b6:	8f 93       	push	r24
   131b8:	9f 93       	push	r25
   131ba:	af 93       	push	r26
   131bc:	bf 93       	push	r27
   131be:	ef 93       	push	r30
   131c0:	ff 93       	push	r31
   131c2:	80 91 12 17 	lds	r24, 0x1712	; 0x801712 <Timer3+0x2b>
   131c6:	90 91 13 17 	lds	r25, 0x1713	; 0x801713 <Timer3+0x2c>
   131ca:	00 97       	sbiw	r24, 0x00	; 0
   131cc:	39 f0       	breq	.+14     	; 0x131dc <__vector_34+0x40>
   131ce:	dc 01       	movw	r26, r24
   131d0:	ed 91       	ld	r30, X+
   131d2:	fc 91       	ld	r31, X
   131d4:	01 90       	ld	r0, Z+
   131d6:	f0 81       	ld	r31, Z
   131d8:	e0 2d       	mov	r30, r0
   131da:	19 95       	eicall
   131dc:	ff 91       	pop	r31
   131de:	ef 91       	pop	r30
   131e0:	bf 91       	pop	r27
   131e2:	af 91       	pop	r26
   131e4:	9f 91       	pop	r25
   131e6:	8f 91       	pop	r24
   131e8:	7f 91       	pop	r23
   131ea:	6f 91       	pop	r22
   131ec:	5f 91       	pop	r21
   131ee:	4f 91       	pop	r20
   131f0:	3f 91       	pop	r19
   131f2:	2f 91       	pop	r18
   131f4:	0f 90       	pop	r0
   131f6:	0b be       	out	0x3b, r0	; 59
   131f8:	0f 90       	pop	r0
   131fa:	0f be       	out	0x3f, r0	; 63
   131fc:	0f 90       	pop	r0
   131fe:	1f 90       	pop	r1
   13200:	18 95       	reti

00013202 <__vector_35>:
   13202:	1f 92       	push	r1
   13204:	0f 92       	push	r0
   13206:	0f b6       	in	r0, 0x3f	; 63
   13208:	0f 92       	push	r0
   1320a:	11 24       	eor	r1, r1
   1320c:	0b b6       	in	r0, 0x3b	; 59
   1320e:	0f 92       	push	r0
   13210:	2f 93       	push	r18
   13212:	3f 93       	push	r19
   13214:	4f 93       	push	r20
   13216:	5f 93       	push	r21
   13218:	6f 93       	push	r22
   1321a:	7f 93       	push	r23
   1321c:	8f 93       	push	r24
   1321e:	9f 93       	push	r25
   13220:	af 93       	push	r26
   13222:	bf 93       	push	r27
   13224:	ef 93       	push	r30
   13226:	ff 93       	push	r31
   13228:	80 91 0c 17 	lds	r24, 0x170C	; 0x80170c <Timer3+0x25>
   1322c:	90 91 0d 17 	lds	r25, 0x170D	; 0x80170d <Timer3+0x26>
   13230:	00 97       	sbiw	r24, 0x00	; 0
   13232:	39 f0       	breq	.+14     	; 0x13242 <__vector_35+0x40>
   13234:	dc 01       	movw	r26, r24
   13236:	ed 91       	ld	r30, X+
   13238:	fc 91       	ld	r31, X
   1323a:	01 90       	ld	r0, Z+
   1323c:	f0 81       	ld	r31, Z
   1323e:	e0 2d       	mov	r30, r0
   13240:	19 95       	eicall
   13242:	ff 91       	pop	r31
   13244:	ef 91       	pop	r30
   13246:	bf 91       	pop	r27
   13248:	af 91       	pop	r26
   1324a:	9f 91       	pop	r25
   1324c:	8f 91       	pop	r24
   1324e:	7f 91       	pop	r23
   13250:	6f 91       	pop	r22
   13252:	5f 91       	pop	r21
   13254:	4f 91       	pop	r20
   13256:	3f 91       	pop	r19
   13258:	2f 91       	pop	r18
   1325a:	0f 90       	pop	r0
   1325c:	0b be       	out	0x3b, r0	; 59
   1325e:	0f 90       	pop	r0
   13260:	0f be       	out	0x3f, r0	; 63
   13262:	0f 90       	pop	r0
   13264:	1f 90       	pop	r1
   13266:	18 95       	reti

00013268 <__vector_31>:
   13268:	1f 92       	push	r1
   1326a:	0f 92       	push	r0
   1326c:	0f b6       	in	r0, 0x3f	; 63
   1326e:	0f 92       	push	r0
   13270:	11 24       	eor	r1, r1
   13272:	0b b6       	in	r0, 0x3b	; 59
   13274:	0f 92       	push	r0
   13276:	2f 93       	push	r18
   13278:	3f 93       	push	r19
   1327a:	4f 93       	push	r20
   1327c:	5f 93       	push	r21
   1327e:	6f 93       	push	r22
   13280:	7f 93       	push	r23
   13282:	8f 93       	push	r24
   13284:	9f 93       	push	r25
   13286:	af 93       	push	r26
   13288:	bf 93       	push	r27
   1328a:	ef 93       	push	r30
   1328c:	ff 93       	push	r31
   1328e:	80 91 14 17 	lds	r24, 0x1714	; 0x801714 <Timer3+0x2d>
   13292:	90 91 15 17 	lds	r25, 0x1715	; 0x801715 <Timer3+0x2e>
   13296:	00 97       	sbiw	r24, 0x00	; 0
   13298:	39 f0       	breq	.+14     	; 0x132a8 <__vector_31+0x40>
   1329a:	dc 01       	movw	r26, r24
   1329c:	ed 91       	ld	r30, X+
   1329e:	fc 91       	ld	r31, X
   132a0:	01 90       	ld	r0, Z+
   132a2:	f0 81       	ld	r31, Z
   132a4:	e0 2d       	mov	r30, r0
   132a6:	19 95       	eicall
   132a8:	ff 91       	pop	r31
   132aa:	ef 91       	pop	r30
   132ac:	bf 91       	pop	r27
   132ae:	af 91       	pop	r26
   132b0:	9f 91       	pop	r25
   132b2:	8f 91       	pop	r24
   132b4:	7f 91       	pop	r23
   132b6:	6f 91       	pop	r22
   132b8:	5f 91       	pop	r21
   132ba:	4f 91       	pop	r20
   132bc:	3f 91       	pop	r19
   132be:	2f 91       	pop	r18
   132c0:	0f 90       	pop	r0
   132c2:	0b be       	out	0x3b, r0	; 59
   132c4:	0f 90       	pop	r0
   132c6:	0f be       	out	0x3f, r0	; 63
   132c8:	0f 90       	pop	r0
   132ca:	1f 90       	pop	r1
   132cc:	18 95       	reti

000132ce <__vector_42>:
   132ce:	1f 92       	push	r1
   132d0:	0f 92       	push	r0
   132d2:	0f b6       	in	r0, 0x3f	; 63
   132d4:	0f 92       	push	r0
   132d6:	11 24       	eor	r1, r1
   132d8:	0b b6       	in	r0, 0x3b	; 59
   132da:	0f 92       	push	r0
   132dc:	2f 93       	push	r18
   132de:	3f 93       	push	r19
   132e0:	4f 93       	push	r20
   132e2:	5f 93       	push	r21
   132e4:	6f 93       	push	r22
   132e6:	7f 93       	push	r23
   132e8:	8f 93       	push	r24
   132ea:	9f 93       	push	r25
   132ec:	af 93       	push	r26
   132ee:	bf 93       	push	r27
   132f0:	ef 93       	push	r30
   132f2:	ff 93       	push	r31
   132f4:	80 91 df 16 	lds	r24, 0x16DF	; 0x8016df <Timer4+0x27>
   132f8:	90 91 e0 16 	lds	r25, 0x16E0	; 0x8016e0 <Timer4+0x28>
   132fc:	00 97       	sbiw	r24, 0x00	; 0
   132fe:	39 f0       	breq	.+14     	; 0x1330e <__vector_42+0x40>
   13300:	dc 01       	movw	r26, r24
   13302:	ed 91       	ld	r30, X+
   13304:	fc 91       	ld	r31, X
   13306:	01 90       	ld	r0, Z+
   13308:	f0 81       	ld	r31, Z
   1330a:	e0 2d       	mov	r30, r0
   1330c:	19 95       	eicall
   1330e:	ff 91       	pop	r31
   13310:	ef 91       	pop	r30
   13312:	bf 91       	pop	r27
   13314:	af 91       	pop	r26
   13316:	9f 91       	pop	r25
   13318:	8f 91       	pop	r24
   1331a:	7f 91       	pop	r23
   1331c:	6f 91       	pop	r22
   1331e:	5f 91       	pop	r21
   13320:	4f 91       	pop	r20
   13322:	3f 91       	pop	r19
   13324:	2f 91       	pop	r18
   13326:	0f 90       	pop	r0
   13328:	0b be       	out	0x3b, r0	; 59
   1332a:	0f 90       	pop	r0
   1332c:	0f be       	out	0x3f, r0	; 63
   1332e:	0f 90       	pop	r0
   13330:	1f 90       	pop	r1
   13332:	18 95       	reti

00013334 <__vector_43>:
   13334:	1f 92       	push	r1
   13336:	0f 92       	push	r0
   13338:	0f b6       	in	r0, 0x3f	; 63
   1333a:	0f 92       	push	r0
   1333c:	11 24       	eor	r1, r1
   1333e:	0b b6       	in	r0, 0x3b	; 59
   13340:	0f 92       	push	r0
   13342:	2f 93       	push	r18
   13344:	3f 93       	push	r19
   13346:	4f 93       	push	r20
   13348:	5f 93       	push	r21
   1334a:	6f 93       	push	r22
   1334c:	7f 93       	push	r23
   1334e:	8f 93       	push	r24
   13350:	9f 93       	push	r25
   13352:	af 93       	push	r26
   13354:	bf 93       	push	r27
   13356:	ef 93       	push	r30
   13358:	ff 93       	push	r31
   1335a:	80 91 e1 16 	lds	r24, 0x16E1	; 0x8016e1 <Timer4+0x29>
   1335e:	90 91 e2 16 	lds	r25, 0x16E2	; 0x8016e2 <Timer4+0x2a>
   13362:	00 97       	sbiw	r24, 0x00	; 0
   13364:	39 f0       	breq	.+14     	; 0x13374 <__vector_43+0x40>
   13366:	dc 01       	movw	r26, r24
   13368:	ed 91       	ld	r30, X+
   1336a:	fc 91       	ld	r31, X
   1336c:	01 90       	ld	r0, Z+
   1336e:	f0 81       	ld	r31, Z
   13370:	e0 2d       	mov	r30, r0
   13372:	19 95       	eicall
   13374:	ff 91       	pop	r31
   13376:	ef 91       	pop	r30
   13378:	bf 91       	pop	r27
   1337a:	af 91       	pop	r26
   1337c:	9f 91       	pop	r25
   1337e:	8f 91       	pop	r24
   13380:	7f 91       	pop	r23
   13382:	6f 91       	pop	r22
   13384:	5f 91       	pop	r21
   13386:	4f 91       	pop	r20
   13388:	3f 91       	pop	r19
   1338a:	2f 91       	pop	r18
   1338c:	0f 90       	pop	r0
   1338e:	0b be       	out	0x3b, r0	; 59
   13390:	0f 90       	pop	r0
   13392:	0f be       	out	0x3f, r0	; 63
   13394:	0f 90       	pop	r0
   13396:	1f 90       	pop	r1
   13398:	18 95       	reti

0001339a <__vector_44>:
   1339a:	1f 92       	push	r1
   1339c:	0f 92       	push	r0
   1339e:	0f b6       	in	r0, 0x3f	; 63
   133a0:	0f 92       	push	r0
   133a2:	11 24       	eor	r1, r1
   133a4:	0b b6       	in	r0, 0x3b	; 59
   133a6:	0f 92       	push	r0
   133a8:	2f 93       	push	r18
   133aa:	3f 93       	push	r19
   133ac:	4f 93       	push	r20
   133ae:	5f 93       	push	r21
   133b0:	6f 93       	push	r22
   133b2:	7f 93       	push	r23
   133b4:	8f 93       	push	r24
   133b6:	9f 93       	push	r25
   133b8:	af 93       	push	r26
   133ba:	bf 93       	push	r27
   133bc:	ef 93       	push	r30
   133be:	ff 93       	push	r31
   133c0:	80 91 e3 16 	lds	r24, 0x16E3	; 0x8016e3 <Timer4+0x2b>
   133c4:	90 91 e4 16 	lds	r25, 0x16E4	; 0x8016e4 <Timer4+0x2c>
   133c8:	00 97       	sbiw	r24, 0x00	; 0
   133ca:	39 f0       	breq	.+14     	; 0x133da <__vector_44+0x40>
   133cc:	dc 01       	movw	r26, r24
   133ce:	ed 91       	ld	r30, X+
   133d0:	fc 91       	ld	r31, X
   133d2:	01 90       	ld	r0, Z+
   133d4:	f0 81       	ld	r31, Z
   133d6:	e0 2d       	mov	r30, r0
   133d8:	19 95       	eicall
   133da:	ff 91       	pop	r31
   133dc:	ef 91       	pop	r30
   133de:	bf 91       	pop	r27
   133e0:	af 91       	pop	r26
   133e2:	9f 91       	pop	r25
   133e4:	8f 91       	pop	r24
   133e6:	7f 91       	pop	r23
   133e8:	6f 91       	pop	r22
   133ea:	5f 91       	pop	r21
   133ec:	4f 91       	pop	r20
   133ee:	3f 91       	pop	r19
   133f0:	2f 91       	pop	r18
   133f2:	0f 90       	pop	r0
   133f4:	0b be       	out	0x3b, r0	; 59
   133f6:	0f 90       	pop	r0
   133f8:	0f be       	out	0x3f, r0	; 63
   133fa:	0f 90       	pop	r0
   133fc:	1f 90       	pop	r1
   133fe:	18 95       	reti

00013400 <__vector_45>:
   13400:	1f 92       	push	r1
   13402:	0f 92       	push	r0
   13404:	0f b6       	in	r0, 0x3f	; 63
   13406:	0f 92       	push	r0
   13408:	11 24       	eor	r1, r1
   1340a:	0b b6       	in	r0, 0x3b	; 59
   1340c:	0f 92       	push	r0
   1340e:	2f 93       	push	r18
   13410:	3f 93       	push	r19
   13412:	4f 93       	push	r20
   13414:	5f 93       	push	r21
   13416:	6f 93       	push	r22
   13418:	7f 93       	push	r23
   1341a:	8f 93       	push	r24
   1341c:	9f 93       	push	r25
   1341e:	af 93       	push	r26
   13420:	bf 93       	push	r27
   13422:	ef 93       	push	r30
   13424:	ff 93       	push	r31
   13426:	80 91 dd 16 	lds	r24, 0x16DD	; 0x8016dd <Timer4+0x25>
   1342a:	90 91 de 16 	lds	r25, 0x16DE	; 0x8016de <Timer4+0x26>
   1342e:	00 97       	sbiw	r24, 0x00	; 0
   13430:	39 f0       	breq	.+14     	; 0x13440 <__vector_45+0x40>
   13432:	dc 01       	movw	r26, r24
   13434:	ed 91       	ld	r30, X+
   13436:	fc 91       	ld	r31, X
   13438:	01 90       	ld	r0, Z+
   1343a:	f0 81       	ld	r31, Z
   1343c:	e0 2d       	mov	r30, r0
   1343e:	19 95       	eicall
   13440:	ff 91       	pop	r31
   13442:	ef 91       	pop	r30
   13444:	bf 91       	pop	r27
   13446:	af 91       	pop	r26
   13448:	9f 91       	pop	r25
   1344a:	8f 91       	pop	r24
   1344c:	7f 91       	pop	r23
   1344e:	6f 91       	pop	r22
   13450:	5f 91       	pop	r21
   13452:	4f 91       	pop	r20
   13454:	3f 91       	pop	r19
   13456:	2f 91       	pop	r18
   13458:	0f 90       	pop	r0
   1345a:	0b be       	out	0x3b, r0	; 59
   1345c:	0f 90       	pop	r0
   1345e:	0f be       	out	0x3f, r0	; 63
   13460:	0f 90       	pop	r0
   13462:	1f 90       	pop	r1
   13464:	18 95       	reti

00013466 <__vector_41>:
   13466:	1f 92       	push	r1
   13468:	0f 92       	push	r0
   1346a:	0f b6       	in	r0, 0x3f	; 63
   1346c:	0f 92       	push	r0
   1346e:	11 24       	eor	r1, r1
   13470:	0b b6       	in	r0, 0x3b	; 59
   13472:	0f 92       	push	r0
   13474:	2f 93       	push	r18
   13476:	3f 93       	push	r19
   13478:	4f 93       	push	r20
   1347a:	5f 93       	push	r21
   1347c:	6f 93       	push	r22
   1347e:	7f 93       	push	r23
   13480:	8f 93       	push	r24
   13482:	9f 93       	push	r25
   13484:	af 93       	push	r26
   13486:	bf 93       	push	r27
   13488:	ef 93       	push	r30
   1348a:	ff 93       	push	r31
   1348c:	80 91 e5 16 	lds	r24, 0x16E5	; 0x8016e5 <Timer4+0x2d>
   13490:	90 91 e6 16 	lds	r25, 0x16E6	; 0x8016e6 <Timer4+0x2e>
   13494:	00 97       	sbiw	r24, 0x00	; 0
   13496:	39 f0       	breq	.+14     	; 0x134a6 <__vector_41+0x40>
   13498:	dc 01       	movw	r26, r24
   1349a:	ed 91       	ld	r30, X+
   1349c:	fc 91       	ld	r31, X
   1349e:	01 90       	ld	r0, Z+
   134a0:	f0 81       	ld	r31, Z
   134a2:	e0 2d       	mov	r30, r0
   134a4:	19 95       	eicall
   134a6:	ff 91       	pop	r31
   134a8:	ef 91       	pop	r30
   134aa:	bf 91       	pop	r27
   134ac:	af 91       	pop	r26
   134ae:	9f 91       	pop	r25
   134b0:	8f 91       	pop	r24
   134b2:	7f 91       	pop	r23
   134b4:	6f 91       	pop	r22
   134b6:	5f 91       	pop	r21
   134b8:	4f 91       	pop	r20
   134ba:	3f 91       	pop	r19
   134bc:	2f 91       	pop	r18
   134be:	0f 90       	pop	r0
   134c0:	0b be       	out	0x3b, r0	; 59
   134c2:	0f 90       	pop	r0
   134c4:	0f be       	out	0x3f, r0	; 63
   134c6:	0f 90       	pop	r0
   134c8:	1f 90       	pop	r1
   134ca:	18 95       	reti

000134cc <__vector_47>:
   134cc:	1f 92       	push	r1
   134ce:	0f 92       	push	r0
   134d0:	0f b6       	in	r0, 0x3f	; 63
   134d2:	0f 92       	push	r0
   134d4:	11 24       	eor	r1, r1
   134d6:	0b b6       	in	r0, 0x3b	; 59
   134d8:	0f 92       	push	r0
   134da:	2f 93       	push	r18
   134dc:	3f 93       	push	r19
   134de:	4f 93       	push	r20
   134e0:	5f 93       	push	r21
   134e2:	6f 93       	push	r22
   134e4:	7f 93       	push	r23
   134e6:	8f 93       	push	r24
   134e8:	9f 93       	push	r25
   134ea:	af 93       	push	r26
   134ec:	bf 93       	push	r27
   134ee:	ef 93       	push	r30
   134f0:	ff 93       	push	r31
   134f2:	80 91 b0 16 	lds	r24, 0x16B0	; 0x8016b0 <Timer5+0x27>
   134f6:	90 91 b1 16 	lds	r25, 0x16B1	; 0x8016b1 <Timer5+0x28>
   134fa:	00 97       	sbiw	r24, 0x00	; 0
   134fc:	39 f0       	breq	.+14     	; 0x1350c <__vector_47+0x40>
   134fe:	dc 01       	movw	r26, r24
   13500:	ed 91       	ld	r30, X+
   13502:	fc 91       	ld	r31, X
   13504:	01 90       	ld	r0, Z+
   13506:	f0 81       	ld	r31, Z
   13508:	e0 2d       	mov	r30, r0
   1350a:	19 95       	eicall
   1350c:	ff 91       	pop	r31
   1350e:	ef 91       	pop	r30
   13510:	bf 91       	pop	r27
   13512:	af 91       	pop	r26
   13514:	9f 91       	pop	r25
   13516:	8f 91       	pop	r24
   13518:	7f 91       	pop	r23
   1351a:	6f 91       	pop	r22
   1351c:	5f 91       	pop	r21
   1351e:	4f 91       	pop	r20
   13520:	3f 91       	pop	r19
   13522:	2f 91       	pop	r18
   13524:	0f 90       	pop	r0
   13526:	0b be       	out	0x3b, r0	; 59
   13528:	0f 90       	pop	r0
   1352a:	0f be       	out	0x3f, r0	; 63
   1352c:	0f 90       	pop	r0
   1352e:	1f 90       	pop	r1
   13530:	18 95       	reti

00013532 <__vector_48>:
   13532:	1f 92       	push	r1
   13534:	0f 92       	push	r0
   13536:	0f b6       	in	r0, 0x3f	; 63
   13538:	0f 92       	push	r0
   1353a:	11 24       	eor	r1, r1
   1353c:	0b b6       	in	r0, 0x3b	; 59
   1353e:	0f 92       	push	r0
   13540:	2f 93       	push	r18
   13542:	3f 93       	push	r19
   13544:	4f 93       	push	r20
   13546:	5f 93       	push	r21
   13548:	6f 93       	push	r22
   1354a:	7f 93       	push	r23
   1354c:	8f 93       	push	r24
   1354e:	9f 93       	push	r25
   13550:	af 93       	push	r26
   13552:	bf 93       	push	r27
   13554:	ef 93       	push	r30
   13556:	ff 93       	push	r31
   13558:	80 91 b2 16 	lds	r24, 0x16B2	; 0x8016b2 <Timer5+0x29>
   1355c:	90 91 b3 16 	lds	r25, 0x16B3	; 0x8016b3 <Timer5+0x2a>
   13560:	00 97       	sbiw	r24, 0x00	; 0
   13562:	39 f0       	breq	.+14     	; 0x13572 <__vector_48+0x40>
   13564:	dc 01       	movw	r26, r24
   13566:	ed 91       	ld	r30, X+
   13568:	fc 91       	ld	r31, X
   1356a:	01 90       	ld	r0, Z+
   1356c:	f0 81       	ld	r31, Z
   1356e:	e0 2d       	mov	r30, r0
   13570:	19 95       	eicall
   13572:	ff 91       	pop	r31
   13574:	ef 91       	pop	r30
   13576:	bf 91       	pop	r27
   13578:	af 91       	pop	r26
   1357a:	9f 91       	pop	r25
   1357c:	8f 91       	pop	r24
   1357e:	7f 91       	pop	r23
   13580:	6f 91       	pop	r22
   13582:	5f 91       	pop	r21
   13584:	4f 91       	pop	r20
   13586:	3f 91       	pop	r19
   13588:	2f 91       	pop	r18
   1358a:	0f 90       	pop	r0
   1358c:	0b be       	out	0x3b, r0	; 59
   1358e:	0f 90       	pop	r0
   13590:	0f be       	out	0x3f, r0	; 63
   13592:	0f 90       	pop	r0
   13594:	1f 90       	pop	r1
   13596:	18 95       	reti

00013598 <__vector_49>:
   13598:	1f 92       	push	r1
   1359a:	0f 92       	push	r0
   1359c:	0f b6       	in	r0, 0x3f	; 63
   1359e:	0f 92       	push	r0
   135a0:	11 24       	eor	r1, r1
   135a2:	0b b6       	in	r0, 0x3b	; 59
   135a4:	0f 92       	push	r0
   135a6:	2f 93       	push	r18
   135a8:	3f 93       	push	r19
   135aa:	4f 93       	push	r20
   135ac:	5f 93       	push	r21
   135ae:	6f 93       	push	r22
   135b0:	7f 93       	push	r23
   135b2:	8f 93       	push	r24
   135b4:	9f 93       	push	r25
   135b6:	af 93       	push	r26
   135b8:	bf 93       	push	r27
   135ba:	ef 93       	push	r30
   135bc:	ff 93       	push	r31
   135be:	80 91 b4 16 	lds	r24, 0x16B4	; 0x8016b4 <Timer5+0x2b>
   135c2:	90 91 b5 16 	lds	r25, 0x16B5	; 0x8016b5 <Timer5+0x2c>
   135c6:	00 97       	sbiw	r24, 0x00	; 0
   135c8:	39 f0       	breq	.+14     	; 0x135d8 <__vector_49+0x40>
   135ca:	dc 01       	movw	r26, r24
   135cc:	ed 91       	ld	r30, X+
   135ce:	fc 91       	ld	r31, X
   135d0:	01 90       	ld	r0, Z+
   135d2:	f0 81       	ld	r31, Z
   135d4:	e0 2d       	mov	r30, r0
   135d6:	19 95       	eicall
   135d8:	ff 91       	pop	r31
   135da:	ef 91       	pop	r30
   135dc:	bf 91       	pop	r27
   135de:	af 91       	pop	r26
   135e0:	9f 91       	pop	r25
   135e2:	8f 91       	pop	r24
   135e4:	7f 91       	pop	r23
   135e6:	6f 91       	pop	r22
   135e8:	5f 91       	pop	r21
   135ea:	4f 91       	pop	r20
   135ec:	3f 91       	pop	r19
   135ee:	2f 91       	pop	r18
   135f0:	0f 90       	pop	r0
   135f2:	0b be       	out	0x3b, r0	; 59
   135f4:	0f 90       	pop	r0
   135f6:	0f be       	out	0x3f, r0	; 63
   135f8:	0f 90       	pop	r0
   135fa:	1f 90       	pop	r1
   135fc:	18 95       	reti

000135fe <__vector_50>:
   135fe:	1f 92       	push	r1
   13600:	0f 92       	push	r0
   13602:	0f b6       	in	r0, 0x3f	; 63
   13604:	0f 92       	push	r0
   13606:	11 24       	eor	r1, r1
   13608:	0b b6       	in	r0, 0x3b	; 59
   1360a:	0f 92       	push	r0
   1360c:	2f 93       	push	r18
   1360e:	3f 93       	push	r19
   13610:	4f 93       	push	r20
   13612:	5f 93       	push	r21
   13614:	6f 93       	push	r22
   13616:	7f 93       	push	r23
   13618:	8f 93       	push	r24
   1361a:	9f 93       	push	r25
   1361c:	af 93       	push	r26
   1361e:	bf 93       	push	r27
   13620:	ef 93       	push	r30
   13622:	ff 93       	push	r31
   13624:	80 91 ae 16 	lds	r24, 0x16AE	; 0x8016ae <Timer5+0x25>
   13628:	90 91 af 16 	lds	r25, 0x16AF	; 0x8016af <Timer5+0x26>
   1362c:	00 97       	sbiw	r24, 0x00	; 0
   1362e:	39 f0       	breq	.+14     	; 0x1363e <__vector_50+0x40>
   13630:	dc 01       	movw	r26, r24
   13632:	ed 91       	ld	r30, X+
   13634:	fc 91       	ld	r31, X
   13636:	01 90       	ld	r0, Z+
   13638:	f0 81       	ld	r31, Z
   1363a:	e0 2d       	mov	r30, r0
   1363c:	19 95       	eicall
   1363e:	ff 91       	pop	r31
   13640:	ef 91       	pop	r30
   13642:	bf 91       	pop	r27
   13644:	af 91       	pop	r26
   13646:	9f 91       	pop	r25
   13648:	8f 91       	pop	r24
   1364a:	7f 91       	pop	r23
   1364c:	6f 91       	pop	r22
   1364e:	5f 91       	pop	r21
   13650:	4f 91       	pop	r20
   13652:	3f 91       	pop	r19
   13654:	2f 91       	pop	r18
   13656:	0f 90       	pop	r0
   13658:	0b be       	out	0x3b, r0	; 59
   1365a:	0f 90       	pop	r0
   1365c:	0f be       	out	0x3f, r0	; 63
   1365e:	0f 90       	pop	r0
   13660:	1f 90       	pop	r1
   13662:	18 95       	reti

00013664 <__vector_46>:
   13664:	1f 92       	push	r1
   13666:	0f 92       	push	r0
   13668:	0f b6       	in	r0, 0x3f	; 63
   1366a:	0f 92       	push	r0
   1366c:	11 24       	eor	r1, r1
   1366e:	0b b6       	in	r0, 0x3b	; 59
   13670:	0f 92       	push	r0
   13672:	2f 93       	push	r18
   13674:	3f 93       	push	r19
   13676:	4f 93       	push	r20
   13678:	5f 93       	push	r21
   1367a:	6f 93       	push	r22
   1367c:	7f 93       	push	r23
   1367e:	8f 93       	push	r24
   13680:	9f 93       	push	r25
   13682:	af 93       	push	r26
   13684:	bf 93       	push	r27
   13686:	ef 93       	push	r30
   13688:	ff 93       	push	r31
   1368a:	80 91 b6 16 	lds	r24, 0x16B6	; 0x8016b6 <Timer5+0x2d>
   1368e:	90 91 b7 16 	lds	r25, 0x16B7	; 0x8016b7 <Timer5+0x2e>
   13692:	00 97       	sbiw	r24, 0x00	; 0
   13694:	39 f0       	breq	.+14     	; 0x136a4 <__vector_46+0x40>
   13696:	dc 01       	movw	r26, r24
   13698:	ed 91       	ld	r30, X+
   1369a:	fc 91       	ld	r31, X
   1369c:	01 90       	ld	r0, Z+
   1369e:	f0 81       	ld	r31, Z
   136a0:	e0 2d       	mov	r30, r0
   136a2:	19 95       	eicall
   136a4:	ff 91       	pop	r31
   136a6:	ef 91       	pop	r30
   136a8:	bf 91       	pop	r27
   136aa:	af 91       	pop	r26
   136ac:	9f 91       	pop	r25
   136ae:	8f 91       	pop	r24
   136b0:	7f 91       	pop	r23
   136b2:	6f 91       	pop	r22
   136b4:	5f 91       	pop	r21
   136b6:	4f 91       	pop	r20
   136b8:	3f 91       	pop	r19
   136ba:	2f 91       	pop	r18
   136bc:	0f 90       	pop	r0
   136be:	0b be       	out	0x3b, r0	; 59
   136c0:	0f 90       	pop	r0
   136c2:	0f be       	out	0x3f, r0	; 63
   136c4:	0f 90       	pop	r0
   136c6:	1f 90       	pop	r1
   136c8:	18 95       	reti

000136ca <_ZN13HardwareTimer14clearInterruptEh>:
   136ca:	61 11       	cpse	r22, r1
   136cc:	11 c0       	rjmp	.+34     	; 0x136f0 <_ZN13HardwareTimer14clearInterruptEh+0x26>
   136ce:	dc 01       	movw	r26, r24
   136d0:	5a 96       	adiw	r26, 0x1a	; 26
   136d2:	ed 91       	ld	r30, X+
   136d4:	fc 91       	ld	r31, X
   136d6:	5b 97       	sbiw	r26, 0x1b	; 27
   136d8:	21 e0       	ldi	r18, 0x01	; 1
   136da:	30 e0       	ldi	r19, 0x00	; 0
   136dc:	a9 01       	movw	r20, r18
   136de:	5d 96       	adiw	r26, 0x1d	; 29
   136e0:	0c 90       	ld	r0, X
   136e2:	02 c0       	rjmp	.+4      	; 0x136e8 <_ZN13HardwareTimer14clearInterruptEh+0x1e>
   136e4:	44 0f       	add	r20, r20
   136e6:	55 1f       	adc	r21, r21
   136e8:	0a 94       	dec	r0
   136ea:	e2 f7       	brpl	.-8      	; 0x136e4 <_ZN13HardwareTimer14clearInterruptEh+0x1a>
   136ec:	40 83       	st	Z, r20
   136ee:	08 95       	ret
   136f0:	61 30       	cpi	r22, 0x01	; 1
   136f2:	89 f4       	brne	.+34     	; 0x13716 <_ZN13HardwareTimer14clearInterruptEh+0x4c>
   136f4:	dc 01       	movw	r26, r24
   136f6:	5a 96       	adiw	r26, 0x1a	; 26
   136f8:	ed 91       	ld	r30, X+
   136fa:	fc 91       	ld	r31, X
   136fc:	5b 97       	sbiw	r26, 0x1b	; 27
   136fe:	21 e0       	ldi	r18, 0x01	; 1
   13700:	30 e0       	ldi	r19, 0x00	; 0
   13702:	a9 01       	movw	r20, r18
   13704:	5e 96       	adiw	r26, 0x1e	; 30
   13706:	0c 90       	ld	r0, X
   13708:	02 c0       	rjmp	.+4      	; 0x1370e <_ZN13HardwareTimer14clearInterruptEh+0x44>
   1370a:	44 0f       	add	r20, r20
   1370c:	55 1f       	adc	r21, r21
   1370e:	0a 94       	dec	r0
   13710:	e2 f7       	brpl	.-8      	; 0x1370a <_ZN13HardwareTimer14clearInterruptEh+0x40>
   13712:	40 83       	st	Z, r20
   13714:	08 95       	ret
   13716:	62 30       	cpi	r22, 0x02	; 2
   13718:	99 f4       	brne	.+38     	; 0x13740 <_ZN13HardwareTimer14clearInterruptEh+0x76>
   1371a:	dc 01       	movw	r26, r24
   1371c:	5f 96       	adiw	r26, 0x1f	; 31
   1371e:	2c 91       	ld	r18, X
   13720:	5f 97       	sbiw	r26, 0x1f	; 31
   13722:	22 23       	and	r18, r18
   13724:	f9 f0       	breq	.+62     	; 0x13764 <_ZN13HardwareTimer14clearInterruptEh+0x9a>
   13726:	5a 96       	adiw	r26, 0x1a	; 26
   13728:	ed 91       	ld	r30, X+
   1372a:	fc 91       	ld	r31, X
   1372c:	5b 97       	sbiw	r26, 0x1b	; 27
   1372e:	81 e0       	ldi	r24, 0x01	; 1
   13730:	90 e0       	ldi	r25, 0x00	; 0
   13732:	02 c0       	rjmp	.+4      	; 0x13738 <_ZN13HardwareTimer14clearInterruptEh+0x6e>
   13734:	88 0f       	add	r24, r24
   13736:	99 1f       	adc	r25, r25
   13738:	2a 95       	dec	r18
   1373a:	e2 f7       	brpl	.-8      	; 0x13734 <_ZN13HardwareTimer14clearInterruptEh+0x6a>
   1373c:	80 83       	st	Z, r24
   1373e:	08 95       	ret
   13740:	63 30       	cpi	r22, 0x03	; 3
   13742:	81 f4       	brne	.+32     	; 0x13764 <_ZN13HardwareTimer14clearInterruptEh+0x9a>
   13744:	dc 01       	movw	r26, r24
   13746:	5a 96       	adiw	r26, 0x1a	; 26
   13748:	ed 91       	ld	r30, X+
   1374a:	fc 91       	ld	r31, X
   1374c:	5b 97       	sbiw	r26, 0x1b	; 27
   1374e:	21 e0       	ldi	r18, 0x01	; 1
   13750:	30 e0       	ldi	r19, 0x00	; 0
   13752:	a9 01       	movw	r20, r18
   13754:	5c 96       	adiw	r26, 0x1c	; 28
   13756:	0c 90       	ld	r0, X
   13758:	02 c0       	rjmp	.+4      	; 0x1375e <_ZN13HardwareTimer14clearInterruptEh+0x94>
   1375a:	44 0f       	add	r20, r20
   1375c:	55 1f       	adc	r21, r21
   1375e:	0a 94       	dec	r0
   13760:	e2 f7       	brpl	.-8      	; 0x1375a <_ZN13HardwareTimer14clearInterruptEh+0x90>
   13762:	40 83       	st	Z, r20
   13764:	08 95       	ret

00013766 <_ZN13HardwareTimer14setClockSourceEh>:
   13766:	cf 93       	push	r28
   13768:	df 93       	push	r29
   1376a:	ec 01       	movw	r28, r24
   1376c:	8a 81       	ldd	r24, Y+2	; 0x02
   1376e:	82 30       	cpi	r24, 0x02	; 2
   13770:	d9 f4       	brne	.+54     	; 0x137a8 <_ZN13HardwareTimer14setClockSourceEh+0x42>
   13772:	86 2f       	mov	r24, r22
   13774:	90 e0       	ldi	r25, 0x00	; 0
   13776:	fc 01       	movw	r30, r24
   13778:	31 97       	sbiw	r30, 0x01	; 1
   1377a:	e7 30       	cpi	r30, 0x07	; 7
   1377c:	f1 05       	cpc	r31, r1
   1377e:	90 f4       	brcc	.+36     	; 0x137a4 <_ZN13HardwareTimer14setClockSourceEh+0x3e>
   13780:	88 27       	eor	r24, r24
   13782:	ed 50       	subi	r30, 0x0D	; 13
   13784:	fe 4f       	sbci	r31, 0xFE	; 254
   13786:	8f 4f       	sbci	r24, 0xFF	; 255
   13788:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
   1378c:	92 e0       	ldi	r25, 0x02	; 2
   1378e:	2a c0       	rjmp	.+84     	; 0x137e4 <_ZN13HardwareTimer14setClockSourceEh+0x7e>
   13790:	93 e0       	ldi	r25, 0x03	; 3
   13792:	28 c0       	rjmp	.+80     	; 0x137e4 <_ZN13HardwareTimer14setClockSourceEh+0x7e>
   13794:	94 e0       	ldi	r25, 0x04	; 4
   13796:	26 c0       	rjmp	.+76     	; 0x137e4 <_ZN13HardwareTimer14setClockSourceEh+0x7e>
   13798:	95 e0       	ldi	r25, 0x05	; 5
   1379a:	24 c0       	rjmp	.+72     	; 0x137e4 <_ZN13HardwareTimer14setClockSourceEh+0x7e>
   1379c:	96 e0       	ldi	r25, 0x06	; 6
   1379e:	22 c0       	rjmp	.+68     	; 0x137e4 <_ZN13HardwareTimer14setClockSourceEh+0x7e>
   137a0:	97 e0       	ldi	r25, 0x07	; 7
   137a2:	20 c0       	rjmp	.+64     	; 0x137e4 <_ZN13HardwareTimer14setClockSourceEh+0x7e>
   137a4:	90 e0       	ldi	r25, 0x00	; 0
   137a6:	1e c0       	rjmp	.+60     	; 0x137e4 <_ZN13HardwareTimer14setClockSourceEh+0x7e>
   137a8:	86 2f       	mov	r24, r22
   137aa:	90 e0       	ldi	r25, 0x00	; 0
   137ac:	fc 01       	movw	r30, r24
   137ae:	31 97       	sbiw	r30, 0x01	; 1
   137b0:	e9 30       	cpi	r30, 0x09	; 9
   137b2:	f1 05       	cpc	r31, r1
   137b4:	90 f4       	brcc	.+36     	; 0x137da <_ZN13HardwareTimer14setClockSourceEh+0x74>
   137b6:	88 27       	eor	r24, r24
   137b8:	e6 50       	subi	r30, 0x06	; 6
   137ba:	fe 4f       	sbci	r31, 0xFE	; 254
   137bc:	8f 4f       	sbci	r24, 0xFF	; 255
   137be:	0c 94 43 a7 	jmp	0x14e86	; 0x14e86 <__tablejump2__>
   137c2:	92 e0       	ldi	r25, 0x02	; 2
   137c4:	0f c0       	rjmp	.+30     	; 0x137e4 <_ZN13HardwareTimer14setClockSourceEh+0x7e>
   137c6:	93 e0       	ldi	r25, 0x03	; 3
   137c8:	0d c0       	rjmp	.+26     	; 0x137e4 <_ZN13HardwareTimer14setClockSourceEh+0x7e>
   137ca:	94 e0       	ldi	r25, 0x04	; 4
   137cc:	0b c0       	rjmp	.+22     	; 0x137e4 <_ZN13HardwareTimer14setClockSourceEh+0x7e>
   137ce:	95 e0       	ldi	r25, 0x05	; 5
   137d0:	09 c0       	rjmp	.+18     	; 0x137e4 <_ZN13HardwareTimer14setClockSourceEh+0x7e>
   137d2:	96 e0       	ldi	r25, 0x06	; 6
   137d4:	07 c0       	rjmp	.+14     	; 0x137e4 <_ZN13HardwareTimer14setClockSourceEh+0x7e>
   137d6:	97 e0       	ldi	r25, 0x07	; 7
   137d8:	05 c0       	rjmp	.+10     	; 0x137e4 <_ZN13HardwareTimer14setClockSourceEh+0x7e>
   137da:	90 e0       	ldi	r25, 0x00	; 0
   137dc:	03 c0       	rjmp	.+6      	; 0x137e4 <_ZN13HardwareTimer14setClockSourceEh+0x7e>
   137de:	91 e0       	ldi	r25, 0x01	; 1
   137e0:	01 c0       	rjmp	.+2      	; 0x137e4 <_ZN13HardwareTimer14setClockSourceEh+0x7e>
   137e2:	91 e0       	ldi	r25, 0x01	; 1
   137e4:	ec 85       	ldd	r30, Y+12	; 0x0c
   137e6:	fd 85       	ldd	r31, Y+13	; 0x0d
   137e8:	80 81       	ld	r24, Z
   137ea:	20 81       	ld	r18, Z
   137ec:	28 7f       	andi	r18, 0xF8	; 248
   137ee:	92 2b       	or	r25, r18
   137f0:	90 83       	st	Z, r25
   137f2:	87 70       	andi	r24, 0x07	; 7
   137f4:	df 91       	pop	r29
   137f6:	cf 91       	pop	r28
   137f8:	08 95       	ret

000137fa <_ZN13HardwareTimerC1Eh>:
   137fa:	cf 93       	push	r28
   137fc:	df 93       	push	r29
   137fe:	ec 01       	movw	r28, r24
   13800:	8c ee       	ldi	r24, 0xEC	; 236
   13802:	99 e0       	ldi	r25, 0x09	; 9
   13804:	99 83       	std	Y+1, r25	; 0x01
   13806:	88 83       	st	Y, r24
   13808:	6a 83       	std	Y+2, r22	; 0x02
   1380a:	62 30       	cpi	r22, 0x02	; 2
   1380c:	09 f4       	brne	.+2      	; 0x13810 <_ZN13HardwareTimerC1Eh+0x16>
   1380e:	81 c0       	rjmp	.+258    	; 0x13912 <_ZN13HardwareTimerC1Eh+0x118>
   13810:	28 f4       	brcc	.+10     	; 0x1381c <_ZN13HardwareTimerC1Eh+0x22>
   13812:	66 23       	and	r22, r22
   13814:	61 f0       	breq	.+24     	; 0x1382e <_ZN13HardwareTimerC1Eh+0x34>
   13816:	61 30       	cpi	r22, 0x01	; 1
   13818:	e9 f1       	breq	.+122    	; 0x13894 <_ZN13HardwareTimerC1Eh+0x9a>
   1381a:	6a c1       	rjmp	.+724    	; 0x13af0 <_ZN13HardwareTimerC1Eh+0x2f6>
   1381c:	64 30       	cpi	r22, 0x04	; 4
   1381e:	09 f4       	brne	.+2      	; 0x13822 <_ZN13HardwareTimerC1Eh+0x28>
   13820:	ea c0       	rjmp	.+468    	; 0x139f6 <_ZN13HardwareTimerC1Eh+0x1fc>
   13822:	08 f4       	brcc	.+2      	; 0x13826 <_ZN13HardwareTimerC1Eh+0x2c>
   13824:	a9 c0       	rjmp	.+338    	; 0x13978 <_ZN13HardwareTimerC1Eh+0x17e>
   13826:	65 30       	cpi	r22, 0x05	; 5
   13828:	09 f4       	brne	.+2      	; 0x1382c <_ZN13HardwareTimerC1Eh+0x32>
   1382a:	24 c1       	rjmp	.+584    	; 0x13a74 <_ZN13HardwareTimerC1Eh+0x27a>
   1382c:	61 c1       	rjmp	.+706    	; 0x13af0 <_ZN13HardwareTimerC1Eh+0x2f6>
   1382e:	1d 82       	std	Y+5, r1	; 0x05
   13830:	1c 82       	std	Y+4, r1	; 0x04
   13832:	86 e4       	ldi	r24, 0x46	; 70
   13834:	90 e0       	ldi	r25, 0x00	; 0
   13836:	9f 83       	std	Y+7, r25	; 0x07
   13838:	8e 83       	std	Y+6, r24	; 0x06
   1383a:	8e e6       	ldi	r24, 0x6E	; 110
   1383c:	90 e0       	ldi	r25, 0x00	; 0
   1383e:	99 87       	std	Y+9, r25	; 0x09
   13840:	88 87       	std	Y+8, r24	; 0x08
   13842:	84 e4       	ldi	r24, 0x44	; 68
   13844:	90 e0       	ldi	r25, 0x00	; 0
   13846:	9b 87       	std	Y+11, r25	; 0x0b
   13848:	8a 87       	std	Y+10, r24	; 0x0a
   1384a:	85 e4       	ldi	r24, 0x45	; 69
   1384c:	90 e0       	ldi	r25, 0x00	; 0
   1384e:	9d 87       	std	Y+13, r25	; 0x0d
   13850:	8c 87       	std	Y+12, r24	; 0x0c
   13852:	1f 86       	std	Y+15, r1	; 0x0f
   13854:	1e 86       	std	Y+14, r1	; 0x0e
   13856:	87 e4       	ldi	r24, 0x47	; 71
   13858:	90 e0       	ldi	r25, 0x00	; 0
   1385a:	99 8b       	std	Y+17, r25	; 0x11
   1385c:	88 8b       	std	Y+16, r24	; 0x10
   1385e:	1b 8a       	std	Y+19, r1	; 0x13
   13860:	1a 8a       	std	Y+18, r1	; 0x12
   13862:	88 e4       	ldi	r24, 0x48	; 72
   13864:	90 e0       	ldi	r25, 0x00	; 0
   13866:	9d 8b       	std	Y+21, r25	; 0x15
   13868:	8c 8b       	std	Y+20, r24	; 0x14
   1386a:	1f 8a       	std	Y+23, r1	; 0x17
   1386c:	1e 8a       	std	Y+22, r1	; 0x16
   1386e:	19 8e       	std	Y+25, r1	; 0x19
   13870:	18 8e       	std	Y+24, r1	; 0x18
   13872:	85 e3       	ldi	r24, 0x35	; 53
   13874:	90 e0       	ldi	r25, 0x00	; 0
   13876:	9b 8f       	std	Y+27, r25	; 0x1b
   13878:	8a 8f       	std	Y+26, r24	; 0x1a
   1387a:	1c 8e       	std	Y+28, r1	; 0x1c
   1387c:	91 e0       	ldi	r25, 0x01	; 1
   1387e:	9d 8f       	std	Y+29, r25	; 0x1d
   13880:	82 e0       	ldi	r24, 0x02	; 2
   13882:	8e 8f       	std	Y+30, r24	; 0x1e
   13884:	1f 8e       	std	Y+31, r1	; 0x1f
   13886:	18 a2       	std	Y+32, r1	; 0x20
   13888:	99 a3       	std	Y+33, r25	; 0x21
   1388a:	8a a3       	std	Y+34, r24	; 0x22
   1388c:	1b a2       	std	Y+35, r1	; 0x23
   1388e:	1c a2       	std	Y+36, r1	; 0x24
   13890:	8b 83       	std	Y+3, r24	; 0x03
   13892:	2e c1       	rjmp	.+604    	; 0x13af0 <_ZN13HardwareTimerC1Eh+0x2f6>
   13894:	8f e6       	ldi	r24, 0x6F	; 111
   13896:	90 e0       	ldi	r25, 0x00	; 0
   13898:	99 87       	std	Y+9, r25	; 0x09
   1389a:	88 87       	std	Y+8, r24	; 0x08
   1389c:	85 e8       	ldi	r24, 0x85	; 133
   1389e:	90 e0       	ldi	r25, 0x00	; 0
   138a0:	9d 83       	std	Y+5, r25	; 0x05
   138a2:	8c 83       	std	Y+4, r24	; 0x04
   138a4:	84 e8       	ldi	r24, 0x84	; 132
   138a6:	90 e0       	ldi	r25, 0x00	; 0
   138a8:	9f 83       	std	Y+7, r25	; 0x07
   138aa:	8e 83       	std	Y+6, r24	; 0x06
   138ac:	80 e8       	ldi	r24, 0x80	; 128
   138ae:	90 e0       	ldi	r25, 0x00	; 0
   138b0:	9b 87       	std	Y+11, r25	; 0x0b
   138b2:	8a 87       	std	Y+10, r24	; 0x0a
   138b4:	81 e8       	ldi	r24, 0x81	; 129
   138b6:	90 e0       	ldi	r25, 0x00	; 0
   138b8:	9d 87       	std	Y+13, r25	; 0x0d
   138ba:	8c 87       	std	Y+12, r24	; 0x0c
   138bc:	89 e8       	ldi	r24, 0x89	; 137
   138be:	90 e0       	ldi	r25, 0x00	; 0
   138c0:	9f 87       	std	Y+15, r25	; 0x0f
   138c2:	8e 87       	std	Y+14, r24	; 0x0e
   138c4:	88 e8       	ldi	r24, 0x88	; 136
   138c6:	90 e0       	ldi	r25, 0x00	; 0
   138c8:	99 8b       	std	Y+17, r25	; 0x11
   138ca:	88 8b       	std	Y+16, r24	; 0x10
   138cc:	8b e8       	ldi	r24, 0x8B	; 139
   138ce:	90 e0       	ldi	r25, 0x00	; 0
   138d0:	9b 8b       	std	Y+19, r25	; 0x13
   138d2:	8a 8b       	std	Y+18, r24	; 0x12
   138d4:	8a e8       	ldi	r24, 0x8A	; 138
   138d6:	90 e0       	ldi	r25, 0x00	; 0
   138d8:	9d 8b       	std	Y+21, r25	; 0x15
   138da:	8c 8b       	std	Y+20, r24	; 0x14
   138dc:	8d e8       	ldi	r24, 0x8D	; 141
   138de:	90 e0       	ldi	r25, 0x00	; 0
   138e0:	9f 8b       	std	Y+23, r25	; 0x17
   138e2:	8e 8b       	std	Y+22, r24	; 0x16
   138e4:	8c e8       	ldi	r24, 0x8C	; 140
   138e6:	90 e0       	ldi	r25, 0x00	; 0
   138e8:	99 8f       	std	Y+25, r25	; 0x19
   138ea:	88 8f       	std	Y+24, r24	; 0x18
   138ec:	86 e3       	ldi	r24, 0x36	; 54
   138ee:	90 e0       	ldi	r25, 0x00	; 0
   138f0:	9b 8f       	std	Y+27, r25	; 0x1b
   138f2:	8a 8f       	std	Y+26, r24	; 0x1a
   138f4:	1c 8e       	std	Y+28, r1	; 0x1c
   138f6:	21 e0       	ldi	r18, 0x01	; 1
   138f8:	2d 8f       	std	Y+29, r18	; 0x1d
   138fa:	92 e0       	ldi	r25, 0x02	; 2
   138fc:	9e 8f       	std	Y+30, r25	; 0x1e
   138fe:	83 e0       	ldi	r24, 0x03	; 3
   13900:	8f 8f       	std	Y+31, r24	; 0x1f
   13902:	18 a2       	std	Y+32, r1	; 0x20
   13904:	29 a3       	std	Y+33, r18	; 0x21
   13906:	9a a3       	std	Y+34, r25	; 0x22
   13908:	8b a3       	std	Y+35, r24	; 0x23
   1390a:	95 e0       	ldi	r25, 0x05	; 5
   1390c:	9c a3       	std	Y+36, r25	; 0x24
   1390e:	8b 83       	std	Y+3, r24	; 0x03
   13910:	ef c0       	rjmp	.+478    	; 0x13af0 <_ZN13HardwareTimerC1Eh+0x2f6>
   13912:	1d 82       	std	Y+5, r1	; 0x05
   13914:	1c 82       	std	Y+4, r1	; 0x04
   13916:	82 eb       	ldi	r24, 0xB2	; 178
   13918:	90 e0       	ldi	r25, 0x00	; 0
   1391a:	9f 83       	std	Y+7, r25	; 0x07
   1391c:	8e 83       	std	Y+6, r24	; 0x06
   1391e:	80 e7       	ldi	r24, 0x70	; 112
   13920:	90 e0       	ldi	r25, 0x00	; 0
   13922:	99 87       	std	Y+9, r25	; 0x09
   13924:	88 87       	std	Y+8, r24	; 0x08
   13926:	80 eb       	ldi	r24, 0xB0	; 176
   13928:	90 e0       	ldi	r25, 0x00	; 0
   1392a:	9b 87       	std	Y+11, r25	; 0x0b
   1392c:	8a 87       	std	Y+10, r24	; 0x0a
   1392e:	81 eb       	ldi	r24, 0xB1	; 177
   13930:	90 e0       	ldi	r25, 0x00	; 0
   13932:	9d 87       	std	Y+13, r25	; 0x0d
   13934:	8c 87       	std	Y+12, r24	; 0x0c
   13936:	1f 86       	std	Y+15, r1	; 0x0f
   13938:	1e 86       	std	Y+14, r1	; 0x0e
   1393a:	83 eb       	ldi	r24, 0xB3	; 179
   1393c:	90 e0       	ldi	r25, 0x00	; 0
   1393e:	99 8b       	std	Y+17, r25	; 0x11
   13940:	88 8b       	std	Y+16, r24	; 0x10
   13942:	1b 8a       	std	Y+19, r1	; 0x13
   13944:	1a 8a       	std	Y+18, r1	; 0x12
   13946:	84 eb       	ldi	r24, 0xB4	; 180
   13948:	90 e0       	ldi	r25, 0x00	; 0
   1394a:	9d 8b       	std	Y+21, r25	; 0x15
   1394c:	8c 8b       	std	Y+20, r24	; 0x14
   1394e:	1f 8a       	std	Y+23, r1	; 0x17
   13950:	1e 8a       	std	Y+22, r1	; 0x16
   13952:	19 8e       	std	Y+25, r1	; 0x19
   13954:	18 8e       	std	Y+24, r1	; 0x18
   13956:	87 e3       	ldi	r24, 0x37	; 55
   13958:	90 e0       	ldi	r25, 0x00	; 0
   1395a:	9b 8f       	std	Y+27, r25	; 0x1b
   1395c:	8a 8f       	std	Y+26, r24	; 0x1a
   1395e:	1c 8e       	std	Y+28, r1	; 0x1c
   13960:	91 e0       	ldi	r25, 0x01	; 1
   13962:	9d 8f       	std	Y+29, r25	; 0x1d
   13964:	82 e0       	ldi	r24, 0x02	; 2
   13966:	8e 8f       	std	Y+30, r24	; 0x1e
   13968:	1f 8e       	std	Y+31, r1	; 0x1f
   1396a:	18 a2       	std	Y+32, r1	; 0x20
   1396c:	99 a3       	std	Y+33, r25	; 0x21
   1396e:	8a a3       	std	Y+34, r24	; 0x22
   13970:	1b a2       	std	Y+35, r1	; 0x23
   13972:	1c a2       	std	Y+36, r1	; 0x24
   13974:	8b 83       	std	Y+3, r24	; 0x03
   13976:	bc c0       	rjmp	.+376    	; 0x13af0 <_ZN13HardwareTimerC1Eh+0x2f6>
   13978:	81 e7       	ldi	r24, 0x71	; 113
   1397a:	90 e0       	ldi	r25, 0x00	; 0
   1397c:	99 87       	std	Y+9, r25	; 0x09
   1397e:	88 87       	std	Y+8, r24	; 0x08
   13980:	85 e9       	ldi	r24, 0x95	; 149
   13982:	90 e0       	ldi	r25, 0x00	; 0
   13984:	9d 83       	std	Y+5, r25	; 0x05
   13986:	8c 83       	std	Y+4, r24	; 0x04
   13988:	84 e9       	ldi	r24, 0x94	; 148
   1398a:	90 e0       	ldi	r25, 0x00	; 0
   1398c:	9f 83       	std	Y+7, r25	; 0x07
   1398e:	8e 83       	std	Y+6, r24	; 0x06
   13990:	80 e9       	ldi	r24, 0x90	; 144
   13992:	90 e0       	ldi	r25, 0x00	; 0
   13994:	9b 87       	std	Y+11, r25	; 0x0b
   13996:	8a 87       	std	Y+10, r24	; 0x0a
   13998:	81 e9       	ldi	r24, 0x91	; 145
   1399a:	90 e0       	ldi	r25, 0x00	; 0
   1399c:	9d 87       	std	Y+13, r25	; 0x0d
   1399e:	8c 87       	std	Y+12, r24	; 0x0c
   139a0:	89 e9       	ldi	r24, 0x99	; 153
   139a2:	90 e0       	ldi	r25, 0x00	; 0
   139a4:	9f 87       	std	Y+15, r25	; 0x0f
   139a6:	8e 87       	std	Y+14, r24	; 0x0e
   139a8:	88 e9       	ldi	r24, 0x98	; 152
   139aa:	90 e0       	ldi	r25, 0x00	; 0
   139ac:	99 8b       	std	Y+17, r25	; 0x11
   139ae:	88 8b       	std	Y+16, r24	; 0x10
   139b0:	8b e9       	ldi	r24, 0x9B	; 155
   139b2:	90 e0       	ldi	r25, 0x00	; 0
   139b4:	9b 8b       	std	Y+19, r25	; 0x13
   139b6:	8a 8b       	std	Y+18, r24	; 0x12
   139b8:	8a e9       	ldi	r24, 0x9A	; 154
   139ba:	90 e0       	ldi	r25, 0x00	; 0
   139bc:	9d 8b       	std	Y+21, r25	; 0x15
   139be:	8c 8b       	std	Y+20, r24	; 0x14
   139c0:	8d e9       	ldi	r24, 0x9D	; 157
   139c2:	90 e0       	ldi	r25, 0x00	; 0
   139c4:	9f 8b       	std	Y+23, r25	; 0x17
   139c6:	8e 8b       	std	Y+22, r24	; 0x16
   139c8:	8c e9       	ldi	r24, 0x9C	; 156
   139ca:	90 e0       	ldi	r25, 0x00	; 0
   139cc:	99 8f       	std	Y+25, r25	; 0x19
   139ce:	88 8f       	std	Y+24, r24	; 0x18
   139d0:	88 e3       	ldi	r24, 0x38	; 56
   139d2:	90 e0       	ldi	r25, 0x00	; 0
   139d4:	9b 8f       	std	Y+27, r25	; 0x1b
   139d6:	8a 8f       	std	Y+26, r24	; 0x1a
   139d8:	1c 8e       	std	Y+28, r1	; 0x1c
   139da:	21 e0       	ldi	r18, 0x01	; 1
   139dc:	2d 8f       	std	Y+29, r18	; 0x1d
   139de:	92 e0       	ldi	r25, 0x02	; 2
   139e0:	9e 8f       	std	Y+30, r25	; 0x1e
   139e2:	83 e0       	ldi	r24, 0x03	; 3
   139e4:	8f 8f       	std	Y+31, r24	; 0x1f
   139e6:	18 a2       	std	Y+32, r1	; 0x20
   139e8:	29 a3       	std	Y+33, r18	; 0x21
   139ea:	9a a3       	std	Y+34, r25	; 0x22
   139ec:	8b a3       	std	Y+35, r24	; 0x23
   139ee:	95 e0       	ldi	r25, 0x05	; 5
   139f0:	9c a3       	std	Y+36, r25	; 0x24
   139f2:	8b 83       	std	Y+3, r24	; 0x03
   139f4:	7d c0       	rjmp	.+250    	; 0x13af0 <_ZN13HardwareTimerC1Eh+0x2f6>
   139f6:	82 e7       	ldi	r24, 0x72	; 114
   139f8:	90 e0       	ldi	r25, 0x00	; 0
   139fa:	99 87       	std	Y+9, r25	; 0x09
   139fc:	88 87       	std	Y+8, r24	; 0x08
   139fe:	85 ea       	ldi	r24, 0xA5	; 165
   13a00:	90 e0       	ldi	r25, 0x00	; 0
   13a02:	9d 83       	std	Y+5, r25	; 0x05
   13a04:	8c 83       	std	Y+4, r24	; 0x04
   13a06:	84 ea       	ldi	r24, 0xA4	; 164
   13a08:	90 e0       	ldi	r25, 0x00	; 0
   13a0a:	9f 83       	std	Y+7, r25	; 0x07
   13a0c:	8e 83       	std	Y+6, r24	; 0x06
   13a0e:	80 ea       	ldi	r24, 0xA0	; 160
   13a10:	90 e0       	ldi	r25, 0x00	; 0
   13a12:	9b 87       	std	Y+11, r25	; 0x0b
   13a14:	8a 87       	std	Y+10, r24	; 0x0a
   13a16:	81 ea       	ldi	r24, 0xA1	; 161
   13a18:	90 e0       	ldi	r25, 0x00	; 0
   13a1a:	9d 87       	std	Y+13, r25	; 0x0d
   13a1c:	8c 87       	std	Y+12, r24	; 0x0c
   13a1e:	89 ea       	ldi	r24, 0xA9	; 169
   13a20:	90 e0       	ldi	r25, 0x00	; 0
   13a22:	9f 87       	std	Y+15, r25	; 0x0f
   13a24:	8e 87       	std	Y+14, r24	; 0x0e
   13a26:	88 ea       	ldi	r24, 0xA8	; 168
   13a28:	90 e0       	ldi	r25, 0x00	; 0
   13a2a:	99 8b       	std	Y+17, r25	; 0x11
   13a2c:	88 8b       	std	Y+16, r24	; 0x10
   13a2e:	8b ea       	ldi	r24, 0xAB	; 171
   13a30:	90 e0       	ldi	r25, 0x00	; 0
   13a32:	9b 8b       	std	Y+19, r25	; 0x13
   13a34:	8a 8b       	std	Y+18, r24	; 0x12
   13a36:	8a ea       	ldi	r24, 0xAA	; 170
   13a38:	90 e0       	ldi	r25, 0x00	; 0
   13a3a:	9d 8b       	std	Y+21, r25	; 0x15
   13a3c:	8c 8b       	std	Y+20, r24	; 0x14
   13a3e:	8d ea       	ldi	r24, 0xAD	; 173
   13a40:	90 e0       	ldi	r25, 0x00	; 0
   13a42:	9f 8b       	std	Y+23, r25	; 0x17
   13a44:	8e 8b       	std	Y+22, r24	; 0x16
   13a46:	8c ea       	ldi	r24, 0xAC	; 172
   13a48:	90 e0       	ldi	r25, 0x00	; 0
   13a4a:	99 8f       	std	Y+25, r25	; 0x19
   13a4c:	88 8f       	std	Y+24, r24	; 0x18
   13a4e:	89 e3       	ldi	r24, 0x39	; 57
   13a50:	90 e0       	ldi	r25, 0x00	; 0
   13a52:	9b 8f       	std	Y+27, r25	; 0x1b
   13a54:	8a 8f       	std	Y+26, r24	; 0x1a
   13a56:	1c 8e       	std	Y+28, r1	; 0x1c
   13a58:	21 e0       	ldi	r18, 0x01	; 1
   13a5a:	2d 8f       	std	Y+29, r18	; 0x1d
   13a5c:	92 e0       	ldi	r25, 0x02	; 2
   13a5e:	9e 8f       	std	Y+30, r25	; 0x1e
   13a60:	83 e0       	ldi	r24, 0x03	; 3
   13a62:	8f 8f       	std	Y+31, r24	; 0x1f
   13a64:	18 a2       	std	Y+32, r1	; 0x20
   13a66:	29 a3       	std	Y+33, r18	; 0x21
   13a68:	9a a3       	std	Y+34, r25	; 0x22
   13a6a:	8b a3       	std	Y+35, r24	; 0x23
   13a6c:	95 e0       	ldi	r25, 0x05	; 5
   13a6e:	9c a3       	std	Y+36, r25	; 0x24
   13a70:	8b 83       	std	Y+3, r24	; 0x03
   13a72:	3e c0       	rjmp	.+124    	; 0x13af0 <_ZN13HardwareTimerC1Eh+0x2f6>
   13a74:	83 e7       	ldi	r24, 0x73	; 115
   13a76:	90 e0       	ldi	r25, 0x00	; 0
   13a78:	99 87       	std	Y+9, r25	; 0x09
   13a7a:	88 87       	std	Y+8, r24	; 0x08
   13a7c:	85 e2       	ldi	r24, 0x25	; 37
   13a7e:	91 e0       	ldi	r25, 0x01	; 1
   13a80:	9d 83       	std	Y+5, r25	; 0x05
   13a82:	8c 83       	std	Y+4, r24	; 0x04
   13a84:	84 e2       	ldi	r24, 0x24	; 36
   13a86:	91 e0       	ldi	r25, 0x01	; 1
   13a88:	9f 83       	std	Y+7, r25	; 0x07
   13a8a:	8e 83       	std	Y+6, r24	; 0x06
   13a8c:	80 e2       	ldi	r24, 0x20	; 32
   13a8e:	91 e0       	ldi	r25, 0x01	; 1
   13a90:	9b 87       	std	Y+11, r25	; 0x0b
   13a92:	8a 87       	std	Y+10, r24	; 0x0a
   13a94:	81 e2       	ldi	r24, 0x21	; 33
   13a96:	91 e0       	ldi	r25, 0x01	; 1
   13a98:	9d 87       	std	Y+13, r25	; 0x0d
   13a9a:	8c 87       	std	Y+12, r24	; 0x0c
   13a9c:	89 e2       	ldi	r24, 0x29	; 41
   13a9e:	91 e0       	ldi	r25, 0x01	; 1
   13aa0:	9f 87       	std	Y+15, r25	; 0x0f
   13aa2:	8e 87       	std	Y+14, r24	; 0x0e
   13aa4:	88 e2       	ldi	r24, 0x28	; 40
   13aa6:	91 e0       	ldi	r25, 0x01	; 1
   13aa8:	99 8b       	std	Y+17, r25	; 0x11
   13aaa:	88 8b       	std	Y+16, r24	; 0x10
   13aac:	8b e2       	ldi	r24, 0x2B	; 43
   13aae:	91 e0       	ldi	r25, 0x01	; 1
   13ab0:	9b 8b       	std	Y+19, r25	; 0x13
   13ab2:	8a 8b       	std	Y+18, r24	; 0x12
   13ab4:	8a e2       	ldi	r24, 0x2A	; 42
   13ab6:	91 e0       	ldi	r25, 0x01	; 1
   13ab8:	9d 8b       	std	Y+21, r25	; 0x15
   13aba:	8c 8b       	std	Y+20, r24	; 0x14
   13abc:	8d e2       	ldi	r24, 0x2D	; 45
   13abe:	91 e0       	ldi	r25, 0x01	; 1
   13ac0:	9f 8b       	std	Y+23, r25	; 0x17
   13ac2:	8e 8b       	std	Y+22, r24	; 0x16
   13ac4:	8c e2       	ldi	r24, 0x2C	; 44
   13ac6:	91 e0       	ldi	r25, 0x01	; 1
   13ac8:	99 8f       	std	Y+25, r25	; 0x19
   13aca:	88 8f       	std	Y+24, r24	; 0x18
   13acc:	8a e3       	ldi	r24, 0x3A	; 58
   13ace:	90 e0       	ldi	r25, 0x00	; 0
   13ad0:	9b 8f       	std	Y+27, r25	; 0x1b
   13ad2:	8a 8f       	std	Y+26, r24	; 0x1a
   13ad4:	1c 8e       	std	Y+28, r1	; 0x1c
   13ad6:	21 e0       	ldi	r18, 0x01	; 1
   13ad8:	2d 8f       	std	Y+29, r18	; 0x1d
   13ada:	92 e0       	ldi	r25, 0x02	; 2
   13adc:	9e 8f       	std	Y+30, r25	; 0x1e
   13ade:	83 e0       	ldi	r24, 0x03	; 3
   13ae0:	8f 8f       	std	Y+31, r24	; 0x1f
   13ae2:	18 a2       	std	Y+32, r1	; 0x20
   13ae4:	29 a3       	std	Y+33, r18	; 0x21
   13ae6:	9a a3       	std	Y+34, r25	; 0x22
   13ae8:	8b a3       	std	Y+35, r24	; 0x23
   13aea:	95 e0       	ldi	r25, 0x05	; 5
   13aec:	9c a3       	std	Y+36, r25	; 0x24
   13aee:	8b 83       	std	Y+3, r24	; 0x03
   13af0:	60 e0       	ldi	r22, 0x00	; 0
   13af2:	ce 01       	movw	r24, r28
   13af4:	38 de       	rcall	.-912    	; 0x13766 <_ZN13HardwareTimer14setClockSourceEh>
   13af6:	ec 81       	ldd	r30, Y+4	; 0x04
   13af8:	fd 81       	ldd	r31, Y+5	; 0x05
   13afa:	30 97       	sbiw	r30, 0x00	; 0
   13afc:	09 f0       	breq	.+2      	; 0x13b00 <_ZN13HardwareTimerC1Eh+0x306>
   13afe:	10 82       	st	Z, r1
   13b00:	ee 81       	ldd	r30, Y+6	; 0x06
   13b02:	ff 81       	ldd	r31, Y+7	; 0x07
   13b04:	10 82       	st	Z, r1
   13b06:	1e a2       	std	Y+38, r1	; 0x26
   13b08:	1d a2       	std	Y+37, r1	; 0x25
   13b0a:	18 a6       	std	Y+40, r1	; 0x28
   13b0c:	1f a2       	std	Y+39, r1	; 0x27
   13b0e:	1a a6       	std	Y+42, r1	; 0x2a
   13b10:	19 a6       	std	Y+41, r1	; 0x29
   13b12:	1c a6       	std	Y+44, r1	; 0x2c
   13b14:	1b a6       	std	Y+43, r1	; 0x2b
   13b16:	1e a6       	std	Y+46, r1	; 0x2e
   13b18:	1d a6       	std	Y+45, r1	; 0x2d
   13b1a:	df 91       	pop	r29
   13b1c:	cf 91       	pop	r28
   13b1e:	08 95       	ret

00013b20 <_ZN13HardwareTimer12setInterruptEhh>:
   13b20:	1f 93       	push	r17
   13b22:	cf 93       	push	r28
   13b24:	df 93       	push	r29
   13b26:	ec 01       	movw	r28, r24
   13b28:	14 2f       	mov	r17, r20
   13b2a:	62 30       	cpi	r22, 0x02	; 2
   13b2c:	09 f4       	brne	.+2      	; 0x13b30 <_ZN13HardwareTimer12setInterruptEhh+0x10>
   13b2e:	41 c0       	rjmp	.+130    	; 0x13bb2 <_ZN13HardwareTimer12setInterruptEhh+0x92>
   13b30:	28 f4       	brcc	.+10     	; 0x13b3c <_ZN13HardwareTimer12setInterruptEhh+0x1c>
   13b32:	66 23       	and	r22, r22
   13b34:	51 f0       	breq	.+20     	; 0x13b4a <_ZN13HardwareTimer12setInterruptEhh+0x2a>
   13b36:	61 30       	cpi	r22, 0x01	; 1
   13b38:	11 f1       	breq	.+68     	; 0x13b7e <_ZN13HardwareTimer12setInterruptEhh+0x5e>
   13b3a:	86 c0       	rjmp	.+268    	; 0x13c48 <_ZN13HardwareTimer12setInterruptEhh+0x128>
   13b3c:	63 30       	cpi	r22, 0x03	; 3
   13b3e:	09 f4       	brne	.+2      	; 0x13b42 <_ZN13HardwareTimer12setInterruptEhh+0x22>
   13b40:	52 c0       	rjmp	.+164    	; 0x13be6 <_ZN13HardwareTimer12setInterruptEhh+0xc6>
   13b42:	64 30       	cpi	r22, 0x04	; 4
   13b44:	09 f4       	brne	.+2      	; 0x13b48 <_ZN13HardwareTimer12setInterruptEhh+0x28>
   13b46:	69 c0       	rjmp	.+210    	; 0x13c1a <_ZN13HardwareTimer12setInterruptEhh+0xfa>
   13b48:	7f c0       	rjmp	.+254    	; 0x13c48 <_ZN13HardwareTimer12setInterruptEhh+0x128>
   13b4a:	63 e0       	ldi	r22, 0x03	; 3
   13b4c:	be dd       	rcall	.-1156   	; 0x136ca <_ZN13HardwareTimer14clearInterruptEh>
   13b4e:	e8 85       	ldd	r30, Y+8	; 0x08
   13b50:	f9 85       	ldd	r31, Y+9	; 0x09
   13b52:	40 81       	ld	r20, Z
   13b54:	28 a1       	ldd	r18, Y+32	; 0x20
   13b56:	81 e0       	ldi	r24, 0x01	; 1
   13b58:	90 e0       	ldi	r25, 0x00	; 0
   13b5a:	02 2e       	mov	r0, r18
   13b5c:	02 c0       	rjmp	.+4      	; 0x13b62 <_ZN13HardwareTimer12setInterruptEhh+0x42>
   13b5e:	88 0f       	add	r24, r24
   13b60:	99 1f       	adc	r25, r25
   13b62:	0a 94       	dec	r0
   13b64:	e2 f7       	brpl	.-8      	; 0x13b5e <_ZN13HardwareTimer12setInterruptEhh+0x3e>
   13b66:	80 95       	com	r24
   13b68:	84 23       	and	r24, r20
   13b6a:	41 2f       	mov	r20, r17
   13b6c:	50 e0       	ldi	r21, 0x00	; 0
   13b6e:	02 c0       	rjmp	.+4      	; 0x13b74 <_ZN13HardwareTimer12setInterruptEhh+0x54>
   13b70:	44 0f       	add	r20, r20
   13b72:	55 1f       	adc	r21, r21
   13b74:	2a 95       	dec	r18
   13b76:	e2 f7       	brpl	.-8      	; 0x13b70 <_ZN13HardwareTimer12setInterruptEhh+0x50>
   13b78:	48 2b       	or	r20, r24
   13b7a:	40 83       	st	Z, r20
   13b7c:	65 c0       	rjmp	.+202    	; 0x13c48 <_ZN13HardwareTimer12setInterruptEhh+0x128>
   13b7e:	60 e0       	ldi	r22, 0x00	; 0
   13b80:	a4 dd       	rcall	.-1208   	; 0x136ca <_ZN13HardwareTimer14clearInterruptEh>
   13b82:	e8 85       	ldd	r30, Y+8	; 0x08
   13b84:	f9 85       	ldd	r31, Y+9	; 0x09
   13b86:	40 81       	ld	r20, Z
   13b88:	29 a1       	ldd	r18, Y+33	; 0x21
   13b8a:	81 e0       	ldi	r24, 0x01	; 1
   13b8c:	90 e0       	ldi	r25, 0x00	; 0
   13b8e:	02 2e       	mov	r0, r18
   13b90:	02 c0       	rjmp	.+4      	; 0x13b96 <_ZN13HardwareTimer12setInterruptEhh+0x76>
   13b92:	88 0f       	add	r24, r24
   13b94:	99 1f       	adc	r25, r25
   13b96:	0a 94       	dec	r0
   13b98:	e2 f7       	brpl	.-8      	; 0x13b92 <_ZN13HardwareTimer12setInterruptEhh+0x72>
   13b9a:	80 95       	com	r24
   13b9c:	84 23       	and	r24, r20
   13b9e:	41 2f       	mov	r20, r17
   13ba0:	50 e0       	ldi	r21, 0x00	; 0
   13ba2:	02 c0       	rjmp	.+4      	; 0x13ba8 <_ZN13HardwareTimer12setInterruptEhh+0x88>
   13ba4:	44 0f       	add	r20, r20
   13ba6:	55 1f       	adc	r21, r21
   13ba8:	2a 95       	dec	r18
   13baa:	e2 f7       	brpl	.-8      	; 0x13ba4 <_ZN13HardwareTimer12setInterruptEhh+0x84>
   13bac:	48 2b       	or	r20, r24
   13bae:	40 83       	st	Z, r20
   13bb0:	4b c0       	rjmp	.+150    	; 0x13c48 <_ZN13HardwareTimer12setInterruptEhh+0x128>
   13bb2:	61 e0       	ldi	r22, 0x01	; 1
   13bb4:	8a dd       	rcall	.-1260   	; 0x136ca <_ZN13HardwareTimer14clearInterruptEh>
   13bb6:	e8 85       	ldd	r30, Y+8	; 0x08
   13bb8:	f9 85       	ldd	r31, Y+9	; 0x09
   13bba:	40 81       	ld	r20, Z
   13bbc:	2a a1       	ldd	r18, Y+34	; 0x22
   13bbe:	81 e0       	ldi	r24, 0x01	; 1
   13bc0:	90 e0       	ldi	r25, 0x00	; 0
   13bc2:	02 2e       	mov	r0, r18
   13bc4:	02 c0       	rjmp	.+4      	; 0x13bca <_ZN13HardwareTimer12setInterruptEhh+0xaa>
   13bc6:	88 0f       	add	r24, r24
   13bc8:	99 1f       	adc	r25, r25
   13bca:	0a 94       	dec	r0
   13bcc:	e2 f7       	brpl	.-8      	; 0x13bc6 <_ZN13HardwareTimer12setInterruptEhh+0xa6>
   13bce:	80 95       	com	r24
   13bd0:	84 23       	and	r24, r20
   13bd2:	41 2f       	mov	r20, r17
   13bd4:	50 e0       	ldi	r21, 0x00	; 0
   13bd6:	02 c0       	rjmp	.+4      	; 0x13bdc <_ZN13HardwareTimer12setInterruptEhh+0xbc>
   13bd8:	44 0f       	add	r20, r20
   13bda:	55 1f       	adc	r21, r21
   13bdc:	2a 95       	dec	r18
   13bde:	e2 f7       	brpl	.-8      	; 0x13bd8 <_ZN13HardwareTimer12setInterruptEhh+0xb8>
   13be0:	48 2b       	or	r20, r24
   13be2:	40 83       	st	Z, r20
   13be4:	31 c0       	rjmp	.+98     	; 0x13c48 <_ZN13HardwareTimer12setInterruptEhh+0x128>
   13be6:	62 e0       	ldi	r22, 0x02	; 2
   13be8:	70 dd       	rcall	.-1312   	; 0x136ca <_ZN13HardwareTimer14clearInterruptEh>
   13bea:	e8 85       	ldd	r30, Y+8	; 0x08
   13bec:	f9 85       	ldd	r31, Y+9	; 0x09
   13bee:	40 81       	ld	r20, Z
   13bf0:	2b a1       	ldd	r18, Y+35	; 0x23
   13bf2:	81 e0       	ldi	r24, 0x01	; 1
   13bf4:	90 e0       	ldi	r25, 0x00	; 0
   13bf6:	02 2e       	mov	r0, r18
   13bf8:	02 c0       	rjmp	.+4      	; 0x13bfe <_ZN13HardwareTimer12setInterruptEhh+0xde>
   13bfa:	88 0f       	add	r24, r24
   13bfc:	99 1f       	adc	r25, r25
   13bfe:	0a 94       	dec	r0
   13c00:	e2 f7       	brpl	.-8      	; 0x13bfa <_ZN13HardwareTimer12setInterruptEhh+0xda>
   13c02:	80 95       	com	r24
   13c04:	84 23       	and	r24, r20
   13c06:	41 2f       	mov	r20, r17
   13c08:	50 e0       	ldi	r21, 0x00	; 0
   13c0a:	02 c0       	rjmp	.+4      	; 0x13c10 <_ZN13HardwareTimer12setInterruptEhh+0xf0>
   13c0c:	44 0f       	add	r20, r20
   13c0e:	55 1f       	adc	r21, r21
   13c10:	2a 95       	dec	r18
   13c12:	e2 f7       	brpl	.-8      	; 0x13c0c <_ZN13HardwareTimer12setInterruptEhh+0xec>
   13c14:	48 2b       	or	r20, r24
   13c16:	40 83       	st	Z, r20
   13c18:	17 c0       	rjmp	.+46     	; 0x13c48 <_ZN13HardwareTimer12setInterruptEhh+0x128>
   13c1a:	e8 85       	ldd	r30, Y+8	; 0x08
   13c1c:	f9 85       	ldd	r31, Y+9	; 0x09
   13c1e:	40 81       	ld	r20, Z
   13c20:	2c a1       	ldd	r18, Y+36	; 0x24
   13c22:	81 e0       	ldi	r24, 0x01	; 1
   13c24:	90 e0       	ldi	r25, 0x00	; 0
   13c26:	02 2e       	mov	r0, r18
   13c28:	02 c0       	rjmp	.+4      	; 0x13c2e <_ZN13HardwareTimer12setInterruptEhh+0x10e>
   13c2a:	88 0f       	add	r24, r24
   13c2c:	99 1f       	adc	r25, r25
   13c2e:	0a 94       	dec	r0
   13c30:	e2 f7       	brpl	.-8      	; 0x13c2a <_ZN13HardwareTimer12setInterruptEhh+0x10a>
   13c32:	80 95       	com	r24
   13c34:	84 23       	and	r24, r20
   13c36:	41 2f       	mov	r20, r17
   13c38:	50 e0       	ldi	r21, 0x00	; 0
   13c3a:	02 c0       	rjmp	.+4      	; 0x13c40 <_ZN13HardwareTimer12setInterruptEhh+0x120>
   13c3c:	44 0f       	add	r20, r20
   13c3e:	55 1f       	adc	r21, r21
   13c40:	2a 95       	dec	r18
   13c42:	e2 f7       	brpl	.-8      	; 0x13c3c <_ZN13HardwareTimer12setInterruptEhh+0x11c>
   13c44:	48 2b       	or	r20, r24
   13c46:	40 83       	st	Z, r20
   13c48:	df 91       	pop	r29
   13c4a:	cf 91       	pop	r28
   13c4c:	1f 91       	pop	r17
   13c4e:	08 95       	ret

00013c50 <_ZN13HardwareTimer15attachInterruptEhP16InterruptServicei>:
   13c50:	62 30       	cpi	r22, 0x02	; 2
   13c52:	99 f0       	breq	.+38     	; 0x13c7a <_ZN13HardwareTimer15attachInterruptEhP16InterruptServicei+0x2a>
   13c54:	28 f4       	brcc	.+10     	; 0x13c60 <_ZN13HardwareTimer15attachInterruptEhP16InterruptServicei+0x10>
   13c56:	66 23       	and	r22, r22
   13c58:	41 f0       	breq	.+16     	; 0x13c6a <_ZN13HardwareTimer15attachInterruptEhP16InterruptServicei+0x1a>
   13c5a:	61 30       	cpi	r22, 0x01	; 1
   13c5c:	51 f0       	breq	.+20     	; 0x13c72 <_ZN13HardwareTimer15attachInterruptEhP16InterruptServicei+0x22>
   13c5e:	18 c0       	rjmp	.+48     	; 0x13c90 <_ZN13HardwareTimer15attachInterruptEhP16InterruptServicei+0x40>
   13c60:	63 30       	cpi	r22, 0x03	; 3
   13c62:	79 f0       	breq	.+30     	; 0x13c82 <_ZN13HardwareTimer15attachInterruptEhP16InterruptServicei+0x32>
   13c64:	64 30       	cpi	r22, 0x04	; 4
   13c66:	89 f0       	breq	.+34     	; 0x13c8a <_ZN13HardwareTimer15attachInterruptEhP16InterruptServicei+0x3a>
   13c68:	13 c0       	rjmp	.+38     	; 0x13c90 <_ZN13HardwareTimer15attachInterruptEhP16InterruptServicei+0x40>
   13c6a:	fc 01       	movw	r30, r24
   13c6c:	56 a3       	std	Z+38, r21	; 0x26
   13c6e:	45 a3       	std	Z+37, r20	; 0x25
   13c70:	0f c0       	rjmp	.+30     	; 0x13c90 <_ZN13HardwareTimer15attachInterruptEhP16InterruptServicei+0x40>
   13c72:	fc 01       	movw	r30, r24
   13c74:	50 a7       	std	Z+40, r21	; 0x28
   13c76:	47 a3       	std	Z+39, r20	; 0x27
   13c78:	0b c0       	rjmp	.+22     	; 0x13c90 <_ZN13HardwareTimer15attachInterruptEhP16InterruptServicei+0x40>
   13c7a:	fc 01       	movw	r30, r24
   13c7c:	52 a7       	std	Z+42, r21	; 0x2a
   13c7e:	41 a7       	std	Z+41, r20	; 0x29
   13c80:	07 c0       	rjmp	.+14     	; 0x13c90 <_ZN13HardwareTimer15attachInterruptEhP16InterruptServicei+0x40>
   13c82:	fc 01       	movw	r30, r24
   13c84:	54 a7       	std	Z+44, r21	; 0x2c
   13c86:	43 a7       	std	Z+43, r20	; 0x2b
   13c88:	03 c0       	rjmp	.+6      	; 0x13c90 <_ZN13HardwareTimer15attachInterruptEhP16InterruptServicei+0x40>
   13c8a:	fc 01       	movw	r30, r24
   13c8c:	56 a7       	std	Z+46, r21	; 0x2e
   13c8e:	45 a7       	std	Z+45, r20	; 0x2d
   13c90:	45 2b       	or	r20, r21
   13c92:	19 f4       	brne	.+6      	; 0x13c9a <_ZN13HardwareTimer15attachInterruptEhP16InterruptServicei+0x4a>
   13c94:	40 e0       	ldi	r20, 0x00	; 0
   13c96:	44 cf       	rjmp	.-376    	; 0x13b20 <_ZN13HardwareTimer12setInterruptEhh>
   13c98:	08 95       	ret
   13c9a:	42 2f       	mov	r20, r18
   13c9c:	41 cf       	rjmp	.-382    	; 0x13b20 <_ZN13HardwareTimer12setInterruptEhh>
   13c9e:	08 95       	ret

00013ca0 <_ZN13HardwareTimer15detachInterruptEh>:
   13ca0:	0f 93       	push	r16
   13ca2:	1f 93       	push	r17
   13ca4:	cf 93       	push	r28
   13ca6:	8c 01       	movw	r16, r24
   13ca8:	c6 2f       	mov	r28, r22
   13caa:	40 e0       	ldi	r20, 0x00	; 0
   13cac:	39 df       	rcall	.-398    	; 0x13b20 <_ZN13HardwareTimer12setInterruptEhh>
   13cae:	c2 30       	cpi	r28, 0x02	; 2
   13cb0:	99 f0       	breq	.+38     	; 0x13cd8 <_ZN13HardwareTimer15detachInterruptEh+0x38>
   13cb2:	28 f4       	brcc	.+10     	; 0x13cbe <_ZN13HardwareTimer15detachInterruptEh+0x1e>
   13cb4:	cc 23       	and	r28, r28
   13cb6:	41 f0       	breq	.+16     	; 0x13cc8 <_ZN13HardwareTimer15detachInterruptEh+0x28>
   13cb8:	c1 30       	cpi	r28, 0x01	; 1
   13cba:	51 f0       	breq	.+20     	; 0x13cd0 <_ZN13HardwareTimer15detachInterruptEh+0x30>
   13cbc:	18 c0       	rjmp	.+48     	; 0x13cee <_ZN13HardwareTimer15detachInterruptEh+0x4e>
   13cbe:	c3 30       	cpi	r28, 0x03	; 3
   13cc0:	79 f0       	breq	.+30     	; 0x13ce0 <_ZN13HardwareTimer15detachInterruptEh+0x40>
   13cc2:	c4 30       	cpi	r28, 0x04	; 4
   13cc4:	89 f0       	breq	.+34     	; 0x13ce8 <_ZN13HardwareTimer15detachInterruptEh+0x48>
   13cc6:	13 c0       	rjmp	.+38     	; 0x13cee <_ZN13HardwareTimer15detachInterruptEh+0x4e>
   13cc8:	f8 01       	movw	r30, r16
   13cca:	16 a2       	std	Z+38, r1	; 0x26
   13ccc:	15 a2       	std	Z+37, r1	; 0x25
   13cce:	0f c0       	rjmp	.+30     	; 0x13cee <_ZN13HardwareTimer15detachInterruptEh+0x4e>
   13cd0:	f8 01       	movw	r30, r16
   13cd2:	10 a6       	std	Z+40, r1	; 0x28
   13cd4:	17 a2       	std	Z+39, r1	; 0x27
   13cd6:	0b c0       	rjmp	.+22     	; 0x13cee <_ZN13HardwareTimer15detachInterruptEh+0x4e>
   13cd8:	f8 01       	movw	r30, r16
   13cda:	12 a6       	std	Z+42, r1	; 0x2a
   13cdc:	11 a6       	std	Z+41, r1	; 0x29
   13cde:	07 c0       	rjmp	.+14     	; 0x13cee <_ZN13HardwareTimer15detachInterruptEh+0x4e>
   13ce0:	f8 01       	movw	r30, r16
   13ce2:	14 a6       	std	Z+44, r1	; 0x2c
   13ce4:	13 a6       	std	Z+43, r1	; 0x2b
   13ce6:	03 c0       	rjmp	.+6      	; 0x13cee <_ZN13HardwareTimer15detachInterruptEh+0x4e>
   13ce8:	f8 01       	movw	r30, r16
   13cea:	16 a6       	std	Z+46, r1	; 0x2e
   13cec:	15 a6       	std	Z+45, r1	; 0x2d
   13cee:	cf 91       	pop	r28
   13cf0:	1f 91       	pop	r17
   13cf2:	0f 91       	pop	r16
   13cf4:	08 95       	ret

00013cf6 <_ZN13HardwareTimer7setModeEh>:
   13cf6:	fc 01       	movw	r30, r24
   13cf8:	3f b7       	in	r19, 0x3f	; 63
   13cfa:	f8 94       	cli
   13cfc:	a2 85       	ldd	r26, Z+10	; 0x0a
   13cfe:	b3 85       	ldd	r27, Z+11	; 0x0b
   13d00:	9c 91       	ld	r25, X
   13d02:	9c 7f       	andi	r25, 0xFC	; 252
   13d04:	26 2f       	mov	r18, r22
   13d06:	23 70       	andi	r18, 0x03	; 3
   13d08:	92 2b       	or	r25, r18
   13d0a:	9c 93       	st	X, r25
   13d0c:	04 84       	ldd	r0, Z+12	; 0x0c
   13d0e:	f5 85       	ldd	r31, Z+13	; 0x0d
   13d10:	e0 2d       	mov	r30, r0
   13d12:	80 81       	ld	r24, Z
   13d14:	6c 70       	andi	r22, 0x0C	; 12
   13d16:	66 0f       	add	r22, r22
   13d18:	87 7e       	andi	r24, 0xE7	; 231
   13d1a:	68 2b       	or	r22, r24
   13d1c:	60 83       	st	Z, r22
   13d1e:	3f bf       	out	0x3f, r19	; 63
   13d20:	08 95       	ret

00013d22 <_ZN13HardwareTimer13setOutputModeEhh>:
   13d22:	fc 01       	movw	r30, r24
   13d24:	94 2f       	mov	r25, r20
   13d26:	93 70       	andi	r25, 0x03	; 3
   13d28:	66 23       	and	r22, r22
   13d2a:	31 f0       	breq	.+12     	; 0x13d38 <_ZN13HardwareTimer13setOutputModeEhh+0x16>
   13d2c:	61 30       	cpi	r22, 0x01	; 1
   13d2e:	31 f0       	breq	.+12     	; 0x13d3c <_ZN13HardwareTimer13setOutputModeEhh+0x1a>
   13d30:	62 30       	cpi	r22, 0x02	; 2
   13d32:	29 f4       	brne	.+10     	; 0x13d3e <_ZN13HardwareTimer13setOutputModeEhh+0x1c>
   13d34:	72 e0       	ldi	r23, 0x02	; 2
   13d36:	03 c0       	rjmp	.+6      	; 0x13d3e <_ZN13HardwareTimer13setOutputModeEhh+0x1c>
   13d38:	76 e0       	ldi	r23, 0x06	; 6
   13d3a:	01 c0       	rjmp	.+2      	; 0x13d3e <_ZN13HardwareTimer13setOutputModeEhh+0x1c>
   13d3c:	74 e0       	ldi	r23, 0x04	; 4
   13d3e:	6f b7       	in	r22, 0x3f	; 63
   13d40:	f8 94       	cli
   13d42:	02 84       	ldd	r0, Z+10	; 0x0a
   13d44:	f3 85       	ldd	r31, Z+11	; 0x0b
   13d46:	e0 2d       	mov	r30, r0
   13d48:	40 81       	ld	r20, Z
   13d4a:	23 e0       	ldi	r18, 0x03	; 3
   13d4c:	30 e0       	ldi	r19, 0x00	; 0
   13d4e:	07 2e       	mov	r0, r23
   13d50:	02 c0       	rjmp	.+4      	; 0x13d56 <_ZN13HardwareTimer13setOutputModeEhh+0x34>
   13d52:	22 0f       	add	r18, r18
   13d54:	33 1f       	adc	r19, r19
   13d56:	0a 94       	dec	r0
   13d58:	e2 f7       	brpl	.-8      	; 0x13d52 <_ZN13HardwareTimer13setOutputModeEhh+0x30>
   13d5a:	20 95       	com	r18
   13d5c:	24 23       	and	r18, r20
   13d5e:	49 2f       	mov	r20, r25
   13d60:	50 e0       	ldi	r21, 0x00	; 0
   13d62:	02 c0       	rjmp	.+4      	; 0x13d68 <_ZN13HardwareTimer13setOutputModeEhh+0x46>
   13d64:	44 0f       	add	r20, r20
   13d66:	55 1f       	adc	r21, r21
   13d68:	7a 95       	dec	r23
   13d6a:	e2 f7       	brpl	.-8      	; 0x13d64 <_ZN13HardwareTimer13setOutputModeEhh+0x42>
   13d6c:	42 2b       	or	r20, r18
   13d6e:	40 83       	st	Z, r20
   13d70:	6f bf       	out	0x3f, r22	; 63
   13d72:	08 95       	ret

00013d74 <_ZN13HardwareTimer11stopChannelEh>:
   13d74:	40 e0       	ldi	r20, 0x00	; 0
   13d76:	d5 cf       	rjmp	.-86     	; 0x13d22 <_ZN13HardwareTimer13setOutputModeEhh>
   13d78:	08 95       	ret

00013d7a <_ZN13HardwareTimer6setOCREhj>:
   13d7a:	2f b7       	in	r18, 0x3f	; 63
   13d7c:	f8 94       	cli
   13d7e:	61 30       	cpi	r22, 0x01	; 1
   13d80:	99 f0       	breq	.+38     	; 0x13da8 <_ZN13HardwareTimer6setOCREhj+0x2e>
   13d82:	18 f0       	brcs	.+6      	; 0x13d8a <_ZN13HardwareTimer6setOCREhj+0x10>
   13d84:	62 30       	cpi	r22, 0x02	; 2
   13d86:	f9 f0       	breq	.+62     	; 0x13dc6 <_ZN13HardwareTimer6setOCREhj+0x4c>
   13d88:	2c c0       	rjmp	.+88     	; 0x13de2 <_ZN13HardwareTimer6setOCREhj+0x68>
   13d8a:	dc 01       	movw	r26, r24
   13d8c:	1e 96       	adiw	r26, 0x0e	; 14
   13d8e:	ed 91       	ld	r30, X+
   13d90:	fc 91       	ld	r31, X
   13d92:	1f 97       	sbiw	r26, 0x0f	; 15
   13d94:	30 97       	sbiw	r30, 0x00	; 0
   13d96:	09 f0       	breq	.+2      	; 0x13d9a <_ZN13HardwareTimer6setOCREhj+0x20>
   13d98:	50 83       	st	Z, r21
   13d9a:	dc 01       	movw	r26, r24
   13d9c:	50 96       	adiw	r26, 0x10	; 16
   13d9e:	ed 91       	ld	r30, X+
   13da0:	fc 91       	ld	r31, X
   13da2:	51 97       	sbiw	r26, 0x11	; 17
   13da4:	40 83       	st	Z, r20
   13da6:	1d c0       	rjmp	.+58     	; 0x13de2 <_ZN13HardwareTimer6setOCREhj+0x68>
   13da8:	dc 01       	movw	r26, r24
   13daa:	52 96       	adiw	r26, 0x12	; 18
   13dac:	ed 91       	ld	r30, X+
   13dae:	fc 91       	ld	r31, X
   13db0:	53 97       	sbiw	r26, 0x13	; 19
   13db2:	30 97       	sbiw	r30, 0x00	; 0
   13db4:	09 f0       	breq	.+2      	; 0x13db8 <_ZN13HardwareTimer6setOCREhj+0x3e>
   13db6:	50 83       	st	Z, r21
   13db8:	dc 01       	movw	r26, r24
   13dba:	54 96       	adiw	r26, 0x14	; 20
   13dbc:	ed 91       	ld	r30, X+
   13dbe:	fc 91       	ld	r31, X
   13dc0:	55 97       	sbiw	r26, 0x15	; 21
   13dc2:	40 83       	st	Z, r20
   13dc4:	0e c0       	rjmp	.+28     	; 0x13de2 <_ZN13HardwareTimer6setOCREhj+0x68>
   13dc6:	dc 01       	movw	r26, r24
   13dc8:	56 96       	adiw	r26, 0x16	; 22
   13dca:	ed 91       	ld	r30, X+
   13dcc:	fc 91       	ld	r31, X
   13dce:	57 97       	sbiw	r26, 0x17	; 23
   13dd0:	30 97       	sbiw	r30, 0x00	; 0
   13dd2:	09 f0       	breq	.+2      	; 0x13dd6 <_ZN13HardwareTimer6setOCREhj+0x5c>
   13dd4:	50 83       	st	Z, r21
   13dd6:	dc 01       	movw	r26, r24
   13dd8:	58 96       	adiw	r26, 0x18	; 24
   13dda:	ed 91       	ld	r30, X+
   13ddc:	fc 91       	ld	r31, X
   13dde:	59 97       	sbiw	r26, 0x19	; 25
   13de0:	40 83       	st	Z, r20
   13de2:	2f bf       	out	0x3f, r18	; 63
   13de4:	08 95       	ret

00013de6 <_GLOBAL__sub_I___vector_21>:

// Preinstantiate Objects
HardwareTimer Timer0(0);
   13de6:	60 e0       	ldi	r22, 0x00	; 0
   13de8:	84 e7       	ldi	r24, 0x74	; 116
   13dea:	97 e1       	ldi	r25, 0x17	; 23
   13dec:	06 dd       	rcall	.-1524   	; 0x137fa <_ZN13HardwareTimerC1Eh>
HardwareTimer Timer1(1);
   13dee:	61 e0       	ldi	r22, 0x01	; 1
   13df0:	85 e4       	ldi	r24, 0x45	; 69
   13df2:	97 e1       	ldi	r25, 0x17	; 23
   13df4:	02 dd       	rcall	.-1532   	; 0x137fa <_ZN13HardwareTimerC1Eh>
HardwareTimer Timer2(2);
   13df6:	62 e0       	ldi	r22, 0x02	; 2
   13df8:	86 e1       	ldi	r24, 0x16	; 22
   13dfa:	97 e1       	ldi	r25, 0x17	; 23
   13dfc:	fe dc       	rcall	.-1540   	; 0x137fa <_ZN13HardwareTimerC1Eh>
HardwareTimer Timer3(3);
   13dfe:	63 e0       	ldi	r22, 0x03	; 3
   13e00:	87 ee       	ldi	r24, 0xE7	; 231
   13e02:	96 e1       	ldi	r25, 0x16	; 22
   13e04:	fa dc       	rcall	.-1548   	; 0x137fa <_ZN13HardwareTimerC1Eh>
HardwareTimer Timer4(4);
   13e06:	64 e0       	ldi	r22, 0x04	; 4
   13e08:	88 eb       	ldi	r24, 0xB8	; 184
   13e0a:	96 e1       	ldi	r25, 0x16	; 22
   13e0c:	f6 dc       	rcall	.-1556   	; 0x137fa <_ZN13HardwareTimerC1Eh>
HardwareTimer Timer5(5);
   13e0e:	65 e0       	ldi	r22, 0x05	; 5
   13e10:	89 e8       	ldi	r24, 0x89	; 137
   13e12:	96 e1       	ldi	r25, 0x16	; 22
   13e14:	f2 cc       	rjmp	.-1564   	; 0x137fa <_ZN13HardwareTimerC1Eh>
   13e16:	08 95       	ret

00013e18 <__vector_1>:
   13e18:	1f 92       	push	r1

#include "WInterrupts.h"
#include "WInterruptService.h"

InterruptService* services[EXTERNAL_NUM_INTERRUPTS];
ISR(INT0_vect) {
   13e1a:	0f 92       	push	r0
   13e1c:	0f b6       	in	r0, 0x3f	; 63
   13e1e:	0f 92       	push	r0
   13e20:	11 24       	eor	r1, r1
   13e22:	0b b6       	in	r0, 0x3b	; 59
   13e24:	0f 92       	push	r0
   13e26:	2f 93       	push	r18
   13e28:	3f 93       	push	r19
   13e2a:	4f 93       	push	r20
   13e2c:	5f 93       	push	r21
   13e2e:	6f 93       	push	r22
   13e30:	7f 93       	push	r23
   13e32:	8f 93       	push	r24
   13e34:	9f 93       	push	r25
   13e36:	af 93       	push	r26
   13e38:	bf 93       	push	r27
   13e3a:	ef 93       	push	r30
   13e3c:	ff 93       	push	r31
	services[EXTERNAL_INT_0]->service();
   13e3e:	80 91 a3 17 	lds	r24, 0x17A3	; 0x8017a3 <services>
   13e42:	90 91 a4 17 	lds	r25, 0x17A4	; 0x8017a4 <services+0x1>
   13e46:	dc 01       	movw	r26, r24
   13e48:	ed 91       	ld	r30, X+
   13e4a:	fc 91       	ld	r31, X
   13e4c:	01 90       	ld	r0, Z+
   13e4e:	f0 81       	ld	r31, Z
   13e50:	e0 2d       	mov	r30, r0
   13e52:	19 95       	eicall
}
   13e54:	ff 91       	pop	r31
   13e56:	ef 91       	pop	r30
   13e58:	bf 91       	pop	r27
   13e5a:	af 91       	pop	r26
   13e5c:	9f 91       	pop	r25
   13e5e:	8f 91       	pop	r24
   13e60:	7f 91       	pop	r23
   13e62:	6f 91       	pop	r22
   13e64:	5f 91       	pop	r21
   13e66:	4f 91       	pop	r20
   13e68:	3f 91       	pop	r19
   13e6a:	2f 91       	pop	r18
   13e6c:	0f 90       	pop	r0
   13e6e:	0b be       	out	0x3b, r0	; 59
   13e70:	0f 90       	pop	r0
   13e72:	0f be       	out	0x3f, r0	; 63
   13e74:	0f 90       	pop	r0
   13e76:	1f 90       	pop	r1
   13e78:	18 95       	reti

00013e7a <__vector_2>:

ISR(INT1_vect) {
   13e7a:	1f 92       	push	r1
   13e7c:	0f 92       	push	r0
   13e7e:	0f b6       	in	r0, 0x3f	; 63
   13e80:	0f 92       	push	r0
   13e82:	11 24       	eor	r1, r1
   13e84:	0b b6       	in	r0, 0x3b	; 59
   13e86:	0f 92       	push	r0
   13e88:	2f 93       	push	r18
   13e8a:	3f 93       	push	r19
   13e8c:	4f 93       	push	r20
   13e8e:	5f 93       	push	r21
   13e90:	6f 93       	push	r22
   13e92:	7f 93       	push	r23
   13e94:	8f 93       	push	r24
   13e96:	9f 93       	push	r25
   13e98:	af 93       	push	r26
   13e9a:	bf 93       	push	r27
   13e9c:	ef 93       	push	r30
   13e9e:	ff 93       	push	r31
	services[EXTERNAL_INT_1]->service();
   13ea0:	80 91 a5 17 	lds	r24, 0x17A5	; 0x8017a5 <services+0x2>
   13ea4:	90 91 a6 17 	lds	r25, 0x17A6	; 0x8017a6 <services+0x3>
   13ea8:	dc 01       	movw	r26, r24
   13eaa:	ed 91       	ld	r30, X+
   13eac:	fc 91       	ld	r31, X
   13eae:	01 90       	ld	r0, Z+
   13eb0:	f0 81       	ld	r31, Z
   13eb2:	e0 2d       	mov	r30, r0
   13eb4:	19 95       	eicall
}
   13eb6:	ff 91       	pop	r31
   13eb8:	ef 91       	pop	r30
   13eba:	bf 91       	pop	r27
   13ebc:	af 91       	pop	r26
   13ebe:	9f 91       	pop	r25
   13ec0:	8f 91       	pop	r24
   13ec2:	7f 91       	pop	r23
   13ec4:	6f 91       	pop	r22
   13ec6:	5f 91       	pop	r21
   13ec8:	4f 91       	pop	r20
   13eca:	3f 91       	pop	r19
   13ecc:	2f 91       	pop	r18
   13ece:	0f 90       	pop	r0
   13ed0:	0b be       	out	0x3b, r0	; 59
   13ed2:	0f 90       	pop	r0
   13ed4:	0f be       	out	0x3f, r0	; 63
   13ed6:	0f 90       	pop	r0
   13ed8:	1f 90       	pop	r1
   13eda:	18 95       	reti

00013edc <__vector_3>:

ISR(INT2_vect) {
   13edc:	1f 92       	push	r1
   13ede:	0f 92       	push	r0
   13ee0:	0f b6       	in	r0, 0x3f	; 63
   13ee2:	0f 92       	push	r0
   13ee4:	11 24       	eor	r1, r1
   13ee6:	0b b6       	in	r0, 0x3b	; 59
   13ee8:	0f 92       	push	r0
   13eea:	2f 93       	push	r18
   13eec:	3f 93       	push	r19
   13eee:	4f 93       	push	r20
   13ef0:	5f 93       	push	r21
   13ef2:	6f 93       	push	r22
   13ef4:	7f 93       	push	r23
   13ef6:	8f 93       	push	r24
   13ef8:	9f 93       	push	r25
   13efa:	af 93       	push	r26
   13efc:	bf 93       	push	r27
   13efe:	ef 93       	push	r30
   13f00:	ff 93       	push	r31
	services[EXTERNAL_INT_2]->service();
   13f02:	80 91 a7 17 	lds	r24, 0x17A7	; 0x8017a7 <services+0x4>
   13f06:	90 91 a8 17 	lds	r25, 0x17A8	; 0x8017a8 <services+0x5>
   13f0a:	dc 01       	movw	r26, r24
   13f0c:	ed 91       	ld	r30, X+
   13f0e:	fc 91       	ld	r31, X
   13f10:	01 90       	ld	r0, Z+
   13f12:	f0 81       	ld	r31, Z
   13f14:	e0 2d       	mov	r30, r0
   13f16:	19 95       	eicall
}
   13f18:	ff 91       	pop	r31
   13f1a:	ef 91       	pop	r30
   13f1c:	bf 91       	pop	r27
   13f1e:	af 91       	pop	r26
   13f20:	9f 91       	pop	r25
   13f22:	8f 91       	pop	r24
   13f24:	7f 91       	pop	r23
   13f26:	6f 91       	pop	r22
   13f28:	5f 91       	pop	r21
   13f2a:	4f 91       	pop	r20
   13f2c:	3f 91       	pop	r19
   13f2e:	2f 91       	pop	r18
   13f30:	0f 90       	pop	r0
   13f32:	0b be       	out	0x3b, r0	; 59
   13f34:	0f 90       	pop	r0
   13f36:	0f be       	out	0x3f, r0	; 63
   13f38:	0f 90       	pop	r0
   13f3a:	1f 90       	pop	r1
   13f3c:	18 95       	reti

00013f3e <__vector_4>:

ISR(INT3_vect) {
   13f3e:	1f 92       	push	r1
   13f40:	0f 92       	push	r0
   13f42:	0f b6       	in	r0, 0x3f	; 63
   13f44:	0f 92       	push	r0
   13f46:	11 24       	eor	r1, r1
   13f48:	0b b6       	in	r0, 0x3b	; 59
   13f4a:	0f 92       	push	r0
   13f4c:	2f 93       	push	r18
   13f4e:	3f 93       	push	r19
   13f50:	4f 93       	push	r20
   13f52:	5f 93       	push	r21
   13f54:	6f 93       	push	r22
   13f56:	7f 93       	push	r23
   13f58:	8f 93       	push	r24
   13f5a:	9f 93       	push	r25
   13f5c:	af 93       	push	r26
   13f5e:	bf 93       	push	r27
   13f60:	ef 93       	push	r30
   13f62:	ff 93       	push	r31
	services[EXTERNAL_INT_3]->service();
   13f64:	80 91 a9 17 	lds	r24, 0x17A9	; 0x8017a9 <services+0x6>
   13f68:	90 91 aa 17 	lds	r25, 0x17AA	; 0x8017aa <services+0x7>
   13f6c:	dc 01       	movw	r26, r24
   13f6e:	ed 91       	ld	r30, X+
   13f70:	fc 91       	ld	r31, X
   13f72:	01 90       	ld	r0, Z+
   13f74:	f0 81       	ld	r31, Z
   13f76:	e0 2d       	mov	r30, r0
   13f78:	19 95       	eicall
}
   13f7a:	ff 91       	pop	r31
   13f7c:	ef 91       	pop	r30
   13f7e:	bf 91       	pop	r27
   13f80:	af 91       	pop	r26
   13f82:	9f 91       	pop	r25
   13f84:	8f 91       	pop	r24
   13f86:	7f 91       	pop	r23
   13f88:	6f 91       	pop	r22
   13f8a:	5f 91       	pop	r21
   13f8c:	4f 91       	pop	r20
   13f8e:	3f 91       	pop	r19
   13f90:	2f 91       	pop	r18
   13f92:	0f 90       	pop	r0
   13f94:	0b be       	out	0x3b, r0	; 59
   13f96:	0f 90       	pop	r0
   13f98:	0f be       	out	0x3f, r0	; 63
   13f9a:	0f 90       	pop	r0
   13f9c:	1f 90       	pop	r1
   13f9e:	18 95       	reti

00013fa0 <__vector_5>:

ISR(INT4_vect) {
   13fa0:	1f 92       	push	r1
   13fa2:	0f 92       	push	r0
   13fa4:	0f b6       	in	r0, 0x3f	; 63
   13fa6:	0f 92       	push	r0
   13fa8:	11 24       	eor	r1, r1
   13faa:	0b b6       	in	r0, 0x3b	; 59
   13fac:	0f 92       	push	r0
   13fae:	2f 93       	push	r18
   13fb0:	3f 93       	push	r19
   13fb2:	4f 93       	push	r20
   13fb4:	5f 93       	push	r21
   13fb6:	6f 93       	push	r22
   13fb8:	7f 93       	push	r23
   13fba:	8f 93       	push	r24
   13fbc:	9f 93       	push	r25
   13fbe:	af 93       	push	r26
   13fc0:	bf 93       	push	r27
   13fc2:	ef 93       	push	r30
   13fc4:	ff 93       	push	r31
	services[EXTERNAL_INT_4]->service();
   13fc6:	80 91 ab 17 	lds	r24, 0x17AB	; 0x8017ab <services+0x8>
   13fca:	90 91 ac 17 	lds	r25, 0x17AC	; 0x8017ac <services+0x9>
   13fce:	dc 01       	movw	r26, r24
   13fd0:	ed 91       	ld	r30, X+
   13fd2:	fc 91       	ld	r31, X
   13fd4:	01 90       	ld	r0, Z+
   13fd6:	f0 81       	ld	r31, Z
   13fd8:	e0 2d       	mov	r30, r0
   13fda:	19 95       	eicall
}
   13fdc:	ff 91       	pop	r31
   13fde:	ef 91       	pop	r30
   13fe0:	bf 91       	pop	r27
   13fe2:	af 91       	pop	r26
   13fe4:	9f 91       	pop	r25
   13fe6:	8f 91       	pop	r24
   13fe8:	7f 91       	pop	r23
   13fea:	6f 91       	pop	r22
   13fec:	5f 91       	pop	r21
   13fee:	4f 91       	pop	r20
   13ff0:	3f 91       	pop	r19
   13ff2:	2f 91       	pop	r18
   13ff4:	0f 90       	pop	r0
   13ff6:	0b be       	out	0x3b, r0	; 59
   13ff8:	0f 90       	pop	r0
   13ffa:	0f be       	out	0x3f, r0	; 63
   13ffc:	0f 90       	pop	r0
   13ffe:	1f 90       	pop	r1
   14000:	18 95       	reti

00014002 <__vector_6>:

ISR(INT5_vect) {
   14002:	1f 92       	push	r1
   14004:	0f 92       	push	r0
   14006:	0f b6       	in	r0, 0x3f	; 63
   14008:	0f 92       	push	r0
   1400a:	11 24       	eor	r1, r1
   1400c:	0b b6       	in	r0, 0x3b	; 59
   1400e:	0f 92       	push	r0
   14010:	2f 93       	push	r18
   14012:	3f 93       	push	r19
   14014:	4f 93       	push	r20
   14016:	5f 93       	push	r21
   14018:	6f 93       	push	r22
   1401a:	7f 93       	push	r23
   1401c:	8f 93       	push	r24
   1401e:	9f 93       	push	r25
   14020:	af 93       	push	r26
   14022:	bf 93       	push	r27
   14024:	ef 93       	push	r30
   14026:	ff 93       	push	r31
	services[EXTERNAL_INT_5]->service();
   14028:	80 91 ad 17 	lds	r24, 0x17AD	; 0x8017ad <services+0xa>
   1402c:	90 91 ae 17 	lds	r25, 0x17AE	; 0x8017ae <services+0xb>
   14030:	dc 01       	movw	r26, r24
   14032:	ed 91       	ld	r30, X+
   14034:	fc 91       	ld	r31, X
   14036:	01 90       	ld	r0, Z+
   14038:	f0 81       	ld	r31, Z
   1403a:	e0 2d       	mov	r30, r0
   1403c:	19 95       	eicall
}
   1403e:	ff 91       	pop	r31
   14040:	ef 91       	pop	r30
   14042:	bf 91       	pop	r27
   14044:	af 91       	pop	r26
   14046:	9f 91       	pop	r25
   14048:	8f 91       	pop	r24
   1404a:	7f 91       	pop	r23
   1404c:	6f 91       	pop	r22
   1404e:	5f 91       	pop	r21
   14050:	4f 91       	pop	r20
   14052:	3f 91       	pop	r19
   14054:	2f 91       	pop	r18
   14056:	0f 90       	pop	r0
   14058:	0b be       	out	0x3b, r0	; 59
   1405a:	0f 90       	pop	r0
   1405c:	0f be       	out	0x3f, r0	; 63
   1405e:	0f 90       	pop	r0
   14060:	1f 90       	pop	r1
   14062:	18 95       	reti

00014064 <__vector_7>:

ISR(INT6_vect) {
   14064:	1f 92       	push	r1
   14066:	0f 92       	push	r0
   14068:	0f b6       	in	r0, 0x3f	; 63
   1406a:	0f 92       	push	r0
   1406c:	11 24       	eor	r1, r1
   1406e:	0b b6       	in	r0, 0x3b	; 59
   14070:	0f 92       	push	r0
   14072:	2f 93       	push	r18
   14074:	3f 93       	push	r19
   14076:	4f 93       	push	r20
   14078:	5f 93       	push	r21
   1407a:	6f 93       	push	r22
   1407c:	7f 93       	push	r23
   1407e:	8f 93       	push	r24
   14080:	9f 93       	push	r25
   14082:	af 93       	push	r26
   14084:	bf 93       	push	r27
   14086:	ef 93       	push	r30
   14088:	ff 93       	push	r31
	services[EXTERNAL_INT_6]->service();
   1408a:	80 91 af 17 	lds	r24, 0x17AF	; 0x8017af <services+0xc>
   1408e:	90 91 b0 17 	lds	r25, 0x17B0	; 0x8017b0 <services+0xd>
   14092:	dc 01       	movw	r26, r24
   14094:	ed 91       	ld	r30, X+
   14096:	fc 91       	ld	r31, X
   14098:	01 90       	ld	r0, Z+
   1409a:	f0 81       	ld	r31, Z
   1409c:	e0 2d       	mov	r30, r0
   1409e:	19 95       	eicall
}
   140a0:	ff 91       	pop	r31
   140a2:	ef 91       	pop	r30
   140a4:	bf 91       	pop	r27
   140a6:	af 91       	pop	r26
   140a8:	9f 91       	pop	r25
   140aa:	8f 91       	pop	r24
   140ac:	7f 91       	pop	r23
   140ae:	6f 91       	pop	r22
   140b0:	5f 91       	pop	r21
   140b2:	4f 91       	pop	r20
   140b4:	3f 91       	pop	r19
   140b6:	2f 91       	pop	r18
   140b8:	0f 90       	pop	r0
   140ba:	0b be       	out	0x3b, r0	; 59
   140bc:	0f 90       	pop	r0
   140be:	0f be       	out	0x3f, r0	; 63
   140c0:	0f 90       	pop	r0
   140c2:	1f 90       	pop	r1
   140c4:	18 95       	reti

000140c6 <__vector_8>:

ISR(INT7_vect) {
   140c6:	1f 92       	push	r1
   140c8:	0f 92       	push	r0
   140ca:	0f b6       	in	r0, 0x3f	; 63
   140cc:	0f 92       	push	r0
   140ce:	11 24       	eor	r1, r1
   140d0:	0b b6       	in	r0, 0x3b	; 59
   140d2:	0f 92       	push	r0
   140d4:	2f 93       	push	r18
   140d6:	3f 93       	push	r19
   140d8:	4f 93       	push	r20
   140da:	5f 93       	push	r21
   140dc:	6f 93       	push	r22
   140de:	7f 93       	push	r23
   140e0:	8f 93       	push	r24
   140e2:	9f 93       	push	r25
   140e4:	af 93       	push	r26
   140e6:	bf 93       	push	r27
   140e8:	ef 93       	push	r30
   140ea:	ff 93       	push	r31
	services[EXTERNAL_INT_7]->service();
   140ec:	80 91 b1 17 	lds	r24, 0x17B1	; 0x8017b1 <services+0xe>
   140f0:	90 91 b2 17 	lds	r25, 0x17B2	; 0x8017b2 <services+0xf>
   140f4:	dc 01       	movw	r26, r24
   140f6:	ed 91       	ld	r30, X+
   140f8:	fc 91       	ld	r31, X
   140fa:	01 90       	ld	r0, Z+
   140fc:	f0 81       	ld	r31, Z
   140fe:	e0 2d       	mov	r30, r0
   14100:	19 95       	eicall
}
   14102:	ff 91       	pop	r31
   14104:	ef 91       	pop	r30
   14106:	bf 91       	pop	r27
   14108:	af 91       	pop	r26
   1410a:	9f 91       	pop	r25
   1410c:	8f 91       	pop	r24
   1410e:	7f 91       	pop	r23
   14110:	6f 91       	pop	r22
   14112:	5f 91       	pop	r21
   14114:	4f 91       	pop	r20
   14116:	3f 91       	pop	r19
   14118:	2f 91       	pop	r18
   1411a:	0f 90       	pop	r0
   1411c:	0b be       	out	0x3b, r0	; 59
   1411e:	0f 90       	pop	r0
   14120:	0f be       	out	0x3f, r0	; 63
   14122:	0f 90       	pop	r0
   14124:	1f 90       	pop	r1
   14126:	18 95       	reti

00014128 <_ZN12PCInterrupts15attachInterruptEP16InterruptServicei>:
 *
 * Created: 3/12/2014 3:17:27 AM
 *  Author: jg
 */
#include "WPCInterrupts.h" 
uint8_t PCInterrupts::attachInterrupt(InterruptService* userFunc, int mode) { return 0; }
   14128:	80 e0       	ldi	r24, 0x00	; 0
   1412a:	08 95       	ret

0001412c <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei>:
/*
 * attach an interrupt to a specific pin using pin change interrupts.
 * mode is CHANGE, RISING, FALLING
 */
 void PCInterrupts::attachInterrupt(uint8_t pin, InterruptService* userFunc, int mode) {
   1412c:	cf 93       	push	r28
   1412e:	df 93       	push	r29
  this->pin = pin;
   14130:	fc 01       	movw	r30, r24
   14132:	62 83       	std	Z+2, r22	; 0x02
  uint8_t bit = digitalPinToBitMask(pin);
   14134:	86 2f       	mov	r24, r22
   14136:	90 e0       	ldi	r25, 0x00	; 0
   14138:	fc 01       	movw	r30, r24
   1413a:	ef 52       	subi	r30, 0x2F	; 47
   1413c:	fa 4e       	sbci	r31, 0xEA	; 234
   1413e:	74 91       	lpm	r23, Z
  uint8_t port = digitalPinToPort(pin);
   14140:	fc 01       	movw	r30, r24
   14142:	e9 5e       	subi	r30, 0xE9	; 233
   14144:	f9 4e       	sbci	r31, 0xE9	; 233
   14146:	e4 91       	lpm	r30, Z
  uint8_t slot;
  volatile uint16_t *pcmask = digitalPinToPCMSK(pin);
   14148:	86 ef       	ldi	r24, 0xF6	; 246
   1414a:	86 0f       	add	r24, r22
   1414c:	84 30       	cpi	r24, 0x04	; 4
   1414e:	08 f4       	brcc	.+2      	; 0x14152 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x26>
   14150:	71 c0       	rjmp	.+226    	; 0x14234 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x108>
   14152:	8e ec       	ldi	r24, 0xCE	; 206
   14154:	86 0f       	add	r24, r22
   14156:	84 30       	cpi	r24, 0x04	; 4
   14158:	08 f4       	brcc	.+2      	; 0x1415c <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x30>
   1415a:	7b c0       	rjmp	.+246    	; 0x14252 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x126>
   1415c:	82 ec       	ldi	r24, 0xC2	; 194
   1415e:	86 0f       	add	r24, r22
   14160:	88 30       	cpi	r24, 0x08	; 8
   14162:	08 f4       	brcc	.+2      	; 0x14166 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x3a>
   14164:	6b c0       	rjmp	.+214    	; 0x1423c <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x110>
   14166:	71 c0       	rjmp	.+226    	; 0x1424a <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x11e>
   14168:	ad e6       	ldi	r26, 0x6D	; 109
   1416a:	b0 e0       	ldi	r27, 0x00	; 0
   1416c:	05 c0       	rjmp	.+10     	; 0x14178 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x4c>
   1416e:	a0 e0       	ldi	r26, 0x00	; 0
   14170:	b0 e0       	ldi	r27, 0x00	; 0
   14172:	02 c0       	rjmp	.+4      	; 0x14178 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x4c>
   14174:	ab e6       	ldi	r26, 0x6B	; 107
   14176:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t pcslot = digitalPinToPCMSKbit(pin);
   14178:	63 33       	cpi	r22, 0x33	; 51
   1417a:	41 f0       	breq	.+16     	; 0x1418c <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x60>
   1417c:	64 33       	cpi	r22, 0x34	; 52
   1417e:	41 f0       	breq	.+16     	; 0x14190 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x64>
   14180:	65 33       	cpi	r22, 0x35	; 53
   14182:	41 f0       	breq	.+16     	; 0x14194 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x68>
   14184:	6e 53       	subi	r22, 0x3E	; 62
   14186:	68 30       	cpi	r22, 0x08	; 8
   14188:	38 f4       	brcc	.+14     	; 0x14198 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x6c>
   1418a:	07 c0       	rjmp	.+14     	; 0x1419a <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x6e>
   1418c:	62 e0       	ldi	r22, 0x02	; 2
   1418e:	05 c0       	rjmp	.+10     	; 0x1419a <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x6e>
   14190:	61 e0       	ldi	r22, 0x01	; 1
   14192:	03 c0       	rjmp	.+6      	; 0x1419a <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x6e>
   14194:	60 e0       	ldi	r22, 0x00	; 0
   14196:	01 c0       	rjmp	.+2      	; 0x1419a <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x6e>
   14198:	60 e0       	ldi	r22, 0x00	; 0
    // map pin to PCIR register
  if (pcmask == ((uint16_t*)0)) { //not a valid pin for PCINT
   1419a:	10 97       	sbiw	r26, 0x00	; 0
   1419c:	09 f4       	brne	.+2      	; 0x141a0 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x74>
   1419e:	60 c0       	rjmp	.+192    	; 0x14260 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x134>
    return;
  } 
  uint8_t sport;
  if( pcmask == &PCMSK0 ) {// PCInt 7:0
   141a0:	ab 36       	cpi	r26, 0x6B	; 107
   141a2:	b1 05       	cpc	r27, r1
   141a4:	69 f4       	brne	.+26     	; 0x141c0 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x94>
	sport = 1;
	slot = pcslot;
	PCintLast[0] = *portInputRegister(port);
   141a6:	f0 e0       	ldi	r31, 0x00	; 0
   141a8:	ee 0f       	add	r30, r30
   141aa:	ff 1f       	adc	r31, r31
   141ac:	e3 5a       	subi	r30, 0xA3	; 163
   141ae:	f9 4e       	sbci	r31, 0xE9	; 233
   141b0:	c5 91       	lpm	r28, Z+
   141b2:	d4 91       	lpm	r29, Z
   141b4:	88 81       	ld	r24, Y
   141b6:	99 81       	ldd	r25, Y+1	; 0x01
   141b8:	80 93 b3 17 	sts	0x17B3, r24	; 0x8017b3 <_ZL9PCintLast>
  if (pcmask == ((uint16_t*)0)) { //not a valid pin for PCINT
    return;
  } 
  uint8_t sport;
  if( pcmask == &PCMSK0 ) {// PCInt 7:0
	sport = 1;
   141bc:	c1 e0       	ldi	r28, 0x01	; 1
   141be:	1e c0       	rjmp	.+60     	; 0x141fc <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0xd0>
	slot = pcslot;
	PCintLast[0] = *portInputRegister(port);
  } else {
	if( pcmask == &PCMSK1 ) {// PCInt 15:8
   141c0:	ac 36       	cpi	r26, 0x6C	; 108
   141c2:	b1 05       	cpc	r27, r1
   141c4:	71 f4       	brne	.+28     	; 0x141e2 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0xb6>
		sport = 2;
		slot = 8 + pcslot;
   141c6:	68 5f       	subi	r22, 0xF8	; 248
		PCintLast[1] = *portInputRegister(port);
   141c8:	f0 e0       	ldi	r31, 0x00	; 0
   141ca:	ee 0f       	add	r30, r30
   141cc:	ff 1f       	adc	r31, r31
   141ce:	e3 5a       	subi	r30, 0xA3	; 163
   141d0:	f9 4e       	sbci	r31, 0xE9	; 233
   141d2:	c5 91       	lpm	r28, Z+
   141d4:	d4 91       	lpm	r29, Z
   141d6:	88 81       	ld	r24, Y
   141d8:	99 81       	ldd	r25, Y+1	; 0x01
   141da:	80 93 b4 17 	sts	0x17B4, r24	; 0x8017b4 <_ZL9PCintLast+0x1>
	sport = 1;
	slot = pcslot;
	PCintLast[0] = *portInputRegister(port);
  } else {
	if( pcmask == &PCMSK1 ) {// PCInt 15:8
		sport = 2;
   141de:	c2 e0       	ldi	r28, 0x02	; 2
   141e0:	0d c0       	rjmp	.+26     	; 0x141fc <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0xd0>
		slot = 8 + pcslot;
		PCintLast[1] = *portInputRegister(port);
	} else {
		sport = 4; // PCInt 23:16
		slot = 16 + pcslot;
   141e2:	60 5f       	subi	r22, 0xF0	; 240
		PCintLast[2] = *portInputRegister(port);
   141e4:	f0 e0       	ldi	r31, 0x00	; 0
   141e6:	ee 0f       	add	r30, r30
   141e8:	ff 1f       	adc	r31, r31
   141ea:	e3 5a       	subi	r30, 0xA3	; 163
   141ec:	f9 4e       	sbci	r31, 0xE9	; 233
   141ee:	c5 91       	lpm	r28, Z+
   141f0:	d4 91       	lpm	r29, Z
   141f2:	88 81       	ld	r24, Y
   141f4:	99 81       	ldd	r25, Y+1	; 0x01
   141f6:	80 93 b5 17 	sts	0x17B5, r24	; 0x8017b5 <_ZL9PCintLast+0x2>
	if( pcmask == &PCMSK1 ) {// PCInt 15:8
		sport = 2;
		slot = 8 + pcslot;
		PCintLast[1] = *portInputRegister(port);
	} else {
		sport = 4; // PCInt 23:16
   141fa:	c4 e0       	ldi	r28, 0x04	; 4
	//if( pcmask == PCmsk[j] ) { 
	//	slot = (j * 8) + pcslot; // 3 registers, 8 bits each, more or less...Arduino doesnt pin them all out, grr
	//	PCintLast[j] = *PCport[j];
	//}

  PCintMode[slot] = mode;
   141fc:	86 2f       	mov	r24, r22
   141fe:	90 e0       	ldi	r25, 0x00	; 0
   14200:	88 0f       	add	r24, r24
   14202:	99 1f       	adc	r25, r25
   14204:	fc 01       	movw	r30, r24
   14206:	ea 51       	subi	r30, 0x1A	; 26
   14208:	f8 4e       	sbci	r31, 0xE8	; 232
   1420a:	31 83       	std	Z+1, r19	; 0x01
   1420c:	20 83       	st	Z, r18
  PCintFunc[slot] = userFunc;
   1420e:	fc 01       	movw	r30, r24
   14210:	ea 54       	subi	r30, 0x4A	; 74
   14212:	f8 4e       	sbci	r31, 0xE8	; 232
   14214:	51 83       	std	Z+1, r21	; 0x01
   14216:	40 83       	st	Z, r20
  // set the mask
  *pcmask |= bit;
   14218:	2d 91       	ld	r18, X+
   1421a:	3c 91       	ld	r19, X
   1421c:	11 97       	sbiw	r26, 0x01	; 1
   1421e:	27 2b       	or	r18, r23
   14220:	11 96       	adiw	r26, 0x01	; 1
   14222:	3c 93       	st	X, r19
   14224:	2e 93       	st	-X, r18
  // enable the interrupt, port bits are 0,1,2 (1,2,4) for PCMSKn
 
  sei();
   14226:	78 94       	sei
  PCICR |= sport;
   14228:	e8 e6       	ldi	r30, 0x68	; 104
   1422a:	f0 e0       	ldi	r31, 0x00	; 0
   1422c:	80 81       	ld	r24, Z
   1422e:	8c 2b       	or	r24, r28
   14230:	80 83       	st	Z, r24
   14232:	16 c0       	rjmp	.+44     	; 0x14260 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x134>
  this->pin = pin;
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);
  uint8_t slot;
  volatile uint16_t *pcmask = digitalPinToPCMSK(pin);
  uint8_t pcslot = digitalPinToPCMSKbit(pin);
   14234:	66 50       	subi	r22, 0x06	; 6
 void PCInterrupts::attachInterrupt(uint8_t pin, InterruptService* userFunc, int mode) {
  this->pin = pin;
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);
  uint8_t slot;
  volatile uint16_t *pcmask = digitalPinToPCMSK(pin);
   14236:	ab e6       	ldi	r26, 0x6B	; 107
   14238:	b0 e0       	ldi	r27, 0x00	; 0
   1423a:	b5 cf       	rjmp	.-150    	; 0x141a6 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x7a>
  uint8_t pcslot = digitalPinToPCMSKbit(pin);
   1423c:	62 33       	cpi	r22, 0x32	; 50
   1423e:	09 f0       	breq	.+2      	; 0x14242 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x116>
   14240:	93 cf       	rjmp	.-218    	; 0x14168 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x3c>
 void PCInterrupts::attachInterrupt(uint8_t pin, InterruptService* userFunc, int mode) {
  this->pin = pin;
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);
  uint8_t slot;
  volatile uint16_t *pcmask = digitalPinToPCMSK(pin);
   14242:	ad e6       	ldi	r26, 0x6D	; 109
   14244:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t pcslot = digitalPinToPCMSKbit(pin);
   14246:	63 e0       	ldi	r22, 0x03	; 3
   14248:	cc cf       	rjmp	.-104    	; 0x141e2 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0xb6>
   1424a:	62 33       	cpi	r22, 0x32	; 50
   1424c:	09 f0       	breq	.+2      	; 0x14250 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x124>
   1424e:	8f cf       	rjmp	.-226    	; 0x1416e <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x42>
   14250:	07 c0       	rjmp	.+14     	; 0x14260 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x134>
   14252:	62 33       	cpi	r22, 0x32	; 50
   14254:	09 f0       	breq	.+2      	; 0x14258 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x12c>
   14256:	8e cf       	rjmp	.-228    	; 0x14174 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x48>
 void PCInterrupts::attachInterrupt(uint8_t pin, InterruptService* userFunc, int mode) {
  this->pin = pin;
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);
  uint8_t slot;
  volatile uint16_t *pcmask = digitalPinToPCMSK(pin);
   14258:	ab e6       	ldi	r26, 0x6B	; 107
   1425a:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t pcslot = digitalPinToPCMSKbit(pin);
   1425c:	63 e0       	ldi	r22, 0x03	; 3
   1425e:	a3 cf       	rjmp	.-186    	; 0x141a6 <_ZN12PCInterrupts15attachInterruptEhP16InterruptServicei+0x7a>
  *pcmask |= bit;
  // enable the interrupt, port bits are 0,1,2 (1,2,4) for PCMSKn
 
  sei();
  PCICR |= sport;
}
   14260:	df 91       	pop	r29
   14262:	cf 91       	pop	r28
   14264:	08 95       	ret

00014266 <_ZN12PCInterrupts15detachInterruptEh>:

void PCInterrupts::detachInterrupt(uint8_t pin) {
  uint8_t bit = digitalPinToBitMask(pin);
   14266:	86 2f       	mov	r24, r22
   14268:	90 e0       	ldi	r25, 0x00	; 0
   1426a:	fc 01       	movw	r30, r24
   1426c:	ef 52       	subi	r30, 0x2F	; 47
   1426e:	fa 4e       	sbci	r31, 0xEA	; 234
   14270:	24 91       	lpm	r18, Z
  uint8_t port = digitalPinToPort(pin);
   14272:	fc 01       	movw	r30, r24
   14274:	e9 5e       	subi	r30, 0xE9	; 233
   14276:	f9 4e       	sbci	r31, 0xE9	; 233
   14278:	84 91       	lpm	r24, Z
  volatile uint16_t *pcmask = digitalPinToPCMSK(pin);
   1427a:	96 ef       	ldi	r25, 0xF6	; 246
   1427c:	96 0f       	add	r25, r22
   1427e:	94 30       	cpi	r25, 0x04	; 4
   14280:	50 f0       	brcs	.+20     	; 0x14296 <_ZN12PCInterrupts15detachInterruptEh+0x30>
   14282:	9e ec       	ldi	r25, 0xCE	; 206
   14284:	96 0f       	add	r25, r22
   14286:	94 30       	cpi	r25, 0x04	; 4
   14288:	48 f0       	brcs	.+18     	; 0x1429c <_ZN12PCInterrupts15detachInterruptEh+0x36>
   1428a:	6e 53       	subi	r22, 0x3E	; 62
   1428c:	68 30       	cpi	r22, 0x08	; 8
   1428e:	48 f0       	brcs	.+18     	; 0x142a2 <_ZN12PCInterrupts15detachInterruptEh+0x3c>
   14290:	a0 e0       	ldi	r26, 0x00	; 0
   14292:	b0 e0       	ldi	r27, 0x00	; 0
   14294:	08 c0       	rjmp	.+16     	; 0x142a6 <_ZN12PCInterrupts15detachInterruptEh+0x40>
   14296:	ab e6       	ldi	r26, 0x6B	; 107
   14298:	b0 e0       	ldi	r27, 0x00	; 0
   1429a:	05 c0       	rjmp	.+10     	; 0x142a6 <_ZN12PCInterrupts15detachInterruptEh+0x40>
   1429c:	ab e6       	ldi	r26, 0x6B	; 107
   1429e:	b0 e0       	ldi	r27, 0x00	; 0
   142a0:	02 c0       	rjmp	.+4      	; 0x142a6 <_ZN12PCInterrupts15detachInterruptEh+0x40>
   142a2:	ad e6       	ldi	r26, 0x6D	; 109
   142a4:	b0 e0       	ldi	r27, 0x00	; 0

  // map pin to PCIR register
  if (port == NOT_A_PORT) {
   142a6:	88 23       	and	r24, r24
   142a8:	f9 f0       	breq	.+62     	; 0x142e8 <_ZN12PCInterrupts15detachInterruptEh+0x82>
    return;
  } 

  // disable the mask.
  *pcmask &= ~bit;
   142aa:	4d 91       	ld	r20, X+
   142ac:	5c 91       	ld	r21, X
   142ae:	11 97       	sbiw	r26, 0x01	; 1
   142b0:	e2 2f       	mov	r30, r18
   142b2:	f0 e0       	ldi	r31, 0x00	; 0
   142b4:	e0 95       	com	r30
   142b6:	f0 95       	com	r31
   142b8:	e4 23       	and	r30, r20
   142ba:	f5 23       	and	r31, r21
   142bc:	11 96       	adiw	r26, 0x01	; 1
   142be:	fc 93       	st	X, r31
   142c0:	ee 93       	st	-X, r30
  // if that's the last one, disable the interrupt.
  if (*pcmask == 0) {
   142c2:	2d 91       	ld	r18, X+
   142c4:	3c 91       	ld	r19, X
   142c6:	23 2b       	or	r18, r19
   142c8:	79 f4       	brne	.+30     	; 0x142e8 <_ZN12PCInterrupts15detachInterruptEh+0x82>
    PCICR &= ~(0x01 << port);
   142ca:	e8 e6       	ldi	r30, 0x68	; 104
   142cc:	f0 e0       	ldi	r31, 0x00	; 0
   142ce:	40 81       	ld	r20, Z
   142d0:	21 e0       	ldi	r18, 0x01	; 1
   142d2:	30 e0       	ldi	r19, 0x00	; 0
   142d4:	b9 01       	movw	r22, r18
   142d6:	02 c0       	rjmp	.+4      	; 0x142dc <_ZN12PCInterrupts15detachInterruptEh+0x76>
   142d8:	66 0f       	add	r22, r22
   142da:	77 1f       	adc	r23, r23
   142dc:	8a 95       	dec	r24
   142de:	e2 f7       	brpl	.-8      	; 0x142d8 <_ZN12PCInterrupts15detachInterruptEh+0x72>
   142e0:	cb 01       	movw	r24, r22
   142e2:	80 95       	com	r24
   142e4:	84 23       	and	r24, r20
   142e6:	80 83       	st	Z, r24
   142e8:	08 95       	ret

000142ea <_ZL5PCinth>:
  }
}

// common code for isr handler. "posi" is the PCINT number.
static void PCint(uint8_t posi) {
   142ea:	df 92       	push	r13
   142ec:	ef 92       	push	r14
   142ee:	ff 92       	push	r15
   142f0:	0f 93       	push	r16
   142f2:	1f 93       	push	r17
   142f4:	cf 93       	push	r28
   142f6:	df 93       	push	r29
  uint8_t curr;
  uint8_t mask;
  uint8_t pin;

  // get the pin states for the indicated port.
  curr = *(PCport[posi]);
   142f8:	e8 2f       	mov	r30, r24
   142fa:	f0 e0       	ldi	r31, 0x00	; 0
   142fc:	9f 01       	movw	r18, r30
   142fe:	22 0f       	add	r18, r18
   14300:	33 1f       	adc	r19, r19
   14302:	d9 01       	movw	r26, r18
   14304:	a4 50       	subi	r26, 0x04	; 4
   14306:	b6 4f       	sbci	r27, 0xF6	; 246
   14308:	0d 90       	ld	r0, X+
   1430a:	bc 91       	ld	r27, X
   1430c:	a0 2d       	mov	r26, r0
   1430e:	dc 90       	ld	r13, X
  //uint8_t port = digitalPinToPort(pin);
  //curr = *portInputRegister(port);
  mask = curr ^ PCintLast[posi];
   14310:	ed 54       	subi	r30, 0x4D	; 77
   14312:	f8 4e       	sbci	r31, 0xE8	; 232
   14314:	00 81       	ld	r16, Z
   14316:	0d 25       	eor	r16, r13
  PCintLast[posi] = curr;
   14318:	d0 82       	st	Z, r13
  // mask is pins that have changed. screen out non pcint pins.
  if ((mask &= *PCmsk[posi]) == 0) {
   1431a:	f9 01       	movw	r30, r18
   1431c:	ee 5f       	subi	r30, 0xFE	; 254
   1431e:	f5 4f       	sbci	r31, 0xF5	; 245
   14320:	01 90       	ld	r0, Z+
   14322:	f0 81       	ld	r31, Z
   14324:	e0 2d       	mov	r30, r0
   14326:	90 81       	ld	r25, Z
   14328:	09 23       	and	r16, r25
   1432a:	09 f4       	brne	.+2      	; 0x1432e <_ZL5PCinth+0x44>
   1432c:	3d c0       	rjmp	.+122    	; 0x143a8 <_ZL5PCinth+0xbe>
  }
  // mask is pcint pins that have changed.
  for (uint8_t i=0; i < 8; i++) {
    bit = 0x01 << i;
    if (bit & mask) {
      pin = (posi * 8) + i;
   1432e:	18 2f       	mov	r17, r24
   14330:	11 0f       	add	r17, r17
   14332:	11 0f       	add	r17, r17
   14334:	11 0f       	add	r17, r17
   14336:	c0 e0       	ldi	r28, 0x00	; 0
   14338:	d0 e0       	ldi	r29, 0x00	; 0
  if ((mask &= *PCmsk[posi]) == 0) {
    return;
  }
  // mask is pcint pins that have changed.
  for (uint8_t i=0; i < 8; i++) {
    bit = 0x01 << i;
   1433a:	ee 24       	eor	r14, r14
   1433c:	e3 94       	inc	r14
   1433e:	f1 2c       	mov	r15, r1
   14340:	c7 01       	movw	r24, r14
   14342:	0c 2e       	mov	r0, r28
   14344:	02 c0       	rjmp	.+4      	; 0x1434a <_ZL5PCinth+0x60>
   14346:	88 0f       	add	r24, r24
   14348:	99 1f       	adc	r25, r25
   1434a:	0a 94       	dec	r0
   1434c:	e2 f7       	brpl	.-8      	; 0x14346 <_ZL5PCinth+0x5c>
    if (bit & mask) {
   1434e:	20 2f       	mov	r18, r16
   14350:	28 23       	and	r18, r24
   14352:	29 f1       	breq	.+74     	; 0x1439e <_ZL5PCinth+0xb4>
      pin = (posi * 8) + i;
      // Trigger interrupt if mode is CHANGE, or if mode is RISING and
      // the bit is currently high, or if mode is FALLING and bit is low.
      if ((PCintMode[pin] == CHANGE || ((PCintMode[pin] == RISING) && (curr & bit)) || ((PCintMode[pin] == FALLING) && !(curr & bit)))) {
   14354:	21 2f       	mov	r18, r17
   14356:	30 e0       	ldi	r19, 0x00	; 0
   14358:	f9 01       	movw	r30, r18
   1435a:	ee 0f       	add	r30, r30
   1435c:	ff 1f       	adc	r31, r31
   1435e:	ea 51       	subi	r30, 0x1A	; 26
   14360:	f8 4e       	sbci	r31, 0xE8	; 232
   14362:	40 81       	ld	r20, Z
   14364:	51 81       	ldd	r21, Z+1	; 0x01
   14366:	41 30       	cpi	r20, 0x01	; 1
   14368:	51 05       	cpc	r21, r1
   1436a:	59 f0       	breq	.+22     	; 0x14382 <_ZL5PCinth+0x98>
   1436c:	43 30       	cpi	r20, 0x03	; 3
   1436e:	51 05       	cpc	r21, r1
   14370:	19 f4       	brne	.+6      	; 0x14378 <_ZL5PCinth+0x8e>
   14372:	8d 21       	and	r24, r13
   14374:	31 f4       	brne	.+12     	; 0x14382 <_ZL5PCinth+0x98>
   14376:	13 c0       	rjmp	.+38     	; 0x1439e <_ZL5PCinth+0xb4>
   14378:	42 30       	cpi	r20, 0x02	; 2
   1437a:	51 05       	cpc	r21, r1
   1437c:	81 f4       	brne	.+32     	; 0x1439e <_ZL5PCinth+0xb4>
   1437e:	8d 21       	and	r24, r13
   14380:	71 f4       	brne	.+28     	; 0x1439e <_ZL5PCinth+0xb4>
        PCintFunc[pin]->service();
   14382:	22 0f       	add	r18, r18
   14384:	33 1f       	adc	r19, r19
   14386:	f9 01       	movw	r30, r18
   14388:	ea 54       	subi	r30, 0x4A	; 74
   1438a:	f8 4e       	sbci	r31, 0xE8	; 232
   1438c:	80 81       	ld	r24, Z
   1438e:	91 81       	ldd	r25, Z+1	; 0x01
   14390:	dc 01       	movw	r26, r24
   14392:	ed 91       	ld	r30, X+
   14394:	fc 91       	ld	r31, X
   14396:	01 90       	ld	r0, Z+
   14398:	f0 81       	ld	r31, Z
   1439a:	e0 2d       	mov	r30, r0
   1439c:	19 95       	eicall
   1439e:	21 96       	adiw	r28, 0x01	; 1
   143a0:	1f 5f       	subi	r17, 0xFF	; 255
  // mask is pins that have changed. screen out non pcint pins.
  if ((mask &= *PCmsk[posi]) == 0) {
    return;
  }
  // mask is pcint pins that have changed.
  for (uint8_t i=0; i < 8; i++) {
   143a2:	c8 30       	cpi	r28, 0x08	; 8
   143a4:	d1 05       	cpc	r29, r1
   143a6:	61 f6       	brne	.-104    	; 0x14340 <_ZL5PCinth+0x56>
      if ((PCintMode[pin] == CHANGE || ((PCintMode[pin] == RISING) && (curr & bit)) || ((PCintMode[pin] == FALLING) && !(curr & bit)))) {
        PCintFunc[pin]->service();
      }
    }
  }
}
   143a8:	df 91       	pop	r29
   143aa:	cf 91       	pop	r28
   143ac:	1f 91       	pop	r17
   143ae:	0f 91       	pop	r16
   143b0:	ff 90       	pop	r15
   143b2:	ef 90       	pop	r14
   143b4:	df 90       	pop	r13
   143b6:	08 95       	ret

000143b8 <__vector_9>:

ISR(PCINT0_vect) {
   143b8:	1f 92       	push	r1
   143ba:	0f 92       	push	r0
   143bc:	0f b6       	in	r0, 0x3f	; 63
   143be:	0f 92       	push	r0
   143c0:	11 24       	eor	r1, r1
   143c2:	0b b6       	in	r0, 0x3b	; 59
   143c4:	0f 92       	push	r0
   143c6:	2f 93       	push	r18
   143c8:	3f 93       	push	r19
   143ca:	4f 93       	push	r20
   143cc:	5f 93       	push	r21
   143ce:	6f 93       	push	r22
   143d0:	7f 93       	push	r23
   143d2:	8f 93       	push	r24
   143d4:	9f 93       	push	r25
   143d6:	af 93       	push	r26
   143d8:	bf 93       	push	r27
   143da:	ef 93       	push	r30
   143dc:	ff 93       	push	r31
  PCint(0);
   143de:	80 e0       	ldi	r24, 0x00	; 0
   143e0:	84 df       	rcall	.-248    	; 0x142ea <_ZL5PCinth>
}
   143e2:	ff 91       	pop	r31
   143e4:	ef 91       	pop	r30
   143e6:	bf 91       	pop	r27
   143e8:	af 91       	pop	r26
   143ea:	9f 91       	pop	r25
   143ec:	8f 91       	pop	r24
   143ee:	7f 91       	pop	r23
   143f0:	6f 91       	pop	r22
   143f2:	5f 91       	pop	r21
   143f4:	4f 91       	pop	r20
   143f6:	3f 91       	pop	r19
   143f8:	2f 91       	pop	r18
   143fa:	0f 90       	pop	r0
   143fc:	0b be       	out	0x3b, r0	; 59
   143fe:	0f 90       	pop	r0
   14400:	0f be       	out	0x3f, r0	; 63
   14402:	0f 90       	pop	r0
   14404:	1f 90       	pop	r1
   14406:	18 95       	reti

00014408 <__vector_10>:
ISR(PCINT1_vect) {
   14408:	1f 92       	push	r1
   1440a:	0f 92       	push	r0
   1440c:	0f b6       	in	r0, 0x3f	; 63
   1440e:	0f 92       	push	r0
   14410:	11 24       	eor	r1, r1
   14412:	0b b6       	in	r0, 0x3b	; 59
   14414:	0f 92       	push	r0
   14416:	2f 93       	push	r18
   14418:	3f 93       	push	r19
   1441a:	4f 93       	push	r20
   1441c:	5f 93       	push	r21
   1441e:	6f 93       	push	r22
   14420:	7f 93       	push	r23
   14422:	8f 93       	push	r24
   14424:	9f 93       	push	r25
   14426:	af 93       	push	r26
   14428:	bf 93       	push	r27
   1442a:	ef 93       	push	r30
   1442c:	ff 93       	push	r31
  PCint(1);
   1442e:	81 e0       	ldi	r24, 0x01	; 1
   14430:	5c df       	rcall	.-328    	; 0x142ea <_ZL5PCinth>
}
   14432:	ff 91       	pop	r31
   14434:	ef 91       	pop	r30
   14436:	bf 91       	pop	r27
   14438:	af 91       	pop	r26
   1443a:	9f 91       	pop	r25
   1443c:	8f 91       	pop	r24
   1443e:	7f 91       	pop	r23
   14440:	6f 91       	pop	r22
   14442:	5f 91       	pop	r21
   14444:	4f 91       	pop	r20
   14446:	3f 91       	pop	r19
   14448:	2f 91       	pop	r18
   1444a:	0f 90       	pop	r0
   1444c:	0b be       	out	0x3b, r0	; 59
   1444e:	0f 90       	pop	r0
   14450:	0f be       	out	0x3f, r0	; 63
   14452:	0f 90       	pop	r0
   14454:	1f 90       	pop	r1
   14456:	18 95       	reti

00014458 <__vector_11>:
ISR(PCINT2_vect) {
   14458:	1f 92       	push	r1
   1445a:	0f 92       	push	r0
   1445c:	0f b6       	in	r0, 0x3f	; 63
   1445e:	0f 92       	push	r0
   14460:	11 24       	eor	r1, r1
   14462:	0b b6       	in	r0, 0x3b	; 59
   14464:	0f 92       	push	r0
   14466:	2f 93       	push	r18
   14468:	3f 93       	push	r19
   1446a:	4f 93       	push	r20
   1446c:	5f 93       	push	r21
   1446e:	6f 93       	push	r22
   14470:	7f 93       	push	r23
   14472:	8f 93       	push	r24
   14474:	9f 93       	push	r25
   14476:	af 93       	push	r26
   14478:	bf 93       	push	r27
   1447a:	ef 93       	push	r30
   1447c:	ff 93       	push	r31
  PCint(2);
   1447e:	82 e0       	ldi	r24, 0x02	; 2
   14480:	34 df       	rcall	.-408    	; 0x142ea <_ZL5PCinth>
   14482:	ff 91       	pop	r31
   14484:	ef 91       	pop	r30
   14486:	bf 91       	pop	r27
   14488:	af 91       	pop	r26
   1448a:	9f 91       	pop	r25
   1448c:	8f 91       	pop	r24
   1448e:	7f 91       	pop	r23
   14490:	6f 91       	pop	r22
   14492:	5f 91       	pop	r21
   14494:	4f 91       	pop	r20
   14496:	3f 91       	pop	r19
   14498:	2f 91       	pop	r18
   1449a:	0f 90       	pop	r0
   1449c:	0b be       	out	0x3b, r0	; 59
   1449e:	0f 90       	pop	r0
   144a0:	0f be       	out	0x3f, r0	; 63
   144a2:	0f 90       	pop	r0
   144a4:	1f 90       	pop	r1
   144a6:	18 95       	reti

000144a8 <_ZN3PWM16setPWMResolutionEh>:
			}
		}
	}

	void PWM::setPWMResolution(uint8_t bitResolution)
	{
   144a8:	cf 93       	push	r28
   144aa:	df 93       	push	r29
   144ac:	fc 01       	movw	r30, r24
		uint8_t mode = 0b0101; // fast 8 default
		if( timer ) {
   144ae:	82 81       	ldd	r24, Z+2	; 0x02
   144b0:	93 81       	ldd	r25, Z+3	; 0x03
   144b2:	00 97       	sbiw	r24, 0x00	; 0
   144b4:	c1 f0       	breq	.+48     	; 0x144e6 <_ZN3PWM16setPWMResolutionEh+0x3e>
			if( (*timer).getTimerNumber() == 2 ) {
   144b6:	dc 01       	movw	r26, r24
   144b8:	12 96       	adiw	r26, 0x02	; 2
   144ba:	2c 91       	ld	r18, X
   144bc:	22 30       	cpi	r18, 0x02	; 2
   144be:	31 f0       	breq	.+12     	; 0x144cc <_ZN3PWM16setPWMResolutionEh+0x24>
				mode = 0b0011; // fast 8 for timer 2
			} else {
				if (bitResolution == 9) // fast 9
   144c0:	69 30       	cpi	r22, 0x09	; 9
   144c2:	31 f0       	breq	.+12     	; 0x144d0 <_ZN3PWM16setPWMResolutionEh+0x28>
					mode = 0b0110;
				else 
					if (bitResolution == 10) // fast 10
   144c4:	6a 30       	cpi	r22, 0x0A	; 10
   144c6:	31 f4       	brne	.+12     	; 0x144d4 <_ZN3PWM16setPWMResolutionEh+0x2c>
						mode = 0b0111;
   144c8:	67 e0       	ldi	r22, 0x07	; 7
   144ca:	05 c0       	rjmp	.+10     	; 0x144d6 <_ZN3PWM16setPWMResolutionEh+0x2e>
	void PWM::setPWMResolution(uint8_t bitResolution)
	{
		uint8_t mode = 0b0101; // fast 8 default
		if( timer ) {
			if( (*timer).getTimerNumber() == 2 ) {
				mode = 0b0011; // fast 8 for timer 2
   144cc:	63 e0       	ldi	r22, 0x03	; 3
   144ce:	03 c0       	rjmp	.+6      	; 0x144d6 <_ZN3PWM16setPWMResolutionEh+0x2e>
			} else {
				if (bitResolution == 9) // fast 9
					mode = 0b0110;
   144d0:	66 e0       	ldi	r22, 0x06	; 6
   144d2:	01 c0       	rjmp	.+2      	; 0x144d6 <_ZN3PWM16setPWMResolutionEh+0x2e>
		}
	}

	void PWM::setPWMResolution(uint8_t bitResolution)
	{
		uint8_t mode = 0b0101; // fast 8 default
   144d4:	65 e0       	ldi	r22, 0x05	; 5
   144d6:	ef 01       	movw	r28, r30
					mode = 0b0110;
				else 
					if (bitResolution == 10) // fast 10
						mode = 0b0111;
			}
			(*timer).setMode(mode);
   144d8:	0e dc       	rcall	.-2020   	; 0x13cf6 <_ZN13HardwareTimer7setModeEh>
			(*timer).setOCR(channel,0);
   144da:	40 e0       	ldi	r20, 0x00	; 0
   144dc:	50 e0       	ldi	r21, 0x00	; 0
   144de:	6c 81       	ldd	r22, Y+4	; 0x04
   144e0:	8a 81       	ldd	r24, Y+2	; 0x02
   144e2:	9b 81       	ldd	r25, Y+3	; 0x03
   144e4:	4a dc       	rcall	.-1900   	; 0x13d7a <_ZN13HardwareTimer6setOCREhj>
		}
	}
   144e6:	df 91       	pop	r29
   144e8:	cf 91       	pop	r28
   144ea:	08 95       	ret

000144ec <_ZN3PWM14setPWMPrescaleEh>:

	void PWM::setPWMPrescale(uint8_t prescalar)
	{
		if( timer ) (*timer).setClockSource(prescalar);
   144ec:	fc 01       	movw	r30, r24
   144ee:	82 81       	ldd	r24, Z+2	; 0x02
   144f0:	93 81       	ldd	r25, Z+3	; 0x03
   144f2:	00 97       	sbiw	r24, 0x00	; 0
   144f4:	09 f0       	breq	.+2      	; 0x144f8 <_ZN3PWM14setPWMPrescaleEh+0xc>
   144f6:	37 c9       	rjmp	.-3474   	; 0x13766 <_ZN13HardwareTimer14setClockSourceEh>
   144f8:	08 95       	ret

000144fa <_ZN3PWM12digitalWriteEh>:
	}
	

	void PWM::digitalWrite(uint8_t val)
	{
   144fa:	1f 93       	push	r17
   144fc:	cf 93       	push	r28
   144fe:	df 93       	push	r29
		uint8_t timer = digitalPinToTimer(this->pin);
   14500:	fc 01       	movw	r30, r24
   14502:	80 81       	ld	r24, Z
   14504:	90 e0       	ldi	r25, 0x00	; 0
   14506:	fc 01       	movw	r30, r24
   14508:	e9 58       	subi	r30, 0x89	; 137
   1450a:	f9 4e       	sbci	r31, 0xE9	; 233
   1450c:	24 91       	lpm	r18, Z
		uint8_t bit = digitalPinToBitMask(this->pin);
   1450e:	fc 01       	movw	r30, r24
   14510:	e3 54       	subi	r30, 0x43	; 67
   14512:	f9 4e       	sbci	r31, 0xE9	; 233
   14514:	d4 91       	lpm	r29, Z
		uint8_t port = digitalPinToPort(this->pin);
   14516:	fc 01       	movw	r30, r24
   14518:	ed 5f       	subi	r30, 0xFD	; 253
   1451a:	f8 4e       	sbci	r31, 0xE8	; 232
   1451c:	c4 91       	lpm	r28, Z
		volatile uint16_t *out;

		if (port == NOT_A_PIN) return;
   1451e:	cc 23       	and	r28, r28
   14520:	09 f4       	brne	.+2      	; 0x14524 <_ZN3PWM12digitalWriteEh+0x2a>
   14522:	7c c0       	rjmp	.+248    	; 0x1461c <_ZN3PWM12digitalWriteEh+0x122>
   14524:	16 2f       	mov	r17, r22

		// If PWM output, we need to turn pin off before doing a digital write.
		if (timer != NOT_ON_TIMER) Digital::turnOffPWM(timer);
   14526:	22 23       	and	r18, r18
   14528:	09 f4       	brne	.+2      	; 0x1452c <_ZN3PWM12digitalWriteEh+0x32>
   1452a:	57 c0       	rjmp	.+174    	; 0x145da <_ZN3PWM12digitalWriteEh+0xe0>

// If we detect the pin is on a timer, we may need to defuse PWM output, 
// we need to turn pin off before doing a digital write.
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
   1452c:	82 2f       	mov	r24, r18
   1452e:	90 e0       	ldi	r25, 0x00	; 0
   14530:	fc 01       	movw	r30, r24
   14532:	31 97       	sbiw	r30, 0x01	; 1
   14534:	e0 31       	cpi	r30, 0x10	; 16
   14536:	f1 05       	cpc	r31, r1
   14538:	08 f0       	brcs	.+2      	; 0x1453c <_ZN3PWM12digitalWriteEh+0x42>
   1453a:	4f c0       	rjmp	.+158    	; 0x145da <_ZN3PWM12digitalWriteEh+0xe0>
   1453c:	88 27       	eor	r24, r24
   1453e:	ed 5f       	subi	r30, 0xFD	; 253
   14540:	fd 4f       	sbci	r31, 0xFD	; 253
   14542:	8f 4f       	sbci	r24, 0xFF	; 255
   14544:	a0 c4       	rjmp	.+2368   	; 0x14e86 <__tablejump2__>
	{
		case TIMER0A: Timer0.stopChannel(CHANNEL_A); break;
   14546:	60 e0       	ldi	r22, 0x00	; 0
   14548:	84 e7       	ldi	r24, 0x74	; 116
   1454a:	97 e1       	ldi	r25, 0x17	; 23
   1454c:	13 dc       	rcall	.-2010   	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   1454e:	45 c0       	rjmp	.+138    	; 0x145da <_ZN3PWM12digitalWriteEh+0xe0>
		case TIMER0B: Timer0.stopChannel(CHANNEL_B); break;
   14550:	61 e0       	ldi	r22, 0x01	; 1
   14552:	84 e7       	ldi	r24, 0x74	; 116
   14554:	97 e1       	ldi	r25, 0x17	; 23
   14556:	0e dc       	rcall	.-2020   	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   14558:	40 c0       	rjmp	.+128    	; 0x145da <_ZN3PWM12digitalWriteEh+0xe0>
	
		case TIMER1A: Timer1.stopChannel(CHANNEL_A); break;
   1455a:	60 e0       	ldi	r22, 0x00	; 0
   1455c:	85 e4       	ldi	r24, 0x45	; 69
   1455e:	97 e1       	ldi	r25, 0x17	; 23
   14560:	09 dc       	rcall	.-2030   	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   14562:	3b c0       	rjmp	.+118    	; 0x145da <_ZN3PWM12digitalWriteEh+0xe0>
		case TIMER1B: Timer1.stopChannel(CHANNEL_B); break;
   14564:	61 e0       	ldi	r22, 0x01	; 1
   14566:	85 e4       	ldi	r24, 0x45	; 69
   14568:	97 e1       	ldi	r25, 0x17	; 23
   1456a:	04 dc       	rcall	.-2040   	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   1456c:	36 c0       	rjmp	.+108    	; 0x145da <_ZN3PWM12digitalWriteEh+0xe0>
		
		case TIMER2A: Timer2.stopChannel(CHANNEL_A); break;
   1456e:	60 e0       	ldi	r22, 0x00	; 0
   14570:	86 e1       	ldi	r24, 0x16	; 22
   14572:	97 e1       	ldi	r25, 0x17	; 23
   14574:	ff db       	rcall	.-2050   	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   14576:	31 c0       	rjmp	.+98     	; 0x145da <_ZN3PWM12digitalWriteEh+0xe0>
		case TIMER2B: Timer2.stopChannel(CHANNEL_B); break;
   14578:	61 e0       	ldi	r22, 0x01	; 1
   1457a:	86 e1       	ldi	r24, 0x16	; 22
   1457c:	97 e1       	ldi	r25, 0x17	; 23
   1457e:	fa db       	rcall	.-2060   	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   14580:	2c c0       	rjmp	.+88     	; 0x145da <_ZN3PWM12digitalWriteEh+0xe0>
	
		case TIMER3A: Timer3.stopChannel(CHANNEL_A); break;
   14582:	60 e0       	ldi	r22, 0x00	; 0
   14584:	87 ee       	ldi	r24, 0xE7	; 231
   14586:	96 e1       	ldi	r25, 0x16	; 22
   14588:	f5 db       	rcall	.-2070   	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   1458a:	27 c0       	rjmp	.+78     	; 0x145da <_ZN3PWM12digitalWriteEh+0xe0>
		case TIMER3B: Timer3.stopChannel(CHANNEL_B); break; 
   1458c:	61 e0       	ldi	r22, 0x01	; 1
   1458e:	87 ee       	ldi	r24, 0xE7	; 231
   14590:	96 e1       	ldi	r25, 0x16	; 22
   14592:	f0 db       	rcall	.-2080   	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   14594:	22 c0       	rjmp	.+68     	; 0x145da <_ZN3PWM12digitalWriteEh+0xe0>
		case TIMER3C: Timer3.stopChannel(CHANNEL_C); break;
   14596:	62 e0       	ldi	r22, 0x02	; 2
   14598:	87 ee       	ldi	r24, 0xE7	; 231
   1459a:	96 e1       	ldi	r25, 0x16	; 22
   1459c:	eb db       	rcall	.-2090   	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   1459e:	1d c0       	rjmp	.+58     	; 0x145da <_ZN3PWM12digitalWriteEh+0xe0>
		
		case TIMER4A: Timer4.stopChannel(CHANNEL_A); break;
   145a0:	60 e0       	ldi	r22, 0x00	; 0
   145a2:	88 eb       	ldi	r24, 0xB8	; 184
   145a4:	96 e1       	ldi	r25, 0x16	; 22
   145a6:	e6 db       	rcall	.-2100   	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   145a8:	18 c0       	rjmp	.+48     	; 0x145da <_ZN3PWM12digitalWriteEh+0xe0>
		case TIMER4B: Timer4.stopChannel(CHANNEL_B); break; 
   145aa:	61 e0       	ldi	r22, 0x01	; 1
   145ac:	88 eb       	ldi	r24, 0xB8	; 184
   145ae:	96 e1       	ldi	r25, 0x16	; 22
   145b0:	e1 db       	rcall	.-2110   	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   145b2:	13 c0       	rjmp	.+38     	; 0x145da <_ZN3PWM12digitalWriteEh+0xe0>
		case TIMER4C: Timer4.stopChannel(CHANNEL_C); break;
   145b4:	62 e0       	ldi	r22, 0x02	; 2
   145b6:	88 eb       	ldi	r24, 0xB8	; 184
   145b8:	96 e1       	ldi	r25, 0x16	; 22
   145ba:	dc db       	rcall	.-2120   	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   145bc:	0e c0       	rjmp	.+28     	; 0x145da <_ZN3PWM12digitalWriteEh+0xe0>
		
		case TIMER5A: Timer5.stopChannel(CHANNEL_A); break;
   145be:	60 e0       	ldi	r22, 0x00	; 0
   145c0:	89 e8       	ldi	r24, 0x89	; 137
   145c2:	96 e1       	ldi	r25, 0x16	; 22
   145c4:	d7 db       	rcall	.-2130   	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   145c6:	09 c0       	rjmp	.+18     	; 0x145da <_ZN3PWM12digitalWriteEh+0xe0>
		case TIMER5B: Timer5.stopChannel(CHANNEL_B); break; 
   145c8:	61 e0       	ldi	r22, 0x01	; 1
   145ca:	89 e8       	ldi	r24, 0x89	; 137
   145cc:	96 e1       	ldi	r25, 0x16	; 22
   145ce:	d2 db       	rcall	.-2140   	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   145d0:	04 c0       	rjmp	.+8      	; 0x145da <_ZN3PWM12digitalWriteEh+0xe0>
   145d2:	62 e0       	ldi	r22, 0x02	; 2
		case TIMER5C: Timer5.stopChannel(CHANNEL_C); break;
   145d4:	89 e8       	ldi	r24, 0x89	; 137
   145d6:	96 e1       	ldi	r25, 0x16	; 22
   145d8:	cd db       	rcall	.-2150   	; 0x13d74 <_ZN13HardwareTimer11stopChannelEh>
   145da:	ec 2f       	mov	r30, r28
   145dc:	f0 e0       	ldi	r31, 0x00	; 0

		out = portOutputRegister(port);
   145de:	ee 0f       	add	r30, r30
   145e0:	ff 1f       	adc	r31, r31
   145e2:	e7 5b       	subi	r30, 0xB7	; 183
   145e4:	f8 4e       	sbci	r31, 0xE8	; 232
   145e6:	a5 91       	lpm	r26, Z+
   145e8:	b4 91       	lpm	r27, Z
   145ea:	8f b7       	in	r24, 0x3f	; 63
   145ec:	f8 94       	cli

		uint8_t oldSREG = SREG;
   145ee:	11 11       	cpse	r17, r1
		cli();
   145f0:	0d c0       	rjmp	.+26     	; 0x1460c <_ZN3PWM12digitalWriteEh+0x112>

		if (val == LOW) {
   145f2:	2d 91       	ld	r18, X+
   145f4:	3c 91       	ld	r19, X
			*out &= ~bit;
   145f6:	11 97       	sbiw	r26, 0x01	; 1
   145f8:	ed 2f       	mov	r30, r29
   145fa:	f0 e0       	ldi	r31, 0x00	; 0
   145fc:	e0 95       	com	r30
   145fe:	f0 95       	com	r31
   14600:	e2 23       	and	r30, r18
   14602:	f3 23       	and	r31, r19
   14604:	11 96       	adiw	r26, 0x01	; 1
   14606:	fc 93       	st	X, r31
   14608:	ee 93       	st	-X, r30
   1460a:	07 c0       	rjmp	.+14     	; 0x1461a <_ZN3PWM12digitalWriteEh+0x120>
   1460c:	2d 91       	ld	r18, X+
   1460e:	3c 91       	ld	r19, X
		} else {
			*out |= bit;
   14610:	11 97       	sbiw	r26, 0x01	; 1
   14612:	2d 2b       	or	r18, r29
   14614:	11 96       	adiw	r26, 0x01	; 1
   14616:	3c 93       	st	X, r19
   14618:	2e 93       	st	-X, r18
   1461a:	8f bf       	out	0x3f, r24	; 63
   1461c:	df 91       	pop	r29
		}

		SREG = oldSREG;
   1461e:	cf 91       	pop	r28
	}
   14620:	1f 91       	pop	r17
   14622:	08 95       	ret

00014624 <_ZN3PWM8pwmWriteEjh>:
   14624:	0f 93       	push	r16
   14626:	1f 93       	push	r17
		}
		this->interruptService = NULL;
	}
			
	void PWM::pwmWrite(uint16_t val, uint8_t outputMode)
	{
   14628:	cf 93       	push	r28
   1462a:	df 93       	push	r29
   1462c:	ec 01       	movw	r28, r24
   1462e:	8b 01       	movw	r16, r22
		// If 0, turn off PWM (some OCRn registers, in fast PWM mode, will still generate spikes when its OCR is set to zero).
		if (val == 0)
   14630:	61 15       	cp	r22, r1
   14632:	71 05       	cpc	r23, r1
   14634:	39 f4       	brne	.+14     	; 0x14644 <_ZN3PWM8pwmWriteEjh+0x20>
		{
			outputMode = 0; // turn off PWM
			digitalWrite(LOW);
   14636:	60 e0       	ldi	r22, 0x00	; 0
   14638:	60 df       	rcall	.-320    	; 0x144fa <_ZN3PWM12digitalWriteEh>
		}
		if( timer ) {
   1463a:	8a 81       	ldd	r24, Y+2	; 0x02
   1463c:	9b 81       	ldd	r25, Y+3	; 0x03
   1463e:	00 97       	sbiw	r24, 0x00	; 0
   14640:	31 f4       	brne	.+12     	; 0x1464e <_ZN3PWM8pwmWriteEjh+0x2a>
   14642:	11 c0       	rjmp	.+34     	; 0x14666 <_ZN3PWM8pwmWriteEjh+0x42>
   14644:	8a 81       	ldd	r24, Y+2	; 0x02
   14646:	9b 81       	ldd	r25, Y+3	; 0x03
   14648:	00 97       	sbiw	r24, 0x00	; 0
   1464a:	11 f4       	brne	.+4      	; 0x14650 <_ZN3PWM8pwmWriteEjh+0x2c>
   1464c:	09 c0       	rjmp	.+18     	; 0x14660 <_ZN3PWM8pwmWriteEjh+0x3c>
	void PWM::pwmWrite(uint16_t val, uint8_t outputMode)
	{
		// If 0, turn off PWM (some OCRn registers, in fast PWM mode, will still generate spikes when its OCR is set to zero).
		if (val == 0)
		{
			outputMode = 0; // turn off PWM
   1464e:	40 e0       	ldi	r20, 0x00	; 0
			digitalWrite(LOW);
		}
		if( timer ) {
			(*timer).setOutputMode(channel, outputMode);
   14650:	6c 81       	ldd	r22, Y+4	; 0x04
   14652:	67 db       	rcall	.-2354   	; 0x13d22 <_ZN13HardwareTimer13setOutputModeEhh>
			(*timer).setOCR(channel, val);
   14654:	a8 01       	movw	r20, r16
   14656:	6c 81       	ldd	r22, Y+4	; 0x04
   14658:	8a 81       	ldd	r24, Y+2	; 0x02
   1465a:	9b 81       	ldd	r25, Y+3	; 0x03
   1465c:	8e db       	rcall	.-2276   	; 0x13d7a <_ZN13HardwareTimer6setOCREhj>
   1465e:	0a c0       	rjmp	.+20     	; 0x14674 <_ZN3PWM8pwmWriteEjh+0x50>
		} else {
			if (val < 128)
   14660:	60 38       	cpi	r22, 0x80	; 128
   14662:	71 05       	cpc	r23, r1
   14664:	20 f4       	brcc	.+8      	; 0x1466e <_ZN3PWM8pwmWriteEjh+0x4a>
			{
				digitalWrite(LOW);
   14666:	60 e0       	ldi	r22, 0x00	; 0
   14668:	ce 01       	movw	r24, r28
   1466a:	47 df       	rcall	.-370    	; 0x144fa <_ZN3PWM12digitalWriteEh>
   1466c:	03 c0       	rjmp	.+6      	; 0x14674 <_ZN3PWM8pwmWriteEjh+0x50>
			}
			else
			{
				digitalWrite(HIGH);
   1466e:	61 e0       	ldi	r22, 0x01	; 1
   14670:	ce 01       	movw	r24, r28
   14672:	43 df       	rcall	.-378    	; 0x144fa <_ZN3PWM12digitalWriteEh>
			}
		}
	}
   14674:	df 91       	pop	r29
   14676:	cf 91       	pop	r28
   14678:	1f 91       	pop	r17
   1467a:	0f 91       	pop	r16
   1467c:	08 95       	ret

0001467e <_ZN3PWM10pinModeOutEv>:

		SREG = oldSREG;
	}
	
	void PWM::pinModeOut(void) {
			uint8_t bit = digitalPinToBitMask(this->pin);
   1467e:	fc 01       	movw	r30, r24
   14680:	80 81       	ld	r24, Z
   14682:	90 e0       	ldi	r25, 0x00	; 0
   14684:	fc 01       	movw	r30, r24
   14686:	e3 54       	subi	r30, 0x43	; 67
   14688:	f9 4e       	sbci	r31, 0xE9	; 233
   1468a:	24 91       	lpm	r18, Z
			uint8_t port = digitalPinToPort(this->pin);
   1468c:	fc 01       	movw	r30, r24
   1468e:	ed 5f       	subi	r30, 0xFD	; 253
   14690:	f8 4e       	sbci	r31, 0xE8	; 232
   14692:	84 91       	lpm	r24, Z
			volatile uint16_t *reg, *out;

			if (port == NOT_A_PIN) return;
   14694:	88 23       	and	r24, r24
   14696:	b9 f0       	breq	.+46     	; 0x146c6 <_ZN3PWM10pinModeOutEv+0x48>

			reg = portModeRegister(port);
   14698:	90 e0       	ldi	r25, 0x00	; 0
   1469a:	88 0f       	add	r24, r24
   1469c:	99 1f       	adc	r25, r25
   1469e:	fc 01       	movw	r30, r24
   146a0:	ed 59       	subi	r30, 0x9D	; 157
   146a2:	f8 4e       	sbci	r31, 0xE8	; 232
   146a4:	a5 91       	lpm	r26, Z+
   146a6:	b4 91       	lpm	r27, Z
			out = portOutputRegister(port);
   146a8:	fc 01       	movw	r30, r24
   146aa:	e7 5b       	subi	r30, 0xB7	; 183
   146ac:	f8 4e       	sbci	r31, 0xE8	; 232
   146ae:	85 91       	lpm	r24, Z+
   146b0:	94 91       	lpm	r25, Z
				
			uint8_t oldSREG = SREG;
   146b2:	3f b7       	in	r19, 0x3f	; 63
			cli();
   146b4:	f8 94       	cli
			*reg |= bit; // output mode
   146b6:	8d 91       	ld	r24, X+
   146b8:	9c 91       	ld	r25, X
   146ba:	11 97       	sbiw	r26, 0x01	; 1
   146bc:	82 2b       	or	r24, r18
   146be:	11 96       	adiw	r26, 0x01	; 1
   146c0:	9c 93       	st	X, r25
   146c2:	8e 93       	st	-X, r24
			SREG = oldSREG;
   146c4:	3f bf       	out	0x3f, r19	; 63
   146c6:	08 95       	ret

000146c8 <_ZN3PWMC1Eh>:
 */ 
#include "WPWM.h"
	/*
	* Constructor 
	*/
	PWM::PWM(uint8_t spin) {
   146c8:	21 e0       	ldi	r18, 0x01	; 1
   146ca:	fc 01       	movw	r30, r24
   146cc:	21 83       	std	Z+1, r18	; 0x01
   146ce:	14 82       	std	Z+4, r1	; 0x04
   146d0:	16 82       	std	Z+6, r1	; 0x06
   146d2:	15 82       	std	Z+5, r1	; 0x05
		this->pin = spin;
   146d4:	60 83       	st	Z, r22
		pinModeOut();
   146d6:	d3 cf       	rjmp	.-90     	; 0x1467e <_ZN3PWM10pinModeOutEv>
   146d8:	08 95       	ret

000146da <_ZN3PWM4initEh>:
	}

	void PWM::init(uint8_t spin) {
   146da:	cf 93       	push	r28
   146dc:	df 93       	push	r29
   146de:	ec 01       	movw	r28, r24
	 this->pin = spin; 
   146e0:	68 83       	st	Y, r22
	 pinModeOut();
   146e2:	cd df       	rcall	.-102    	; 0x1467e <_ZN3PWM10pinModeOutEv>
	 switch (digitalPinToTimer(this->pin)) {
   146e4:	e8 81       	ld	r30, Y
   146e6:	f0 e0       	ldi	r31, 0x00	; 0
   146e8:	e9 58       	subi	r30, 0x89	; 137
   146ea:	f9 4e       	sbci	r31, 0xE9	; 233
   146ec:	e4 91       	lpm	r30, Z
   146ee:	8e 2f       	mov	r24, r30
   146f0:	90 e0       	ldi	r25, 0x00	; 0
   146f2:	fc 01       	movw	r30, r24
   146f4:	31 97       	sbiw	r30, 0x01	; 1
   146f6:	e0 31       	cpi	r30, 0x10	; 16
   146f8:	f1 05       	cpc	r31, r1
   146fa:	08 f0       	brcs	.+2      	; 0x146fe <_ZN3PWM4initEh+0x24>
   146fc:	68 c0       	rjmp	.+208    	; 0x147ce <_ZN3PWM4initEh+0xf4>
   146fe:	88 27       	eor	r24, r24
   14700:	ed 5e       	subi	r30, 0xED	; 237
   14702:	fd 4f       	sbci	r31, 0xFD	; 253
   14704:	8f 4f       	sbci	r24, 0xFF	; 255
   14706:	bf c3       	rjmp	.+1918   	; 0x14e86 <__tablejump2__>
		case TIMER0A:
			channel = CHANNEL_A;
   14708:	1c 82       	std	Y+4, r1	; 0x04
			timer = &Timer0;
   1470a:	84 e7       	ldi	r24, 0x74	; 116
   1470c:	97 e1       	ldi	r25, 0x17	; 23
   1470e:	9b 83       	std	Y+3, r25	; 0x03
   14710:	8a 83       	std	Y+2, r24	; 0x02
			break;
   14712:	5f c0       	rjmp	.+190    	; 0x147d2 <_ZN3PWM4initEh+0xf8>
		case TIMER0B:
			channel= CHANNEL_B;
   14714:	81 e0       	ldi	r24, 0x01	; 1
   14716:	8c 83       	std	Y+4, r24	; 0x04
			timer = &Timer0;
   14718:	84 e7       	ldi	r24, 0x74	; 116
   1471a:	97 e1       	ldi	r25, 0x17	; 23
   1471c:	9b 83       	std	Y+3, r25	; 0x03
   1471e:	8a 83       	std	Y+2, r24	; 0x02
		break;
   14720:	58 c0       	rjmp	.+176    	; 0x147d2 <_ZN3PWM4initEh+0xf8>
		case TIMER1A:
			channel = CHANNEL_A;
   14722:	1c 82       	std	Y+4, r1	; 0x04
			timer = &Timer1;
   14724:	85 e4       	ldi	r24, 0x45	; 69
   14726:	97 e1       	ldi	r25, 0x17	; 23
   14728:	9b 83       	std	Y+3, r25	; 0x03
   1472a:	8a 83       	std	Y+2, r24	; 0x02
			break;
   1472c:	52 c0       	rjmp	.+164    	; 0x147d2 <_ZN3PWM4initEh+0xf8>
		case TIMER1B:
			channel = CHANNEL_B;
   1472e:	81 e0       	ldi	r24, 0x01	; 1
   14730:	8c 83       	std	Y+4, r24	; 0x04
			timer = &Timer1;
   14732:	85 e4       	ldi	r24, 0x45	; 69
   14734:	97 e1       	ldi	r25, 0x17	; 23
   14736:	9b 83       	std	Y+3, r25	; 0x03
   14738:	8a 83       	std	Y+2, r24	; 0x02
		break;
   1473a:	4b c0       	rjmp	.+150    	; 0x147d2 <_ZN3PWM4initEh+0xf8>
		case TIMER2A:
			channel = CHANNEL_A;
   1473c:	1c 82       	std	Y+4, r1	; 0x04
			timer = &Timer2;
   1473e:	86 e1       	ldi	r24, 0x16	; 22
   14740:	97 e1       	ldi	r25, 0x17	; 23
   14742:	9b 83       	std	Y+3, r25	; 0x03
   14744:	8a 83       	std	Y+2, r24	; 0x02
			break;
   14746:	45 c0       	rjmp	.+138    	; 0x147d2 <_ZN3PWM4initEh+0xf8>
		case TIMER2B:
			channel = CHANNEL_B;
   14748:	81 e0       	ldi	r24, 0x01	; 1
   1474a:	8c 83       	std	Y+4, r24	; 0x04
			timer = &Timer2;
   1474c:	86 e1       	ldi	r24, 0x16	; 22
   1474e:	97 e1       	ldi	r25, 0x17	; 23
   14750:	9b 83       	std	Y+3, r25	; 0x03
   14752:	8a 83       	std	Y+2, r24	; 0x02
		break;
   14754:	3e c0       	rjmp	.+124    	; 0x147d2 <_ZN3PWM4initEh+0xf8>
		case TIMER3A:
			channel = CHANNEL_A;
   14756:	1c 82       	std	Y+4, r1	; 0x04
			timer = &Timer3;
   14758:	87 ee       	ldi	r24, 0xE7	; 231
   1475a:	96 e1       	ldi	r25, 0x16	; 22
   1475c:	9b 83       	std	Y+3, r25	; 0x03
   1475e:	8a 83       	std	Y+2, r24	; 0x02
			break;
   14760:	38 c0       	rjmp	.+112    	; 0x147d2 <_ZN3PWM4initEh+0xf8>
		case TIMER3B:
			channel = CHANNEL_B;
   14762:	81 e0       	ldi	r24, 0x01	; 1
   14764:	8c 83       	std	Y+4, r24	; 0x04
			timer = &Timer3;
   14766:	87 ee       	ldi	r24, 0xE7	; 231
   14768:	96 e1       	ldi	r25, 0x16	; 22
   1476a:	9b 83       	std	Y+3, r25	; 0x03
   1476c:	8a 83       	std	Y+2, r24	; 0x02
			break;
   1476e:	31 c0       	rjmp	.+98     	; 0x147d2 <_ZN3PWM4initEh+0xf8>
		case TIMER3C:
			channel = CHANNEL_C;
   14770:	82 e0       	ldi	r24, 0x02	; 2
   14772:	8c 83       	std	Y+4, r24	; 0x04
			timer = &Timer3;
   14774:	87 ee       	ldi	r24, 0xE7	; 231
   14776:	96 e1       	ldi	r25, 0x16	; 22
   14778:	9b 83       	std	Y+3, r25	; 0x03
   1477a:	8a 83       	std	Y+2, r24	; 0x02
		break;
   1477c:	2a c0       	rjmp	.+84     	; 0x147d2 <_ZN3PWM4initEh+0xf8>
		case TIMER4A:
			channel = CHANNEL_A;
   1477e:	1c 82       	std	Y+4, r1	; 0x04
			timer = &Timer4;
   14780:	88 eb       	ldi	r24, 0xB8	; 184
   14782:	96 e1       	ldi	r25, 0x16	; 22
   14784:	9b 83       	std	Y+3, r25	; 0x03
   14786:	8a 83       	std	Y+2, r24	; 0x02
			break;
   14788:	24 c0       	rjmp	.+72     	; 0x147d2 <_ZN3PWM4initEh+0xf8>
		case TIMER4B:
			channel = CHANNEL_B;
   1478a:	81 e0       	ldi	r24, 0x01	; 1
   1478c:	8c 83       	std	Y+4, r24	; 0x04
			timer = &Timer4;
   1478e:	88 eb       	ldi	r24, 0xB8	; 184
   14790:	96 e1       	ldi	r25, 0x16	; 22
   14792:	9b 83       	std	Y+3, r25	; 0x03
   14794:	8a 83       	std	Y+2, r24	; 0x02
			break;
   14796:	1d c0       	rjmp	.+58     	; 0x147d2 <_ZN3PWM4initEh+0xf8>
		case TIMER4C:
			channel = CHANNEL_C;
   14798:	82 e0       	ldi	r24, 0x02	; 2
   1479a:	8c 83       	std	Y+4, r24	; 0x04
			timer = &Timer4;
   1479c:	88 eb       	ldi	r24, 0xB8	; 184
   1479e:	96 e1       	ldi	r25, 0x16	; 22
   147a0:	9b 83       	std	Y+3, r25	; 0x03
   147a2:	8a 83       	std	Y+2, r24	; 0x02
		break;
   147a4:	16 c0       	rjmp	.+44     	; 0x147d2 <_ZN3PWM4initEh+0xf8>
		case TIMER5A:
			channel = CHANNEL_A;
   147a6:	1c 82       	std	Y+4, r1	; 0x04
			timer = &Timer5;
   147a8:	89 e8       	ldi	r24, 0x89	; 137
   147aa:	96 e1       	ldi	r25, 0x16	; 22
   147ac:	9b 83       	std	Y+3, r25	; 0x03
   147ae:	8a 83       	std	Y+2, r24	; 0x02
			break;
   147b0:	10 c0       	rjmp	.+32     	; 0x147d2 <_ZN3PWM4initEh+0xf8>
		case TIMER5B:
			channel = CHANNEL_B;
   147b2:	81 e0       	ldi	r24, 0x01	; 1
   147b4:	8c 83       	std	Y+4, r24	; 0x04
			timer = &Timer5;
   147b6:	89 e8       	ldi	r24, 0x89	; 137
   147b8:	96 e1       	ldi	r25, 0x16	; 22
   147ba:	9b 83       	std	Y+3, r25	; 0x03
   147bc:	8a 83       	std	Y+2, r24	; 0x02
			break;
   147be:	09 c0       	rjmp	.+18     	; 0x147d2 <_ZN3PWM4initEh+0xf8>
		case TIMER5C:
			channel = CHANNEL_C;
   147c0:	82 e0       	ldi	r24, 0x02	; 2
   147c2:	8c 83       	std	Y+4, r24	; 0x04
			timer = &Timer5;
   147c4:	89 e8       	ldi	r24, 0x89	; 137
   147c6:	96 e1       	ldi	r25, 0x16	; 22
   147c8:	9b 83       	std	Y+3, r25	; 0x03
   147ca:	8a 83       	std	Y+2, r24	; 0x02
		break;
   147cc:	02 c0       	rjmp	.+4      	; 0x147d2 <_ZN3PWM4initEh+0xf8>
		case NOT_ON_TIMER:
		default:
			timer=NULL;
   147ce:	1b 82       	std	Y+3, r1	; 0x03
   147d0:	1a 82       	std	Y+2, r1	; 0x02
	  }

	}
   147d2:	df 91       	pop	r29
   147d4:	cf 91       	pop	r28
   147d6:	08 95       	ret

000147d8 <_ZN6StringD1Ev>:
	*this = buf;
}

String::~String()
{
	free(buffer);
   147d8:	fc 01       	movw	r30, r24
   147da:	80 81       	ld	r24, Z
   147dc:	91 81       	ldd	r25, Z+1	; 0x01
   147de:	20 c4       	rjmp	.+2112   	; 0x15020 <free>
   147e0:	08 95       	ret

000147e2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   147e2:	cf 93       	push	r28
   147e4:	df 93       	push	r29
   147e6:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
   147e8:	88 81       	ld	r24, Y
   147ea:	99 81       	ldd	r25, Y+1	; 0x01
   147ec:	00 97       	sbiw	r24, 0x00	; 0
   147ee:	09 f0       	breq	.+2      	; 0x147f2 <_ZN6String10invalidateEv+0x10>
   147f0:	17 d4       	rcall	.+2094   	; 0x15020 <free>
	buffer = NULL;
   147f2:	19 82       	std	Y+1, r1	; 0x01
   147f4:	18 82       	st	Y, r1
	capacity = len = 0;
   147f6:	1d 82       	std	Y+5, r1	; 0x05
   147f8:	1c 82       	std	Y+4, r1	; 0x04
   147fa:	1b 82       	std	Y+3, r1	; 0x03
   147fc:	1a 82       	std	Y+2, r1	; 0x02
}
   147fe:	df 91       	pop	r29
   14800:	cf 91       	pop	r28
   14802:	08 95       	ret

00014804 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   14804:	0f 93       	push	r16
   14806:	1f 93       	push	r17
   14808:	cf 93       	push	r28
   1480a:	df 93       	push	r29
   1480c:	ec 01       	movw	r28, r24
   1480e:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   14810:	6f 5f       	subi	r22, 0xFF	; 255
   14812:	7f 4f       	sbci	r23, 0xFF	; 255
   14814:	88 81       	ld	r24, Y
   14816:	99 81       	ldd	r25, Y+1	; 0x01
   14818:	8c d4       	rcall	.+2328   	; 0x15132 <realloc>
	if (newbuffer) {
   1481a:	00 97       	sbiw	r24, 0x00	; 0
   1481c:	31 f0       	breq	.+12     	; 0x1482a <_ZN6String12changeBufferEj+0x26>
		buffer = newbuffer;
   1481e:	99 83       	std	Y+1, r25	; 0x01
   14820:	88 83       	st	Y, r24
		capacity = maxStrLen;
   14822:	1b 83       	std	Y+3, r17	; 0x03
   14824:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
   14826:	81 e0       	ldi	r24, 0x01	; 1
   14828:	01 c0       	rjmp	.+2      	; 0x1482c <_ZN6String12changeBufferEj+0x28>
	}
	return 0;
   1482a:	80 e0       	ldi	r24, 0x00	; 0
}
   1482c:	df 91       	pop	r29
   1482e:	cf 91       	pop	r28
   14830:	1f 91       	pop	r17
   14832:	0f 91       	pop	r16
   14834:	08 95       	ret

00014836 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   14836:	cf 93       	push	r28
   14838:	df 93       	push	r29
	if (buffer && capacity >= size) return 1;
   1483a:	fc 01       	movw	r30, r24
   1483c:	20 81       	ld	r18, Z
   1483e:	31 81       	ldd	r19, Z+1	; 0x01
   14840:	23 2b       	or	r18, r19
   14842:	29 f0       	breq	.+10     	; 0x1484e <_ZN6String7reserveEj+0x18>
   14844:	22 81       	ldd	r18, Z+2	; 0x02
   14846:	33 81       	ldd	r19, Z+3	; 0x03
   14848:	26 17       	cp	r18, r22
   1484a:	37 07       	cpc	r19, r23
   1484c:	68 f4       	brcc	.+26     	; 0x14868 <_ZN6String7reserveEj+0x32>
   1484e:	ec 01       	movw	r28, r24
	if (changeBuffer(size)) {
   14850:	d9 df       	rcall	.-78     	; 0x14804 <_ZN6String12changeBufferEj>
   14852:	88 23       	and	r24, r24
   14854:	61 f0       	breq	.+24     	; 0x1486e <_ZN6String7reserveEj+0x38>
		if (len == 0) buffer[0] = 0;
   14856:	8c 81       	ldd	r24, Y+4	; 0x04
   14858:	9d 81       	ldd	r25, Y+5	; 0x05
   1485a:	89 2b       	or	r24, r25
   1485c:	39 f4       	brne	.+14     	; 0x1486c <_ZN6String7reserveEj+0x36>
   1485e:	e8 81       	ld	r30, Y
   14860:	f9 81       	ldd	r31, Y+1	; 0x01
   14862:	10 82       	st	Z, r1
		return 1;
   14864:	81 e0       	ldi	r24, 0x01	; 1
   14866:	03 c0       	rjmp	.+6      	; 0x1486e <_ZN6String7reserveEj+0x38>
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
   14868:	81 e0       	ldi	r24, 0x01	; 1
   1486a:	01 c0       	rjmp	.+2      	; 0x1486e <_ZN6String7reserveEj+0x38>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
   1486c:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
   1486e:	df 91       	pop	r29
   14870:	cf 91       	pop	r28
   14872:	08 95       	ret

00014874 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   14874:	ef 92       	push	r14
   14876:	ff 92       	push	r15
   14878:	0f 93       	push	r16
   1487a:	1f 93       	push	r17
   1487c:	cf 93       	push	r28
   1487e:	df 93       	push	r29
   14880:	ec 01       	movw	r28, r24
   14882:	7b 01       	movw	r14, r22
   14884:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
   14886:	ba 01       	movw	r22, r20
   14888:	d6 df       	rcall	.-84     	; 0x14836 <_ZN6String7reserveEj>
   1488a:	81 11       	cpse	r24, r1
   1488c:	03 c0       	rjmp	.+6      	; 0x14894 <_ZN6String4copyEPKcj+0x20>
		invalidate();
   1488e:	ce 01       	movw	r24, r28
   14890:	a8 df       	rcall	.-176    	; 0x147e2 <_ZN6String10invalidateEv>
		return *this;
   14892:	06 c0       	rjmp	.+12     	; 0x148a0 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
   14894:	1d 83       	std	Y+5, r17	; 0x05
   14896:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
   14898:	b7 01       	movw	r22, r14
   1489a:	88 81       	ld	r24, Y
   1489c:	99 81       	ldd	r25, Y+1	; 0x01
   1489e:	f5 d7       	rcall	.+4074   	; 0x1588a <strcpy>
	return *this;
}
   148a0:	ce 01       	movw	r24, r28
   148a2:	df 91       	pop	r29
   148a4:	cf 91       	pop	r28
   148a6:	1f 91       	pop	r17
   148a8:	0f 91       	pop	r16
   148aa:	ff 90       	pop	r15
   148ac:	ef 90       	pop	r14
   148ae:	08 95       	ret

000148b0 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
   148b0:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   148b2:	11 82       	std	Z+1, r1	; 0x01
   148b4:	10 82       	st	Z, r1
	capacity = 0;
   148b6:	13 82       	std	Z+3, r1	; 0x03
   148b8:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
   148ba:	15 82       	std	Z+5, r1	; 0x05
   148bc:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
   148be:	16 82       	std	Z+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
   148c0:	61 15       	cp	r22, r1
   148c2:	71 05       	cpc	r23, r1
   148c4:	49 f0       	breq	.+18     	; 0x148d8 <_ZN6StringC1EPKc+0x28>
   148c6:	fb 01       	movw	r30, r22
   148c8:	01 90       	ld	r0, Z+
   148ca:	00 20       	and	r0, r0
   148cc:	e9 f7       	brne	.-6      	; 0x148c8 <_ZN6StringC1EPKc+0x18>
   148ce:	31 97       	sbiw	r30, 0x01	; 1
   148d0:	af 01       	movw	r20, r30
   148d2:	46 1b       	sub	r20, r22
   148d4:	57 0b       	sbc	r21, r23
   148d6:	ce cf       	rjmp	.-100    	; 0x14874 <_ZN6String4copyEPKcj>
   148d8:	08 95       	ret

000148da <__subsf3>:
   148da:	50 58       	subi	r21, 0x80	; 128

000148dc <__addsf3>:
   148dc:	bb 27       	eor	r27, r27
   148de:	aa 27       	eor	r26, r26
   148e0:	0e d0       	rcall	.+28     	; 0x148fe <__addsf3x>
   148e2:	75 c1       	rjmp	.+746    	; 0x14bce <__fp_round>
   148e4:	66 d1       	rcall	.+716    	; 0x14bb2 <__fp_pscA>
   148e6:	30 f0       	brcs	.+12     	; 0x148f4 <__addsf3+0x18>
   148e8:	6b d1       	rcall	.+726    	; 0x14bc0 <__fp_pscB>
   148ea:	20 f0       	brcs	.+8      	; 0x148f4 <__addsf3+0x18>
   148ec:	31 f4       	brne	.+12     	; 0x148fa <__addsf3+0x1e>
   148ee:	9f 3f       	cpi	r25, 0xFF	; 255
   148f0:	11 f4       	brne	.+4      	; 0x148f6 <__addsf3+0x1a>
   148f2:	1e f4       	brtc	.+6      	; 0x148fa <__addsf3+0x1e>
   148f4:	5b c1       	rjmp	.+694    	; 0x14bac <__fp_nan>
   148f6:	0e f4       	brtc	.+2      	; 0x148fa <__addsf3+0x1e>
   148f8:	e0 95       	com	r30
   148fa:	e7 fb       	bst	r30, 7
   148fc:	51 c1       	rjmp	.+674    	; 0x14ba0 <__fp_inf>

000148fe <__addsf3x>:
   148fe:	e9 2f       	mov	r30, r25
   14900:	77 d1       	rcall	.+750    	; 0x14bf0 <__fp_split3>
   14902:	80 f3       	brcs	.-32     	; 0x148e4 <__addsf3+0x8>
   14904:	ba 17       	cp	r27, r26
   14906:	62 07       	cpc	r22, r18
   14908:	73 07       	cpc	r23, r19
   1490a:	84 07       	cpc	r24, r20
   1490c:	95 07       	cpc	r25, r21
   1490e:	18 f0       	brcs	.+6      	; 0x14916 <__addsf3x+0x18>
   14910:	71 f4       	brne	.+28     	; 0x1492e <__addsf3x+0x30>
   14912:	9e f5       	brtc	.+102    	; 0x1497a <__addsf3x+0x7c>
   14914:	8f c1       	rjmp	.+798    	; 0x14c34 <__fp_zero>
   14916:	0e f4       	brtc	.+2      	; 0x1491a <__addsf3x+0x1c>
   14918:	e0 95       	com	r30
   1491a:	0b 2e       	mov	r0, r27
   1491c:	ba 2f       	mov	r27, r26
   1491e:	a0 2d       	mov	r26, r0
   14920:	0b 01       	movw	r0, r22
   14922:	b9 01       	movw	r22, r18
   14924:	90 01       	movw	r18, r0
   14926:	0c 01       	movw	r0, r24
   14928:	ca 01       	movw	r24, r20
   1492a:	a0 01       	movw	r20, r0
   1492c:	11 24       	eor	r1, r1
   1492e:	ff 27       	eor	r31, r31
   14930:	59 1b       	sub	r21, r25
   14932:	99 f0       	breq	.+38     	; 0x1495a <__addsf3x+0x5c>
   14934:	59 3f       	cpi	r21, 0xF9	; 249
   14936:	50 f4       	brcc	.+20     	; 0x1494c <__addsf3x+0x4e>
   14938:	50 3e       	cpi	r21, 0xE0	; 224
   1493a:	68 f1       	brcs	.+90     	; 0x14996 <__addsf3x+0x98>
   1493c:	1a 16       	cp	r1, r26
   1493e:	f0 40       	sbci	r31, 0x00	; 0
   14940:	a2 2f       	mov	r26, r18
   14942:	23 2f       	mov	r18, r19
   14944:	34 2f       	mov	r19, r20
   14946:	44 27       	eor	r20, r20
   14948:	58 5f       	subi	r21, 0xF8	; 248
   1494a:	f3 cf       	rjmp	.-26     	; 0x14932 <__addsf3x+0x34>
   1494c:	46 95       	lsr	r20
   1494e:	37 95       	ror	r19
   14950:	27 95       	ror	r18
   14952:	a7 95       	ror	r26
   14954:	f0 40       	sbci	r31, 0x00	; 0
   14956:	53 95       	inc	r21
   14958:	c9 f7       	brne	.-14     	; 0x1494c <__addsf3x+0x4e>
   1495a:	7e f4       	brtc	.+30     	; 0x1497a <__addsf3x+0x7c>
   1495c:	1f 16       	cp	r1, r31
   1495e:	ba 0b       	sbc	r27, r26
   14960:	62 0b       	sbc	r22, r18
   14962:	73 0b       	sbc	r23, r19
   14964:	84 0b       	sbc	r24, r20
   14966:	ba f0       	brmi	.+46     	; 0x14996 <__addsf3x+0x98>
   14968:	91 50       	subi	r25, 0x01	; 1
   1496a:	a1 f0       	breq	.+40     	; 0x14994 <__addsf3x+0x96>
   1496c:	ff 0f       	add	r31, r31
   1496e:	bb 1f       	adc	r27, r27
   14970:	66 1f       	adc	r22, r22
   14972:	77 1f       	adc	r23, r23
   14974:	88 1f       	adc	r24, r24
   14976:	c2 f7       	brpl	.-16     	; 0x14968 <__addsf3x+0x6a>
   14978:	0e c0       	rjmp	.+28     	; 0x14996 <__addsf3x+0x98>
   1497a:	ba 0f       	add	r27, r26
   1497c:	62 1f       	adc	r22, r18
   1497e:	73 1f       	adc	r23, r19
   14980:	84 1f       	adc	r24, r20
   14982:	48 f4       	brcc	.+18     	; 0x14996 <__addsf3x+0x98>
   14984:	87 95       	ror	r24
   14986:	77 95       	ror	r23
   14988:	67 95       	ror	r22
   1498a:	b7 95       	ror	r27
   1498c:	f7 95       	ror	r31
   1498e:	9e 3f       	cpi	r25, 0xFE	; 254
   14990:	08 f0       	brcs	.+2      	; 0x14994 <__addsf3x+0x96>
   14992:	b3 cf       	rjmp	.-154    	; 0x148fa <__addsf3+0x1e>
   14994:	93 95       	inc	r25
   14996:	88 0f       	add	r24, r24
   14998:	08 f0       	brcs	.+2      	; 0x1499c <__addsf3x+0x9e>
   1499a:	99 27       	eor	r25, r25
   1499c:	ee 0f       	add	r30, r30
   1499e:	97 95       	ror	r25
   149a0:	87 95       	ror	r24
   149a2:	08 95       	ret

000149a4 <__cmpsf2>:
   149a4:	d9 d0       	rcall	.+434    	; 0x14b58 <__fp_cmp>
   149a6:	08 f4       	brcc	.+2      	; 0x149aa <__cmpsf2+0x6>
   149a8:	81 e0       	ldi	r24, 0x01	; 1
   149aa:	08 95       	ret

000149ac <__divsf3>:
   149ac:	0c d0       	rcall	.+24     	; 0x149c6 <__divsf3x>
   149ae:	0f c1       	rjmp	.+542    	; 0x14bce <__fp_round>
   149b0:	07 d1       	rcall	.+526    	; 0x14bc0 <__fp_pscB>
   149b2:	40 f0       	brcs	.+16     	; 0x149c4 <__divsf3+0x18>
   149b4:	fe d0       	rcall	.+508    	; 0x14bb2 <__fp_pscA>
   149b6:	30 f0       	brcs	.+12     	; 0x149c4 <__divsf3+0x18>
   149b8:	21 f4       	brne	.+8      	; 0x149c2 <__divsf3+0x16>
   149ba:	5f 3f       	cpi	r21, 0xFF	; 255
   149bc:	19 f0       	breq	.+6      	; 0x149c4 <__divsf3+0x18>
   149be:	f0 c0       	rjmp	.+480    	; 0x14ba0 <__fp_inf>
   149c0:	51 11       	cpse	r21, r1
   149c2:	39 c1       	rjmp	.+626    	; 0x14c36 <__fp_szero>
   149c4:	f3 c0       	rjmp	.+486    	; 0x14bac <__fp_nan>

000149c6 <__divsf3x>:
   149c6:	14 d1       	rcall	.+552    	; 0x14bf0 <__fp_split3>
   149c8:	98 f3       	brcs	.-26     	; 0x149b0 <__divsf3+0x4>

000149ca <__divsf3_pse>:
   149ca:	99 23       	and	r25, r25
   149cc:	c9 f3       	breq	.-14     	; 0x149c0 <__divsf3+0x14>
   149ce:	55 23       	and	r21, r21
   149d0:	b1 f3       	breq	.-20     	; 0x149be <__divsf3+0x12>
   149d2:	95 1b       	sub	r25, r21
   149d4:	55 0b       	sbc	r21, r21
   149d6:	bb 27       	eor	r27, r27
   149d8:	aa 27       	eor	r26, r26
   149da:	62 17       	cp	r22, r18
   149dc:	73 07       	cpc	r23, r19
   149de:	84 07       	cpc	r24, r20
   149e0:	38 f0       	brcs	.+14     	; 0x149f0 <__divsf3_pse+0x26>
   149e2:	9f 5f       	subi	r25, 0xFF	; 255
   149e4:	5f 4f       	sbci	r21, 0xFF	; 255
   149e6:	22 0f       	add	r18, r18
   149e8:	33 1f       	adc	r19, r19
   149ea:	44 1f       	adc	r20, r20
   149ec:	aa 1f       	adc	r26, r26
   149ee:	a9 f3       	breq	.-22     	; 0x149da <__divsf3_pse+0x10>
   149f0:	33 d0       	rcall	.+102    	; 0x14a58 <__divsf3_pse+0x8e>
   149f2:	0e 2e       	mov	r0, r30
   149f4:	3a f0       	brmi	.+14     	; 0x14a04 <__divsf3_pse+0x3a>
   149f6:	e0 e8       	ldi	r30, 0x80	; 128
   149f8:	30 d0       	rcall	.+96     	; 0x14a5a <__divsf3_pse+0x90>
   149fa:	91 50       	subi	r25, 0x01	; 1
   149fc:	50 40       	sbci	r21, 0x00	; 0
   149fe:	e6 95       	lsr	r30
   14a00:	00 1c       	adc	r0, r0
   14a02:	ca f7       	brpl	.-14     	; 0x149f6 <__divsf3_pse+0x2c>
   14a04:	29 d0       	rcall	.+82     	; 0x14a58 <__divsf3_pse+0x8e>
   14a06:	fe 2f       	mov	r31, r30
   14a08:	27 d0       	rcall	.+78     	; 0x14a58 <__divsf3_pse+0x8e>
   14a0a:	66 0f       	add	r22, r22
   14a0c:	77 1f       	adc	r23, r23
   14a0e:	88 1f       	adc	r24, r24
   14a10:	bb 1f       	adc	r27, r27
   14a12:	26 17       	cp	r18, r22
   14a14:	37 07       	cpc	r19, r23
   14a16:	48 07       	cpc	r20, r24
   14a18:	ab 07       	cpc	r26, r27
   14a1a:	b0 e8       	ldi	r27, 0x80	; 128
   14a1c:	09 f0       	breq	.+2      	; 0x14a20 <__divsf3_pse+0x56>
   14a1e:	bb 0b       	sbc	r27, r27
   14a20:	80 2d       	mov	r24, r0
   14a22:	bf 01       	movw	r22, r30
   14a24:	ff 27       	eor	r31, r31
   14a26:	93 58       	subi	r25, 0x83	; 131
   14a28:	5f 4f       	sbci	r21, 0xFF	; 255
   14a2a:	2a f0       	brmi	.+10     	; 0x14a36 <__divsf3_pse+0x6c>
   14a2c:	9e 3f       	cpi	r25, 0xFE	; 254
   14a2e:	51 05       	cpc	r21, r1
   14a30:	68 f0       	brcs	.+26     	; 0x14a4c <__divsf3_pse+0x82>
   14a32:	b6 c0       	rjmp	.+364    	; 0x14ba0 <__fp_inf>
   14a34:	00 c1       	rjmp	.+512    	; 0x14c36 <__fp_szero>
   14a36:	5f 3f       	cpi	r21, 0xFF	; 255
   14a38:	ec f3       	brlt	.-6      	; 0x14a34 <__divsf3_pse+0x6a>
   14a3a:	98 3e       	cpi	r25, 0xE8	; 232
   14a3c:	dc f3       	brlt	.-10     	; 0x14a34 <__divsf3_pse+0x6a>
   14a3e:	86 95       	lsr	r24
   14a40:	77 95       	ror	r23
   14a42:	67 95       	ror	r22
   14a44:	b7 95       	ror	r27
   14a46:	f7 95       	ror	r31
   14a48:	9f 5f       	subi	r25, 0xFF	; 255
   14a4a:	c9 f7       	brne	.-14     	; 0x14a3e <__divsf3_pse+0x74>
   14a4c:	88 0f       	add	r24, r24
   14a4e:	91 1d       	adc	r25, r1
   14a50:	96 95       	lsr	r25
   14a52:	87 95       	ror	r24
   14a54:	97 f9       	bld	r25, 7
   14a56:	08 95       	ret
   14a58:	e1 e0       	ldi	r30, 0x01	; 1
   14a5a:	66 0f       	add	r22, r22
   14a5c:	77 1f       	adc	r23, r23
   14a5e:	88 1f       	adc	r24, r24
   14a60:	bb 1f       	adc	r27, r27
   14a62:	62 17       	cp	r22, r18
   14a64:	73 07       	cpc	r23, r19
   14a66:	84 07       	cpc	r24, r20
   14a68:	ba 07       	cpc	r27, r26
   14a6a:	20 f0       	brcs	.+8      	; 0x14a74 <__divsf3_pse+0xaa>
   14a6c:	62 1b       	sub	r22, r18
   14a6e:	73 0b       	sbc	r23, r19
   14a70:	84 0b       	sbc	r24, r20
   14a72:	ba 0b       	sbc	r27, r26
   14a74:	ee 1f       	adc	r30, r30
   14a76:	88 f7       	brcc	.-30     	; 0x14a5a <__divsf3_pse+0x90>
   14a78:	e0 95       	com	r30
   14a7a:	08 95       	ret

00014a7c <__fixsfsi>:
   14a7c:	04 d0       	rcall	.+8      	; 0x14a86 <__fixunssfsi>
   14a7e:	68 94       	set
   14a80:	b1 11       	cpse	r27, r1
   14a82:	d9 c0       	rjmp	.+434    	; 0x14c36 <__fp_szero>
   14a84:	08 95       	ret

00014a86 <__fixunssfsi>:
   14a86:	bc d0       	rcall	.+376    	; 0x14c00 <__fp_splitA>
   14a88:	88 f0       	brcs	.+34     	; 0x14aac <__fixunssfsi+0x26>
   14a8a:	9f 57       	subi	r25, 0x7F	; 127
   14a8c:	90 f0       	brcs	.+36     	; 0x14ab2 <__fixunssfsi+0x2c>
   14a8e:	b9 2f       	mov	r27, r25
   14a90:	99 27       	eor	r25, r25
   14a92:	b7 51       	subi	r27, 0x17	; 23
   14a94:	a0 f0       	brcs	.+40     	; 0x14abe <__fixunssfsi+0x38>
   14a96:	d1 f0       	breq	.+52     	; 0x14acc <__fixunssfsi+0x46>
   14a98:	66 0f       	add	r22, r22
   14a9a:	77 1f       	adc	r23, r23
   14a9c:	88 1f       	adc	r24, r24
   14a9e:	99 1f       	adc	r25, r25
   14aa0:	1a f0       	brmi	.+6      	; 0x14aa8 <__fixunssfsi+0x22>
   14aa2:	ba 95       	dec	r27
   14aa4:	c9 f7       	brne	.-14     	; 0x14a98 <__fixunssfsi+0x12>
   14aa6:	12 c0       	rjmp	.+36     	; 0x14acc <__fixunssfsi+0x46>
   14aa8:	b1 30       	cpi	r27, 0x01	; 1
   14aaa:	81 f0       	breq	.+32     	; 0x14acc <__fixunssfsi+0x46>
   14aac:	c3 d0       	rcall	.+390    	; 0x14c34 <__fp_zero>
   14aae:	b1 e0       	ldi	r27, 0x01	; 1
   14ab0:	08 95       	ret
   14ab2:	c0 c0       	rjmp	.+384    	; 0x14c34 <__fp_zero>
   14ab4:	67 2f       	mov	r22, r23
   14ab6:	78 2f       	mov	r23, r24
   14ab8:	88 27       	eor	r24, r24
   14aba:	b8 5f       	subi	r27, 0xF8	; 248
   14abc:	39 f0       	breq	.+14     	; 0x14acc <__fixunssfsi+0x46>
   14abe:	b9 3f       	cpi	r27, 0xF9	; 249
   14ac0:	cc f3       	brlt	.-14     	; 0x14ab4 <__fixunssfsi+0x2e>
   14ac2:	86 95       	lsr	r24
   14ac4:	77 95       	ror	r23
   14ac6:	67 95       	ror	r22
   14ac8:	b3 95       	inc	r27
   14aca:	d9 f7       	brne	.-10     	; 0x14ac2 <__fixunssfsi+0x3c>
   14acc:	3e f4       	brtc	.+14     	; 0x14adc <__fixunssfsi+0x56>
   14ace:	90 95       	com	r25
   14ad0:	80 95       	com	r24
   14ad2:	70 95       	com	r23
   14ad4:	61 95       	neg	r22
   14ad6:	7f 4f       	sbci	r23, 0xFF	; 255
   14ad8:	8f 4f       	sbci	r24, 0xFF	; 255
   14ada:	9f 4f       	sbci	r25, 0xFF	; 255
   14adc:	08 95       	ret

00014ade <__floatunsisf>:
   14ade:	e8 94       	clt
   14ae0:	09 c0       	rjmp	.+18     	; 0x14af4 <__floatsisf+0x12>

00014ae2 <__floatsisf>:
   14ae2:	97 fb       	bst	r25, 7
   14ae4:	3e f4       	brtc	.+14     	; 0x14af4 <__floatsisf+0x12>
   14ae6:	90 95       	com	r25
   14ae8:	80 95       	com	r24
   14aea:	70 95       	com	r23
   14aec:	61 95       	neg	r22
   14aee:	7f 4f       	sbci	r23, 0xFF	; 255
   14af0:	8f 4f       	sbci	r24, 0xFF	; 255
   14af2:	9f 4f       	sbci	r25, 0xFF	; 255
   14af4:	99 23       	and	r25, r25
   14af6:	a9 f0       	breq	.+42     	; 0x14b22 <__floatsisf+0x40>
   14af8:	f9 2f       	mov	r31, r25
   14afa:	96 e9       	ldi	r25, 0x96	; 150
   14afc:	bb 27       	eor	r27, r27
   14afe:	93 95       	inc	r25
   14b00:	f6 95       	lsr	r31
   14b02:	87 95       	ror	r24
   14b04:	77 95       	ror	r23
   14b06:	67 95       	ror	r22
   14b08:	b7 95       	ror	r27
   14b0a:	f1 11       	cpse	r31, r1
   14b0c:	f8 cf       	rjmp	.-16     	; 0x14afe <__floatsisf+0x1c>
   14b0e:	fa f4       	brpl	.+62     	; 0x14b4e <__floatsisf+0x6c>
   14b10:	bb 0f       	add	r27, r27
   14b12:	11 f4       	brne	.+4      	; 0x14b18 <__floatsisf+0x36>
   14b14:	60 ff       	sbrs	r22, 0
   14b16:	1b c0       	rjmp	.+54     	; 0x14b4e <__floatsisf+0x6c>
   14b18:	6f 5f       	subi	r22, 0xFF	; 255
   14b1a:	7f 4f       	sbci	r23, 0xFF	; 255
   14b1c:	8f 4f       	sbci	r24, 0xFF	; 255
   14b1e:	9f 4f       	sbci	r25, 0xFF	; 255
   14b20:	16 c0       	rjmp	.+44     	; 0x14b4e <__floatsisf+0x6c>
   14b22:	88 23       	and	r24, r24
   14b24:	11 f0       	breq	.+4      	; 0x14b2a <__floatsisf+0x48>
   14b26:	96 e9       	ldi	r25, 0x96	; 150
   14b28:	11 c0       	rjmp	.+34     	; 0x14b4c <__floatsisf+0x6a>
   14b2a:	77 23       	and	r23, r23
   14b2c:	21 f0       	breq	.+8      	; 0x14b36 <__floatsisf+0x54>
   14b2e:	9e e8       	ldi	r25, 0x8E	; 142
   14b30:	87 2f       	mov	r24, r23
   14b32:	76 2f       	mov	r23, r22
   14b34:	05 c0       	rjmp	.+10     	; 0x14b40 <__floatsisf+0x5e>
   14b36:	66 23       	and	r22, r22
   14b38:	71 f0       	breq	.+28     	; 0x14b56 <__floatsisf+0x74>
   14b3a:	96 e8       	ldi	r25, 0x86	; 134
   14b3c:	86 2f       	mov	r24, r22
   14b3e:	70 e0       	ldi	r23, 0x00	; 0
   14b40:	60 e0       	ldi	r22, 0x00	; 0
   14b42:	2a f0       	brmi	.+10     	; 0x14b4e <__floatsisf+0x6c>
   14b44:	9a 95       	dec	r25
   14b46:	66 0f       	add	r22, r22
   14b48:	77 1f       	adc	r23, r23
   14b4a:	88 1f       	adc	r24, r24
   14b4c:	da f7       	brpl	.-10     	; 0x14b44 <__floatsisf+0x62>
   14b4e:	88 0f       	add	r24, r24
   14b50:	96 95       	lsr	r25
   14b52:	87 95       	ror	r24
   14b54:	97 f9       	bld	r25, 7
   14b56:	08 95       	ret

00014b58 <__fp_cmp>:
   14b58:	99 0f       	add	r25, r25
   14b5a:	00 08       	sbc	r0, r0
   14b5c:	55 0f       	add	r21, r21
   14b5e:	aa 0b       	sbc	r26, r26
   14b60:	e0 e8       	ldi	r30, 0x80	; 128
   14b62:	fe ef       	ldi	r31, 0xFE	; 254
   14b64:	16 16       	cp	r1, r22
   14b66:	17 06       	cpc	r1, r23
   14b68:	e8 07       	cpc	r30, r24
   14b6a:	f9 07       	cpc	r31, r25
   14b6c:	c0 f0       	brcs	.+48     	; 0x14b9e <__fp_cmp+0x46>
   14b6e:	12 16       	cp	r1, r18
   14b70:	13 06       	cpc	r1, r19
   14b72:	e4 07       	cpc	r30, r20
   14b74:	f5 07       	cpc	r31, r21
   14b76:	98 f0       	brcs	.+38     	; 0x14b9e <__fp_cmp+0x46>
   14b78:	62 1b       	sub	r22, r18
   14b7a:	73 0b       	sbc	r23, r19
   14b7c:	84 0b       	sbc	r24, r20
   14b7e:	95 0b       	sbc	r25, r21
   14b80:	39 f4       	brne	.+14     	; 0x14b90 <__fp_cmp+0x38>
   14b82:	0a 26       	eor	r0, r26
   14b84:	61 f0       	breq	.+24     	; 0x14b9e <__fp_cmp+0x46>
   14b86:	23 2b       	or	r18, r19
   14b88:	24 2b       	or	r18, r20
   14b8a:	25 2b       	or	r18, r21
   14b8c:	21 f4       	brne	.+8      	; 0x14b96 <__fp_cmp+0x3e>
   14b8e:	08 95       	ret
   14b90:	0a 26       	eor	r0, r26
   14b92:	09 f4       	brne	.+2      	; 0x14b96 <__fp_cmp+0x3e>
   14b94:	a1 40       	sbci	r26, 0x01	; 1
   14b96:	a6 95       	lsr	r26
   14b98:	8f ef       	ldi	r24, 0xFF	; 255
   14b9a:	81 1d       	adc	r24, r1
   14b9c:	81 1d       	adc	r24, r1
   14b9e:	08 95       	ret

00014ba0 <__fp_inf>:
   14ba0:	97 f9       	bld	r25, 7
   14ba2:	9f 67       	ori	r25, 0x7F	; 127
   14ba4:	80 e8       	ldi	r24, 0x80	; 128
   14ba6:	70 e0       	ldi	r23, 0x00	; 0
   14ba8:	60 e0       	ldi	r22, 0x00	; 0
   14baa:	08 95       	ret

00014bac <__fp_nan>:
   14bac:	9f ef       	ldi	r25, 0xFF	; 255
   14bae:	80 ec       	ldi	r24, 0xC0	; 192
   14bb0:	08 95       	ret

00014bb2 <__fp_pscA>:
   14bb2:	00 24       	eor	r0, r0
   14bb4:	0a 94       	dec	r0
   14bb6:	16 16       	cp	r1, r22
   14bb8:	17 06       	cpc	r1, r23
   14bba:	18 06       	cpc	r1, r24
   14bbc:	09 06       	cpc	r0, r25
   14bbe:	08 95       	ret

00014bc0 <__fp_pscB>:
   14bc0:	00 24       	eor	r0, r0
   14bc2:	0a 94       	dec	r0
   14bc4:	12 16       	cp	r1, r18
   14bc6:	13 06       	cpc	r1, r19
   14bc8:	14 06       	cpc	r1, r20
   14bca:	05 06       	cpc	r0, r21
   14bcc:	08 95       	ret

00014bce <__fp_round>:
   14bce:	09 2e       	mov	r0, r25
   14bd0:	03 94       	inc	r0
   14bd2:	00 0c       	add	r0, r0
   14bd4:	11 f4       	brne	.+4      	; 0x14bda <__fp_round+0xc>
   14bd6:	88 23       	and	r24, r24
   14bd8:	52 f0       	brmi	.+20     	; 0x14bee <__fp_round+0x20>
   14bda:	bb 0f       	add	r27, r27
   14bdc:	40 f4       	brcc	.+16     	; 0x14bee <__fp_round+0x20>
   14bde:	bf 2b       	or	r27, r31
   14be0:	11 f4       	brne	.+4      	; 0x14be6 <__fp_round+0x18>
   14be2:	60 ff       	sbrs	r22, 0
   14be4:	04 c0       	rjmp	.+8      	; 0x14bee <__fp_round+0x20>
   14be6:	6f 5f       	subi	r22, 0xFF	; 255
   14be8:	7f 4f       	sbci	r23, 0xFF	; 255
   14bea:	8f 4f       	sbci	r24, 0xFF	; 255
   14bec:	9f 4f       	sbci	r25, 0xFF	; 255
   14bee:	08 95       	ret

00014bf0 <__fp_split3>:
   14bf0:	57 fd       	sbrc	r21, 7
   14bf2:	90 58       	subi	r25, 0x80	; 128
   14bf4:	44 0f       	add	r20, r20
   14bf6:	55 1f       	adc	r21, r21
   14bf8:	59 f0       	breq	.+22     	; 0x14c10 <__fp_splitA+0x10>
   14bfa:	5f 3f       	cpi	r21, 0xFF	; 255
   14bfc:	71 f0       	breq	.+28     	; 0x14c1a <__fp_splitA+0x1a>
   14bfe:	47 95       	ror	r20

00014c00 <__fp_splitA>:
   14c00:	88 0f       	add	r24, r24
   14c02:	97 fb       	bst	r25, 7
   14c04:	99 1f       	adc	r25, r25
   14c06:	61 f0       	breq	.+24     	; 0x14c20 <__fp_splitA+0x20>
   14c08:	9f 3f       	cpi	r25, 0xFF	; 255
   14c0a:	79 f0       	breq	.+30     	; 0x14c2a <__fp_splitA+0x2a>
   14c0c:	87 95       	ror	r24
   14c0e:	08 95       	ret
   14c10:	12 16       	cp	r1, r18
   14c12:	13 06       	cpc	r1, r19
   14c14:	14 06       	cpc	r1, r20
   14c16:	55 1f       	adc	r21, r21
   14c18:	f2 cf       	rjmp	.-28     	; 0x14bfe <__fp_split3+0xe>
   14c1a:	46 95       	lsr	r20
   14c1c:	f1 df       	rcall	.-30     	; 0x14c00 <__fp_splitA>
   14c1e:	08 c0       	rjmp	.+16     	; 0x14c30 <__fp_splitA+0x30>
   14c20:	16 16       	cp	r1, r22
   14c22:	17 06       	cpc	r1, r23
   14c24:	18 06       	cpc	r1, r24
   14c26:	99 1f       	adc	r25, r25
   14c28:	f1 cf       	rjmp	.-30     	; 0x14c0c <__fp_splitA+0xc>
   14c2a:	86 95       	lsr	r24
   14c2c:	71 05       	cpc	r23, r1
   14c2e:	61 05       	cpc	r22, r1
   14c30:	08 94       	sec
   14c32:	08 95       	ret

00014c34 <__fp_zero>:
   14c34:	e8 94       	clt

00014c36 <__fp_szero>:
   14c36:	bb 27       	eor	r27, r27
   14c38:	66 27       	eor	r22, r22
   14c3a:	77 27       	eor	r23, r23
   14c3c:	cb 01       	movw	r24, r22
   14c3e:	97 f9       	bld	r25, 7
   14c40:	08 95       	ret

00014c42 <__gesf2>:
   14c42:	8a df       	rcall	.-236    	; 0x14b58 <__fp_cmp>
   14c44:	08 f4       	brcc	.+2      	; 0x14c48 <__gesf2+0x6>
   14c46:	8f ef       	ldi	r24, 0xFF	; 255
   14c48:	08 95       	ret

00014c4a <__mulsf3>:
   14c4a:	0b d0       	rcall	.+22     	; 0x14c62 <__mulsf3x>
   14c4c:	c0 cf       	rjmp	.-128    	; 0x14bce <__fp_round>
   14c4e:	b1 df       	rcall	.-158    	; 0x14bb2 <__fp_pscA>
   14c50:	28 f0       	brcs	.+10     	; 0x14c5c <__mulsf3+0x12>
   14c52:	b6 df       	rcall	.-148    	; 0x14bc0 <__fp_pscB>
   14c54:	18 f0       	brcs	.+6      	; 0x14c5c <__mulsf3+0x12>
   14c56:	95 23       	and	r25, r21
   14c58:	09 f0       	breq	.+2      	; 0x14c5c <__mulsf3+0x12>
   14c5a:	a2 cf       	rjmp	.-188    	; 0x14ba0 <__fp_inf>
   14c5c:	a7 cf       	rjmp	.-178    	; 0x14bac <__fp_nan>
   14c5e:	11 24       	eor	r1, r1
   14c60:	ea cf       	rjmp	.-44     	; 0x14c36 <__fp_szero>

00014c62 <__mulsf3x>:
   14c62:	c6 df       	rcall	.-116    	; 0x14bf0 <__fp_split3>
   14c64:	a0 f3       	brcs	.-24     	; 0x14c4e <__mulsf3+0x4>

00014c66 <__mulsf3_pse>:
   14c66:	95 9f       	mul	r25, r21
   14c68:	d1 f3       	breq	.-12     	; 0x14c5e <__mulsf3+0x14>
   14c6a:	95 0f       	add	r25, r21
   14c6c:	50 e0       	ldi	r21, 0x00	; 0
   14c6e:	55 1f       	adc	r21, r21
   14c70:	62 9f       	mul	r22, r18
   14c72:	f0 01       	movw	r30, r0
   14c74:	72 9f       	mul	r23, r18
   14c76:	bb 27       	eor	r27, r27
   14c78:	f0 0d       	add	r31, r0
   14c7a:	b1 1d       	adc	r27, r1
   14c7c:	63 9f       	mul	r22, r19
   14c7e:	aa 27       	eor	r26, r26
   14c80:	f0 0d       	add	r31, r0
   14c82:	b1 1d       	adc	r27, r1
   14c84:	aa 1f       	adc	r26, r26
   14c86:	64 9f       	mul	r22, r20
   14c88:	66 27       	eor	r22, r22
   14c8a:	b0 0d       	add	r27, r0
   14c8c:	a1 1d       	adc	r26, r1
   14c8e:	66 1f       	adc	r22, r22
   14c90:	82 9f       	mul	r24, r18
   14c92:	22 27       	eor	r18, r18
   14c94:	b0 0d       	add	r27, r0
   14c96:	a1 1d       	adc	r26, r1
   14c98:	62 1f       	adc	r22, r18
   14c9a:	73 9f       	mul	r23, r19
   14c9c:	b0 0d       	add	r27, r0
   14c9e:	a1 1d       	adc	r26, r1
   14ca0:	62 1f       	adc	r22, r18
   14ca2:	83 9f       	mul	r24, r19
   14ca4:	a0 0d       	add	r26, r0
   14ca6:	61 1d       	adc	r22, r1
   14ca8:	22 1f       	adc	r18, r18
   14caa:	74 9f       	mul	r23, r20
   14cac:	33 27       	eor	r19, r19
   14cae:	a0 0d       	add	r26, r0
   14cb0:	61 1d       	adc	r22, r1
   14cb2:	23 1f       	adc	r18, r19
   14cb4:	84 9f       	mul	r24, r20
   14cb6:	60 0d       	add	r22, r0
   14cb8:	21 1d       	adc	r18, r1
   14cba:	82 2f       	mov	r24, r18
   14cbc:	76 2f       	mov	r23, r22
   14cbe:	6a 2f       	mov	r22, r26
   14cc0:	11 24       	eor	r1, r1
   14cc2:	9f 57       	subi	r25, 0x7F	; 127
   14cc4:	50 40       	sbci	r21, 0x00	; 0
   14cc6:	8a f0       	brmi	.+34     	; 0x14cea <__mulsf3_pse+0x84>
   14cc8:	e1 f0       	breq	.+56     	; 0x14d02 <__mulsf3_pse+0x9c>
   14cca:	88 23       	and	r24, r24
   14ccc:	4a f0       	brmi	.+18     	; 0x14ce0 <__mulsf3_pse+0x7a>
   14cce:	ee 0f       	add	r30, r30
   14cd0:	ff 1f       	adc	r31, r31
   14cd2:	bb 1f       	adc	r27, r27
   14cd4:	66 1f       	adc	r22, r22
   14cd6:	77 1f       	adc	r23, r23
   14cd8:	88 1f       	adc	r24, r24
   14cda:	91 50       	subi	r25, 0x01	; 1
   14cdc:	50 40       	sbci	r21, 0x00	; 0
   14cde:	a9 f7       	brne	.-22     	; 0x14cca <__mulsf3_pse+0x64>
   14ce0:	9e 3f       	cpi	r25, 0xFE	; 254
   14ce2:	51 05       	cpc	r21, r1
   14ce4:	70 f0       	brcs	.+28     	; 0x14d02 <__mulsf3_pse+0x9c>
   14ce6:	5c cf       	rjmp	.-328    	; 0x14ba0 <__fp_inf>
   14ce8:	a6 cf       	rjmp	.-180    	; 0x14c36 <__fp_szero>
   14cea:	5f 3f       	cpi	r21, 0xFF	; 255
   14cec:	ec f3       	brlt	.-6      	; 0x14ce8 <__mulsf3_pse+0x82>
   14cee:	98 3e       	cpi	r25, 0xE8	; 232
   14cf0:	dc f3       	brlt	.-10     	; 0x14ce8 <__mulsf3_pse+0x82>
   14cf2:	86 95       	lsr	r24
   14cf4:	77 95       	ror	r23
   14cf6:	67 95       	ror	r22
   14cf8:	b7 95       	ror	r27
   14cfa:	f7 95       	ror	r31
   14cfc:	e7 95       	ror	r30
   14cfe:	9f 5f       	subi	r25, 0xFF	; 255
   14d00:	c1 f7       	brne	.-16     	; 0x14cf2 <__mulsf3_pse+0x8c>
   14d02:	fe 2b       	or	r31, r30
   14d04:	88 0f       	add	r24, r24
   14d06:	91 1d       	adc	r25, r1
   14d08:	96 95       	lsr	r25
   14d0a:	87 95       	ror	r24
   14d0c:	97 f9       	bld	r25, 7
   14d0e:	08 95       	ret
   14d10:	11 f4       	brne	.+4      	; 0x14d16 <__mulsf3_pse+0xb0>
   14d12:	0e f4       	brtc	.+2      	; 0x14d16 <__mulsf3_pse+0xb0>
   14d14:	4b cf       	rjmp	.-362    	; 0x14bac <__fp_nan>
   14d16:	42 c0       	rjmp	.+132    	; 0x14d9c <__fp_mpack>

00014d18 <sqrt>:
   14d18:	73 df       	rcall	.-282    	; 0x14c00 <__fp_splitA>
   14d1a:	d0 f3       	brcs	.-12     	; 0x14d10 <__mulsf3_pse+0xaa>
   14d1c:	99 23       	and	r25, r25
   14d1e:	d9 f3       	breq	.-10     	; 0x14d16 <__mulsf3_pse+0xb0>
   14d20:	ce f3       	brts	.-14     	; 0x14d14 <__mulsf3_pse+0xae>
   14d22:	9f 57       	subi	r25, 0x7F	; 127
   14d24:	55 0b       	sbc	r21, r21
   14d26:	87 ff       	sbrs	r24, 7
   14d28:	47 d0       	rcall	.+142    	; 0x14db8 <__fp_norm2>
   14d2a:	00 24       	eor	r0, r0
   14d2c:	a0 e6       	ldi	r26, 0x60	; 96
   14d2e:	40 ea       	ldi	r20, 0xA0	; 160
   14d30:	90 01       	movw	r18, r0
   14d32:	80 58       	subi	r24, 0x80	; 128
   14d34:	56 95       	lsr	r21
   14d36:	97 95       	ror	r25
   14d38:	28 f4       	brcc	.+10     	; 0x14d44 <sqrt+0x2c>
   14d3a:	80 5c       	subi	r24, 0xC0	; 192
   14d3c:	66 0f       	add	r22, r22
   14d3e:	77 1f       	adc	r23, r23
   14d40:	88 1f       	adc	r24, r24
   14d42:	20 f0       	brcs	.+8      	; 0x14d4c <sqrt+0x34>
   14d44:	26 17       	cp	r18, r22
   14d46:	37 07       	cpc	r19, r23
   14d48:	48 07       	cpc	r20, r24
   14d4a:	30 f4       	brcc	.+12     	; 0x14d58 <sqrt+0x40>
   14d4c:	62 1b       	sub	r22, r18
   14d4e:	73 0b       	sbc	r23, r19
   14d50:	84 0b       	sbc	r24, r20
   14d52:	20 29       	or	r18, r0
   14d54:	31 29       	or	r19, r1
   14d56:	4a 2b       	or	r20, r26
   14d58:	a6 95       	lsr	r26
   14d5a:	17 94       	ror	r1
   14d5c:	07 94       	ror	r0
   14d5e:	20 25       	eor	r18, r0
   14d60:	31 25       	eor	r19, r1
   14d62:	4a 27       	eor	r20, r26
   14d64:	58 f7       	brcc	.-42     	; 0x14d3c <sqrt+0x24>
   14d66:	66 0f       	add	r22, r22
   14d68:	77 1f       	adc	r23, r23
   14d6a:	88 1f       	adc	r24, r24
   14d6c:	20 f0       	brcs	.+8      	; 0x14d76 <sqrt+0x5e>
   14d6e:	26 17       	cp	r18, r22
   14d70:	37 07       	cpc	r19, r23
   14d72:	48 07       	cpc	r20, r24
   14d74:	30 f4       	brcc	.+12     	; 0x14d82 <sqrt+0x6a>
   14d76:	62 0b       	sbc	r22, r18
   14d78:	73 0b       	sbc	r23, r19
   14d7a:	84 0b       	sbc	r24, r20
   14d7c:	20 0d       	add	r18, r0
   14d7e:	31 1d       	adc	r19, r1
   14d80:	41 1d       	adc	r20, r1
   14d82:	a0 95       	com	r26
   14d84:	81 f7       	brne	.-32     	; 0x14d66 <sqrt+0x4e>
   14d86:	b9 01       	movw	r22, r18
   14d88:	84 2f       	mov	r24, r20
   14d8a:	91 58       	subi	r25, 0x81	; 129
   14d8c:	88 0f       	add	r24, r24
   14d8e:	96 95       	lsr	r25
   14d90:	87 95       	ror	r24
   14d92:	08 95       	ret

00014d94 <__unordsf2>:
   14d94:	e1 de       	rcall	.-574    	; 0x14b58 <__fp_cmp>
   14d96:	88 0b       	sbc	r24, r24
   14d98:	99 0b       	sbc	r25, r25
   14d9a:	08 95       	ret

00014d9c <__fp_mpack>:
   14d9c:	9f 3f       	cpi	r25, 0xFF	; 255
   14d9e:	31 f0       	breq	.+12     	; 0x14dac <__fp_mpack_finite+0xc>

00014da0 <__fp_mpack_finite>:
   14da0:	91 50       	subi	r25, 0x01	; 1
   14da2:	20 f4       	brcc	.+8      	; 0x14dac <__fp_mpack_finite+0xc>
   14da4:	87 95       	ror	r24
   14da6:	77 95       	ror	r23
   14da8:	67 95       	ror	r22
   14daa:	b7 95       	ror	r27
   14dac:	88 0f       	add	r24, r24
   14dae:	91 1d       	adc	r25, r1
   14db0:	96 95       	lsr	r25
   14db2:	87 95       	ror	r24
   14db4:	97 f9       	bld	r25, 7
   14db6:	08 95       	ret

00014db8 <__fp_norm2>:
   14db8:	91 50       	subi	r25, 0x01	; 1
   14dba:	50 40       	sbci	r21, 0x00	; 0
   14dbc:	66 0f       	add	r22, r22
   14dbe:	77 1f       	adc	r23, r23
   14dc0:	88 1f       	adc	r24, r24
   14dc2:	d2 f7       	brpl	.-12     	; 0x14db8 <__fp_norm2>
   14dc4:	08 95       	ret

00014dc6 <__mulsi3>:
   14dc6:	db 01       	movw	r26, r22
   14dc8:	8f 93       	push	r24
   14dca:	9f 93       	push	r25
   14dcc:	64 d0       	rcall	.+200    	; 0x14e96 <__muluhisi3>
   14dce:	bf 91       	pop	r27
   14dd0:	af 91       	pop	r26
   14dd2:	a2 9f       	mul	r26, r18
   14dd4:	80 0d       	add	r24, r0
   14dd6:	91 1d       	adc	r25, r1
   14dd8:	a3 9f       	mul	r26, r19
   14dda:	90 0d       	add	r25, r0
   14ddc:	b2 9f       	mul	r27, r18
   14dde:	90 0d       	add	r25, r0
   14de0:	11 24       	eor	r1, r1
   14de2:	08 95       	ret

00014de4 <__divmodhi4>:
   14de4:	97 fb       	bst	r25, 7
   14de6:	07 2e       	mov	r0, r23
   14de8:	16 f4       	brtc	.+4      	; 0x14dee <__divmodhi4+0xa>
   14dea:	00 94       	com	r0
   14dec:	06 d0       	rcall	.+12     	; 0x14dfa <__divmodhi4_neg1>
   14dee:	77 fd       	sbrc	r23, 7
   14df0:	08 d0       	rcall	.+16     	; 0x14e02 <__divmodhi4_neg2>
   14df2:	5b d0       	rcall	.+182    	; 0x14eaa <__udivmodhi4>
   14df4:	07 fc       	sbrc	r0, 7
   14df6:	05 d0       	rcall	.+10     	; 0x14e02 <__divmodhi4_neg2>
   14df8:	3e f4       	brtc	.+14     	; 0x14e08 <__divmodhi4_exit>

00014dfa <__divmodhi4_neg1>:
   14dfa:	90 95       	com	r25
   14dfc:	81 95       	neg	r24
   14dfe:	9f 4f       	sbci	r25, 0xFF	; 255
   14e00:	08 95       	ret

00014e02 <__divmodhi4_neg2>:
   14e02:	70 95       	com	r23
   14e04:	61 95       	neg	r22
   14e06:	7f 4f       	sbci	r23, 0xFF	; 255

00014e08 <__divmodhi4_exit>:
   14e08:	08 95       	ret

00014e0a <__udivmodsi4>:
   14e0a:	a1 e2       	ldi	r26, 0x21	; 33
   14e0c:	1a 2e       	mov	r1, r26
   14e0e:	aa 1b       	sub	r26, r26
   14e10:	bb 1b       	sub	r27, r27
   14e12:	fd 01       	movw	r30, r26
   14e14:	0d c0       	rjmp	.+26     	; 0x14e30 <__udivmodsi4_ep>

00014e16 <__udivmodsi4_loop>:
   14e16:	aa 1f       	adc	r26, r26
   14e18:	bb 1f       	adc	r27, r27
   14e1a:	ee 1f       	adc	r30, r30
   14e1c:	ff 1f       	adc	r31, r31
   14e1e:	a2 17       	cp	r26, r18
   14e20:	b3 07       	cpc	r27, r19
   14e22:	e4 07       	cpc	r30, r20
   14e24:	f5 07       	cpc	r31, r21
   14e26:	20 f0       	brcs	.+8      	; 0x14e30 <__udivmodsi4_ep>
   14e28:	a2 1b       	sub	r26, r18
   14e2a:	b3 0b       	sbc	r27, r19
   14e2c:	e4 0b       	sbc	r30, r20
   14e2e:	f5 0b       	sbc	r31, r21

00014e30 <__udivmodsi4_ep>:
   14e30:	66 1f       	adc	r22, r22
   14e32:	77 1f       	adc	r23, r23
   14e34:	88 1f       	adc	r24, r24
   14e36:	99 1f       	adc	r25, r25
   14e38:	1a 94       	dec	r1
   14e3a:	69 f7       	brne	.-38     	; 0x14e16 <__udivmodsi4_loop>
   14e3c:	60 95       	com	r22
   14e3e:	70 95       	com	r23
   14e40:	80 95       	com	r24
   14e42:	90 95       	com	r25
   14e44:	9b 01       	movw	r18, r22
   14e46:	ac 01       	movw	r20, r24
   14e48:	bd 01       	movw	r22, r26
   14e4a:	cf 01       	movw	r24, r30
   14e4c:	08 95       	ret

00014e4e <__divmodsi4>:
   14e4e:	05 2e       	mov	r0, r21
   14e50:	97 fb       	bst	r25, 7
   14e52:	16 f4       	brtc	.+4      	; 0x14e58 <__divmodsi4+0xa>
   14e54:	00 94       	com	r0
   14e56:	0f d0       	rcall	.+30     	; 0x14e76 <__negsi2>
   14e58:	57 fd       	sbrc	r21, 7
   14e5a:	05 d0       	rcall	.+10     	; 0x14e66 <__divmodsi4_neg2>
   14e5c:	d6 df       	rcall	.-84     	; 0x14e0a <__udivmodsi4>
   14e5e:	07 fc       	sbrc	r0, 7
   14e60:	02 d0       	rcall	.+4      	; 0x14e66 <__divmodsi4_neg2>
   14e62:	46 f4       	brtc	.+16     	; 0x14e74 <__divmodsi4_exit>
   14e64:	08 c0       	rjmp	.+16     	; 0x14e76 <__negsi2>

00014e66 <__divmodsi4_neg2>:
   14e66:	50 95       	com	r21
   14e68:	40 95       	com	r20
   14e6a:	30 95       	com	r19
   14e6c:	21 95       	neg	r18
   14e6e:	3f 4f       	sbci	r19, 0xFF	; 255
   14e70:	4f 4f       	sbci	r20, 0xFF	; 255
   14e72:	5f 4f       	sbci	r21, 0xFF	; 255

00014e74 <__divmodsi4_exit>:
   14e74:	08 95       	ret

00014e76 <__negsi2>:
   14e76:	90 95       	com	r25
   14e78:	80 95       	com	r24
   14e7a:	70 95       	com	r23
   14e7c:	61 95       	neg	r22
   14e7e:	7f 4f       	sbci	r23, 0xFF	; 255
   14e80:	8f 4f       	sbci	r24, 0xFF	; 255
   14e82:	9f 4f       	sbci	r25, 0xFF	; 255
   14e84:	08 95       	ret

00014e86 <__tablejump2__>:
   14e86:	ee 0f       	add	r30, r30
   14e88:	ff 1f       	adc	r31, r31
   14e8a:	88 1f       	adc	r24, r24
   14e8c:	8b bf       	out	0x3b, r24	; 59
   14e8e:	07 90       	elpm	r0, Z+
   14e90:	f6 91       	elpm	r31, Z
   14e92:	e0 2d       	mov	r30, r0
   14e94:	19 94       	eijmp

00014e96 <__muluhisi3>:
   14e96:	1d d0       	rcall	.+58     	; 0x14ed2 <__umulhisi3>
   14e98:	a5 9f       	mul	r26, r21
   14e9a:	90 0d       	add	r25, r0
   14e9c:	b4 9f       	mul	r27, r20
   14e9e:	90 0d       	add	r25, r0
   14ea0:	a4 9f       	mul	r26, r20
   14ea2:	80 0d       	add	r24, r0
   14ea4:	91 1d       	adc	r25, r1
   14ea6:	11 24       	eor	r1, r1
   14ea8:	08 95       	ret

00014eaa <__udivmodhi4>:
   14eaa:	aa 1b       	sub	r26, r26
   14eac:	bb 1b       	sub	r27, r27
   14eae:	51 e1       	ldi	r21, 0x11	; 17
   14eb0:	07 c0       	rjmp	.+14     	; 0x14ec0 <__udivmodhi4_ep>

00014eb2 <__udivmodhi4_loop>:
   14eb2:	aa 1f       	adc	r26, r26
   14eb4:	bb 1f       	adc	r27, r27
   14eb6:	a6 17       	cp	r26, r22
   14eb8:	b7 07       	cpc	r27, r23
   14eba:	10 f0       	brcs	.+4      	; 0x14ec0 <__udivmodhi4_ep>
   14ebc:	a6 1b       	sub	r26, r22
   14ebe:	b7 0b       	sbc	r27, r23

00014ec0 <__udivmodhi4_ep>:
   14ec0:	88 1f       	adc	r24, r24
   14ec2:	99 1f       	adc	r25, r25
   14ec4:	5a 95       	dec	r21
   14ec6:	a9 f7       	brne	.-22     	; 0x14eb2 <__udivmodhi4_loop>
   14ec8:	80 95       	com	r24
   14eca:	90 95       	com	r25
   14ecc:	bc 01       	movw	r22, r24
   14ece:	cd 01       	movw	r24, r26
   14ed0:	08 95       	ret

00014ed2 <__umulhisi3>:
   14ed2:	a2 9f       	mul	r26, r18
   14ed4:	b0 01       	movw	r22, r0
   14ed6:	b3 9f       	mul	r27, r19
   14ed8:	c0 01       	movw	r24, r0
   14eda:	a3 9f       	mul	r26, r19
   14edc:	70 0d       	add	r23, r0
   14ede:	81 1d       	adc	r24, r1
   14ee0:	11 24       	eor	r1, r1
   14ee2:	91 1d       	adc	r25, r1
   14ee4:	b2 9f       	mul	r27, r18
   14ee6:	70 0d       	add	r23, r0
   14ee8:	81 1d       	adc	r24, r1
   14eea:	11 24       	eor	r1, r1
   14eec:	91 1d       	adc	r25, r1
   14eee:	08 95       	ret

00014ef0 <malloc>:
   14ef0:	0f 93       	push	r16
   14ef2:	1f 93       	push	r17
   14ef4:	cf 93       	push	r28
   14ef6:	df 93       	push	r29
   14ef8:	82 30       	cpi	r24, 0x02	; 2
   14efa:	91 05       	cpc	r25, r1
   14efc:	10 f4       	brcc	.+4      	; 0x14f02 <malloc+0x12>
   14efe:	82 e0       	ldi	r24, 0x02	; 2
   14f00:	90 e0       	ldi	r25, 0x00	; 0
   14f02:	e0 91 18 18 	lds	r30, 0x1818	; 0x801818 <__flp>
   14f06:	f0 91 19 18 	lds	r31, 0x1819	; 0x801819 <__flp+0x1>
   14f0a:	20 e0       	ldi	r18, 0x00	; 0
   14f0c:	30 e0       	ldi	r19, 0x00	; 0
   14f0e:	a0 e0       	ldi	r26, 0x00	; 0
   14f10:	b0 e0       	ldi	r27, 0x00	; 0
   14f12:	30 97       	sbiw	r30, 0x00	; 0
   14f14:	19 f1       	breq	.+70     	; 0x14f5c <malloc+0x6c>
   14f16:	40 81       	ld	r20, Z
   14f18:	51 81       	ldd	r21, Z+1	; 0x01
   14f1a:	02 81       	ldd	r16, Z+2	; 0x02
   14f1c:	13 81       	ldd	r17, Z+3	; 0x03
   14f1e:	48 17       	cp	r20, r24
   14f20:	59 07       	cpc	r21, r25
   14f22:	c8 f0       	brcs	.+50     	; 0x14f56 <malloc+0x66>
   14f24:	84 17       	cp	r24, r20
   14f26:	95 07       	cpc	r25, r21
   14f28:	69 f4       	brne	.+26     	; 0x14f44 <malloc+0x54>
   14f2a:	10 97       	sbiw	r26, 0x00	; 0
   14f2c:	31 f0       	breq	.+12     	; 0x14f3a <malloc+0x4a>
   14f2e:	12 96       	adiw	r26, 0x02	; 2
   14f30:	0c 93       	st	X, r16
   14f32:	12 97       	sbiw	r26, 0x02	; 2
   14f34:	13 96       	adiw	r26, 0x03	; 3
   14f36:	1c 93       	st	X, r17
   14f38:	27 c0       	rjmp	.+78     	; 0x14f88 <malloc+0x98>
   14f3a:	00 93 18 18 	sts	0x1818, r16	; 0x801818 <__flp>
   14f3e:	10 93 19 18 	sts	0x1819, r17	; 0x801819 <__flp+0x1>
   14f42:	22 c0       	rjmp	.+68     	; 0x14f88 <malloc+0x98>
   14f44:	21 15       	cp	r18, r1
   14f46:	31 05       	cpc	r19, r1
   14f48:	19 f0       	breq	.+6      	; 0x14f50 <malloc+0x60>
   14f4a:	42 17       	cp	r20, r18
   14f4c:	53 07       	cpc	r21, r19
   14f4e:	18 f4       	brcc	.+6      	; 0x14f56 <malloc+0x66>
   14f50:	9a 01       	movw	r18, r20
   14f52:	bd 01       	movw	r22, r26
   14f54:	ef 01       	movw	r28, r30
   14f56:	df 01       	movw	r26, r30
   14f58:	f8 01       	movw	r30, r16
   14f5a:	db cf       	rjmp	.-74     	; 0x14f12 <malloc+0x22>
   14f5c:	21 15       	cp	r18, r1
   14f5e:	31 05       	cpc	r19, r1
   14f60:	f9 f0       	breq	.+62     	; 0x14fa0 <malloc+0xb0>
   14f62:	28 1b       	sub	r18, r24
   14f64:	39 0b       	sbc	r19, r25
   14f66:	24 30       	cpi	r18, 0x04	; 4
   14f68:	31 05       	cpc	r19, r1
   14f6a:	80 f4       	brcc	.+32     	; 0x14f8c <malloc+0x9c>
   14f6c:	8a 81       	ldd	r24, Y+2	; 0x02
   14f6e:	9b 81       	ldd	r25, Y+3	; 0x03
   14f70:	61 15       	cp	r22, r1
   14f72:	71 05       	cpc	r23, r1
   14f74:	21 f0       	breq	.+8      	; 0x14f7e <malloc+0x8e>
   14f76:	fb 01       	movw	r30, r22
   14f78:	93 83       	std	Z+3, r25	; 0x03
   14f7a:	82 83       	std	Z+2, r24	; 0x02
   14f7c:	04 c0       	rjmp	.+8      	; 0x14f86 <malloc+0x96>
   14f7e:	90 93 19 18 	sts	0x1819, r25	; 0x801819 <__flp+0x1>
   14f82:	80 93 18 18 	sts	0x1818, r24	; 0x801818 <__flp>
   14f86:	fe 01       	movw	r30, r28
   14f88:	32 96       	adiw	r30, 0x02	; 2
   14f8a:	44 c0       	rjmp	.+136    	; 0x15014 <malloc+0x124>
   14f8c:	fe 01       	movw	r30, r28
   14f8e:	e2 0f       	add	r30, r18
   14f90:	f3 1f       	adc	r31, r19
   14f92:	81 93       	st	Z+, r24
   14f94:	91 93       	st	Z+, r25
   14f96:	22 50       	subi	r18, 0x02	; 2
   14f98:	31 09       	sbc	r19, r1
   14f9a:	39 83       	std	Y+1, r19	; 0x01
   14f9c:	28 83       	st	Y, r18
   14f9e:	3a c0       	rjmp	.+116    	; 0x15014 <malloc+0x124>
   14fa0:	20 91 16 18 	lds	r18, 0x1816	; 0x801816 <__brkval>
   14fa4:	30 91 17 18 	lds	r19, 0x1817	; 0x801817 <__brkval+0x1>
   14fa8:	23 2b       	or	r18, r19
   14faa:	41 f4       	brne	.+16     	; 0x14fbc <malloc+0xcc>
   14fac:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
   14fb0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
   14fb4:	30 93 17 18 	sts	0x1817, r19	; 0x801817 <__brkval+0x1>
   14fb8:	20 93 16 18 	sts	0x1816, r18	; 0x801816 <__brkval>
   14fbc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
   14fc0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
   14fc4:	21 15       	cp	r18, r1
   14fc6:	31 05       	cpc	r19, r1
   14fc8:	41 f4       	brne	.+16     	; 0x14fda <malloc+0xea>
   14fca:	2d b7       	in	r18, 0x3d	; 61
   14fcc:	3e b7       	in	r19, 0x3e	; 62
   14fce:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
   14fd2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
   14fd6:	24 1b       	sub	r18, r20
   14fd8:	35 0b       	sbc	r19, r21
   14fda:	e0 91 16 18 	lds	r30, 0x1816	; 0x801816 <__brkval>
   14fde:	f0 91 17 18 	lds	r31, 0x1817	; 0x801817 <__brkval+0x1>
   14fe2:	e2 17       	cp	r30, r18
   14fe4:	f3 07       	cpc	r31, r19
   14fe6:	a0 f4       	brcc	.+40     	; 0x15010 <malloc+0x120>
   14fe8:	2e 1b       	sub	r18, r30
   14fea:	3f 0b       	sbc	r19, r31
   14fec:	28 17       	cp	r18, r24
   14fee:	39 07       	cpc	r19, r25
   14ff0:	78 f0       	brcs	.+30     	; 0x15010 <malloc+0x120>
   14ff2:	ac 01       	movw	r20, r24
   14ff4:	4e 5f       	subi	r20, 0xFE	; 254
   14ff6:	5f 4f       	sbci	r21, 0xFF	; 255
   14ff8:	24 17       	cp	r18, r20
   14ffa:	35 07       	cpc	r19, r21
   14ffc:	48 f0       	brcs	.+18     	; 0x15010 <malloc+0x120>
   14ffe:	4e 0f       	add	r20, r30
   15000:	5f 1f       	adc	r21, r31
   15002:	50 93 17 18 	sts	0x1817, r21	; 0x801817 <__brkval+0x1>
   15006:	40 93 16 18 	sts	0x1816, r20	; 0x801816 <__brkval>
   1500a:	81 93       	st	Z+, r24
   1500c:	91 93       	st	Z+, r25
   1500e:	02 c0       	rjmp	.+4      	; 0x15014 <malloc+0x124>
   15010:	e0 e0       	ldi	r30, 0x00	; 0
   15012:	f0 e0       	ldi	r31, 0x00	; 0
   15014:	cf 01       	movw	r24, r30
   15016:	df 91       	pop	r29
   15018:	cf 91       	pop	r28
   1501a:	1f 91       	pop	r17
   1501c:	0f 91       	pop	r16
   1501e:	08 95       	ret

00015020 <free>:
   15020:	cf 93       	push	r28
   15022:	df 93       	push	r29
   15024:	00 97       	sbiw	r24, 0x00	; 0
   15026:	09 f4       	brne	.+2      	; 0x1502a <free+0xa>
   15028:	81 c0       	rjmp	.+258    	; 0x1512c <free+0x10c>
   1502a:	fc 01       	movw	r30, r24
   1502c:	32 97       	sbiw	r30, 0x02	; 2
   1502e:	13 82       	std	Z+3, r1	; 0x03
   15030:	12 82       	std	Z+2, r1	; 0x02
   15032:	a0 91 18 18 	lds	r26, 0x1818	; 0x801818 <__flp>
   15036:	b0 91 19 18 	lds	r27, 0x1819	; 0x801819 <__flp+0x1>
   1503a:	10 97       	sbiw	r26, 0x00	; 0
   1503c:	81 f4       	brne	.+32     	; 0x1505e <free+0x3e>
   1503e:	20 81       	ld	r18, Z
   15040:	31 81       	ldd	r19, Z+1	; 0x01
   15042:	82 0f       	add	r24, r18
   15044:	93 1f       	adc	r25, r19
   15046:	20 91 16 18 	lds	r18, 0x1816	; 0x801816 <__brkval>
   1504a:	30 91 17 18 	lds	r19, 0x1817	; 0x801817 <__brkval+0x1>
   1504e:	28 17       	cp	r18, r24
   15050:	39 07       	cpc	r19, r25
   15052:	51 f5       	brne	.+84     	; 0x150a8 <free+0x88>
   15054:	f0 93 17 18 	sts	0x1817, r31	; 0x801817 <__brkval+0x1>
   15058:	e0 93 16 18 	sts	0x1816, r30	; 0x801816 <__brkval>
   1505c:	67 c0       	rjmp	.+206    	; 0x1512c <free+0x10c>
   1505e:	ed 01       	movw	r28, r26
   15060:	20 e0       	ldi	r18, 0x00	; 0
   15062:	30 e0       	ldi	r19, 0x00	; 0
   15064:	ce 17       	cp	r28, r30
   15066:	df 07       	cpc	r29, r31
   15068:	40 f4       	brcc	.+16     	; 0x1507a <free+0x5a>
   1506a:	4a 81       	ldd	r20, Y+2	; 0x02
   1506c:	5b 81       	ldd	r21, Y+3	; 0x03
   1506e:	9e 01       	movw	r18, r28
   15070:	41 15       	cp	r20, r1
   15072:	51 05       	cpc	r21, r1
   15074:	f1 f0       	breq	.+60     	; 0x150b2 <free+0x92>
   15076:	ea 01       	movw	r28, r20
   15078:	f5 cf       	rjmp	.-22     	; 0x15064 <free+0x44>
   1507a:	d3 83       	std	Z+3, r29	; 0x03
   1507c:	c2 83       	std	Z+2, r28	; 0x02
   1507e:	40 81       	ld	r20, Z
   15080:	51 81       	ldd	r21, Z+1	; 0x01
   15082:	84 0f       	add	r24, r20
   15084:	95 1f       	adc	r25, r21
   15086:	c8 17       	cp	r28, r24
   15088:	d9 07       	cpc	r29, r25
   1508a:	59 f4       	brne	.+22     	; 0x150a2 <free+0x82>
   1508c:	88 81       	ld	r24, Y
   1508e:	99 81       	ldd	r25, Y+1	; 0x01
   15090:	84 0f       	add	r24, r20
   15092:	95 1f       	adc	r25, r21
   15094:	02 96       	adiw	r24, 0x02	; 2
   15096:	91 83       	std	Z+1, r25	; 0x01
   15098:	80 83       	st	Z, r24
   1509a:	8a 81       	ldd	r24, Y+2	; 0x02
   1509c:	9b 81       	ldd	r25, Y+3	; 0x03
   1509e:	93 83       	std	Z+3, r25	; 0x03
   150a0:	82 83       	std	Z+2, r24	; 0x02
   150a2:	21 15       	cp	r18, r1
   150a4:	31 05       	cpc	r19, r1
   150a6:	29 f4       	brne	.+10     	; 0x150b2 <free+0x92>
   150a8:	f0 93 19 18 	sts	0x1819, r31	; 0x801819 <__flp+0x1>
   150ac:	e0 93 18 18 	sts	0x1818, r30	; 0x801818 <__flp>
   150b0:	3d c0       	rjmp	.+122    	; 0x1512c <free+0x10c>
   150b2:	e9 01       	movw	r28, r18
   150b4:	fb 83       	std	Y+3, r31	; 0x03
   150b6:	ea 83       	std	Y+2, r30	; 0x02
   150b8:	49 91       	ld	r20, Y+
   150ba:	59 91       	ld	r21, Y+
   150bc:	c4 0f       	add	r28, r20
   150be:	d5 1f       	adc	r29, r21
   150c0:	ec 17       	cp	r30, r28
   150c2:	fd 07       	cpc	r31, r29
   150c4:	61 f4       	brne	.+24     	; 0x150de <free+0xbe>
   150c6:	80 81       	ld	r24, Z
   150c8:	91 81       	ldd	r25, Z+1	; 0x01
   150ca:	84 0f       	add	r24, r20
   150cc:	95 1f       	adc	r25, r21
   150ce:	02 96       	adiw	r24, 0x02	; 2
   150d0:	e9 01       	movw	r28, r18
   150d2:	99 83       	std	Y+1, r25	; 0x01
   150d4:	88 83       	st	Y, r24
   150d6:	82 81       	ldd	r24, Z+2	; 0x02
   150d8:	93 81       	ldd	r25, Z+3	; 0x03
   150da:	9b 83       	std	Y+3, r25	; 0x03
   150dc:	8a 83       	std	Y+2, r24	; 0x02
   150de:	e0 e0       	ldi	r30, 0x00	; 0
   150e0:	f0 e0       	ldi	r31, 0x00	; 0
   150e2:	12 96       	adiw	r26, 0x02	; 2
   150e4:	8d 91       	ld	r24, X+
   150e6:	9c 91       	ld	r25, X
   150e8:	13 97       	sbiw	r26, 0x03	; 3
   150ea:	00 97       	sbiw	r24, 0x00	; 0
   150ec:	19 f0       	breq	.+6      	; 0x150f4 <free+0xd4>
   150ee:	fd 01       	movw	r30, r26
   150f0:	dc 01       	movw	r26, r24
   150f2:	f7 cf       	rjmp	.-18     	; 0x150e2 <free+0xc2>
   150f4:	8d 91       	ld	r24, X+
   150f6:	9c 91       	ld	r25, X
   150f8:	11 97       	sbiw	r26, 0x01	; 1
   150fa:	9d 01       	movw	r18, r26
   150fc:	2e 5f       	subi	r18, 0xFE	; 254
   150fe:	3f 4f       	sbci	r19, 0xFF	; 255
   15100:	82 0f       	add	r24, r18
   15102:	93 1f       	adc	r25, r19
   15104:	20 91 16 18 	lds	r18, 0x1816	; 0x801816 <__brkval>
   15108:	30 91 17 18 	lds	r19, 0x1817	; 0x801817 <__brkval+0x1>
   1510c:	28 17       	cp	r18, r24
   1510e:	39 07       	cpc	r19, r25
   15110:	69 f4       	brne	.+26     	; 0x1512c <free+0x10c>
   15112:	30 97       	sbiw	r30, 0x00	; 0
   15114:	29 f4       	brne	.+10     	; 0x15120 <free+0x100>
   15116:	10 92 19 18 	sts	0x1819, r1	; 0x801819 <__flp+0x1>
   1511a:	10 92 18 18 	sts	0x1818, r1	; 0x801818 <__flp>
   1511e:	02 c0       	rjmp	.+4      	; 0x15124 <free+0x104>
   15120:	13 82       	std	Z+3, r1	; 0x03
   15122:	12 82       	std	Z+2, r1	; 0x02
   15124:	b0 93 17 18 	sts	0x1817, r27	; 0x801817 <__brkval+0x1>
   15128:	a0 93 16 18 	sts	0x1816, r26	; 0x801816 <__brkval>
   1512c:	df 91       	pop	r29
   1512e:	cf 91       	pop	r28
   15130:	08 95       	ret

00015132 <realloc>:
   15132:	6f 92       	push	r6
   15134:	7f 92       	push	r7
   15136:	8f 92       	push	r8
   15138:	9f 92       	push	r9
   1513a:	af 92       	push	r10
   1513c:	bf 92       	push	r11
   1513e:	cf 92       	push	r12
   15140:	df 92       	push	r13
   15142:	ef 92       	push	r14
   15144:	ff 92       	push	r15
   15146:	0f 93       	push	r16
   15148:	1f 93       	push	r17
   1514a:	cf 93       	push	r28
   1514c:	df 93       	push	r29
   1514e:	00 97       	sbiw	r24, 0x00	; 0
   15150:	81 f4       	brne	.+32     	; 0x15172 <realloc+0x40>
   15152:	cb 01       	movw	r24, r22
   15154:	df 91       	pop	r29
   15156:	cf 91       	pop	r28
   15158:	1f 91       	pop	r17
   1515a:	0f 91       	pop	r16
   1515c:	ff 90       	pop	r15
   1515e:	ef 90       	pop	r14
   15160:	df 90       	pop	r13
   15162:	cf 90       	pop	r12
   15164:	bf 90       	pop	r11
   15166:	af 90       	pop	r10
   15168:	9f 90       	pop	r9
   1516a:	8f 90       	pop	r8
   1516c:	7f 90       	pop	r7
   1516e:	6f 90       	pop	r6
   15170:	bf ce       	rjmp	.-642    	; 0x14ef0 <malloc>
   15172:	fc 01       	movw	r30, r24
   15174:	e6 0f       	add	r30, r22
   15176:	f7 1f       	adc	r31, r23
   15178:	9c 01       	movw	r18, r24
   1517a:	22 50       	subi	r18, 0x02	; 2
   1517c:	31 09       	sbc	r19, r1
   1517e:	e2 17       	cp	r30, r18
   15180:	f3 07       	cpc	r31, r19
   15182:	08 f4       	brcc	.+2      	; 0x15186 <realloc+0x54>
   15184:	a5 c0       	rjmp	.+330    	; 0x152d0 <realloc+0x19e>
   15186:	ec 01       	movw	r28, r24
   15188:	d9 01       	movw	r26, r18
   1518a:	0d 91       	ld	r16, X+
   1518c:	1c 91       	ld	r17, X
   1518e:	11 97       	sbiw	r26, 0x01	; 1
   15190:	06 17       	cp	r16, r22
   15192:	17 07       	cpc	r17, r23
   15194:	a8 f0       	brcs	.+42     	; 0x151c0 <realloc+0x8e>
   15196:	05 30       	cpi	r16, 0x05	; 5
   15198:	11 05       	cpc	r17, r1
   1519a:	08 f4       	brcc	.+2      	; 0x1519e <realloc+0x6c>
   1519c:	97 c0       	rjmp	.+302    	; 0x152cc <realloc+0x19a>
   1519e:	c8 01       	movw	r24, r16
   151a0:	04 97       	sbiw	r24, 0x04	; 4
   151a2:	86 17       	cp	r24, r22
   151a4:	97 07       	cpc	r25, r23
   151a6:	08 f4       	brcc	.+2      	; 0x151aa <realloc+0x78>
   151a8:	91 c0       	rjmp	.+290    	; 0x152cc <realloc+0x19a>
   151aa:	02 50       	subi	r16, 0x02	; 2
   151ac:	11 09       	sbc	r17, r1
   151ae:	06 1b       	sub	r16, r22
   151b0:	17 0b       	sbc	r17, r23
   151b2:	01 93       	st	Z+, r16
   151b4:	11 93       	st	Z+, r17
   151b6:	6d 93       	st	X+, r22
   151b8:	7c 93       	st	X, r23
   151ba:	cf 01       	movw	r24, r30
   151bc:	31 df       	rcall	.-414    	; 0x15020 <free>
   151be:	86 c0       	rjmp	.+268    	; 0x152cc <realloc+0x19a>
   151c0:	5b 01       	movw	r10, r22
   151c2:	a0 1a       	sub	r10, r16
   151c4:	b1 0a       	sbc	r11, r17
   151c6:	4c 01       	movw	r8, r24
   151c8:	80 0e       	add	r8, r16
   151ca:	91 1e       	adc	r9, r17
   151cc:	a0 91 18 18 	lds	r26, 0x1818	; 0x801818 <__flp>
   151d0:	b0 91 19 18 	lds	r27, 0x1819	; 0x801819 <__flp+0x1>
   151d4:	61 2c       	mov	r6, r1
   151d6:	71 2c       	mov	r7, r1
   151d8:	e1 2c       	mov	r14, r1
   151da:	f1 2c       	mov	r15, r1
   151dc:	10 97       	sbiw	r26, 0x00	; 0
   151de:	09 f4       	brne	.+2      	; 0x151e2 <realloc+0xb0>
   151e0:	46 c0       	rjmp	.+140    	; 0x1526e <realloc+0x13c>
   151e2:	8d 91       	ld	r24, X+
   151e4:	9c 91       	ld	r25, X
   151e6:	11 97       	sbiw	r26, 0x01	; 1
   151e8:	a8 15       	cp	r26, r8
   151ea:	b9 05       	cpc	r27, r9
   151ec:	b1 f5       	brne	.+108    	; 0x1525a <realloc+0x128>
   151ee:	6c 01       	movw	r12, r24
   151f0:	42 e0       	ldi	r20, 0x02	; 2
   151f2:	c4 0e       	add	r12, r20
   151f4:	d1 1c       	adc	r13, r1
   151f6:	ca 14       	cp	r12, r10
   151f8:	db 04       	cpc	r13, r11
   151fa:	78 f1       	brcs	.+94     	; 0x1525a <realloc+0x128>
   151fc:	4c 01       	movw	r8, r24
   151fe:	8a 18       	sub	r8, r10
   15200:	9b 08       	sbc	r9, r11
   15202:	64 01       	movw	r12, r8
   15204:	42 e0       	ldi	r20, 0x02	; 2
   15206:	c4 0e       	add	r12, r20
   15208:	d1 1c       	adc	r13, r1
   1520a:	12 96       	adiw	r26, 0x02	; 2
   1520c:	bc 90       	ld	r11, X
   1520e:	12 97       	sbiw	r26, 0x02	; 2
   15210:	13 96       	adiw	r26, 0x03	; 3
   15212:	ac 91       	ld	r26, X
   15214:	b5 e0       	ldi	r27, 0x05	; 5
   15216:	cb 16       	cp	r12, r27
   15218:	d1 04       	cpc	r13, r1
   1521a:	40 f0       	brcs	.+16     	; 0x1522c <realloc+0xfa>
   1521c:	b2 82       	std	Z+2, r11	; 0x02
   1521e:	a3 83       	std	Z+3, r26	; 0x03
   15220:	91 82       	std	Z+1, r9	; 0x01
   15222:	80 82       	st	Z, r8
   15224:	d9 01       	movw	r26, r18
   15226:	6d 93       	st	X+, r22
   15228:	7c 93       	st	X, r23
   1522a:	09 c0       	rjmp	.+18     	; 0x1523e <realloc+0x10c>
   1522c:	0e 5f       	subi	r16, 0xFE	; 254
   1522e:	1f 4f       	sbci	r17, 0xFF	; 255
   15230:	80 0f       	add	r24, r16
   15232:	91 1f       	adc	r25, r17
   15234:	f9 01       	movw	r30, r18
   15236:	91 83       	std	Z+1, r25	; 0x01
   15238:	80 83       	st	Z, r24
   1523a:	eb 2d       	mov	r30, r11
   1523c:	fa 2f       	mov	r31, r26
   1523e:	e1 14       	cp	r14, r1
   15240:	f1 04       	cpc	r15, r1
   15242:	31 f0       	breq	.+12     	; 0x15250 <realloc+0x11e>
   15244:	d7 01       	movw	r26, r14
   15246:	13 96       	adiw	r26, 0x03	; 3
   15248:	fc 93       	st	X, r31
   1524a:	ee 93       	st	-X, r30
   1524c:	12 97       	sbiw	r26, 0x02	; 2
   1524e:	3e c0       	rjmp	.+124    	; 0x152cc <realloc+0x19a>
   15250:	f0 93 19 18 	sts	0x1819, r31	; 0x801819 <__flp+0x1>
   15254:	e0 93 18 18 	sts	0x1818, r30	; 0x801818 <__flp>
   15258:	39 c0       	rjmp	.+114    	; 0x152cc <realloc+0x19a>
   1525a:	68 16       	cp	r6, r24
   1525c:	79 06       	cpc	r7, r25
   1525e:	08 f4       	brcc	.+2      	; 0x15262 <realloc+0x130>
   15260:	3c 01       	movw	r6, r24
   15262:	7d 01       	movw	r14, r26
   15264:	12 96       	adiw	r26, 0x02	; 2
   15266:	0d 90       	ld	r0, X+
   15268:	bc 91       	ld	r27, X
   1526a:	a0 2d       	mov	r26, r0
   1526c:	b7 cf       	rjmp	.-146    	; 0x151dc <realloc+0xaa>
   1526e:	80 91 16 18 	lds	r24, 0x1816	; 0x801816 <__brkval>
   15272:	90 91 17 18 	lds	r25, 0x1817	; 0x801817 <__brkval+0x1>
   15276:	88 16       	cp	r8, r24
   15278:	99 06       	cpc	r9, r25
   1527a:	e1 f4       	brne	.+56     	; 0x152b4 <realloc+0x182>
   1527c:	66 16       	cp	r6, r22
   1527e:	77 06       	cpc	r7, r23
   15280:	c8 f4       	brcc	.+50     	; 0x152b4 <realloc+0x182>
   15282:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
   15286:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
   1528a:	00 97       	sbiw	r24, 0x00	; 0
   1528c:	41 f4       	brne	.+16     	; 0x1529e <realloc+0x16c>
   1528e:	8d b7       	in	r24, 0x3d	; 61
   15290:	9e b7       	in	r25, 0x3e	; 62
   15292:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
   15296:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
   1529a:	84 1b       	sub	r24, r20
   1529c:	95 0b       	sbc	r25, r21
   1529e:	e8 17       	cp	r30, r24
   152a0:	f9 07       	cpc	r31, r25
   152a2:	b0 f4       	brcc	.+44     	; 0x152d0 <realloc+0x19e>
   152a4:	f0 93 17 18 	sts	0x1817, r31	; 0x801817 <__brkval+0x1>
   152a8:	e0 93 16 18 	sts	0x1816, r30	; 0x801816 <__brkval>
   152ac:	f9 01       	movw	r30, r18
   152ae:	71 83       	std	Z+1, r23	; 0x01
   152b0:	60 83       	st	Z, r22
   152b2:	0c c0       	rjmp	.+24     	; 0x152cc <realloc+0x19a>
   152b4:	cb 01       	movw	r24, r22
   152b6:	1c de       	rcall	.-968    	; 0x14ef0 <malloc>
   152b8:	7c 01       	movw	r14, r24
   152ba:	00 97       	sbiw	r24, 0x00	; 0
   152bc:	49 f0       	breq	.+18     	; 0x152d0 <realloc+0x19e>
   152be:	a8 01       	movw	r20, r16
   152c0:	be 01       	movw	r22, r28
   152c2:	cf d2       	rcall	.+1438   	; 0x15862 <memcpy>
   152c4:	ce 01       	movw	r24, r28
   152c6:	ac de       	rcall	.-680    	; 0x15020 <free>
   152c8:	c7 01       	movw	r24, r14
   152ca:	04 c0       	rjmp	.+8      	; 0x152d4 <realloc+0x1a2>
   152cc:	ce 01       	movw	r24, r28
   152ce:	02 c0       	rjmp	.+4      	; 0x152d4 <realloc+0x1a2>
   152d0:	80 e0       	ldi	r24, 0x00	; 0
   152d2:	90 e0       	ldi	r25, 0x00	; 0
   152d4:	df 91       	pop	r29
   152d6:	cf 91       	pop	r28
   152d8:	1f 91       	pop	r17
   152da:	0f 91       	pop	r16
   152dc:	ff 90       	pop	r15
   152de:	ef 90       	pop	r14
   152e0:	df 90       	pop	r13
   152e2:	cf 90       	pop	r12
   152e4:	bf 90       	pop	r11
   152e6:	af 90       	pop	r10
   152e8:	9f 90       	pop	r9
   152ea:	8f 90       	pop	r8
   152ec:	7f 90       	pop	r7
   152ee:	6f 90       	pop	r6
   152f0:	08 95       	ret

000152f2 <strtod>:
   152f2:	8f 92       	push	r8
   152f4:	9f 92       	push	r9
   152f6:	af 92       	push	r10
   152f8:	bf 92       	push	r11
   152fa:	cf 92       	push	r12
   152fc:	df 92       	push	r13
   152fe:	ef 92       	push	r14
   15300:	ff 92       	push	r15
   15302:	0f 93       	push	r16
   15304:	1f 93       	push	r17
   15306:	cf 93       	push	r28
   15308:	df 93       	push	r29
   1530a:	ec 01       	movw	r28, r24
   1530c:	6b 01       	movw	r12, r22
   1530e:	61 15       	cp	r22, r1
   15310:	71 05       	cpc	r23, r1
   15312:	19 f0       	breq	.+6      	; 0x1531a <strtod+0x28>
   15314:	fb 01       	movw	r30, r22
   15316:	91 83       	std	Z+1, r25	; 0x01
   15318:	80 83       	st	Z, r24
   1531a:	7e 01       	movw	r14, r28
   1531c:	ff ef       	ldi	r31, 0xFF	; 255
   1531e:	ef 1a       	sub	r14, r31
   15320:	ff 0a       	sbc	r15, r31
   15322:	08 81       	ld	r16, Y
   15324:	80 2f       	mov	r24, r16
   15326:	90 e0       	ldi	r25, 0x00	; 0
   15328:	62 d2       	rcall	.+1220   	; 0x157ee <isspace>
   1532a:	89 2b       	or	r24, r25
   1532c:	11 f0       	breq	.+4      	; 0x15332 <strtod+0x40>
   1532e:	e7 01       	movw	r28, r14
   15330:	f4 cf       	rjmp	.-24     	; 0x1531a <strtod+0x28>
   15332:	0d 32       	cpi	r16, 0x2D	; 45
   15334:	39 f4       	brne	.+14     	; 0x15344 <strtod+0x52>
   15336:	7e 01       	movw	r14, r28
   15338:	82 e0       	ldi	r24, 0x02	; 2
   1533a:	e8 0e       	add	r14, r24
   1533c:	f1 1c       	adc	r15, r1
   1533e:	09 81       	ldd	r16, Y+1	; 0x01
   15340:	11 e0       	ldi	r17, 0x01	; 1
   15342:	08 c0       	rjmp	.+16     	; 0x15354 <strtod+0x62>
   15344:	0b 32       	cpi	r16, 0x2B	; 43
   15346:	29 f4       	brne	.+10     	; 0x15352 <strtod+0x60>
   15348:	7e 01       	movw	r14, r28
   1534a:	92 e0       	ldi	r25, 0x02	; 2
   1534c:	e9 0e       	add	r14, r25
   1534e:	f1 1c       	adc	r15, r1
   15350:	09 81       	ldd	r16, Y+1	; 0x01
   15352:	10 e0       	ldi	r17, 0x00	; 0
   15354:	e7 01       	movw	r28, r14
   15356:	21 97       	sbiw	r28, 0x01	; 1
   15358:	43 e0       	ldi	r20, 0x03	; 3
   1535a:	50 e0       	ldi	r21, 0x00	; 0
   1535c:	6e e4       	ldi	r22, 0x4E	; 78
   1535e:	74 e0       	ldi	r23, 0x04	; 4
   15360:	ce 01       	movw	r24, r28
   15362:	4d d2       	rcall	.+1178   	; 0x157fe <strncasecmp_P>
   15364:	89 2b       	or	r24, r25
   15366:	b9 f4       	brne	.+46     	; 0x15396 <strtod+0xa4>
   15368:	23 96       	adiw	r28, 0x03	; 3
   1536a:	45 e0       	ldi	r20, 0x05	; 5
   1536c:	50 e0       	ldi	r21, 0x00	; 0
   1536e:	69 e4       	ldi	r22, 0x49	; 73
   15370:	74 e0       	ldi	r23, 0x04	; 4
   15372:	ce 01       	movw	r24, r28
   15374:	44 d2       	rcall	.+1160   	; 0x157fe <strncasecmp_P>
   15376:	89 2b       	or	r24, r25
   15378:	09 f4       	brne	.+2      	; 0x1537c <strtod+0x8a>
   1537a:	25 96       	adiw	r28, 0x05	; 5
   1537c:	c1 14       	cp	r12, r1
   1537e:	d1 04       	cpc	r13, r1
   15380:	19 f0       	breq	.+6      	; 0x15388 <strtod+0x96>
   15382:	f6 01       	movw	r30, r12
   15384:	d1 83       	std	Z+1, r29	; 0x01
   15386:	c0 83       	st	Z, r28
   15388:	11 11       	cpse	r17, r1
   1538a:	f0 c0       	rjmp	.+480    	; 0x1556c <strtod+0x27a>
   1538c:	60 e0       	ldi	r22, 0x00	; 0
   1538e:	70 e0       	ldi	r23, 0x00	; 0
   15390:	80 e8       	ldi	r24, 0x80	; 128
   15392:	9f e7       	ldi	r25, 0x7F	; 127
   15394:	f4 c0       	rjmp	.+488    	; 0x1557e <strtod+0x28c>
   15396:	43 e0       	ldi	r20, 0x03	; 3
   15398:	50 e0       	ldi	r21, 0x00	; 0
   1539a:	66 e4       	ldi	r22, 0x46	; 70
   1539c:	74 e0       	ldi	r23, 0x04	; 4
   1539e:	ce 01       	movw	r24, r28
   153a0:	2e d2       	rcall	.+1116   	; 0x157fe <strncasecmp_P>
   153a2:	89 2b       	or	r24, r25
   153a4:	59 f4       	brne	.+22     	; 0x153bc <strtod+0xca>
   153a6:	c1 14       	cp	r12, r1
   153a8:	d1 04       	cpc	r13, r1
   153aa:	09 f4       	brne	.+2      	; 0x153ae <strtod+0xbc>
   153ac:	e4 c0       	rjmp	.+456    	; 0x15576 <strtod+0x284>
   153ae:	f2 e0       	ldi	r31, 0x02	; 2
   153b0:	ef 0e       	add	r14, r31
   153b2:	f1 1c       	adc	r15, r1
   153b4:	f6 01       	movw	r30, r12
   153b6:	f1 82       	std	Z+1, r15	; 0x01
   153b8:	e0 82       	st	Z, r14
   153ba:	dd c0       	rjmp	.+442    	; 0x15576 <strtod+0x284>
   153bc:	20 e0       	ldi	r18, 0x00	; 0
   153be:	30 e0       	ldi	r19, 0x00	; 0
   153c0:	a9 01       	movw	r20, r18
   153c2:	c0 e0       	ldi	r28, 0x00	; 0
   153c4:	d0 e0       	ldi	r29, 0x00	; 0
   153c6:	f7 01       	movw	r30, r14
   153c8:	60 ed       	ldi	r22, 0xD0	; 208
   153ca:	a6 2e       	mov	r10, r22
   153cc:	a0 0e       	add	r10, r16
   153ce:	89 e0       	ldi	r24, 0x09	; 9
   153d0:	8a 15       	cp	r24, r10
   153d2:	28 f1       	brcs	.+74     	; 0x1541e <strtod+0x12c>
   153d4:	91 2f       	mov	r25, r17
   153d6:	92 60       	ori	r25, 0x02	; 2
   153d8:	b9 2e       	mov	r11, r25
   153da:	81 2f       	mov	r24, r17
   153dc:	88 70       	andi	r24, 0x08	; 8
   153de:	12 ff       	sbrs	r17, 2
   153e0:	04 c0       	rjmp	.+8      	; 0x153ea <strtod+0xf8>
   153e2:	81 11       	cpse	r24, r1
   153e4:	23 c0       	rjmp	.+70     	; 0x1542c <strtod+0x13a>
   153e6:	21 96       	adiw	r28, 0x01	; 1
   153e8:	21 c0       	rjmp	.+66     	; 0x1542c <strtod+0x13a>
   153ea:	81 11       	cpse	r24, r1
   153ec:	21 97       	sbiw	r28, 0x01	; 1
   153ee:	a5 e0       	ldi	r26, 0x05	; 5
   153f0:	b0 e0       	ldi	r27, 0x00	; 0
   153f2:	51 dd       	rcall	.-1374   	; 0x14e96 <__muluhisi3>
   153f4:	dc 01       	movw	r26, r24
   153f6:	cb 01       	movw	r24, r22
   153f8:	88 0f       	add	r24, r24
   153fa:	99 1f       	adc	r25, r25
   153fc:	aa 1f       	adc	r26, r26
   153fe:	bb 1f       	adc	r27, r27
   15400:	9c 01       	movw	r18, r24
   15402:	ad 01       	movw	r20, r26
   15404:	2a 0d       	add	r18, r10
   15406:	31 1d       	adc	r19, r1
   15408:	41 1d       	adc	r20, r1
   1540a:	51 1d       	adc	r21, r1
   1540c:	28 39       	cpi	r18, 0x98	; 152
   1540e:	89 e9       	ldi	r24, 0x99	; 153
   15410:	38 07       	cpc	r19, r24
   15412:	48 07       	cpc	r20, r24
   15414:	89 e1       	ldi	r24, 0x19	; 25
   15416:	58 07       	cpc	r21, r24
   15418:	48 f0       	brcs	.+18     	; 0x1542c <strtod+0x13a>
   1541a:	16 60       	ori	r17, 0x06	; 6
   1541c:	06 c0       	rjmp	.+12     	; 0x1542a <strtod+0x138>
   1541e:	9e ef       	ldi	r25, 0xFE	; 254
   15420:	a9 12       	cpse	r10, r25
   15422:	0a c0       	rjmp	.+20     	; 0x15438 <strtod+0x146>
   15424:	13 fd       	sbrc	r17, 3
   15426:	40 c0       	rjmp	.+128    	; 0x154a8 <strtod+0x1b6>
   15428:	18 60       	ori	r17, 0x08	; 8
   1542a:	b1 2e       	mov	r11, r17
   1542c:	8f ef       	ldi	r24, 0xFF	; 255
   1542e:	e8 1a       	sub	r14, r24
   15430:	f8 0a       	sbc	r15, r24
   15432:	00 81       	ld	r16, Z
   15434:	1b 2d       	mov	r17, r11
   15436:	c7 cf       	rjmp	.-114    	; 0x153c6 <strtod+0xd4>
   15438:	80 2f       	mov	r24, r16
   1543a:	8f 7d       	andi	r24, 0xDF	; 223
   1543c:	85 34       	cpi	r24, 0x45	; 69
   1543e:	a1 f5       	brne	.+104    	; 0x154a8 <strtod+0x1b6>
   15440:	80 81       	ld	r24, Z
   15442:	8d 32       	cpi	r24, 0x2D	; 45
   15444:	11 f4       	brne	.+4      	; 0x1544a <strtod+0x158>
   15446:	10 61       	ori	r17, 0x10	; 16
   15448:	06 c0       	rjmp	.+12     	; 0x15456 <strtod+0x164>
   1544a:	8b 32       	cpi	r24, 0x2B	; 43
   1544c:	21 f0       	breq	.+8      	; 0x15456 <strtod+0x164>
   1544e:	31 96       	adiw	r30, 0x01	; 1
   15450:	61 e0       	ldi	r22, 0x01	; 1
   15452:	70 e0       	ldi	r23, 0x00	; 0
   15454:	04 c0       	rjmp	.+8      	; 0x1545e <strtod+0x16c>
   15456:	81 81       	ldd	r24, Z+1	; 0x01
   15458:	32 96       	adiw	r30, 0x02	; 2
   1545a:	62 e0       	ldi	r22, 0x02	; 2
   1545c:	70 e0       	ldi	r23, 0x00	; 0
   1545e:	80 53       	subi	r24, 0x30	; 48
   15460:	8a 30       	cpi	r24, 0x0A	; 10
   15462:	18 f0       	brcs	.+6      	; 0x1546a <strtod+0x178>
   15464:	e6 1b       	sub	r30, r22
   15466:	f7 0b       	sbc	r31, r23
   15468:	1f c0       	rjmp	.+62     	; 0x154a8 <strtod+0x1b6>
   1546a:	60 e0       	ldi	r22, 0x00	; 0
   1546c:	70 e0       	ldi	r23, 0x00	; 0
   1546e:	60 38       	cpi	r22, 0x80	; 128
   15470:	9c e0       	ldi	r25, 0x0C	; 12
   15472:	79 07       	cpc	r23, r25
   15474:	5c f4       	brge	.+22     	; 0x1548c <strtod+0x19a>
   15476:	db 01       	movw	r26, r22
   15478:	aa 0f       	add	r26, r26
   1547a:	bb 1f       	adc	r27, r27
   1547c:	aa 0f       	add	r26, r26
   1547e:	bb 1f       	adc	r27, r27
   15480:	6a 0f       	add	r22, r26
   15482:	7b 1f       	adc	r23, r27
   15484:	66 0f       	add	r22, r22
   15486:	77 1f       	adc	r23, r23
   15488:	68 0f       	add	r22, r24
   1548a:	71 1d       	adc	r23, r1
   1548c:	31 96       	adiw	r30, 0x01	; 1
   1548e:	df 01       	movw	r26, r30
   15490:	11 97       	sbiw	r26, 0x01	; 1
   15492:	8c 91       	ld	r24, X
   15494:	80 53       	subi	r24, 0x30	; 48
   15496:	8a 30       	cpi	r24, 0x0A	; 10
   15498:	50 f3       	brcs	.-44     	; 0x1546e <strtod+0x17c>
   1549a:	14 ff       	sbrs	r17, 4
   1549c:	03 c0       	rjmp	.+6      	; 0x154a4 <strtod+0x1b2>
   1549e:	71 95       	neg	r23
   154a0:	61 95       	neg	r22
   154a2:	71 09       	sbc	r23, r1
   154a4:	c6 0f       	add	r28, r22
   154a6:	d7 1f       	adc	r29, r23
   154a8:	11 ff       	sbrs	r17, 1
   154aa:	08 c0       	rjmp	.+16     	; 0x154bc <strtod+0x1ca>
   154ac:	c1 14       	cp	r12, r1
   154ae:	d1 04       	cpc	r13, r1
   154b0:	29 f0       	breq	.+10     	; 0x154bc <strtod+0x1ca>
   154b2:	cf 01       	movw	r24, r30
   154b4:	01 97       	sbiw	r24, 0x01	; 1
   154b6:	f6 01       	movw	r30, r12
   154b8:	91 83       	std	Z+1, r25	; 0x01
   154ba:	80 83       	st	Z, r24
   154bc:	ca 01       	movw	r24, r20
   154be:	b9 01       	movw	r22, r18
   154c0:	0e db       	rcall	.-2532   	; 0x14ade <__floatunsisf>
   154c2:	21 2f       	mov	r18, r17
   154c4:	23 70       	andi	r18, 0x03	; 3
   154c6:	23 30       	cpi	r18, 0x03	; 3
   154c8:	19 f0       	breq	.+6      	; 0x154d0 <strtod+0x1de>
   154ca:	4b 01       	movw	r8, r22
   154cc:	5c 01       	movw	r10, r24
   154ce:	06 c0       	rjmp	.+12     	; 0x154dc <strtod+0x1ea>
   154d0:	4b 01       	movw	r8, r22
   154d2:	5c 01       	movw	r10, r24
   154d4:	b7 fa       	bst	r11, 7
   154d6:	b0 94       	com	r11
   154d8:	b7 f8       	bld	r11, 7
   154da:	b0 94       	com	r11
   154dc:	20 e0       	ldi	r18, 0x00	; 0
   154de:	30 e0       	ldi	r19, 0x00	; 0
   154e0:	a9 01       	movw	r20, r18
   154e2:	c5 01       	movw	r24, r10
   154e4:	b4 01       	movw	r22, r8
   154e6:	5e da       	rcall	.-2884   	; 0x149a4 <__cmpsf2>
   154e8:	88 23       	and	r24, r24
   154ea:	09 f4       	brne	.+2      	; 0x154ee <strtod+0x1fc>
   154ec:	3c c0       	rjmp	.+120    	; 0x15566 <strtod+0x274>
   154ee:	d7 ff       	sbrs	r29, 7
   154f0:	06 c0       	rjmp	.+12     	; 0x154fe <strtod+0x20c>
   154f2:	d1 95       	neg	r29
   154f4:	c1 95       	neg	r28
   154f6:	d1 09       	sbc	r29, r1
   154f8:	05 e6       	ldi	r16, 0x65	; 101
   154fa:	14 e0       	ldi	r17, 0x04	; 4
   154fc:	02 c0       	rjmp	.+4      	; 0x15502 <strtod+0x210>
   154fe:	0d e7       	ldi	r16, 0x7D	; 125
   15500:	14 e0       	ldi	r17, 0x04	; 4
   15502:	68 01       	movw	r12, r16
   15504:	f8 e1       	ldi	r31, 0x18	; 24
   15506:	cf 1a       	sub	r12, r31
   15508:	d1 08       	sbc	r13, r1
   1550a:	90 e2       	ldi	r25, 0x20	; 32
   1550c:	e9 2e       	mov	r14, r25
   1550e:	f1 2c       	mov	r15, r1
   15510:	ce 15       	cp	r28, r14
   15512:	df 05       	cpc	r29, r15
   15514:	6c f0       	brlt	.+26     	; 0x15530 <strtod+0x23e>
   15516:	f8 01       	movw	r30, r16
   15518:	25 91       	lpm	r18, Z+
   1551a:	35 91       	lpm	r19, Z+
   1551c:	45 91       	lpm	r20, Z+
   1551e:	54 91       	lpm	r21, Z
   15520:	c5 01       	movw	r24, r10
   15522:	b4 01       	movw	r22, r8
   15524:	92 db       	rcall	.-2268   	; 0x14c4a <__mulsf3>
   15526:	4b 01       	movw	r8, r22
   15528:	5c 01       	movw	r10, r24
   1552a:	ce 19       	sub	r28, r14
   1552c:	df 09       	sbc	r29, r15
   1552e:	f0 cf       	rjmp	.-32     	; 0x15510 <strtod+0x21e>
   15530:	04 50       	subi	r16, 0x04	; 4
   15532:	11 09       	sbc	r17, r1
   15534:	f5 94       	asr	r15
   15536:	e7 94       	ror	r14
   15538:	0c 15       	cp	r16, r12
   1553a:	1d 05       	cpc	r17, r13
   1553c:	49 f7       	brne	.-46     	; 0x15510 <strtod+0x21e>
   1553e:	8a 2d       	mov	r24, r10
   15540:	88 0f       	add	r24, r24
   15542:	8b 2d       	mov	r24, r11
   15544:	88 1f       	adc	r24, r24
   15546:	8f 3f       	cpi	r24, 0xFF	; 255
   15548:	41 f0       	breq	.+16     	; 0x1555a <strtod+0x268>
   1554a:	20 e0       	ldi	r18, 0x00	; 0
   1554c:	30 e0       	ldi	r19, 0x00	; 0
   1554e:	a9 01       	movw	r20, r18
   15550:	c5 01       	movw	r24, r10
   15552:	b4 01       	movw	r22, r8
   15554:	27 da       	rcall	.-2994   	; 0x149a4 <__cmpsf2>
   15556:	81 11       	cpse	r24, r1
   15558:	06 c0       	rjmp	.+12     	; 0x15566 <strtod+0x274>
   1555a:	82 e2       	ldi	r24, 0x22	; 34
   1555c:	90 e0       	ldi	r25, 0x00	; 0
   1555e:	90 93 1b 18 	sts	0x181B, r25	; 0x80181b <errno+0x1>
   15562:	80 93 1a 18 	sts	0x181A, r24	; 0x80181a <errno>
   15566:	c5 01       	movw	r24, r10
   15568:	b4 01       	movw	r22, r8
   1556a:	09 c0       	rjmp	.+18     	; 0x1557e <strtod+0x28c>
   1556c:	60 e0       	ldi	r22, 0x00	; 0
   1556e:	70 e0       	ldi	r23, 0x00	; 0
   15570:	80 e8       	ldi	r24, 0x80	; 128
   15572:	9f ef       	ldi	r25, 0xFF	; 255
   15574:	04 c0       	rjmp	.+8      	; 0x1557e <strtod+0x28c>
   15576:	60 e0       	ldi	r22, 0x00	; 0
   15578:	70 e0       	ldi	r23, 0x00	; 0
   1557a:	80 ec       	ldi	r24, 0xC0	; 192
   1557c:	9f e7       	ldi	r25, 0x7F	; 127
   1557e:	df 91       	pop	r29
   15580:	cf 91       	pop	r28
   15582:	1f 91       	pop	r17
   15584:	0f 91       	pop	r16
   15586:	ff 90       	pop	r15
   15588:	ef 90       	pop	r14
   1558a:	df 90       	pop	r13
   1558c:	cf 90       	pop	r12
   1558e:	bf 90       	pop	r11
   15590:	af 90       	pop	r10
   15592:	9f 90       	pop	r9
   15594:	8f 90       	pop	r8
   15596:	08 95       	ret

00015598 <strtol>:
   15598:	3f 92       	push	r3
   1559a:	4f 92       	push	r4
   1559c:	5f 92       	push	r5
   1559e:	6f 92       	push	r6
   155a0:	7f 92       	push	r7
   155a2:	8f 92       	push	r8
   155a4:	9f 92       	push	r9
   155a6:	af 92       	push	r10
   155a8:	bf 92       	push	r11
   155aa:	cf 92       	push	r12
   155ac:	df 92       	push	r13
   155ae:	ef 92       	push	r14
   155b0:	ff 92       	push	r15
   155b2:	0f 93       	push	r16
   155b4:	1f 93       	push	r17
   155b6:	cf 93       	push	r28
   155b8:	df 93       	push	r29
   155ba:	5c 01       	movw	r10, r24
   155bc:	6b 01       	movw	r12, r22
   155be:	7a 01       	movw	r14, r20
   155c0:	61 15       	cp	r22, r1
   155c2:	71 05       	cpc	r23, r1
   155c4:	19 f0       	breq	.+6      	; 0x155cc <strtol+0x34>
   155c6:	fb 01       	movw	r30, r22
   155c8:	91 83       	std	Z+1, r25	; 0x01
   155ca:	80 83       	st	Z, r24
   155cc:	e1 14       	cp	r14, r1
   155ce:	f1 04       	cpc	r15, r1
   155d0:	29 f0       	breq	.+10     	; 0x155dc <strtol+0x44>
   155d2:	c7 01       	movw	r24, r14
   155d4:	02 97       	sbiw	r24, 0x02	; 2
   155d6:	83 97       	sbiw	r24, 0x23	; 35
   155d8:	08 f0       	brcs	.+2      	; 0x155dc <strtol+0x44>
   155da:	e2 c0       	rjmp	.+452    	; 0x157a0 <strtol+0x208>
   155dc:	e5 01       	movw	r28, r10
   155de:	21 96       	adiw	r28, 0x01	; 1
   155e0:	f5 01       	movw	r30, r10
   155e2:	10 81       	ld	r17, Z
   155e4:	81 2f       	mov	r24, r17
   155e6:	90 e0       	ldi	r25, 0x00	; 0
   155e8:	02 d1       	rcall	.+516    	; 0x157ee <isspace>
   155ea:	89 2b       	or	r24, r25
   155ec:	11 f0       	breq	.+4      	; 0x155f2 <strtol+0x5a>
   155ee:	5e 01       	movw	r10, r28
   155f0:	f5 cf       	rjmp	.-22     	; 0x155dc <strtol+0x44>
   155f2:	1d 32       	cpi	r17, 0x2D	; 45
   155f4:	29 f4       	brne	.+10     	; 0x15600 <strtol+0x68>
   155f6:	21 96       	adiw	r28, 0x01	; 1
   155f8:	f5 01       	movw	r30, r10
   155fa:	11 81       	ldd	r17, Z+1	; 0x01
   155fc:	01 e0       	ldi	r16, 0x01	; 1
   155fe:	07 c0       	rjmp	.+14     	; 0x1560e <strtol+0x76>
   15600:	1b 32       	cpi	r17, 0x2B	; 43
   15602:	21 f4       	brne	.+8      	; 0x1560c <strtol+0x74>
   15604:	e5 01       	movw	r28, r10
   15606:	22 96       	adiw	r28, 0x02	; 2
   15608:	f5 01       	movw	r30, r10
   1560a:	11 81       	ldd	r17, Z+1	; 0x01
   1560c:	00 e0       	ldi	r16, 0x00	; 0
   1560e:	e1 14       	cp	r14, r1
   15610:	f1 04       	cpc	r15, r1
   15612:	09 f1       	breq	.+66     	; 0x15656 <strtol+0xbe>
   15614:	f0 e1       	ldi	r31, 0x10	; 16
   15616:	ef 16       	cp	r14, r31
   15618:	f1 04       	cpc	r15, r1
   1561a:	29 f4       	brne	.+10     	; 0x15626 <strtol+0x8e>
   1561c:	3e c0       	rjmp	.+124    	; 0x1569a <strtol+0x102>
   1561e:	10 e3       	ldi	r17, 0x30	; 48
   15620:	e1 14       	cp	r14, r1
   15622:	f1 04       	cpc	r15, r1
   15624:	21 f1       	breq	.+72     	; 0x1566e <strtol+0xd6>
   15626:	28 e0       	ldi	r18, 0x08	; 8
   15628:	e2 16       	cp	r14, r18
   1562a:	f1 04       	cpc	r15, r1
   1562c:	01 f1       	breq	.+64     	; 0x1566e <strtol+0xd6>
   1562e:	54 f4       	brge	.+20     	; 0x15644 <strtol+0xac>
   15630:	e2 e0       	ldi	r30, 0x02	; 2
   15632:	ee 16       	cp	r14, r30
   15634:	f1 04       	cpc	r15, r1
   15636:	21 f5       	brne	.+72     	; 0x15680 <strtol+0xe8>
   15638:	81 2c       	mov	r8, r1
   1563a:	91 2c       	mov	r9, r1
   1563c:	a1 2c       	mov	r10, r1
   1563e:	b0 e4       	ldi	r27, 0x40	; 64
   15640:	bb 2e       	mov	r11, r27
   15642:	3d c0       	rjmp	.+122    	; 0x156be <strtol+0x126>
   15644:	fa e0       	ldi	r31, 0x0A	; 10
   15646:	ef 16       	cp	r14, r31
   15648:	f1 04       	cpc	r15, r1
   1564a:	39 f0       	breq	.+14     	; 0x1565a <strtol+0xc2>
   1564c:	20 e1       	ldi	r18, 0x10	; 16
   1564e:	e2 16       	cp	r14, r18
   15650:	f1 04       	cpc	r15, r1
   15652:	b1 f4       	brne	.+44     	; 0x15680 <strtol+0xe8>
   15654:	2f c0       	rjmp	.+94     	; 0x156b4 <strtol+0x11c>
   15656:	10 33       	cpi	r17, 0x30	; 48
   15658:	11 f1       	breq	.+68     	; 0x1569e <strtol+0x106>
   1565a:	fa e0       	ldi	r31, 0x0A	; 10
   1565c:	ef 2e       	mov	r14, r31
   1565e:	f1 2c       	mov	r15, r1
   15660:	ac ec       	ldi	r26, 0xCC	; 204
   15662:	8a 2e       	mov	r8, r26
   15664:	98 2c       	mov	r9, r8
   15666:	a8 2c       	mov	r10, r8
   15668:	ac e0       	ldi	r26, 0x0C	; 12
   1566a:	ba 2e       	mov	r11, r26
   1566c:	28 c0       	rjmp	.+80     	; 0x156be <strtol+0x126>
   1566e:	78 e0       	ldi	r23, 0x08	; 8
   15670:	e7 2e       	mov	r14, r23
   15672:	f1 2c       	mov	r15, r1
   15674:	81 2c       	mov	r8, r1
   15676:	91 2c       	mov	r9, r1
   15678:	a1 2c       	mov	r10, r1
   1567a:	e0 e1       	ldi	r30, 0x10	; 16
   1567c:	be 2e       	mov	r11, r30
   1567e:	1f c0       	rjmp	.+62     	; 0x156be <strtol+0x126>
   15680:	60 e0       	ldi	r22, 0x00	; 0
   15682:	70 e0       	ldi	r23, 0x00	; 0
   15684:	80 e0       	ldi	r24, 0x00	; 0
   15686:	90 e8       	ldi	r25, 0x80	; 128
   15688:	97 01       	movw	r18, r14
   1568a:	0f 2c       	mov	r0, r15
   1568c:	00 0c       	add	r0, r0
   1568e:	44 0b       	sbc	r20, r20
   15690:	55 0b       	sbc	r21, r21
   15692:	bb db       	rcall	.-2186   	; 0x14e0a <__udivmodsi4>
   15694:	49 01       	movw	r8, r18
   15696:	5a 01       	movw	r10, r20
   15698:	12 c0       	rjmp	.+36     	; 0x156be <strtol+0x126>
   1569a:	10 33       	cpi	r17, 0x30	; 48
   1569c:	59 f4       	brne	.+22     	; 0x156b4 <strtol+0x11c>
   1569e:	88 81       	ld	r24, Y
   156a0:	8f 7d       	andi	r24, 0xDF	; 223
   156a2:	88 35       	cpi	r24, 0x58	; 88
   156a4:	09 f0       	breq	.+2      	; 0x156a8 <strtol+0x110>
   156a6:	bb cf       	rjmp	.-138    	; 0x1561e <strtol+0x86>
   156a8:	19 81       	ldd	r17, Y+1	; 0x01
   156aa:	22 96       	adiw	r28, 0x02	; 2
   156ac:	02 60       	ori	r16, 0x02	; 2
   156ae:	80 e1       	ldi	r24, 0x10	; 16
   156b0:	e8 2e       	mov	r14, r24
   156b2:	f1 2c       	mov	r15, r1
   156b4:	81 2c       	mov	r8, r1
   156b6:	91 2c       	mov	r9, r1
   156b8:	a1 2c       	mov	r10, r1
   156ba:	68 e0       	ldi	r22, 0x08	; 8
   156bc:	b6 2e       	mov	r11, r22
   156be:	40 e0       	ldi	r20, 0x00	; 0
   156c0:	60 e0       	ldi	r22, 0x00	; 0
   156c2:	70 e0       	ldi	r23, 0x00	; 0
   156c4:	cb 01       	movw	r24, r22
   156c6:	27 01       	movw	r4, r14
   156c8:	0f 2c       	mov	r0, r15
   156ca:	00 0c       	add	r0, r0
   156cc:	66 08       	sbc	r6, r6
   156ce:	77 08       	sbc	r7, r7
   156d0:	fe 01       	movw	r30, r28
   156d2:	50 ed       	ldi	r21, 0xD0	; 208
   156d4:	35 2e       	mov	r3, r21
   156d6:	31 0e       	add	r3, r17
   156d8:	29 e0       	ldi	r18, 0x09	; 9
   156da:	23 15       	cp	r18, r3
   156dc:	70 f4       	brcc	.+28     	; 0x156fa <strtol+0x162>
   156de:	2f eb       	ldi	r18, 0xBF	; 191
   156e0:	21 0f       	add	r18, r17
   156e2:	2a 31       	cpi	r18, 0x1A	; 26
   156e4:	18 f4       	brcc	.+6      	; 0x156ec <strtol+0x154>
   156e6:	39 ec       	ldi	r19, 0xC9	; 201
   156e8:	33 2e       	mov	r3, r19
   156ea:	06 c0       	rjmp	.+12     	; 0x156f8 <strtol+0x160>
   156ec:	2f e9       	ldi	r18, 0x9F	; 159
   156ee:	21 0f       	add	r18, r17
   156f0:	2a 31       	cpi	r18, 0x1A	; 26
   156f2:	10 f5       	brcc	.+68     	; 0x15738 <strtol+0x1a0>
   156f4:	29 ea       	ldi	r18, 0xA9	; 169
   156f6:	32 2e       	mov	r3, r18
   156f8:	31 0e       	add	r3, r17
   156fa:	23 2d       	mov	r18, r3
   156fc:	30 e0       	ldi	r19, 0x00	; 0
   156fe:	2e 15       	cp	r18, r14
   15700:	3f 05       	cpc	r19, r15
   15702:	d4 f4       	brge	.+52     	; 0x15738 <strtol+0x1a0>
   15704:	47 fd       	sbrc	r20, 7
   15706:	15 c0       	rjmp	.+42     	; 0x15732 <strtol+0x19a>
   15708:	86 16       	cp	r8, r22
   1570a:	97 06       	cpc	r9, r23
   1570c:	a8 06       	cpc	r10, r24
   1570e:	b9 06       	cpc	r11, r25
   15710:	68 f0       	brcs	.+26     	; 0x1572c <strtol+0x194>
   15712:	a3 01       	movw	r20, r6
   15714:	92 01       	movw	r18, r4
   15716:	57 db       	rcall	.-2386   	; 0x14dc6 <__mulsi3>
   15718:	63 0d       	add	r22, r3
   1571a:	71 1d       	adc	r23, r1
   1571c:	81 1d       	adc	r24, r1
   1571e:	91 1d       	adc	r25, r1
   15720:	61 30       	cpi	r22, 0x01	; 1
   15722:	71 05       	cpc	r23, r1
   15724:	81 05       	cpc	r24, r1
   15726:	20 e8       	ldi	r18, 0x80	; 128
   15728:	92 07       	cpc	r25, r18
   1572a:	10 f0       	brcs	.+4      	; 0x15730 <strtol+0x198>
   1572c:	4f ef       	ldi	r20, 0xFF	; 255
   1572e:	01 c0       	rjmp	.+2      	; 0x15732 <strtol+0x19a>
   15730:	41 e0       	ldi	r20, 0x01	; 1
   15732:	21 96       	adiw	r28, 0x01	; 1
   15734:	10 81       	ld	r17, Z
   15736:	cc cf       	rjmp	.-104    	; 0x156d0 <strtol+0x138>
   15738:	20 2f       	mov	r18, r16
   1573a:	21 70       	andi	r18, 0x01	; 1
   1573c:	c1 14       	cp	r12, r1
   1573e:	d1 04       	cpc	r13, r1
   15740:	71 f0       	breq	.+28     	; 0x1575e <strtol+0x1c6>
   15742:	44 23       	and	r20, r20
   15744:	29 f0       	breq	.+10     	; 0x15750 <strtol+0x1b8>
   15746:	21 97       	sbiw	r28, 0x01	; 1
   15748:	f6 01       	movw	r30, r12
   1574a:	d1 83       	std	Z+1, r29	; 0x01
   1574c:	c0 83       	st	Z, r28
   1574e:	07 c0       	rjmp	.+14     	; 0x1575e <strtol+0x1c6>
   15750:	01 ff       	sbrs	r16, 1
   15752:	19 c0       	rjmp	.+50     	; 0x15786 <strtol+0x1ee>
   15754:	22 97       	sbiw	r28, 0x02	; 2
   15756:	f6 01       	movw	r30, r12
   15758:	d1 83       	std	Z+1, r29	; 0x01
   1575a:	c0 83       	st	Z, r28
   1575c:	14 c0       	rjmp	.+40     	; 0x15786 <strtol+0x1ee>
   1575e:	47 ff       	sbrs	r20, 7
   15760:	12 c0       	rjmp	.+36     	; 0x15786 <strtol+0x1ee>
   15762:	22 23       	and	r18, r18
   15764:	29 f0       	breq	.+10     	; 0x15770 <strtol+0x1d8>
   15766:	60 e0       	ldi	r22, 0x00	; 0
   15768:	70 e0       	ldi	r23, 0x00	; 0
   1576a:	80 e0       	ldi	r24, 0x00	; 0
   1576c:	90 e8       	ldi	r25, 0x80	; 128
   1576e:	04 c0       	rjmp	.+8      	; 0x15778 <strtol+0x1e0>
   15770:	6f ef       	ldi	r22, 0xFF	; 255
   15772:	7f ef       	ldi	r23, 0xFF	; 255
   15774:	8f ef       	ldi	r24, 0xFF	; 255
   15776:	9f e7       	ldi	r25, 0x7F	; 127
   15778:	22 e2       	ldi	r18, 0x22	; 34
   1577a:	30 e0       	ldi	r19, 0x00	; 0
   1577c:	30 93 1b 18 	sts	0x181B, r19	; 0x80181b <errno+0x1>
   15780:	20 93 1a 18 	sts	0x181A, r18	; 0x80181a <errno>
   15784:	09 c0       	rjmp	.+18     	; 0x15798 <strtol+0x200>
   15786:	22 23       	and	r18, r18
   15788:	81 f0       	breq	.+32     	; 0x157aa <strtol+0x212>
   1578a:	90 95       	com	r25
   1578c:	80 95       	com	r24
   1578e:	70 95       	com	r23
   15790:	61 95       	neg	r22
   15792:	7f 4f       	sbci	r23, 0xFF	; 255
   15794:	8f 4f       	sbci	r24, 0xFF	; 255
   15796:	9f 4f       	sbci	r25, 0xFF	; 255
   15798:	46 2f       	mov	r20, r22
   1579a:	37 2f       	mov	r19, r23
   1579c:	28 2f       	mov	r18, r24
   1579e:	12 c0       	rjmp	.+36     	; 0x157c4 <strtol+0x22c>
   157a0:	40 e0       	ldi	r20, 0x00	; 0
   157a2:	30 e0       	ldi	r19, 0x00	; 0
   157a4:	20 e0       	ldi	r18, 0x00	; 0
   157a6:	90 e0       	ldi	r25, 0x00	; 0
   157a8:	0d c0       	rjmp	.+26     	; 0x157c4 <strtol+0x22c>
   157aa:	97 ff       	sbrs	r25, 7
   157ac:	f5 cf       	rjmp	.-22     	; 0x15798 <strtol+0x200>
   157ae:	82 e2       	ldi	r24, 0x22	; 34
   157b0:	90 e0       	ldi	r25, 0x00	; 0
   157b2:	90 93 1b 18 	sts	0x181B, r25	; 0x80181b <errno+0x1>
   157b6:	80 93 1a 18 	sts	0x181A, r24	; 0x80181a <errno>
   157ba:	6f ef       	ldi	r22, 0xFF	; 255
   157bc:	7f ef       	ldi	r23, 0xFF	; 255
   157be:	8f ef       	ldi	r24, 0xFF	; 255
   157c0:	9f e7       	ldi	r25, 0x7F	; 127
   157c2:	ea cf       	rjmp	.-44     	; 0x15798 <strtol+0x200>
   157c4:	64 2f       	mov	r22, r20
   157c6:	73 2f       	mov	r23, r19
   157c8:	82 2f       	mov	r24, r18
   157ca:	df 91       	pop	r29
   157cc:	cf 91       	pop	r28
   157ce:	1f 91       	pop	r17
   157d0:	0f 91       	pop	r16
   157d2:	ff 90       	pop	r15
   157d4:	ef 90       	pop	r14
   157d6:	df 90       	pop	r13
   157d8:	cf 90       	pop	r12
   157da:	bf 90       	pop	r11
   157dc:	af 90       	pop	r10
   157de:	9f 90       	pop	r9
   157e0:	8f 90       	pop	r8
   157e2:	7f 90       	pop	r7
   157e4:	6f 90       	pop	r6
   157e6:	5f 90       	pop	r5
   157e8:	4f 90       	pop	r4
   157ea:	3f 90       	pop	r3
   157ec:	08 95       	ret

000157ee <isspace>:
   157ee:	91 11       	cpse	r25, r1
   157f0:	8b c5       	rjmp	.+2838   	; 0x16308 <__ctype_isfalse>
   157f2:	80 32       	cpi	r24, 0x20	; 32
   157f4:	19 f0       	breq	.+6      	; 0x157fc <isspace+0xe>
   157f6:	89 50       	subi	r24, 0x09	; 9
   157f8:	85 50       	subi	r24, 0x05	; 5
   157fa:	d0 f7       	brcc	.-12     	; 0x157f0 <isspace+0x2>
   157fc:	08 95       	ret

000157fe <strncasecmp_P>:
   157fe:	fb 01       	movw	r30, r22
   15800:	dc 01       	movw	r26, r24
   15802:	41 50       	subi	r20, 0x01	; 1
   15804:	50 40       	sbci	r21, 0x00	; 0
   15806:	88 f0       	brcs	.+34     	; 0x1582a <strncasecmp_P+0x2c>
   15808:	8d 91       	ld	r24, X+
   1580a:	81 34       	cpi	r24, 0x41	; 65
   1580c:	1c f0       	brlt	.+6      	; 0x15814 <strncasecmp_P+0x16>
   1580e:	8b 35       	cpi	r24, 0x5B	; 91
   15810:	0c f4       	brge	.+2      	; 0x15814 <strncasecmp_P+0x16>
   15812:	80 5e       	subi	r24, 0xE0	; 224
   15814:	65 91       	lpm	r22, Z+
   15816:	61 34       	cpi	r22, 0x41	; 65
   15818:	1c f0       	brlt	.+6      	; 0x15820 <strncasecmp_P+0x22>
   1581a:	6b 35       	cpi	r22, 0x5B	; 91
   1581c:	0c f4       	brge	.+2      	; 0x15820 <strncasecmp_P+0x22>
   1581e:	60 5e       	subi	r22, 0xE0	; 224
   15820:	86 1b       	sub	r24, r22
   15822:	61 11       	cpse	r22, r1
   15824:	71 f3       	breq	.-36     	; 0x15802 <strncasecmp_P+0x4>
   15826:	99 0b       	sbc	r25, r25
   15828:	08 95       	ret
   1582a:	88 1b       	sub	r24, r24
   1582c:	fc cf       	rjmp	.-8      	; 0x15826 <strncasecmp_P+0x28>

0001582e <strstr_P>:
   1582e:	fb 01       	movw	r30, r22
   15830:	55 91       	lpm	r21, Z+
   15832:	55 23       	and	r21, r21
   15834:	a9 f0       	breq	.+42     	; 0x15860 <strstr_P+0x32>
   15836:	bf 01       	movw	r22, r30
   15838:	dc 01       	movw	r26, r24
   1583a:	4d 91       	ld	r20, X+
   1583c:	45 17       	cp	r20, r21
   1583e:	41 11       	cpse	r20, r1
   15840:	e1 f7       	brne	.-8      	; 0x1583a <strstr_P+0xc>
   15842:	59 f4       	brne	.+22     	; 0x1585a <strstr_P+0x2c>
   15844:	cd 01       	movw	r24, r26
   15846:	05 90       	lpm	r0, Z+
   15848:	00 20       	and	r0, r0
   1584a:	49 f0       	breq	.+18     	; 0x1585e <strstr_P+0x30>
   1584c:	4d 91       	ld	r20, X+
   1584e:	40 15       	cp	r20, r0
   15850:	41 11       	cpse	r20, r1
   15852:	c9 f3       	breq	.-14     	; 0x15846 <strstr_P+0x18>
   15854:	fb 01       	movw	r30, r22
   15856:	41 11       	cpse	r20, r1
   15858:	ef cf       	rjmp	.-34     	; 0x15838 <strstr_P+0xa>
   1585a:	81 e0       	ldi	r24, 0x01	; 1
   1585c:	90 e0       	ldi	r25, 0x00	; 0
   1585e:	01 97       	sbiw	r24, 0x01	; 1
   15860:	08 95       	ret

00015862 <memcpy>:
   15862:	fb 01       	movw	r30, r22
   15864:	dc 01       	movw	r26, r24
   15866:	02 c0       	rjmp	.+4      	; 0x1586c <memcpy+0xa>
   15868:	01 90       	ld	r0, Z+
   1586a:	0d 92       	st	X+, r0
   1586c:	41 50       	subi	r20, 0x01	; 1
   1586e:	50 40       	sbci	r21, 0x00	; 0
   15870:	d8 f7       	brcc	.-10     	; 0x15868 <memcpy+0x6>
   15872:	08 95       	ret

00015874 <strchr>:
   15874:	fc 01       	movw	r30, r24
   15876:	81 91       	ld	r24, Z+
   15878:	86 17       	cp	r24, r22
   1587a:	21 f0       	breq	.+8      	; 0x15884 <strchr+0x10>
   1587c:	88 23       	and	r24, r24
   1587e:	d9 f7       	brne	.-10     	; 0x15876 <strchr+0x2>
   15880:	99 27       	eor	r25, r25
   15882:	08 95       	ret
   15884:	31 97       	sbiw	r30, 0x01	; 1
   15886:	cf 01       	movw	r24, r30
   15888:	08 95       	ret

0001588a <strcpy>:
   1588a:	fb 01       	movw	r30, r22
   1588c:	dc 01       	movw	r26, r24
   1588e:	01 90       	ld	r0, Z+
   15890:	0d 92       	st	X+, r0
   15892:	00 20       	and	r0, r0
   15894:	e1 f7       	brne	.-8      	; 0x1588e <strcpy+0x4>
   15896:	08 95       	ret

00015898 <__itoa_ncheck>:
   15898:	bb 27       	eor	r27, r27
   1589a:	4a 30       	cpi	r20, 0x0A	; 10
   1589c:	31 f4       	brne	.+12     	; 0x158aa <__itoa_ncheck+0x12>
   1589e:	99 23       	and	r25, r25
   158a0:	22 f4       	brpl	.+8      	; 0x158aa <__itoa_ncheck+0x12>
   158a2:	bd e2       	ldi	r27, 0x2D	; 45
   158a4:	90 95       	com	r25
   158a6:	81 95       	neg	r24
   158a8:	9f 4f       	sbci	r25, 0xFF	; 255
   158aa:	01 c0       	rjmp	.+2      	; 0x158ae <__utoa_common>

000158ac <__utoa_ncheck>:
   158ac:	bb 27       	eor	r27, r27

000158ae <__utoa_common>:
   158ae:	fb 01       	movw	r30, r22
   158b0:	55 27       	eor	r21, r21
   158b2:	aa 27       	eor	r26, r26
   158b4:	88 0f       	add	r24, r24
   158b6:	99 1f       	adc	r25, r25
   158b8:	aa 1f       	adc	r26, r26
   158ba:	a4 17       	cp	r26, r20
   158bc:	10 f0       	brcs	.+4      	; 0x158c2 <__utoa_common+0x14>
   158be:	a4 1b       	sub	r26, r20
   158c0:	83 95       	inc	r24
   158c2:	50 51       	subi	r21, 0x10	; 16
   158c4:	b9 f7       	brne	.-18     	; 0x158b4 <__utoa_common+0x6>
   158c6:	a0 5d       	subi	r26, 0xD0	; 208
   158c8:	aa 33       	cpi	r26, 0x3A	; 58
   158ca:	08 f0       	brcs	.+2      	; 0x158ce <__utoa_common+0x20>
   158cc:	a9 5d       	subi	r26, 0xD9	; 217
   158ce:	a1 93       	st	Z+, r26
   158d0:	00 97       	sbiw	r24, 0x00	; 0
   158d2:	79 f7       	brne	.-34     	; 0x158b2 <__utoa_common+0x4>
   158d4:	b1 11       	cpse	r27, r1
   158d6:	b1 93       	st	Z+, r27
   158d8:	11 92       	st	Z+, r1
   158da:	cb 01       	movw	r24, r22
   158dc:	39 c5       	rjmp	.+2674   	; 0x16350 <strrev>

000158de <sprintf>:
   158de:	0f 93       	push	r16
   158e0:	1f 93       	push	r17
   158e2:	cf 93       	push	r28
   158e4:	df 93       	push	r29
   158e6:	cd b7       	in	r28, 0x3d	; 61
   158e8:	de b7       	in	r29, 0x3e	; 62
   158ea:	2e 97       	sbiw	r28, 0x0e	; 14
   158ec:	0f b6       	in	r0, 0x3f	; 63
   158ee:	f8 94       	cli
   158f0:	de bf       	out	0x3e, r29	; 62
   158f2:	0f be       	out	0x3f, r0	; 63
   158f4:	cd bf       	out	0x3d, r28	; 61
   158f6:	0e 89       	ldd	r16, Y+22	; 0x16
   158f8:	1f 89       	ldd	r17, Y+23	; 0x17
   158fa:	86 e0       	ldi	r24, 0x06	; 6
   158fc:	8c 83       	std	Y+4, r24	; 0x04
   158fe:	1a 83       	std	Y+2, r17	; 0x02
   15900:	09 83       	std	Y+1, r16	; 0x01
   15902:	8f ef       	ldi	r24, 0xFF	; 255
   15904:	9f e7       	ldi	r25, 0x7F	; 127
   15906:	9e 83       	std	Y+6, r25	; 0x06
   15908:	8d 83       	std	Y+5, r24	; 0x05
   1590a:	ae 01       	movw	r20, r28
   1590c:	46 5e       	subi	r20, 0xE6	; 230
   1590e:	5f 4f       	sbci	r21, 0xFF	; 255
   15910:	68 8d       	ldd	r22, Y+24	; 0x18
   15912:	79 8d       	ldd	r23, Y+25	; 0x19
   15914:	ce 01       	movw	r24, r28
   15916:	01 96       	adiw	r24, 0x01	; 1
   15918:	31 d0       	rcall	.+98     	; 0x1597c <vfprintf>
   1591a:	ef 81       	ldd	r30, Y+7	; 0x07
   1591c:	f8 85       	ldd	r31, Y+8	; 0x08
   1591e:	e0 0f       	add	r30, r16
   15920:	f1 1f       	adc	r31, r17
   15922:	10 82       	st	Z, r1
   15924:	2e 96       	adiw	r28, 0x0e	; 14
   15926:	0f b6       	in	r0, 0x3f	; 63
   15928:	f8 94       	cli
   1592a:	de bf       	out	0x3e, r29	; 62
   1592c:	0f be       	out	0x3f, r0	; 63
   1592e:	cd bf       	out	0x3d, r28	; 61
   15930:	df 91       	pop	r29
   15932:	cf 91       	pop	r28
   15934:	1f 91       	pop	r17
   15936:	0f 91       	pop	r16
   15938:	08 95       	ret

0001593a <sscanf>:
   1593a:	cf 93       	push	r28
   1593c:	df 93       	push	r29
   1593e:	cd b7       	in	r28, 0x3d	; 61
   15940:	de b7       	in	r29, 0x3e	; 62
   15942:	2e 97       	sbiw	r28, 0x0e	; 14
   15944:	0f b6       	in	r0, 0x3f	; 63
   15946:	f8 94       	cli
   15948:	de bf       	out	0x3e, r29	; 62
   1594a:	0f be       	out	0x3f, r0	; 63
   1594c:	cd bf       	out	0x3d, r28	; 61
   1594e:	85 e0       	ldi	r24, 0x05	; 5
   15950:	8c 83       	std	Y+4, r24	; 0x04
   15952:	8c 89       	ldd	r24, Y+20	; 0x14
   15954:	9d 89       	ldd	r25, Y+21	; 0x15
   15956:	9a 83       	std	Y+2, r25	; 0x02
   15958:	89 83       	std	Y+1, r24	; 0x01
   1595a:	ae 01       	movw	r20, r28
   1595c:	48 5e       	subi	r20, 0xE8	; 232
   1595e:	5f 4f       	sbci	r21, 0xFF	; 255
   15960:	6e 89       	ldd	r22, Y+22	; 0x16
   15962:	7f 89       	ldd	r23, Y+23	; 0x17
   15964:	ce 01       	movw	r24, r28
   15966:	01 96       	adiw	r24, 0x01	; 1
   15968:	b8 d3       	rcall	.+1904   	; 0x160da <vfscanf>
   1596a:	2e 96       	adiw	r28, 0x0e	; 14
   1596c:	0f b6       	in	r0, 0x3f	; 63
   1596e:	f8 94       	cli
   15970:	de bf       	out	0x3e, r29	; 62
   15972:	0f be       	out	0x3f, r0	; 63
   15974:	cd bf       	out	0x3d, r28	; 61
   15976:	df 91       	pop	r29
   15978:	cf 91       	pop	r28
   1597a:	08 95       	ret

0001597c <vfprintf>:
   1597c:	2f 92       	push	r2
   1597e:	3f 92       	push	r3
   15980:	4f 92       	push	r4
   15982:	5f 92       	push	r5
   15984:	6f 92       	push	r6
   15986:	7f 92       	push	r7
   15988:	8f 92       	push	r8
   1598a:	9f 92       	push	r9
   1598c:	af 92       	push	r10
   1598e:	bf 92       	push	r11
   15990:	cf 92       	push	r12
   15992:	df 92       	push	r13
   15994:	ef 92       	push	r14
   15996:	ff 92       	push	r15
   15998:	0f 93       	push	r16
   1599a:	1f 93       	push	r17
   1599c:	cf 93       	push	r28
   1599e:	df 93       	push	r29
   159a0:	cd b7       	in	r28, 0x3d	; 61
   159a2:	de b7       	in	r29, 0x3e	; 62
   159a4:	2b 97       	sbiw	r28, 0x0b	; 11
   159a6:	0f b6       	in	r0, 0x3f	; 63
   159a8:	f8 94       	cli
   159aa:	de bf       	out	0x3e, r29	; 62
   159ac:	0f be       	out	0x3f, r0	; 63
   159ae:	cd bf       	out	0x3d, r28	; 61
   159b0:	6c 01       	movw	r12, r24
   159b2:	7b 01       	movw	r14, r22
   159b4:	8a 01       	movw	r16, r20
   159b6:	fc 01       	movw	r30, r24
   159b8:	17 82       	std	Z+7, r1	; 0x07
   159ba:	16 82       	std	Z+6, r1	; 0x06
   159bc:	83 81       	ldd	r24, Z+3	; 0x03
   159be:	81 ff       	sbrs	r24, 1
   159c0:	bf c1       	rjmp	.+894    	; 0x15d40 <vfprintf+0x3c4>
   159c2:	ce 01       	movw	r24, r28
   159c4:	01 96       	adiw	r24, 0x01	; 1
   159c6:	3c 01       	movw	r6, r24
   159c8:	f6 01       	movw	r30, r12
   159ca:	93 81       	ldd	r25, Z+3	; 0x03
   159cc:	f7 01       	movw	r30, r14
   159ce:	93 fd       	sbrc	r25, 3
   159d0:	85 91       	lpm	r24, Z+
   159d2:	93 ff       	sbrs	r25, 3
   159d4:	81 91       	ld	r24, Z+
   159d6:	7f 01       	movw	r14, r30
   159d8:	88 23       	and	r24, r24
   159da:	09 f4       	brne	.+2      	; 0x159de <vfprintf+0x62>
   159dc:	ad c1       	rjmp	.+858    	; 0x15d38 <vfprintf+0x3bc>
   159de:	85 32       	cpi	r24, 0x25	; 37
   159e0:	39 f4       	brne	.+14     	; 0x159f0 <vfprintf+0x74>
   159e2:	93 fd       	sbrc	r25, 3
   159e4:	85 91       	lpm	r24, Z+
   159e6:	93 ff       	sbrs	r25, 3
   159e8:	81 91       	ld	r24, Z+
   159ea:	7f 01       	movw	r14, r30
   159ec:	85 32       	cpi	r24, 0x25	; 37
   159ee:	21 f4       	brne	.+8      	; 0x159f8 <vfprintf+0x7c>
   159f0:	b6 01       	movw	r22, r12
   159f2:	90 e0       	ldi	r25, 0x00	; 0
   159f4:	fb d4       	rcall	.+2550   	; 0x163ec <fputc>
   159f6:	e8 cf       	rjmp	.-48     	; 0x159c8 <vfprintf+0x4c>
   159f8:	91 2c       	mov	r9, r1
   159fa:	21 2c       	mov	r2, r1
   159fc:	31 2c       	mov	r3, r1
   159fe:	ff e1       	ldi	r31, 0x1F	; 31
   15a00:	f3 15       	cp	r31, r3
   15a02:	d8 f0       	brcs	.+54     	; 0x15a3a <vfprintf+0xbe>
   15a04:	8b 32       	cpi	r24, 0x2B	; 43
   15a06:	79 f0       	breq	.+30     	; 0x15a26 <vfprintf+0xaa>
   15a08:	38 f4       	brcc	.+14     	; 0x15a18 <vfprintf+0x9c>
   15a0a:	80 32       	cpi	r24, 0x20	; 32
   15a0c:	79 f0       	breq	.+30     	; 0x15a2c <vfprintf+0xb0>
   15a0e:	83 32       	cpi	r24, 0x23	; 35
   15a10:	a1 f4       	brne	.+40     	; 0x15a3a <vfprintf+0xbe>
   15a12:	23 2d       	mov	r18, r3
   15a14:	20 61       	ori	r18, 0x10	; 16
   15a16:	1d c0       	rjmp	.+58     	; 0x15a52 <vfprintf+0xd6>
   15a18:	8d 32       	cpi	r24, 0x2D	; 45
   15a1a:	61 f0       	breq	.+24     	; 0x15a34 <vfprintf+0xb8>
   15a1c:	80 33       	cpi	r24, 0x30	; 48
   15a1e:	69 f4       	brne	.+26     	; 0x15a3a <vfprintf+0xbe>
   15a20:	23 2d       	mov	r18, r3
   15a22:	21 60       	ori	r18, 0x01	; 1
   15a24:	16 c0       	rjmp	.+44     	; 0x15a52 <vfprintf+0xd6>
   15a26:	83 2d       	mov	r24, r3
   15a28:	82 60       	ori	r24, 0x02	; 2
   15a2a:	38 2e       	mov	r3, r24
   15a2c:	e3 2d       	mov	r30, r3
   15a2e:	e4 60       	ori	r30, 0x04	; 4
   15a30:	3e 2e       	mov	r3, r30
   15a32:	2a c0       	rjmp	.+84     	; 0x15a88 <vfprintf+0x10c>
   15a34:	f3 2d       	mov	r31, r3
   15a36:	f8 60       	ori	r31, 0x08	; 8
   15a38:	1d c0       	rjmp	.+58     	; 0x15a74 <vfprintf+0xf8>
   15a3a:	37 fc       	sbrc	r3, 7
   15a3c:	2d c0       	rjmp	.+90     	; 0x15a98 <vfprintf+0x11c>
   15a3e:	20 ed       	ldi	r18, 0xD0	; 208
   15a40:	28 0f       	add	r18, r24
   15a42:	2a 30       	cpi	r18, 0x0A	; 10
   15a44:	40 f0       	brcs	.+16     	; 0x15a56 <vfprintf+0xda>
   15a46:	8e 32       	cpi	r24, 0x2E	; 46
   15a48:	b9 f4       	brne	.+46     	; 0x15a78 <vfprintf+0xfc>
   15a4a:	36 fc       	sbrc	r3, 6
   15a4c:	75 c1       	rjmp	.+746    	; 0x15d38 <vfprintf+0x3bc>
   15a4e:	23 2d       	mov	r18, r3
   15a50:	20 64       	ori	r18, 0x40	; 64
   15a52:	32 2e       	mov	r3, r18
   15a54:	19 c0       	rjmp	.+50     	; 0x15a88 <vfprintf+0x10c>
   15a56:	36 fe       	sbrs	r3, 6
   15a58:	06 c0       	rjmp	.+12     	; 0x15a66 <vfprintf+0xea>
   15a5a:	8a e0       	ldi	r24, 0x0A	; 10
   15a5c:	98 9e       	mul	r9, r24
   15a5e:	20 0d       	add	r18, r0
   15a60:	11 24       	eor	r1, r1
   15a62:	92 2e       	mov	r9, r18
   15a64:	11 c0       	rjmp	.+34     	; 0x15a88 <vfprintf+0x10c>
   15a66:	ea e0       	ldi	r30, 0x0A	; 10
   15a68:	2e 9e       	mul	r2, r30
   15a6a:	20 0d       	add	r18, r0
   15a6c:	11 24       	eor	r1, r1
   15a6e:	22 2e       	mov	r2, r18
   15a70:	f3 2d       	mov	r31, r3
   15a72:	f0 62       	ori	r31, 0x20	; 32
   15a74:	3f 2e       	mov	r3, r31
   15a76:	08 c0       	rjmp	.+16     	; 0x15a88 <vfprintf+0x10c>
   15a78:	8c 36       	cpi	r24, 0x6C	; 108
   15a7a:	21 f4       	brne	.+8      	; 0x15a84 <vfprintf+0x108>
   15a7c:	83 2d       	mov	r24, r3
   15a7e:	80 68       	ori	r24, 0x80	; 128
   15a80:	38 2e       	mov	r3, r24
   15a82:	02 c0       	rjmp	.+4      	; 0x15a88 <vfprintf+0x10c>
   15a84:	88 36       	cpi	r24, 0x68	; 104
   15a86:	41 f4       	brne	.+16     	; 0x15a98 <vfprintf+0x11c>
   15a88:	f7 01       	movw	r30, r14
   15a8a:	93 fd       	sbrc	r25, 3
   15a8c:	85 91       	lpm	r24, Z+
   15a8e:	93 ff       	sbrs	r25, 3
   15a90:	81 91       	ld	r24, Z+
   15a92:	7f 01       	movw	r14, r30
   15a94:	81 11       	cpse	r24, r1
   15a96:	b3 cf       	rjmp	.-154    	; 0x159fe <vfprintf+0x82>
   15a98:	98 2f       	mov	r25, r24
   15a9a:	9f 7d       	andi	r25, 0xDF	; 223
   15a9c:	95 54       	subi	r25, 0x45	; 69
   15a9e:	93 30       	cpi	r25, 0x03	; 3
   15aa0:	28 f4       	brcc	.+10     	; 0x15aac <vfprintf+0x130>
   15aa2:	0c 5f       	subi	r16, 0xFC	; 252
   15aa4:	1f 4f       	sbci	r17, 0xFF	; 255
   15aa6:	9f e3       	ldi	r25, 0x3F	; 63
   15aa8:	99 83       	std	Y+1, r25	; 0x01
   15aaa:	0d c0       	rjmp	.+26     	; 0x15ac6 <vfprintf+0x14a>
   15aac:	83 36       	cpi	r24, 0x63	; 99
   15aae:	31 f0       	breq	.+12     	; 0x15abc <vfprintf+0x140>
   15ab0:	83 37       	cpi	r24, 0x73	; 115
   15ab2:	71 f0       	breq	.+28     	; 0x15ad0 <vfprintf+0x154>
   15ab4:	83 35       	cpi	r24, 0x53	; 83
   15ab6:	09 f0       	breq	.+2      	; 0x15aba <vfprintf+0x13e>
   15ab8:	55 c0       	rjmp	.+170    	; 0x15b64 <vfprintf+0x1e8>
   15aba:	20 c0       	rjmp	.+64     	; 0x15afc <vfprintf+0x180>
   15abc:	f8 01       	movw	r30, r16
   15abe:	80 81       	ld	r24, Z
   15ac0:	89 83       	std	Y+1, r24	; 0x01
   15ac2:	0e 5f       	subi	r16, 0xFE	; 254
   15ac4:	1f 4f       	sbci	r17, 0xFF	; 255
   15ac6:	88 24       	eor	r8, r8
   15ac8:	83 94       	inc	r8
   15aca:	91 2c       	mov	r9, r1
   15acc:	53 01       	movw	r10, r6
   15ace:	12 c0       	rjmp	.+36     	; 0x15af4 <vfprintf+0x178>
   15ad0:	28 01       	movw	r4, r16
   15ad2:	f2 e0       	ldi	r31, 0x02	; 2
   15ad4:	4f 0e       	add	r4, r31
   15ad6:	51 1c       	adc	r5, r1
   15ad8:	f8 01       	movw	r30, r16
   15ada:	a0 80       	ld	r10, Z
   15adc:	b1 80       	ldd	r11, Z+1	; 0x01
   15ade:	36 fe       	sbrs	r3, 6
   15ae0:	03 c0       	rjmp	.+6      	; 0x15ae8 <vfprintf+0x16c>
   15ae2:	69 2d       	mov	r22, r9
   15ae4:	70 e0       	ldi	r23, 0x00	; 0
   15ae6:	02 c0       	rjmp	.+4      	; 0x15aec <vfprintf+0x170>
   15ae8:	6f ef       	ldi	r22, 0xFF	; 255
   15aea:	7f ef       	ldi	r23, 0xFF	; 255
   15aec:	c5 01       	movw	r24, r10
   15aee:	25 d4       	rcall	.+2122   	; 0x1633a <strnlen>
   15af0:	4c 01       	movw	r8, r24
   15af2:	82 01       	movw	r16, r4
   15af4:	f3 2d       	mov	r31, r3
   15af6:	ff 77       	andi	r31, 0x7F	; 127
   15af8:	3f 2e       	mov	r3, r31
   15afa:	15 c0       	rjmp	.+42     	; 0x15b26 <vfprintf+0x1aa>
   15afc:	28 01       	movw	r4, r16
   15afe:	22 e0       	ldi	r18, 0x02	; 2
   15b00:	42 0e       	add	r4, r18
   15b02:	51 1c       	adc	r5, r1
   15b04:	f8 01       	movw	r30, r16
   15b06:	a0 80       	ld	r10, Z
   15b08:	b1 80       	ldd	r11, Z+1	; 0x01
   15b0a:	36 fe       	sbrs	r3, 6
   15b0c:	03 c0       	rjmp	.+6      	; 0x15b14 <vfprintf+0x198>
   15b0e:	69 2d       	mov	r22, r9
   15b10:	70 e0       	ldi	r23, 0x00	; 0
   15b12:	02 c0       	rjmp	.+4      	; 0x15b18 <vfprintf+0x19c>
   15b14:	6f ef       	ldi	r22, 0xFF	; 255
   15b16:	7f ef       	ldi	r23, 0xFF	; 255
   15b18:	c5 01       	movw	r24, r10
   15b1a:	04 d4       	rcall	.+2056   	; 0x16324 <strnlen_P>
   15b1c:	4c 01       	movw	r8, r24
   15b1e:	f3 2d       	mov	r31, r3
   15b20:	f0 68       	ori	r31, 0x80	; 128
   15b22:	3f 2e       	mov	r3, r31
   15b24:	82 01       	movw	r16, r4
   15b26:	33 fc       	sbrc	r3, 3
   15b28:	19 c0       	rjmp	.+50     	; 0x15b5c <vfprintf+0x1e0>
   15b2a:	82 2d       	mov	r24, r2
   15b2c:	90 e0       	ldi	r25, 0x00	; 0
   15b2e:	88 16       	cp	r8, r24
   15b30:	99 06       	cpc	r9, r25
   15b32:	a0 f4       	brcc	.+40     	; 0x15b5c <vfprintf+0x1e0>
   15b34:	b6 01       	movw	r22, r12
   15b36:	80 e2       	ldi	r24, 0x20	; 32
   15b38:	90 e0       	ldi	r25, 0x00	; 0
   15b3a:	58 d4       	rcall	.+2224   	; 0x163ec <fputc>
   15b3c:	2a 94       	dec	r2
   15b3e:	f5 cf       	rjmp	.-22     	; 0x15b2a <vfprintf+0x1ae>
   15b40:	f5 01       	movw	r30, r10
   15b42:	37 fc       	sbrc	r3, 7
   15b44:	85 91       	lpm	r24, Z+
   15b46:	37 fe       	sbrs	r3, 7
   15b48:	81 91       	ld	r24, Z+
   15b4a:	5f 01       	movw	r10, r30
   15b4c:	b6 01       	movw	r22, r12
   15b4e:	90 e0       	ldi	r25, 0x00	; 0
   15b50:	4d d4       	rcall	.+2202   	; 0x163ec <fputc>
   15b52:	21 10       	cpse	r2, r1
   15b54:	2a 94       	dec	r2
   15b56:	21 e0       	ldi	r18, 0x01	; 1
   15b58:	82 1a       	sub	r8, r18
   15b5a:	91 08       	sbc	r9, r1
   15b5c:	81 14       	cp	r8, r1
   15b5e:	91 04       	cpc	r9, r1
   15b60:	79 f7       	brne	.-34     	; 0x15b40 <vfprintf+0x1c4>
   15b62:	e1 c0       	rjmp	.+450    	; 0x15d26 <vfprintf+0x3aa>
   15b64:	84 36       	cpi	r24, 0x64	; 100
   15b66:	11 f0       	breq	.+4      	; 0x15b6c <vfprintf+0x1f0>
   15b68:	89 36       	cpi	r24, 0x69	; 105
   15b6a:	39 f5       	brne	.+78     	; 0x15bba <vfprintf+0x23e>
   15b6c:	f8 01       	movw	r30, r16
   15b6e:	37 fe       	sbrs	r3, 7
   15b70:	07 c0       	rjmp	.+14     	; 0x15b80 <vfprintf+0x204>
   15b72:	60 81       	ld	r22, Z
   15b74:	71 81       	ldd	r23, Z+1	; 0x01
   15b76:	82 81       	ldd	r24, Z+2	; 0x02
   15b78:	93 81       	ldd	r25, Z+3	; 0x03
   15b7a:	0c 5f       	subi	r16, 0xFC	; 252
   15b7c:	1f 4f       	sbci	r17, 0xFF	; 255
   15b7e:	08 c0       	rjmp	.+16     	; 0x15b90 <vfprintf+0x214>
   15b80:	60 81       	ld	r22, Z
   15b82:	71 81       	ldd	r23, Z+1	; 0x01
   15b84:	07 2e       	mov	r0, r23
   15b86:	00 0c       	add	r0, r0
   15b88:	88 0b       	sbc	r24, r24
   15b8a:	99 0b       	sbc	r25, r25
   15b8c:	0e 5f       	subi	r16, 0xFE	; 254
   15b8e:	1f 4f       	sbci	r17, 0xFF	; 255
   15b90:	f3 2d       	mov	r31, r3
   15b92:	ff 76       	andi	r31, 0x6F	; 111
   15b94:	3f 2e       	mov	r3, r31
   15b96:	97 ff       	sbrs	r25, 7
   15b98:	09 c0       	rjmp	.+18     	; 0x15bac <vfprintf+0x230>
   15b9a:	90 95       	com	r25
   15b9c:	80 95       	com	r24
   15b9e:	70 95       	com	r23
   15ba0:	61 95       	neg	r22
   15ba2:	7f 4f       	sbci	r23, 0xFF	; 255
   15ba4:	8f 4f       	sbci	r24, 0xFF	; 255
   15ba6:	9f 4f       	sbci	r25, 0xFF	; 255
   15ba8:	f0 68       	ori	r31, 0x80	; 128
   15baa:	3f 2e       	mov	r3, r31
   15bac:	2a e0       	ldi	r18, 0x0A	; 10
   15bae:	30 e0       	ldi	r19, 0x00	; 0
   15bb0:	a3 01       	movw	r20, r6
   15bb2:	71 d4       	rcall	.+2274   	; 0x16496 <__ultoa_invert>
   15bb4:	88 2e       	mov	r8, r24
   15bb6:	86 18       	sub	r8, r6
   15bb8:	44 c0       	rjmp	.+136    	; 0x15c42 <vfprintf+0x2c6>
   15bba:	85 37       	cpi	r24, 0x75	; 117
   15bbc:	31 f4       	brne	.+12     	; 0x15bca <vfprintf+0x24e>
   15bbe:	23 2d       	mov	r18, r3
   15bc0:	2f 7e       	andi	r18, 0xEF	; 239
   15bc2:	b2 2e       	mov	r11, r18
   15bc4:	2a e0       	ldi	r18, 0x0A	; 10
   15bc6:	30 e0       	ldi	r19, 0x00	; 0
   15bc8:	25 c0       	rjmp	.+74     	; 0x15c14 <vfprintf+0x298>
   15bca:	93 2d       	mov	r25, r3
   15bcc:	99 7f       	andi	r25, 0xF9	; 249
   15bce:	b9 2e       	mov	r11, r25
   15bd0:	8f 36       	cpi	r24, 0x6F	; 111
   15bd2:	c1 f0       	breq	.+48     	; 0x15c04 <vfprintf+0x288>
   15bd4:	18 f4       	brcc	.+6      	; 0x15bdc <vfprintf+0x260>
   15bd6:	88 35       	cpi	r24, 0x58	; 88
   15bd8:	79 f0       	breq	.+30     	; 0x15bf8 <vfprintf+0x27c>
   15bda:	ae c0       	rjmp	.+348    	; 0x15d38 <vfprintf+0x3bc>
   15bdc:	80 37       	cpi	r24, 0x70	; 112
   15bde:	19 f0       	breq	.+6      	; 0x15be6 <vfprintf+0x26a>
   15be0:	88 37       	cpi	r24, 0x78	; 120
   15be2:	21 f0       	breq	.+8      	; 0x15bec <vfprintf+0x270>
   15be4:	a9 c0       	rjmp	.+338    	; 0x15d38 <vfprintf+0x3bc>
   15be6:	e9 2f       	mov	r30, r25
   15be8:	e0 61       	ori	r30, 0x10	; 16
   15bea:	be 2e       	mov	r11, r30
   15bec:	b4 fe       	sbrs	r11, 4
   15bee:	0d c0       	rjmp	.+26     	; 0x15c0a <vfprintf+0x28e>
   15bf0:	fb 2d       	mov	r31, r11
   15bf2:	f4 60       	ori	r31, 0x04	; 4
   15bf4:	bf 2e       	mov	r11, r31
   15bf6:	09 c0       	rjmp	.+18     	; 0x15c0a <vfprintf+0x28e>
   15bf8:	34 fe       	sbrs	r3, 4
   15bfa:	0a c0       	rjmp	.+20     	; 0x15c10 <vfprintf+0x294>
   15bfc:	29 2f       	mov	r18, r25
   15bfe:	26 60       	ori	r18, 0x06	; 6
   15c00:	b2 2e       	mov	r11, r18
   15c02:	06 c0       	rjmp	.+12     	; 0x15c10 <vfprintf+0x294>
   15c04:	28 e0       	ldi	r18, 0x08	; 8
   15c06:	30 e0       	ldi	r19, 0x00	; 0
   15c08:	05 c0       	rjmp	.+10     	; 0x15c14 <vfprintf+0x298>
   15c0a:	20 e1       	ldi	r18, 0x10	; 16
   15c0c:	30 e0       	ldi	r19, 0x00	; 0
   15c0e:	02 c0       	rjmp	.+4      	; 0x15c14 <vfprintf+0x298>
   15c10:	20 e1       	ldi	r18, 0x10	; 16
   15c12:	32 e0       	ldi	r19, 0x02	; 2
   15c14:	f8 01       	movw	r30, r16
   15c16:	b7 fe       	sbrs	r11, 7
   15c18:	07 c0       	rjmp	.+14     	; 0x15c28 <vfprintf+0x2ac>
   15c1a:	60 81       	ld	r22, Z
   15c1c:	71 81       	ldd	r23, Z+1	; 0x01
   15c1e:	82 81       	ldd	r24, Z+2	; 0x02
   15c20:	93 81       	ldd	r25, Z+3	; 0x03
   15c22:	0c 5f       	subi	r16, 0xFC	; 252
   15c24:	1f 4f       	sbci	r17, 0xFF	; 255
   15c26:	06 c0       	rjmp	.+12     	; 0x15c34 <vfprintf+0x2b8>
   15c28:	60 81       	ld	r22, Z
   15c2a:	71 81       	ldd	r23, Z+1	; 0x01
   15c2c:	80 e0       	ldi	r24, 0x00	; 0
   15c2e:	90 e0       	ldi	r25, 0x00	; 0
   15c30:	0e 5f       	subi	r16, 0xFE	; 254
   15c32:	1f 4f       	sbci	r17, 0xFF	; 255
   15c34:	a3 01       	movw	r20, r6
   15c36:	2f d4       	rcall	.+2142   	; 0x16496 <__ultoa_invert>
   15c38:	88 2e       	mov	r8, r24
   15c3a:	86 18       	sub	r8, r6
   15c3c:	fb 2d       	mov	r31, r11
   15c3e:	ff 77       	andi	r31, 0x7F	; 127
   15c40:	3f 2e       	mov	r3, r31
   15c42:	36 fe       	sbrs	r3, 6
   15c44:	0d c0       	rjmp	.+26     	; 0x15c60 <vfprintf+0x2e4>
   15c46:	23 2d       	mov	r18, r3
   15c48:	2e 7f       	andi	r18, 0xFE	; 254
   15c4a:	a2 2e       	mov	r10, r18
   15c4c:	89 14       	cp	r8, r9
   15c4e:	58 f4       	brcc	.+22     	; 0x15c66 <vfprintf+0x2ea>
   15c50:	34 fe       	sbrs	r3, 4
   15c52:	0b c0       	rjmp	.+22     	; 0x15c6a <vfprintf+0x2ee>
   15c54:	32 fc       	sbrc	r3, 2
   15c56:	09 c0       	rjmp	.+18     	; 0x15c6a <vfprintf+0x2ee>
   15c58:	83 2d       	mov	r24, r3
   15c5a:	8e 7e       	andi	r24, 0xEE	; 238
   15c5c:	a8 2e       	mov	r10, r24
   15c5e:	05 c0       	rjmp	.+10     	; 0x15c6a <vfprintf+0x2ee>
   15c60:	b8 2c       	mov	r11, r8
   15c62:	a3 2c       	mov	r10, r3
   15c64:	03 c0       	rjmp	.+6      	; 0x15c6c <vfprintf+0x2f0>
   15c66:	b8 2c       	mov	r11, r8
   15c68:	01 c0       	rjmp	.+2      	; 0x15c6c <vfprintf+0x2f0>
   15c6a:	b9 2c       	mov	r11, r9
   15c6c:	a4 fe       	sbrs	r10, 4
   15c6e:	0f c0       	rjmp	.+30     	; 0x15c8e <vfprintf+0x312>
   15c70:	fe 01       	movw	r30, r28
   15c72:	e8 0d       	add	r30, r8
   15c74:	f1 1d       	adc	r31, r1
   15c76:	80 81       	ld	r24, Z
   15c78:	80 33       	cpi	r24, 0x30	; 48
   15c7a:	21 f4       	brne	.+8      	; 0x15c84 <vfprintf+0x308>
   15c7c:	9a 2d       	mov	r25, r10
   15c7e:	99 7e       	andi	r25, 0xE9	; 233
   15c80:	a9 2e       	mov	r10, r25
   15c82:	09 c0       	rjmp	.+18     	; 0x15c96 <vfprintf+0x31a>
   15c84:	a2 fe       	sbrs	r10, 2
   15c86:	06 c0       	rjmp	.+12     	; 0x15c94 <vfprintf+0x318>
   15c88:	b3 94       	inc	r11
   15c8a:	b3 94       	inc	r11
   15c8c:	04 c0       	rjmp	.+8      	; 0x15c96 <vfprintf+0x31a>
   15c8e:	8a 2d       	mov	r24, r10
   15c90:	86 78       	andi	r24, 0x86	; 134
   15c92:	09 f0       	breq	.+2      	; 0x15c96 <vfprintf+0x31a>
   15c94:	b3 94       	inc	r11
   15c96:	a3 fc       	sbrc	r10, 3
   15c98:	10 c0       	rjmp	.+32     	; 0x15cba <vfprintf+0x33e>
   15c9a:	a0 fe       	sbrs	r10, 0
   15c9c:	06 c0       	rjmp	.+12     	; 0x15caa <vfprintf+0x32e>
   15c9e:	b2 14       	cp	r11, r2
   15ca0:	80 f4       	brcc	.+32     	; 0x15cc2 <vfprintf+0x346>
   15ca2:	28 0c       	add	r2, r8
   15ca4:	92 2c       	mov	r9, r2
   15ca6:	9b 18       	sub	r9, r11
   15ca8:	0d c0       	rjmp	.+26     	; 0x15cc4 <vfprintf+0x348>
   15caa:	b2 14       	cp	r11, r2
   15cac:	58 f4       	brcc	.+22     	; 0x15cc4 <vfprintf+0x348>
   15cae:	b6 01       	movw	r22, r12
   15cb0:	80 e2       	ldi	r24, 0x20	; 32
   15cb2:	90 e0       	ldi	r25, 0x00	; 0
   15cb4:	9b d3       	rcall	.+1846   	; 0x163ec <fputc>
   15cb6:	b3 94       	inc	r11
   15cb8:	f8 cf       	rjmp	.-16     	; 0x15caa <vfprintf+0x32e>
   15cba:	b2 14       	cp	r11, r2
   15cbc:	18 f4       	brcc	.+6      	; 0x15cc4 <vfprintf+0x348>
   15cbe:	2b 18       	sub	r2, r11
   15cc0:	02 c0       	rjmp	.+4      	; 0x15cc6 <vfprintf+0x34a>
   15cc2:	98 2c       	mov	r9, r8
   15cc4:	21 2c       	mov	r2, r1
   15cc6:	a4 fe       	sbrs	r10, 4
   15cc8:	0f c0       	rjmp	.+30     	; 0x15ce8 <vfprintf+0x36c>
   15cca:	b6 01       	movw	r22, r12
   15ccc:	80 e3       	ldi	r24, 0x30	; 48
   15cce:	90 e0       	ldi	r25, 0x00	; 0
   15cd0:	8d d3       	rcall	.+1818   	; 0x163ec <fputc>
   15cd2:	a2 fe       	sbrs	r10, 2
   15cd4:	16 c0       	rjmp	.+44     	; 0x15d02 <vfprintf+0x386>
   15cd6:	a1 fc       	sbrc	r10, 1
   15cd8:	03 c0       	rjmp	.+6      	; 0x15ce0 <vfprintf+0x364>
   15cda:	88 e7       	ldi	r24, 0x78	; 120
   15cdc:	90 e0       	ldi	r25, 0x00	; 0
   15cde:	02 c0       	rjmp	.+4      	; 0x15ce4 <vfprintf+0x368>
   15ce0:	88 e5       	ldi	r24, 0x58	; 88
   15ce2:	90 e0       	ldi	r25, 0x00	; 0
   15ce4:	b6 01       	movw	r22, r12
   15ce6:	0c c0       	rjmp	.+24     	; 0x15d00 <vfprintf+0x384>
   15ce8:	8a 2d       	mov	r24, r10
   15cea:	86 78       	andi	r24, 0x86	; 134
   15cec:	51 f0       	breq	.+20     	; 0x15d02 <vfprintf+0x386>
   15cee:	a1 fe       	sbrs	r10, 1
   15cf0:	02 c0       	rjmp	.+4      	; 0x15cf6 <vfprintf+0x37a>
   15cf2:	8b e2       	ldi	r24, 0x2B	; 43
   15cf4:	01 c0       	rjmp	.+2      	; 0x15cf8 <vfprintf+0x37c>
   15cf6:	80 e2       	ldi	r24, 0x20	; 32
   15cf8:	a7 fc       	sbrc	r10, 7
   15cfa:	8d e2       	ldi	r24, 0x2D	; 45
   15cfc:	b6 01       	movw	r22, r12
   15cfe:	90 e0       	ldi	r25, 0x00	; 0
   15d00:	75 d3       	rcall	.+1770   	; 0x163ec <fputc>
   15d02:	89 14       	cp	r8, r9
   15d04:	30 f4       	brcc	.+12     	; 0x15d12 <vfprintf+0x396>
   15d06:	b6 01       	movw	r22, r12
   15d08:	80 e3       	ldi	r24, 0x30	; 48
   15d0a:	90 e0       	ldi	r25, 0x00	; 0
   15d0c:	6f d3       	rcall	.+1758   	; 0x163ec <fputc>
   15d0e:	9a 94       	dec	r9
   15d10:	f8 cf       	rjmp	.-16     	; 0x15d02 <vfprintf+0x386>
   15d12:	8a 94       	dec	r8
   15d14:	f3 01       	movw	r30, r6
   15d16:	e8 0d       	add	r30, r8
   15d18:	f1 1d       	adc	r31, r1
   15d1a:	80 81       	ld	r24, Z
   15d1c:	b6 01       	movw	r22, r12
   15d1e:	90 e0       	ldi	r25, 0x00	; 0
   15d20:	65 d3       	rcall	.+1738   	; 0x163ec <fputc>
   15d22:	81 10       	cpse	r8, r1
   15d24:	f6 cf       	rjmp	.-20     	; 0x15d12 <vfprintf+0x396>
   15d26:	22 20       	and	r2, r2
   15d28:	09 f4       	brne	.+2      	; 0x15d2c <vfprintf+0x3b0>
   15d2a:	4e ce       	rjmp	.-868    	; 0x159c8 <vfprintf+0x4c>
   15d2c:	b6 01       	movw	r22, r12
   15d2e:	80 e2       	ldi	r24, 0x20	; 32
   15d30:	90 e0       	ldi	r25, 0x00	; 0
   15d32:	5c d3       	rcall	.+1720   	; 0x163ec <fputc>
   15d34:	2a 94       	dec	r2
   15d36:	f7 cf       	rjmp	.-18     	; 0x15d26 <vfprintf+0x3aa>
   15d38:	f6 01       	movw	r30, r12
   15d3a:	86 81       	ldd	r24, Z+6	; 0x06
   15d3c:	97 81       	ldd	r25, Z+7	; 0x07
   15d3e:	02 c0       	rjmp	.+4      	; 0x15d44 <vfprintf+0x3c8>
   15d40:	8f ef       	ldi	r24, 0xFF	; 255
   15d42:	9f ef       	ldi	r25, 0xFF	; 255
   15d44:	2b 96       	adiw	r28, 0x0b	; 11
   15d46:	0f b6       	in	r0, 0x3f	; 63
   15d48:	f8 94       	cli
   15d4a:	de bf       	out	0x3e, r29	; 62
   15d4c:	0f be       	out	0x3f, r0	; 63
   15d4e:	cd bf       	out	0x3d, r28	; 61
   15d50:	df 91       	pop	r29
   15d52:	cf 91       	pop	r28
   15d54:	1f 91       	pop	r17
   15d56:	0f 91       	pop	r16
   15d58:	ff 90       	pop	r15
   15d5a:	ef 90       	pop	r14
   15d5c:	df 90       	pop	r13
   15d5e:	cf 90       	pop	r12
   15d60:	bf 90       	pop	r11
   15d62:	af 90       	pop	r10
   15d64:	9f 90       	pop	r9
   15d66:	8f 90       	pop	r8
   15d68:	7f 90       	pop	r7
   15d6a:	6f 90       	pop	r6
   15d6c:	5f 90       	pop	r5
   15d6e:	4f 90       	pop	r4
   15d70:	3f 90       	pop	r3
   15d72:	2f 90       	pop	r2
   15d74:	08 95       	ret

00015d76 <putval>:
   15d76:	20 fd       	sbrc	r18, 0
   15d78:	09 c0       	rjmp	.+18     	; 0x15d8c <putval+0x16>
   15d7a:	fc 01       	movw	r30, r24
   15d7c:	23 fd       	sbrc	r18, 3
   15d7e:	05 c0       	rjmp	.+10     	; 0x15d8a <putval+0x14>
   15d80:	22 ff       	sbrs	r18, 2
   15d82:	02 c0       	rjmp	.+4      	; 0x15d88 <putval+0x12>
   15d84:	73 83       	std	Z+3, r23	; 0x03
   15d86:	62 83       	std	Z+2, r22	; 0x02
   15d88:	51 83       	std	Z+1, r21	; 0x01
   15d8a:	40 83       	st	Z, r20
   15d8c:	08 95       	ret

00015d8e <mulacc>:
   15d8e:	44 fd       	sbrc	r20, 4
   15d90:	17 c0       	rjmp	.+46     	; 0x15dc0 <mulacc+0x32>
   15d92:	46 fd       	sbrc	r20, 6
   15d94:	17 c0       	rjmp	.+46     	; 0x15dc4 <mulacc+0x36>
   15d96:	ab 01       	movw	r20, r22
   15d98:	bc 01       	movw	r22, r24
   15d9a:	da 01       	movw	r26, r20
   15d9c:	fb 01       	movw	r30, r22
   15d9e:	aa 0f       	add	r26, r26
   15da0:	bb 1f       	adc	r27, r27
   15da2:	ee 1f       	adc	r30, r30
   15da4:	ff 1f       	adc	r31, r31
   15da6:	10 94       	com	r1
   15da8:	d1 f7       	brne	.-12     	; 0x15d9e <mulacc+0x10>
   15daa:	4a 0f       	add	r20, r26
   15dac:	5b 1f       	adc	r21, r27
   15dae:	6e 1f       	adc	r22, r30
   15db0:	7f 1f       	adc	r23, r31
   15db2:	cb 01       	movw	r24, r22
   15db4:	ba 01       	movw	r22, r20
   15db6:	66 0f       	add	r22, r22
   15db8:	77 1f       	adc	r23, r23
   15dba:	88 1f       	adc	r24, r24
   15dbc:	99 1f       	adc	r25, r25
   15dbe:	09 c0       	rjmp	.+18     	; 0x15dd2 <mulacc+0x44>
   15dc0:	33 e0       	ldi	r19, 0x03	; 3
   15dc2:	01 c0       	rjmp	.+2      	; 0x15dc6 <mulacc+0x38>
   15dc4:	34 e0       	ldi	r19, 0x04	; 4
   15dc6:	66 0f       	add	r22, r22
   15dc8:	77 1f       	adc	r23, r23
   15dca:	88 1f       	adc	r24, r24
   15dcc:	99 1f       	adc	r25, r25
   15dce:	31 50       	subi	r19, 0x01	; 1
   15dd0:	d1 f7       	brne	.-12     	; 0x15dc6 <mulacc+0x38>
   15dd2:	62 0f       	add	r22, r18
   15dd4:	71 1d       	adc	r23, r1
   15dd6:	81 1d       	adc	r24, r1
   15dd8:	91 1d       	adc	r25, r1
   15dda:	08 95       	ret

00015ddc <skip_spaces>:
   15ddc:	0f 93       	push	r16
   15dde:	1f 93       	push	r17
   15de0:	cf 93       	push	r28
   15de2:	df 93       	push	r29
   15de4:	8c 01       	movw	r16, r24
   15de6:	c8 01       	movw	r24, r16
   15de8:	c3 d2       	rcall	.+1414   	; 0x16370 <fgetc>
   15dea:	ec 01       	movw	r28, r24
   15dec:	97 fd       	sbrc	r25, 7
   15dee:	06 c0       	rjmp	.+12     	; 0x15dfc <skip_spaces+0x20>
   15df0:	fe dc       	rcall	.-1540   	; 0x157ee <isspace>
   15df2:	89 2b       	or	r24, r25
   15df4:	c1 f7       	brne	.-16     	; 0x15de6 <skip_spaces+0xa>
   15df6:	b8 01       	movw	r22, r16
   15df8:	ce 01       	movw	r24, r28
   15dfa:	34 d3       	rcall	.+1640   	; 0x16464 <ungetc>
   15dfc:	ce 01       	movw	r24, r28
   15dfe:	df 91       	pop	r29
   15e00:	cf 91       	pop	r28
   15e02:	1f 91       	pop	r17
   15e04:	0f 91       	pop	r16
   15e06:	08 95       	ret

00015e08 <conv_int>:
   15e08:	8f 92       	push	r8
   15e0a:	9f 92       	push	r9
   15e0c:	af 92       	push	r10
   15e0e:	bf 92       	push	r11
   15e10:	ef 92       	push	r14
   15e12:	ff 92       	push	r15
   15e14:	0f 93       	push	r16
   15e16:	1f 93       	push	r17
   15e18:	cf 93       	push	r28
   15e1a:	df 93       	push	r29
   15e1c:	8c 01       	movw	r16, r24
   15e1e:	d6 2f       	mov	r29, r22
   15e20:	7a 01       	movw	r14, r20
   15e22:	b2 2e       	mov	r11, r18
   15e24:	a5 d2       	rcall	.+1354   	; 0x16370 <fgetc>
   15e26:	9c 01       	movw	r18, r24
   15e28:	33 27       	eor	r19, r19
   15e2a:	2b 32       	cpi	r18, 0x2B	; 43
   15e2c:	31 05       	cpc	r19, r1
   15e2e:	31 f0       	breq	.+12     	; 0x15e3c <conv_int+0x34>
   15e30:	2d 32       	cpi	r18, 0x2D	; 45
   15e32:	31 05       	cpc	r19, r1
   15e34:	59 f4       	brne	.+22     	; 0x15e4c <conv_int+0x44>
   15e36:	8b 2d       	mov	r24, r11
   15e38:	80 68       	ori	r24, 0x80	; 128
   15e3a:	b8 2e       	mov	r11, r24
   15e3c:	d1 50       	subi	r29, 0x01	; 1
   15e3e:	11 f4       	brne	.+4      	; 0x15e44 <conv_int+0x3c>
   15e40:	80 e0       	ldi	r24, 0x00	; 0
   15e42:	61 c0       	rjmp	.+194    	; 0x15f06 <conv_int+0xfe>
   15e44:	c8 01       	movw	r24, r16
   15e46:	94 d2       	rcall	.+1320   	; 0x16370 <fgetc>
   15e48:	97 fd       	sbrc	r25, 7
   15e4a:	fa cf       	rjmp	.-12     	; 0x15e40 <conv_int+0x38>
   15e4c:	cb 2d       	mov	r28, r11
   15e4e:	cd 7f       	andi	r28, 0xFD	; 253
   15e50:	2b 2d       	mov	r18, r11
   15e52:	20 73       	andi	r18, 0x30	; 48
   15e54:	f9 f4       	brne	.+62     	; 0x15e94 <conv_int+0x8c>
   15e56:	80 33       	cpi	r24, 0x30	; 48
   15e58:	e9 f4       	brne	.+58     	; 0x15e94 <conv_int+0x8c>
   15e5a:	aa 24       	eor	r10, r10
   15e5c:	aa 94       	dec	r10
   15e5e:	ad 0e       	add	r10, r29
   15e60:	09 f4       	brne	.+2      	; 0x15e64 <conv_int+0x5c>
   15e62:	3e c0       	rjmp	.+124    	; 0x15ee0 <conv_int+0xd8>
   15e64:	c8 01       	movw	r24, r16
   15e66:	84 d2       	rcall	.+1288   	; 0x16370 <fgetc>
   15e68:	97 fd       	sbrc	r25, 7
   15e6a:	3a c0       	rjmp	.+116    	; 0x15ee0 <conv_int+0xd8>
   15e6c:	9c 01       	movw	r18, r24
   15e6e:	2f 7d       	andi	r18, 0xDF	; 223
   15e70:	33 27       	eor	r19, r19
   15e72:	28 35       	cpi	r18, 0x58	; 88
   15e74:	31 05       	cpc	r19, r1
   15e76:	41 f4       	brne	.+16     	; 0x15e88 <conv_int+0x80>
   15e78:	c2 64       	ori	r28, 0x42	; 66
   15e7a:	d2 50       	subi	r29, 0x02	; 2
   15e7c:	89 f1       	breq	.+98     	; 0x15ee0 <conv_int+0xd8>
   15e7e:	c8 01       	movw	r24, r16
   15e80:	77 d2       	rcall	.+1262   	; 0x16370 <fgetc>
   15e82:	97 ff       	sbrs	r25, 7
   15e84:	07 c0       	rjmp	.+14     	; 0x15e94 <conv_int+0x8c>
   15e86:	2c c0       	rjmp	.+88     	; 0x15ee0 <conv_int+0xd8>
   15e88:	b6 fe       	sbrs	r11, 6
   15e8a:	02 c0       	rjmp	.+4      	; 0x15e90 <conv_int+0x88>
   15e8c:	c2 60       	ori	r28, 0x02	; 2
   15e8e:	01 c0       	rjmp	.+2      	; 0x15e92 <conv_int+0x8a>
   15e90:	c2 61       	ori	r28, 0x12	; 18
   15e92:	da 2d       	mov	r29, r10
   15e94:	81 2c       	mov	r8, r1
   15e96:	91 2c       	mov	r9, r1
   15e98:	54 01       	movw	r10, r8
   15e9a:	20 ed       	ldi	r18, 0xD0	; 208
   15e9c:	28 0f       	add	r18, r24
   15e9e:	28 30       	cpi	r18, 0x08	; 8
   15ea0:	78 f0       	brcs	.+30     	; 0x15ec0 <conv_int+0xb8>
   15ea2:	c4 ff       	sbrs	r28, 4
   15ea4:	03 c0       	rjmp	.+6      	; 0x15eac <conv_int+0xa4>
   15ea6:	b8 01       	movw	r22, r16
   15ea8:	dd d2       	rcall	.+1466   	; 0x16464 <ungetc>
   15eaa:	17 c0       	rjmp	.+46     	; 0x15eda <conv_int+0xd2>
   15eac:	2a 30       	cpi	r18, 0x0A	; 10
   15eae:	40 f0       	brcs	.+16     	; 0x15ec0 <conv_int+0xb8>
   15eb0:	c6 ff       	sbrs	r28, 6
   15eb2:	f9 cf       	rjmp	.-14     	; 0x15ea6 <conv_int+0x9e>
   15eb4:	2f 7d       	andi	r18, 0xDF	; 223
   15eb6:	3f ee       	ldi	r19, 0xEF	; 239
   15eb8:	32 0f       	add	r19, r18
   15eba:	36 30       	cpi	r19, 0x06	; 6
   15ebc:	a0 f7       	brcc	.-24     	; 0x15ea6 <conv_int+0x9e>
   15ebe:	27 50       	subi	r18, 0x07	; 7
   15ec0:	4c 2f       	mov	r20, r28
   15ec2:	c5 01       	movw	r24, r10
   15ec4:	b4 01       	movw	r22, r8
   15ec6:	63 df       	rcall	.-314    	; 0x15d8e <mulacc>
   15ec8:	4b 01       	movw	r8, r22
   15eca:	5c 01       	movw	r10, r24
   15ecc:	c2 60       	ori	r28, 0x02	; 2
   15ece:	d1 50       	subi	r29, 0x01	; 1
   15ed0:	51 f0       	breq	.+20     	; 0x15ee6 <conv_int+0xde>
   15ed2:	c8 01       	movw	r24, r16
   15ed4:	4d d2       	rcall	.+1178   	; 0x16370 <fgetc>
   15ed6:	97 ff       	sbrs	r25, 7
   15ed8:	e0 cf       	rjmp	.-64     	; 0x15e9a <conv_int+0x92>
   15eda:	c1 fd       	sbrc	r28, 1
   15edc:	04 c0       	rjmp	.+8      	; 0x15ee6 <conv_int+0xde>
   15ede:	b0 cf       	rjmp	.-160    	; 0x15e40 <conv_int+0x38>
   15ee0:	81 2c       	mov	r8, r1
   15ee2:	91 2c       	mov	r9, r1
   15ee4:	54 01       	movw	r10, r8
   15ee6:	c7 ff       	sbrs	r28, 7
   15ee8:	08 c0       	rjmp	.+16     	; 0x15efa <conv_int+0xf2>
   15eea:	b0 94       	com	r11
   15eec:	a0 94       	com	r10
   15eee:	90 94       	com	r9
   15ef0:	80 94       	com	r8
   15ef2:	81 1c       	adc	r8, r1
   15ef4:	91 1c       	adc	r9, r1
   15ef6:	a1 1c       	adc	r10, r1
   15ef8:	b1 1c       	adc	r11, r1
   15efa:	2c 2f       	mov	r18, r28
   15efc:	b5 01       	movw	r22, r10
   15efe:	a4 01       	movw	r20, r8
   15f00:	c7 01       	movw	r24, r14
   15f02:	39 df       	rcall	.-398    	; 0x15d76 <putval>
   15f04:	81 e0       	ldi	r24, 0x01	; 1
   15f06:	df 91       	pop	r29
   15f08:	cf 91       	pop	r28
   15f0a:	1f 91       	pop	r17
   15f0c:	0f 91       	pop	r16
   15f0e:	ff 90       	pop	r15
   15f10:	ef 90       	pop	r14
   15f12:	bf 90       	pop	r11
   15f14:	af 90       	pop	r10
   15f16:	9f 90       	pop	r9
   15f18:	8f 90       	pop	r8
   15f1a:	08 95       	ret

00015f1c <conv_brk>:
   15f1c:	5f 92       	push	r5
   15f1e:	6f 92       	push	r6
   15f20:	7f 92       	push	r7
   15f22:	8f 92       	push	r8
   15f24:	9f 92       	push	r9
   15f26:	af 92       	push	r10
   15f28:	bf 92       	push	r11
   15f2a:	cf 92       	push	r12
   15f2c:	df 92       	push	r13
   15f2e:	ef 92       	push	r14
   15f30:	ff 92       	push	r15
   15f32:	0f 93       	push	r16
   15f34:	1f 93       	push	r17
   15f36:	cf 93       	push	r28
   15f38:	df 93       	push	r29
   15f3a:	cd b7       	in	r28, 0x3d	; 61
   15f3c:	de b7       	in	r29, 0x3e	; 62
   15f3e:	a0 97       	sbiw	r28, 0x20	; 32
   15f40:	0f b6       	in	r0, 0x3f	; 63
   15f42:	f8 94       	cli
   15f44:	de bf       	out	0x3e, r29	; 62
   15f46:	0f be       	out	0x3f, r0	; 63
   15f48:	cd bf       	out	0x3d, r28	; 61
   15f4a:	5c 01       	movw	r10, r24
   15f4c:	96 2e       	mov	r9, r22
   15f4e:	7a 01       	movw	r14, r20
   15f50:	f9 01       	movw	r30, r18
   15f52:	8e 01       	movw	r16, r28
   15f54:	0f 5f       	subi	r16, 0xFF	; 255
   15f56:	1f 4f       	sbci	r17, 0xFF	; 255
   15f58:	68 01       	movw	r12, r16
   15f5a:	80 e2       	ldi	r24, 0x20	; 32
   15f5c:	d8 01       	movw	r26, r16
   15f5e:	1d 92       	st	X+, r1
   15f60:	8a 95       	dec	r24
   15f62:	e9 f7       	brne	.-6      	; 0x15f5e <conv_brk+0x42>
   15f64:	d5 01       	movw	r26, r10
   15f66:	13 96       	adiw	r26, 0x03	; 3
   15f68:	8c 90       	ld	r8, X
   15f6a:	80 e0       	ldi	r24, 0x00	; 0
   15f6c:	90 e0       	ldi	r25, 0x00	; 0
   15f6e:	61 2c       	mov	r6, r1
   15f70:	71 2c       	mov	r7, r1
   15f72:	30 e0       	ldi	r19, 0x00	; 0
   15f74:	61 e0       	ldi	r22, 0x01	; 1
   15f76:	70 e0       	ldi	r23, 0x00	; 0
   15f78:	83 fc       	sbrc	r8, 3
   15f7a:	25 91       	lpm	r18, Z+
   15f7c:	83 fe       	sbrs	r8, 3
   15f7e:	21 91       	ld	r18, Z+
   15f80:	8f 01       	movw	r16, r30
   15f82:	52 2e       	mov	r5, r18
   15f84:	21 11       	cpse	r18, r1
   15f86:	03 c0       	rjmp	.+6      	; 0x15f8e <conv_brk+0x72>
   15f88:	80 e0       	ldi	r24, 0x00	; 0
   15f8a:	90 e0       	ldi	r25, 0x00	; 0
   15f8c:	90 c0       	rjmp	.+288    	; 0x160ae <conv_brk+0x192>
   15f8e:	2e 35       	cpi	r18, 0x5E	; 94
   15f90:	11 f4       	brne	.+4      	; 0x15f96 <conv_brk+0x7a>
   15f92:	00 97       	sbiw	r24, 0x00	; 0
   15f94:	51 f1       	breq	.+84     	; 0x15fea <conv_brk+0xce>
   15f96:	43 2f       	mov	r20, r19
   15f98:	50 e0       	ldi	r21, 0x00	; 0
   15f9a:	48 17       	cp	r20, r24
   15f9c:	59 07       	cpc	r21, r25
   15f9e:	3c f4       	brge	.+14     	; 0x15fae <conv_brk+0x92>
   15fa0:	2d 35       	cpi	r18, 0x5D	; 93
   15fa2:	59 f1       	breq	.+86     	; 0x15ffa <conv_brk+0xde>
   15fa4:	2d 32       	cpi	r18, 0x2D	; 45
   15fa6:	19 f4       	brne	.+6      	; 0x15fae <conv_brk+0x92>
   15fa8:	77 20       	and	r7, r7
   15faa:	09 f1       	breq	.+66     	; 0x15fee <conv_brk+0xd2>
   15fac:	03 c0       	rjmp	.+6      	; 0x15fb4 <conv_brk+0x98>
   15fae:	77 20       	and	r7, r7
   15fb0:	09 f4       	brne	.+2      	; 0x15fb4 <conv_brk+0x98>
   15fb2:	68 c0       	rjmp	.+208    	; 0x16084 <conv_brk+0x168>
   15fb4:	45 2d       	mov	r20, r5
   15fb6:	46 95       	lsr	r20
   15fb8:	46 95       	lsr	r20
   15fba:	46 95       	lsr	r20
   15fbc:	d6 01       	movw	r26, r12
   15fbe:	a4 0f       	add	r26, r20
   15fc0:	b1 1d       	adc	r27, r1
   15fc2:	45 2d       	mov	r20, r5
   15fc4:	47 70       	andi	r20, 0x07	; 7
   15fc6:	8b 01       	movw	r16, r22
   15fc8:	02 c0       	rjmp	.+4      	; 0x15fce <conv_brk+0xb2>
   15fca:	00 0f       	add	r16, r16
   15fcc:	11 1f       	adc	r17, r17
   15fce:	4a 95       	dec	r20
   15fd0:	e2 f7       	brpl	.-8      	; 0x15fca <conv_brk+0xae>
   15fd2:	a8 01       	movw	r20, r16
   15fd4:	5c 91       	ld	r21, X
   15fd6:	45 2b       	or	r20, r21
   15fd8:	4c 93       	st	X, r20
   15fda:	65 14       	cp	r6, r5
   15fdc:	59 f0       	breq	.+22     	; 0x15ff4 <conv_brk+0xd8>
   15fde:	56 14       	cp	r5, r6
   15fe0:	10 f4       	brcc	.+4      	; 0x15fe6 <conv_brk+0xca>
   15fe2:	53 94       	inc	r5
   15fe4:	e7 cf       	rjmp	.-50     	; 0x15fb4 <conv_brk+0x98>
   15fe6:	5a 94       	dec	r5
   15fe8:	e5 cf       	rjmp	.-54     	; 0x15fb4 <conv_brk+0x98>
   15fea:	31 e0       	ldi	r19, 0x01	; 1
   15fec:	04 c0       	rjmp	.+8      	; 0x15ff6 <conv_brk+0xda>
   15fee:	77 24       	eor	r7, r7
   15ff0:	73 94       	inc	r7
   15ff2:	01 c0       	rjmp	.+2      	; 0x15ff6 <conv_brk+0xda>
   15ff4:	71 2c       	mov	r7, r1
   15ff6:	01 96       	adiw	r24, 0x01	; 1
   15ff8:	bf cf       	rjmp	.-130    	; 0x15f78 <conv_brk+0x5c>
   15ffa:	77 20       	and	r7, r7
   15ffc:	19 f0       	breq	.+6      	; 0x16004 <conv_brk+0xe8>
   15ffe:	8e 81       	ldd	r24, Y+6	; 0x06
   16000:	80 62       	ori	r24, 0x20	; 32
   16002:	8e 83       	std	Y+6, r24	; 0x06
   16004:	31 11       	cpse	r19, r1
   16006:	03 c0       	rjmp	.+6      	; 0x1600e <conv_brk+0xf2>
   16008:	88 24       	eor	r8, r8
   1600a:	83 94       	inc	r8
   1600c:	17 c0       	rjmp	.+46     	; 0x1603c <conv_brk+0x120>
   1600e:	f6 01       	movw	r30, r12
   16010:	9e 01       	movw	r18, r28
   16012:	2f 5d       	subi	r18, 0xDF	; 223
   16014:	3f 4f       	sbci	r19, 0xFF	; 255
   16016:	80 81       	ld	r24, Z
   16018:	80 95       	com	r24
   1601a:	81 93       	st	Z+, r24
   1601c:	2e 17       	cp	r18, r30
   1601e:	3f 07       	cpc	r19, r31
   16020:	d1 f7       	brne	.-12     	; 0x16016 <conv_brk+0xfa>
   16022:	f2 cf       	rjmp	.-28     	; 0x16008 <conv_brk+0xec>
   16024:	e1 14       	cp	r14, r1
   16026:	f1 04       	cpc	r15, r1
   16028:	29 f0       	breq	.+10     	; 0x16034 <conv_brk+0x118>
   1602a:	d7 01       	movw	r26, r14
   1602c:	8c 93       	st	X, r24
   1602e:	f7 01       	movw	r30, r14
   16030:	31 96       	adiw	r30, 0x01	; 1
   16032:	7f 01       	movw	r14, r30
   16034:	9a 94       	dec	r9
   16036:	81 2c       	mov	r8, r1
   16038:	99 20       	and	r9, r9
   1603a:	e9 f0       	breq	.+58     	; 0x16076 <conv_brk+0x15a>
   1603c:	c5 01       	movw	r24, r10
   1603e:	98 d1       	rcall	.+816    	; 0x16370 <fgetc>
   16040:	97 fd       	sbrc	r25, 7
   16042:	17 c0       	rjmp	.+46     	; 0x16072 <conv_brk+0x156>
   16044:	fc 01       	movw	r30, r24
   16046:	ff 27       	eor	r31, r31
   16048:	23 e0       	ldi	r18, 0x03	; 3
   1604a:	f5 95       	asr	r31
   1604c:	e7 95       	ror	r30
   1604e:	2a 95       	dec	r18
   16050:	e1 f7       	brne	.-8      	; 0x1604a <conv_brk+0x12e>
   16052:	ec 0d       	add	r30, r12
   16054:	fd 1d       	adc	r31, r13
   16056:	20 81       	ld	r18, Z
   16058:	30 e0       	ldi	r19, 0x00	; 0
   1605a:	ac 01       	movw	r20, r24
   1605c:	47 70       	andi	r20, 0x07	; 7
   1605e:	55 27       	eor	r21, r21
   16060:	02 c0       	rjmp	.+4      	; 0x16066 <conv_brk+0x14a>
   16062:	35 95       	asr	r19
   16064:	27 95       	ror	r18
   16066:	4a 95       	dec	r20
   16068:	e2 f7       	brpl	.-8      	; 0x16062 <conv_brk+0x146>
   1606a:	20 fd       	sbrc	r18, 0
   1606c:	db cf       	rjmp	.-74     	; 0x16024 <conv_brk+0x108>
   1606e:	b5 01       	movw	r22, r10
   16070:	f9 d1       	rcall	.+1010   	; 0x16464 <ungetc>
   16072:	81 10       	cpse	r8, r1
   16074:	89 cf       	rjmp	.-238    	; 0x15f88 <conv_brk+0x6c>
   16076:	e1 14       	cp	r14, r1
   16078:	f1 04       	cpc	r15, r1
   1607a:	11 f0       	breq	.+4      	; 0x16080 <conv_brk+0x164>
   1607c:	d7 01       	movw	r26, r14
   1607e:	1c 92       	st	X, r1
   16080:	c8 01       	movw	r24, r16
   16082:	15 c0       	rjmp	.+42     	; 0x160ae <conv_brk+0x192>
   16084:	42 2f       	mov	r20, r18
   16086:	46 95       	lsr	r20
   16088:	46 95       	lsr	r20
   1608a:	46 95       	lsr	r20
   1608c:	d6 01       	movw	r26, r12
   1608e:	a4 0f       	add	r26, r20
   16090:	b1 1d       	adc	r27, r1
   16092:	42 2f       	mov	r20, r18
   16094:	47 70       	andi	r20, 0x07	; 7
   16096:	8b 01       	movw	r16, r22
   16098:	02 c0       	rjmp	.+4      	; 0x1609e <conv_brk+0x182>
   1609a:	00 0f       	add	r16, r16
   1609c:	11 1f       	adc	r17, r17
   1609e:	4a 95       	dec	r20
   160a0:	e2 f7       	brpl	.-8      	; 0x1609a <conv_brk+0x17e>
   160a2:	a8 01       	movw	r20, r16
   160a4:	5c 91       	ld	r21, X
   160a6:	45 2b       	or	r20, r21
   160a8:	4c 93       	st	X, r20
   160aa:	62 2e       	mov	r6, r18
   160ac:	a4 cf       	rjmp	.-184    	; 0x15ff6 <conv_brk+0xda>
   160ae:	a0 96       	adiw	r28, 0x20	; 32
   160b0:	0f b6       	in	r0, 0x3f	; 63
   160b2:	f8 94       	cli
   160b4:	de bf       	out	0x3e, r29	; 62
   160b6:	0f be       	out	0x3f, r0	; 63
   160b8:	cd bf       	out	0x3d, r28	; 61
   160ba:	df 91       	pop	r29
   160bc:	cf 91       	pop	r28
   160be:	1f 91       	pop	r17
   160c0:	0f 91       	pop	r16
   160c2:	ff 90       	pop	r15
   160c4:	ef 90       	pop	r14
   160c6:	df 90       	pop	r13
   160c8:	cf 90       	pop	r12
   160ca:	bf 90       	pop	r11
   160cc:	af 90       	pop	r10
   160ce:	9f 90       	pop	r9
   160d0:	8f 90       	pop	r8
   160d2:	7f 90       	pop	r7
   160d4:	6f 90       	pop	r6
   160d6:	5f 90       	pop	r5
   160d8:	08 95       	ret

000160da <vfscanf>:
   160da:	5f 92       	push	r5
   160dc:	6f 92       	push	r6
   160de:	7f 92       	push	r7
   160e0:	8f 92       	push	r8
   160e2:	9f 92       	push	r9
   160e4:	af 92       	push	r10
   160e6:	bf 92       	push	r11
   160e8:	cf 92       	push	r12
   160ea:	df 92       	push	r13
   160ec:	ef 92       	push	r14
   160ee:	ff 92       	push	r15
   160f0:	0f 93       	push	r16
   160f2:	1f 93       	push	r17
   160f4:	cf 93       	push	r28
   160f6:	df 93       	push	r29
   160f8:	6c 01       	movw	r12, r24
   160fa:	eb 01       	movw	r28, r22
   160fc:	5a 01       	movw	r10, r20
   160fe:	fc 01       	movw	r30, r24
   16100:	17 82       	std	Z+7, r1	; 0x07
   16102:	16 82       	std	Z+6, r1	; 0x06
   16104:	51 2c       	mov	r5, r1
   16106:	f6 01       	movw	r30, r12
   16108:	e3 80       	ldd	r14, Z+3	; 0x03
   1610a:	fe 01       	movw	r30, r28
   1610c:	e3 fc       	sbrc	r14, 3
   1610e:	85 91       	lpm	r24, Z+
   16110:	e3 fe       	sbrs	r14, 3
   16112:	81 91       	ld	r24, Z+
   16114:	18 2f       	mov	r17, r24
   16116:	ef 01       	movw	r28, r30
   16118:	88 23       	and	r24, r24
   1611a:	09 f4       	brne	.+2      	; 0x1611e <vfscanf+0x44>
   1611c:	e0 c0       	rjmp	.+448    	; 0x162de <vfscanf+0x204>
   1611e:	90 e0       	ldi	r25, 0x00	; 0
   16120:	66 db       	rcall	.-2356   	; 0x157ee <isspace>
   16122:	89 2b       	or	r24, r25
   16124:	19 f0       	breq	.+6      	; 0x1612c <vfscanf+0x52>
   16126:	c6 01       	movw	r24, r12
   16128:	59 de       	rcall	.-846    	; 0x15ddc <skip_spaces>
   1612a:	ed cf       	rjmp	.-38     	; 0x16106 <vfscanf+0x2c>
   1612c:	15 32       	cpi	r17, 0x25	; 37
   1612e:	41 f4       	brne	.+16     	; 0x16140 <vfscanf+0x66>
   16130:	fe 01       	movw	r30, r28
   16132:	e3 fc       	sbrc	r14, 3
   16134:	15 91       	lpm	r17, Z+
   16136:	e3 fe       	sbrs	r14, 3
   16138:	11 91       	ld	r17, Z+
   1613a:	ef 01       	movw	r28, r30
   1613c:	15 32       	cpi	r17, 0x25	; 37
   1613e:	71 f4       	brne	.+28     	; 0x1615c <vfscanf+0x82>
   16140:	c6 01       	movw	r24, r12
   16142:	16 d1       	rcall	.+556    	; 0x16370 <fgetc>
   16144:	97 fd       	sbrc	r25, 7
   16146:	c9 c0       	rjmp	.+402    	; 0x162da <vfscanf+0x200>
   16148:	41 2f       	mov	r20, r17
   1614a:	50 e0       	ldi	r21, 0x00	; 0
   1614c:	9c 01       	movw	r18, r24
   1614e:	33 27       	eor	r19, r19
   16150:	24 17       	cp	r18, r20
   16152:	35 07       	cpc	r19, r21
   16154:	c1 f2       	breq	.-80     	; 0x16106 <vfscanf+0x2c>
   16156:	b6 01       	movw	r22, r12
   16158:	85 d1       	rcall	.+778    	; 0x16464 <ungetc>
   1615a:	c1 c0       	rjmp	.+386    	; 0x162de <vfscanf+0x204>
   1615c:	1a 32       	cpi	r17, 0x2A	; 42
   1615e:	39 f4       	brne	.+14     	; 0x1616e <vfscanf+0x94>
   16160:	e3 fc       	sbrc	r14, 3
   16162:	15 91       	lpm	r17, Z+
   16164:	e3 fe       	sbrs	r14, 3
   16166:	11 91       	ld	r17, Z+
   16168:	ef 01       	movw	r28, r30
   1616a:	01 e0       	ldi	r16, 0x01	; 1
   1616c:	01 c0       	rjmp	.+2      	; 0x16170 <vfscanf+0x96>
   1616e:	00 e0       	ldi	r16, 0x00	; 0
   16170:	f1 2c       	mov	r15, r1
   16172:	20 ed       	ldi	r18, 0xD0	; 208
   16174:	21 0f       	add	r18, r17
   16176:	2a 30       	cpi	r18, 0x0A	; 10
   16178:	78 f4       	brcc	.+30     	; 0x16198 <vfscanf+0xbe>
   1617a:	02 60       	ori	r16, 0x02	; 2
   1617c:	6f 2d       	mov	r22, r15
   1617e:	70 e0       	ldi	r23, 0x00	; 0
   16180:	80 e0       	ldi	r24, 0x00	; 0
   16182:	90 e0       	ldi	r25, 0x00	; 0
   16184:	40 e2       	ldi	r20, 0x20	; 32
   16186:	03 de       	rcall	.-1018   	; 0x15d8e <mulacc>
   16188:	f6 2e       	mov	r15, r22
   1618a:	fe 01       	movw	r30, r28
   1618c:	e3 fc       	sbrc	r14, 3
   1618e:	15 91       	lpm	r17, Z+
   16190:	e3 fe       	sbrs	r14, 3
   16192:	11 91       	ld	r17, Z+
   16194:	ef 01       	movw	r28, r30
   16196:	ed cf       	rjmp	.-38     	; 0x16172 <vfscanf+0x98>
   16198:	01 ff       	sbrs	r16, 1
   1619a:	03 c0       	rjmp	.+6      	; 0x161a2 <vfscanf+0xc8>
   1619c:	f1 10       	cpse	r15, r1
   1619e:	03 c0       	rjmp	.+6      	; 0x161a6 <vfscanf+0xcc>
   161a0:	9e c0       	rjmp	.+316    	; 0x162de <vfscanf+0x204>
   161a2:	ff 24       	eor	r15, r15
   161a4:	fa 94       	dec	r15
   161a6:	18 36       	cpi	r17, 0x68	; 104
   161a8:	19 f0       	breq	.+6      	; 0x161b0 <vfscanf+0xd6>
   161aa:	1c 36       	cpi	r17, 0x6C	; 108
   161ac:	51 f0       	breq	.+20     	; 0x161c2 <vfscanf+0xe8>
   161ae:	10 c0       	rjmp	.+32     	; 0x161d0 <vfscanf+0xf6>
   161b0:	fe 01       	movw	r30, r28
   161b2:	e3 fc       	sbrc	r14, 3
   161b4:	15 91       	lpm	r17, Z+
   161b6:	e3 fe       	sbrs	r14, 3
   161b8:	11 91       	ld	r17, Z+
   161ba:	ef 01       	movw	r28, r30
   161bc:	18 36       	cpi	r17, 0x68	; 104
   161be:	41 f4       	brne	.+16     	; 0x161d0 <vfscanf+0xf6>
   161c0:	08 60       	ori	r16, 0x08	; 8
   161c2:	04 60       	ori	r16, 0x04	; 4
   161c4:	fe 01       	movw	r30, r28
   161c6:	e3 fc       	sbrc	r14, 3
   161c8:	15 91       	lpm	r17, Z+
   161ca:	e3 fe       	sbrs	r14, 3
   161cc:	11 91       	ld	r17, Z+
   161ce:	ef 01       	movw	r28, r30
   161d0:	11 23       	and	r17, r17
   161d2:	09 f4       	brne	.+2      	; 0x161d6 <vfscanf+0xfc>
   161d4:	84 c0       	rjmp	.+264    	; 0x162de <vfscanf+0x204>
   161d6:	61 2f       	mov	r22, r17
   161d8:	70 e0       	ldi	r23, 0x00	; 0
   161da:	81 e8       	ldi	r24, 0x81	; 129
   161dc:	94 e0       	ldi	r25, 0x04	; 4
   161de:	97 d0       	rcall	.+302    	; 0x1630e <strchr_P>
   161e0:	89 2b       	or	r24, r25
   161e2:	09 f4       	brne	.+2      	; 0x161e6 <vfscanf+0x10c>
   161e4:	7c c0       	rjmp	.+248    	; 0x162de <vfscanf+0x204>
   161e6:	00 fd       	sbrc	r16, 0
   161e8:	07 c0       	rjmp	.+14     	; 0x161f8 <vfscanf+0x11e>
   161ea:	f5 01       	movw	r30, r10
   161ec:	80 80       	ld	r8, Z
   161ee:	91 80       	ldd	r9, Z+1	; 0x01
   161f0:	c5 01       	movw	r24, r10
   161f2:	02 96       	adiw	r24, 0x02	; 2
   161f4:	5c 01       	movw	r10, r24
   161f6:	02 c0       	rjmp	.+4      	; 0x161fc <vfscanf+0x122>
   161f8:	81 2c       	mov	r8, r1
   161fa:	91 2c       	mov	r9, r1
   161fc:	1e 36       	cpi	r17, 0x6E	; 110
   161fe:	49 f4       	brne	.+18     	; 0x16212 <vfscanf+0x138>
   16200:	f6 01       	movw	r30, r12
   16202:	46 81       	ldd	r20, Z+6	; 0x06
   16204:	57 81       	ldd	r21, Z+7	; 0x07
   16206:	60 e0       	ldi	r22, 0x00	; 0
   16208:	70 e0       	ldi	r23, 0x00	; 0
   1620a:	20 2f       	mov	r18, r16
   1620c:	c4 01       	movw	r24, r8
   1620e:	b3 dd       	rcall	.-1178   	; 0x15d76 <putval>
   16210:	7a cf       	rjmp	.-268    	; 0x16106 <vfscanf+0x2c>
   16212:	13 36       	cpi	r17, 0x63	; 99
   16214:	a1 f4       	brne	.+40     	; 0x1623e <vfscanf+0x164>
   16216:	01 fd       	sbrc	r16, 1
   16218:	02 c0       	rjmp	.+4      	; 0x1621e <vfscanf+0x144>
   1621a:	ff 24       	eor	r15, r15
   1621c:	f3 94       	inc	r15
   1621e:	c6 01       	movw	r24, r12
   16220:	a7 d0       	rcall	.+334    	; 0x16370 <fgetc>
   16222:	97 fd       	sbrc	r25, 7
   16224:	5a c0       	rjmp	.+180    	; 0x162da <vfscanf+0x200>
   16226:	81 14       	cp	r8, r1
   16228:	91 04       	cpc	r9, r1
   1622a:	29 f0       	breq	.+10     	; 0x16236 <vfscanf+0x15c>
   1622c:	f4 01       	movw	r30, r8
   1622e:	80 83       	st	Z, r24
   16230:	c4 01       	movw	r24, r8
   16232:	01 96       	adiw	r24, 0x01	; 1
   16234:	4c 01       	movw	r8, r24
   16236:	fa 94       	dec	r15
   16238:	f1 10       	cpse	r15, r1
   1623a:	f1 cf       	rjmp	.-30     	; 0x1621e <vfscanf+0x144>
   1623c:	4a c0       	rjmp	.+148    	; 0x162d2 <vfscanf+0x1f8>
   1623e:	1b 35       	cpi	r17, 0x5B	; 91
   16240:	51 f4       	brne	.+20     	; 0x16256 <vfscanf+0x17c>
   16242:	9e 01       	movw	r18, r28
   16244:	a4 01       	movw	r20, r8
   16246:	6f 2d       	mov	r22, r15
   16248:	c6 01       	movw	r24, r12
   1624a:	68 de       	rcall	.-816    	; 0x15f1c <conv_brk>
   1624c:	ec 01       	movw	r28, r24
   1624e:	89 2b       	or	r24, r25
   16250:	09 f0       	breq	.+2      	; 0x16254 <vfscanf+0x17a>
   16252:	3f c0       	rjmp	.+126    	; 0x162d2 <vfscanf+0x1f8>
   16254:	39 c0       	rjmp	.+114    	; 0x162c8 <vfscanf+0x1ee>
   16256:	c6 01       	movw	r24, r12
   16258:	c1 dd       	rcall	.-1150   	; 0x15ddc <skip_spaces>
   1625a:	97 fd       	sbrc	r25, 7
   1625c:	3e c0       	rjmp	.+124    	; 0x162da <vfscanf+0x200>
   1625e:	1f 36       	cpi	r17, 0x6F	; 111
   16260:	49 f1       	breq	.+82     	; 0x162b4 <vfscanf+0x1da>
   16262:	28 f4       	brcc	.+10     	; 0x1626e <vfscanf+0x194>
   16264:	14 36       	cpi	r17, 0x64	; 100
   16266:	21 f1       	breq	.+72     	; 0x162b0 <vfscanf+0x1d6>
   16268:	19 36       	cpi	r17, 0x69	; 105
   1626a:	39 f1       	breq	.+78     	; 0x162ba <vfscanf+0x1e0>
   1626c:	25 c0       	rjmp	.+74     	; 0x162b8 <vfscanf+0x1de>
   1626e:	13 37       	cpi	r17, 0x73	; 115
   16270:	71 f0       	breq	.+28     	; 0x1628e <vfscanf+0x1b4>
   16272:	15 37       	cpi	r17, 0x75	; 117
   16274:	e9 f0       	breq	.+58     	; 0x162b0 <vfscanf+0x1d6>
   16276:	20 c0       	rjmp	.+64     	; 0x162b8 <vfscanf+0x1de>
   16278:	81 14       	cp	r8, r1
   1627a:	91 04       	cpc	r9, r1
   1627c:	29 f0       	breq	.+10     	; 0x16288 <vfscanf+0x1ae>
   1627e:	f4 01       	movw	r30, r8
   16280:	60 82       	st	Z, r6
   16282:	c4 01       	movw	r24, r8
   16284:	01 96       	adiw	r24, 0x01	; 1
   16286:	4c 01       	movw	r8, r24
   16288:	fa 94       	dec	r15
   1628a:	ff 20       	and	r15, r15
   1628c:	59 f0       	breq	.+22     	; 0x162a4 <vfscanf+0x1ca>
   1628e:	c6 01       	movw	r24, r12
   16290:	6f d0       	rcall	.+222    	; 0x16370 <fgetc>
   16292:	3c 01       	movw	r6, r24
   16294:	97 fd       	sbrc	r25, 7
   16296:	06 c0       	rjmp	.+12     	; 0x162a4 <vfscanf+0x1ca>
   16298:	aa da       	rcall	.-2732   	; 0x157ee <isspace>
   1629a:	89 2b       	or	r24, r25
   1629c:	69 f3       	breq	.-38     	; 0x16278 <vfscanf+0x19e>
   1629e:	b6 01       	movw	r22, r12
   162a0:	c3 01       	movw	r24, r6
   162a2:	e0 d0       	rcall	.+448    	; 0x16464 <ungetc>
   162a4:	81 14       	cp	r8, r1
   162a6:	91 04       	cpc	r9, r1
   162a8:	a1 f0       	breq	.+40     	; 0x162d2 <vfscanf+0x1f8>
   162aa:	f4 01       	movw	r30, r8
   162ac:	10 82       	st	Z, r1
   162ae:	11 c0       	rjmp	.+34     	; 0x162d2 <vfscanf+0x1f8>
   162b0:	00 62       	ori	r16, 0x20	; 32
   162b2:	03 c0       	rjmp	.+6      	; 0x162ba <vfscanf+0x1e0>
   162b4:	00 61       	ori	r16, 0x10	; 16
   162b6:	01 c0       	rjmp	.+2      	; 0x162ba <vfscanf+0x1e0>
   162b8:	00 64       	ori	r16, 0x40	; 64
   162ba:	20 2f       	mov	r18, r16
   162bc:	a4 01       	movw	r20, r8
   162be:	6f 2d       	mov	r22, r15
   162c0:	c6 01       	movw	r24, r12
   162c2:	a2 dd       	rcall	.-1212   	; 0x15e08 <conv_int>
   162c4:	81 11       	cpse	r24, r1
   162c6:	05 c0       	rjmp	.+10     	; 0x162d2 <vfscanf+0x1f8>
   162c8:	f6 01       	movw	r30, r12
   162ca:	83 81       	ldd	r24, Z+3	; 0x03
   162cc:	80 73       	andi	r24, 0x30	; 48
   162ce:	29 f4       	brne	.+10     	; 0x162da <vfscanf+0x200>
   162d0:	06 c0       	rjmp	.+12     	; 0x162de <vfscanf+0x204>
   162d2:	00 fd       	sbrc	r16, 0
   162d4:	18 cf       	rjmp	.-464    	; 0x16106 <vfscanf+0x2c>
   162d6:	53 94       	inc	r5
   162d8:	16 cf       	rjmp	.-468    	; 0x16106 <vfscanf+0x2c>
   162da:	55 20       	and	r5, r5
   162dc:	19 f0       	breq	.+6      	; 0x162e4 <vfscanf+0x20a>
   162de:	85 2d       	mov	r24, r5
   162e0:	90 e0       	ldi	r25, 0x00	; 0
   162e2:	02 c0       	rjmp	.+4      	; 0x162e8 <vfscanf+0x20e>
   162e4:	8f ef       	ldi	r24, 0xFF	; 255
   162e6:	9f ef       	ldi	r25, 0xFF	; 255
   162e8:	df 91       	pop	r29
   162ea:	cf 91       	pop	r28
   162ec:	1f 91       	pop	r17
   162ee:	0f 91       	pop	r16
   162f0:	ff 90       	pop	r15
   162f2:	ef 90       	pop	r14
   162f4:	df 90       	pop	r13
   162f6:	cf 90       	pop	r12
   162f8:	bf 90       	pop	r11
   162fa:	af 90       	pop	r10
   162fc:	9f 90       	pop	r9
   162fe:	8f 90       	pop	r8
   16300:	7f 90       	pop	r7
   16302:	6f 90       	pop	r6
   16304:	5f 90       	pop	r5
   16306:	08 95       	ret

00016308 <__ctype_isfalse>:
   16308:	99 27       	eor	r25, r25
   1630a:	88 27       	eor	r24, r24

0001630c <__ctype_istrue>:
   1630c:	08 95       	ret

0001630e <strchr_P>:
   1630e:	fc 01       	movw	r30, r24
   16310:	05 90       	lpm	r0, Z+
   16312:	06 16       	cp	r0, r22
   16314:	21 f0       	breq	.+8      	; 0x1631e <strchr_P+0x10>
   16316:	00 20       	and	r0, r0
   16318:	d9 f7       	brne	.-10     	; 0x16310 <strchr_P+0x2>
   1631a:	c0 01       	movw	r24, r0
   1631c:	08 95       	ret
   1631e:	31 97       	sbiw	r30, 0x01	; 1
   16320:	cf 01       	movw	r24, r30
   16322:	08 95       	ret

00016324 <strnlen_P>:
   16324:	fc 01       	movw	r30, r24
   16326:	05 90       	lpm	r0, Z+
   16328:	61 50       	subi	r22, 0x01	; 1
   1632a:	70 40       	sbci	r23, 0x00	; 0
   1632c:	01 10       	cpse	r0, r1
   1632e:	d8 f7       	brcc	.-10     	; 0x16326 <strnlen_P+0x2>
   16330:	80 95       	com	r24
   16332:	90 95       	com	r25
   16334:	8e 0f       	add	r24, r30
   16336:	9f 1f       	adc	r25, r31
   16338:	08 95       	ret

0001633a <strnlen>:
   1633a:	fc 01       	movw	r30, r24
   1633c:	61 50       	subi	r22, 0x01	; 1
   1633e:	70 40       	sbci	r23, 0x00	; 0
   16340:	01 90       	ld	r0, Z+
   16342:	01 10       	cpse	r0, r1
   16344:	d8 f7       	brcc	.-10     	; 0x1633c <strnlen+0x2>
   16346:	80 95       	com	r24
   16348:	90 95       	com	r25
   1634a:	8e 0f       	add	r24, r30
   1634c:	9f 1f       	adc	r25, r31
   1634e:	08 95       	ret

00016350 <strrev>:
   16350:	dc 01       	movw	r26, r24
   16352:	fc 01       	movw	r30, r24
   16354:	67 2f       	mov	r22, r23
   16356:	71 91       	ld	r23, Z+
   16358:	77 23       	and	r23, r23
   1635a:	e1 f7       	brne	.-8      	; 0x16354 <strrev+0x4>
   1635c:	32 97       	sbiw	r30, 0x02	; 2
   1635e:	04 c0       	rjmp	.+8      	; 0x16368 <strrev+0x18>
   16360:	7c 91       	ld	r23, X
   16362:	6d 93       	st	X+, r22
   16364:	70 83       	st	Z, r23
   16366:	62 91       	ld	r22, -Z
   16368:	ae 17       	cp	r26, r30
   1636a:	bf 07       	cpc	r27, r31
   1636c:	c8 f3       	brcs	.-14     	; 0x16360 <strrev+0x10>
   1636e:	08 95       	ret

00016370 <fgetc>:
   16370:	cf 93       	push	r28
   16372:	df 93       	push	r29
   16374:	ec 01       	movw	r28, r24
   16376:	2b 81       	ldd	r18, Y+3	; 0x03
   16378:	20 ff       	sbrs	r18, 0
   1637a:	33 c0       	rjmp	.+102    	; 0x163e2 <fgetc+0x72>
   1637c:	26 ff       	sbrs	r18, 6
   1637e:	0a c0       	rjmp	.+20     	; 0x16394 <fgetc+0x24>
   16380:	2f 7b       	andi	r18, 0xBF	; 191
   16382:	2b 83       	std	Y+3, r18	; 0x03
   16384:	8e 81       	ldd	r24, Y+6	; 0x06
   16386:	9f 81       	ldd	r25, Y+7	; 0x07
   16388:	01 96       	adiw	r24, 0x01	; 1
   1638a:	9f 83       	std	Y+7, r25	; 0x07
   1638c:	8e 83       	std	Y+6, r24	; 0x06
   1638e:	8a 81       	ldd	r24, Y+2	; 0x02
   16390:	90 e0       	ldi	r25, 0x00	; 0
   16392:	29 c0       	rjmp	.+82     	; 0x163e6 <fgetc+0x76>
   16394:	22 ff       	sbrs	r18, 2
   16396:	0f c0       	rjmp	.+30     	; 0x163b6 <fgetc+0x46>
   16398:	e8 81       	ld	r30, Y
   1639a:	f9 81       	ldd	r31, Y+1	; 0x01
   1639c:	80 81       	ld	r24, Z
   1639e:	08 2e       	mov	r0, r24
   163a0:	00 0c       	add	r0, r0
   163a2:	99 0b       	sbc	r25, r25
   163a4:	00 97       	sbiw	r24, 0x00	; 0
   163a6:	19 f4       	brne	.+6      	; 0x163ae <fgetc+0x3e>
   163a8:	20 62       	ori	r18, 0x20	; 32
   163aa:	2b 83       	std	Y+3, r18	; 0x03
   163ac:	1a c0       	rjmp	.+52     	; 0x163e2 <fgetc+0x72>
   163ae:	31 96       	adiw	r30, 0x01	; 1
   163b0:	f9 83       	std	Y+1, r31	; 0x01
   163b2:	e8 83       	st	Y, r30
   163b4:	0e c0       	rjmp	.+28     	; 0x163d2 <fgetc+0x62>
   163b6:	ea 85       	ldd	r30, Y+10	; 0x0a
   163b8:	fb 85       	ldd	r31, Y+11	; 0x0b
   163ba:	19 95       	eicall
   163bc:	97 ff       	sbrs	r25, 7
   163be:	09 c0       	rjmp	.+18     	; 0x163d2 <fgetc+0x62>
   163c0:	2b 81       	ldd	r18, Y+3	; 0x03
   163c2:	01 96       	adiw	r24, 0x01	; 1
   163c4:	11 f0       	breq	.+4      	; 0x163ca <fgetc+0x5a>
   163c6:	80 e2       	ldi	r24, 0x20	; 32
   163c8:	01 c0       	rjmp	.+2      	; 0x163cc <fgetc+0x5c>
   163ca:	80 e1       	ldi	r24, 0x10	; 16
   163cc:	82 2b       	or	r24, r18
   163ce:	8b 83       	std	Y+3, r24	; 0x03
   163d0:	08 c0       	rjmp	.+16     	; 0x163e2 <fgetc+0x72>
   163d2:	2e 81       	ldd	r18, Y+6	; 0x06
   163d4:	3f 81       	ldd	r19, Y+7	; 0x07
   163d6:	2f 5f       	subi	r18, 0xFF	; 255
   163d8:	3f 4f       	sbci	r19, 0xFF	; 255
   163da:	3f 83       	std	Y+7, r19	; 0x07
   163dc:	2e 83       	std	Y+6, r18	; 0x06
   163de:	99 27       	eor	r25, r25
   163e0:	02 c0       	rjmp	.+4      	; 0x163e6 <fgetc+0x76>
   163e2:	8f ef       	ldi	r24, 0xFF	; 255
   163e4:	9f ef       	ldi	r25, 0xFF	; 255
   163e6:	df 91       	pop	r29
   163e8:	cf 91       	pop	r28
   163ea:	08 95       	ret

000163ec <fputc>:
   163ec:	0f 93       	push	r16
   163ee:	1f 93       	push	r17
   163f0:	cf 93       	push	r28
   163f2:	df 93       	push	r29
   163f4:	fb 01       	movw	r30, r22
   163f6:	23 81       	ldd	r18, Z+3	; 0x03
   163f8:	21 fd       	sbrc	r18, 1
   163fa:	03 c0       	rjmp	.+6      	; 0x16402 <fputc+0x16>
   163fc:	8f ef       	ldi	r24, 0xFF	; 255
   163fe:	9f ef       	ldi	r25, 0xFF	; 255
   16400:	2c c0       	rjmp	.+88     	; 0x1645a <fputc+0x6e>
   16402:	22 ff       	sbrs	r18, 2
   16404:	16 c0       	rjmp	.+44     	; 0x16432 <fputc+0x46>
   16406:	46 81       	ldd	r20, Z+6	; 0x06
   16408:	57 81       	ldd	r21, Z+7	; 0x07
   1640a:	24 81       	ldd	r18, Z+4	; 0x04
   1640c:	35 81       	ldd	r19, Z+5	; 0x05
   1640e:	42 17       	cp	r20, r18
   16410:	53 07       	cpc	r21, r19
   16412:	44 f4       	brge	.+16     	; 0x16424 <fputc+0x38>
   16414:	a0 81       	ld	r26, Z
   16416:	b1 81       	ldd	r27, Z+1	; 0x01
   16418:	9d 01       	movw	r18, r26
   1641a:	2f 5f       	subi	r18, 0xFF	; 255
   1641c:	3f 4f       	sbci	r19, 0xFF	; 255
   1641e:	31 83       	std	Z+1, r19	; 0x01
   16420:	20 83       	st	Z, r18
   16422:	8c 93       	st	X, r24
   16424:	26 81       	ldd	r18, Z+6	; 0x06
   16426:	37 81       	ldd	r19, Z+7	; 0x07
   16428:	2f 5f       	subi	r18, 0xFF	; 255
   1642a:	3f 4f       	sbci	r19, 0xFF	; 255
   1642c:	37 83       	std	Z+7, r19	; 0x07
   1642e:	26 83       	std	Z+6, r18	; 0x06
   16430:	14 c0       	rjmp	.+40     	; 0x1645a <fputc+0x6e>
   16432:	8b 01       	movw	r16, r22
   16434:	ec 01       	movw	r28, r24
   16436:	fb 01       	movw	r30, r22
   16438:	00 84       	ldd	r0, Z+8	; 0x08
   1643a:	f1 85       	ldd	r31, Z+9	; 0x09
   1643c:	e0 2d       	mov	r30, r0
   1643e:	19 95       	eicall
   16440:	89 2b       	or	r24, r25
   16442:	e1 f6       	brne	.-72     	; 0x163fc <fputc+0x10>
   16444:	d8 01       	movw	r26, r16
   16446:	16 96       	adiw	r26, 0x06	; 6
   16448:	8d 91       	ld	r24, X+
   1644a:	9c 91       	ld	r25, X
   1644c:	17 97       	sbiw	r26, 0x07	; 7
   1644e:	01 96       	adiw	r24, 0x01	; 1
   16450:	17 96       	adiw	r26, 0x07	; 7
   16452:	9c 93       	st	X, r25
   16454:	8e 93       	st	-X, r24
   16456:	16 97       	sbiw	r26, 0x06	; 6
   16458:	ce 01       	movw	r24, r28
   1645a:	df 91       	pop	r29
   1645c:	cf 91       	pop	r28
   1645e:	1f 91       	pop	r17
   16460:	0f 91       	pop	r16
   16462:	08 95       	ret

00016464 <ungetc>:
   16464:	fb 01       	movw	r30, r22
   16466:	23 81       	ldd	r18, Z+3	; 0x03
   16468:	20 ff       	sbrs	r18, 0
   1646a:	12 c0       	rjmp	.+36     	; 0x16490 <ungetc+0x2c>
   1646c:	26 fd       	sbrc	r18, 6
   1646e:	10 c0       	rjmp	.+32     	; 0x16490 <ungetc+0x2c>
   16470:	8f 3f       	cpi	r24, 0xFF	; 255
   16472:	3f ef       	ldi	r19, 0xFF	; 255
   16474:	93 07       	cpc	r25, r19
   16476:	61 f0       	breq	.+24     	; 0x16490 <ungetc+0x2c>
   16478:	82 83       	std	Z+2, r24	; 0x02
   1647a:	2f 7d       	andi	r18, 0xDF	; 223
   1647c:	20 64       	ori	r18, 0x40	; 64
   1647e:	23 83       	std	Z+3, r18	; 0x03
   16480:	26 81       	ldd	r18, Z+6	; 0x06
   16482:	37 81       	ldd	r19, Z+7	; 0x07
   16484:	21 50       	subi	r18, 0x01	; 1
   16486:	31 09       	sbc	r19, r1
   16488:	37 83       	std	Z+7, r19	; 0x07
   1648a:	26 83       	std	Z+6, r18	; 0x06
   1648c:	99 27       	eor	r25, r25
   1648e:	08 95       	ret
   16490:	8f ef       	ldi	r24, 0xFF	; 255
   16492:	9f ef       	ldi	r25, 0xFF	; 255
   16494:	08 95       	ret

00016496 <__ultoa_invert>:
   16496:	fa 01       	movw	r30, r20
   16498:	aa 27       	eor	r26, r26
   1649a:	28 30       	cpi	r18, 0x08	; 8
   1649c:	51 f1       	breq	.+84     	; 0x164f2 <__ultoa_invert+0x5c>
   1649e:	20 31       	cpi	r18, 0x10	; 16
   164a0:	81 f1       	breq	.+96     	; 0x16502 <__ultoa_invert+0x6c>
   164a2:	e8 94       	clt
   164a4:	6f 93       	push	r22
   164a6:	6e 7f       	andi	r22, 0xFE	; 254
   164a8:	6e 5f       	subi	r22, 0xFE	; 254
   164aa:	7f 4f       	sbci	r23, 0xFF	; 255
   164ac:	8f 4f       	sbci	r24, 0xFF	; 255
   164ae:	9f 4f       	sbci	r25, 0xFF	; 255
   164b0:	af 4f       	sbci	r26, 0xFF	; 255
   164b2:	b1 e0       	ldi	r27, 0x01	; 1
   164b4:	3e d0       	rcall	.+124    	; 0x16532 <__ultoa_invert+0x9c>
   164b6:	b4 e0       	ldi	r27, 0x04	; 4
   164b8:	3c d0       	rcall	.+120    	; 0x16532 <__ultoa_invert+0x9c>
   164ba:	67 0f       	add	r22, r23
   164bc:	78 1f       	adc	r23, r24
   164be:	89 1f       	adc	r24, r25
   164c0:	9a 1f       	adc	r25, r26
   164c2:	a1 1d       	adc	r26, r1
   164c4:	68 0f       	add	r22, r24
   164c6:	79 1f       	adc	r23, r25
   164c8:	8a 1f       	adc	r24, r26
   164ca:	91 1d       	adc	r25, r1
   164cc:	a1 1d       	adc	r26, r1
   164ce:	6a 0f       	add	r22, r26
   164d0:	71 1d       	adc	r23, r1
   164d2:	81 1d       	adc	r24, r1
   164d4:	91 1d       	adc	r25, r1
   164d6:	a1 1d       	adc	r26, r1
   164d8:	20 d0       	rcall	.+64     	; 0x1651a <__ultoa_invert+0x84>
   164da:	09 f4       	brne	.+2      	; 0x164de <__ultoa_invert+0x48>
   164dc:	68 94       	set
   164de:	3f 91       	pop	r19
   164e0:	2a e0       	ldi	r18, 0x0A	; 10
   164e2:	26 9f       	mul	r18, r22
   164e4:	11 24       	eor	r1, r1
   164e6:	30 19       	sub	r19, r0
   164e8:	30 5d       	subi	r19, 0xD0	; 208
   164ea:	31 93       	st	Z+, r19
   164ec:	de f6       	brtc	.-74     	; 0x164a4 <__ultoa_invert+0xe>
   164ee:	cf 01       	movw	r24, r30
   164f0:	08 95       	ret
   164f2:	46 2f       	mov	r20, r22
   164f4:	47 70       	andi	r20, 0x07	; 7
   164f6:	40 5d       	subi	r20, 0xD0	; 208
   164f8:	41 93       	st	Z+, r20
   164fa:	b3 e0       	ldi	r27, 0x03	; 3
   164fc:	0f d0       	rcall	.+30     	; 0x1651c <__ultoa_invert+0x86>
   164fe:	c9 f7       	brne	.-14     	; 0x164f2 <__ultoa_invert+0x5c>
   16500:	f6 cf       	rjmp	.-20     	; 0x164ee <__ultoa_invert+0x58>
   16502:	46 2f       	mov	r20, r22
   16504:	4f 70       	andi	r20, 0x0F	; 15
   16506:	40 5d       	subi	r20, 0xD0	; 208
   16508:	4a 33       	cpi	r20, 0x3A	; 58
   1650a:	18 f0       	brcs	.+6      	; 0x16512 <__ultoa_invert+0x7c>
   1650c:	49 5d       	subi	r20, 0xD9	; 217
   1650e:	31 fd       	sbrc	r19, 1
   16510:	40 52       	subi	r20, 0x20	; 32
   16512:	41 93       	st	Z+, r20
   16514:	02 d0       	rcall	.+4      	; 0x1651a <__ultoa_invert+0x84>
   16516:	a9 f7       	brne	.-22     	; 0x16502 <__ultoa_invert+0x6c>
   16518:	ea cf       	rjmp	.-44     	; 0x164ee <__ultoa_invert+0x58>
   1651a:	b4 e0       	ldi	r27, 0x04	; 4
   1651c:	a6 95       	lsr	r26
   1651e:	97 95       	ror	r25
   16520:	87 95       	ror	r24
   16522:	77 95       	ror	r23
   16524:	67 95       	ror	r22
   16526:	ba 95       	dec	r27
   16528:	c9 f7       	brne	.-14     	; 0x1651c <__ultoa_invert+0x86>
   1652a:	00 97       	sbiw	r24, 0x00	; 0
   1652c:	61 05       	cpc	r22, r1
   1652e:	71 05       	cpc	r23, r1
   16530:	08 95       	ret
   16532:	9b 01       	movw	r18, r22
   16534:	ac 01       	movw	r20, r24
   16536:	0a 2e       	mov	r0, r26
   16538:	06 94       	lsr	r0
   1653a:	57 95       	ror	r21
   1653c:	47 95       	ror	r20
   1653e:	37 95       	ror	r19
   16540:	27 95       	ror	r18
   16542:	ba 95       	dec	r27
   16544:	c9 f7       	brne	.-14     	; 0x16538 <__ultoa_invert+0xa2>
   16546:	62 0f       	add	r22, r18
   16548:	73 1f       	adc	r23, r19
   1654a:	84 1f       	adc	r24, r20
   1654c:	95 1f       	adc	r25, r21
   1654e:	a0 1d       	adc	r26, r0
   16550:	08 95       	ret

00016552 <eeprom_read_byte>:
   16552:	f9 99       	sbic	0x1f, 1	; 31
   16554:	fe cf       	rjmp	.-4      	; 0x16552 <eeprom_read_byte>
   16556:	92 bd       	out	0x22, r25	; 34
   16558:	81 bd       	out	0x21, r24	; 33
   1655a:	f8 9a       	sbi	0x1f, 0	; 31
   1655c:	99 27       	eor	r25, r25
   1655e:	80 b5       	in	r24, 0x20	; 32
   16560:	08 95       	ret

00016562 <eeprom_write_byte>:
   16562:	26 2f       	mov	r18, r22

00016564 <eeprom_write_r18>:
   16564:	f9 99       	sbic	0x1f, 1	; 31
   16566:	fe cf       	rjmp	.-4      	; 0x16564 <eeprom_write_r18>
   16568:	1f ba       	out	0x1f, r1	; 31
   1656a:	92 bd       	out	0x22, r25	; 34
   1656c:	81 bd       	out	0x21, r24	; 33
   1656e:	20 bd       	out	0x20, r18	; 32
   16570:	0f b6       	in	r0, 0x3f	; 63
   16572:	f8 94       	cli
   16574:	fa 9a       	sbi	0x1f, 2	; 31
   16576:	f9 9a       	sbi	0x1f, 1	; 31
   16578:	0f be       	out	0x3f, r0	; 63
   1657a:	01 96       	adiw	r24, 0x01	; 1
   1657c:	08 95       	ret

0001657e <__do_global_dtors>:
   1657e:	1b e0       	ldi	r17, 0x0B	; 11
   16580:	c5 ec       	ldi	r28, 0xC5	; 197
   16582:	db e0       	ldi	r29, 0x0B	; 11
   16584:	00 e0       	ldi	r16, 0x00	; 0
   16586:	06 c0       	rjmp	.+12     	; 0x16594 <__do_global_dtors+0x16>
   16588:	80 2f       	mov	r24, r16
   1658a:	fe 01       	movw	r30, r28
   1658c:	0e 94 43 a7 	call	0x14e86	; 0x14e86 <__tablejump2__>
   16590:	21 96       	adiw	r28, 0x01	; 1
   16592:	01 1d       	adc	r16, r1
   16594:	c6 3c       	cpi	r28, 0xC6	; 198
   16596:	d1 07       	cpc	r29, r17
   16598:	80 e0       	ldi	r24, 0x00	; 0
   1659a:	08 07       	cpc	r16, r24
   1659c:	a9 f7       	brne	.-22     	; 0x16588 <__do_global_dtors+0xa>
   1659e:	f8 94       	cli

000165a0 <__stop_program>:
   165a0:	ff cf       	rjmp	.-2      	; 0x165a0 <__stop_program>
